const p = function polyfill() {
    const relList = document.createElement('link').relList;
    if (relList && relList.supports && relList.supports('modulepreload')) {
        return;
    }
    for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
    }
    new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type !== 'childList') {
                continue;
            }
            for (const node of mutation.addedNodes) {
                if (node.tagName === 'LINK' && node.rel === 'modulepreload')
                    processPreload(node);
            }
        }
    }).observe(document, { childList: true, subtree: true });
    function getFetchOpts(script) {
        const fetchOpts = {};
        if (script.integrity)
            fetchOpts.integrity = script.integrity;
        if (script.referrerpolicy)
            fetchOpts.referrerPolicy = script.referrerpolicy;
        if (script.crossorigin === 'use-credentials')
            fetchOpts.credentials = 'include';
        else if (script.crossorigin === 'anonymous')
            fetchOpts.credentials = 'omit';
        else
            fetchOpts.credentials = 'same-origin';
        return fetchOpts;
    }
    function processPreload(link) {
        if (link.ep)
            // ep marker = processed
            return;
        link.ep = true;
        // prepopulate the load record
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
    }
};true&&p();

/*!
 * Vue.js v2.7.16
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var emptyObject = Object.freeze({});
var isArray$2 = Array.isArray;
// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef(v) {
    return v === undefined || v === null;
}
function isDef(v) {
    return v !== undefined && v !== null;
}
function isTrue(v) {
    return v === true;
}
function isFalse(v) {
    return v === false;
}
/**
 * Check if value is primitive.
 */
function isPrimitive(value) {
    return (typeof value === 'string' ||
        typeof value === 'number' ||
        // $flow-disable-line
        typeof value === 'symbol' ||
        typeof value === 'boolean');
}
function isFunction$2(value) {
    return typeof value === 'function';
}
/**
 * Quick object check - this is primarily used to tell
 * objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject$3(obj) {
    return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;
function toRawType(value) {
    return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject$2(obj) {
    return _toString.call(obj) === '[object Object]';
}
function isRegExp(v) {
    return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex(val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val);
}
function isPromise(val) {
    return (isDef(val) &&
        typeof val.then === 'function' &&
        typeof val.catch === 'function');
}
/**
 * Convert a value to a string that is actually rendered.
 */
function toString$3(val) {
    return val == null
        ? ''
        : Array.isArray(val) || (isPlainObject$2(val) && val.toString === _toString)
            ? JSON.stringify(val, replacer, 2)
            : String(val);
}
function replacer(_key, val) {
    // avoid circular deps from v3
    if (val && val.__v_isRef) {
        return val.value;
    }
    return val;
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber(val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap(str, expectsLowerCase) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
        map[list[i]] = true;
    }
    return expectsLowerCase ? function (val) { return map[val.toLowerCase()]; } : function (val) { return map[val]; };
}
/**
 * Check if a tag is a built-in tag.
 */
makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */
function remove$2(arr, item) {
    var len = arr.length;
    if (len) {
        // fast path for the only / last item
        if (item === arr[len - 1]) {
            arr.length = len - 1;
            return;
        }
        var index = arr.indexOf(item);
        if (index > -1) {
            return arr.splice(index, 1);
        }
    }
}
/**
 * Check whether an object has the property.
 */
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function hasOwn$1(obj, key) {
    return hasOwnProperty$1.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */
function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
        var hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
}
/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE$1 = /-(\w)/g;
var camelize$1 = cached(function (str) {
    return str.replace(camelizeRE$1, function (_, c) { return (c ? c.toUpperCase() : ''); });
});
/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */
/* istanbul ignore next */
function polyfillBind(fn, ctx) {
    function boundFn(a) {
        var l = arguments.length;
        return l
            ? l > 1
                ? fn.apply(ctx, arguments)
                : fn.call(ctx, a)
            : fn.call(ctx);
    }
    boundFn._length = fn.length;
    return boundFn;
}
function nativeBind(fn, ctx) {
    return fn.bind(ctx);
}
// @ts-expect-error bind cannot be `undefined`
var bind$4 = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */
function toArray$1(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
        ret[i] = list[i + start];
    }
    return ret;
}
/**
 * Mix properties into target object.
 */
function extend$3(to, _from) {
    for (var key in _from) {
        to[key] = _from[key];
    }
    return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */
function toObject(arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
        if (arr[i]) {
            extend$3(res, arr[i]);
        }
    }
    return res;
}
/* eslint-disable no-unused-vars */
/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop$1(a, b, c) { }
/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };
/* eslint-enable no-unused-vars */
/**
 * Return the same value.
 */
var identity = function (_) { return _; };
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual$1(a, b) {
    if (a === b)
        return true;
    var isObjectA = isObject$3(a);
    var isObjectB = isObject$3(b);
    if (isObjectA && isObjectB) {
        try {
            var isArrayA = Array.isArray(a);
            var isArrayB = Array.isArray(b);
            if (isArrayA && isArrayB) {
                return (a.length === b.length &&
                    a.every(function (e, i) {
                        return looseEqual$1(e, b[i]);
                    }));
            }
            else if (a instanceof Date && b instanceof Date) {
                return a.getTime() === b.getTime();
            }
            else if (!isArrayA && !isArrayB) {
                var keysA = Object.keys(a);
                var keysB = Object.keys(b);
                return (keysA.length === keysB.length &&
                    keysA.every(function (key) {
                        return looseEqual$1(a[key], b[key]);
                    }));
            }
            else {
                /* istanbul ignore next */
                return false;
            }
        }
        catch (e) {
            /* istanbul ignore next */
            return false;
        }
    }
    else if (!isObjectA && !isObjectB) {
        return String(a) === String(b);
    }
    else {
        return false;
    }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf(arr, val) {
    for (var i = 0; i < arr.length; i++) {
        if (looseEqual$1(arr[i], val))
            return i;
    }
    return -1;
}
/**
 * Ensure a function is called only once.
 */
function once$1(fn) {
    var called = false;
    return function () {
        if (!called) {
            called = true;
            fn.apply(this, arguments);
        }
    };
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#polyfill
function hasChanged(x, y) {
    if (x === y) {
        return x === 0 && 1 / x !== 1 / y;
    }
    else {
        return x === x || y === y;
    }
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = [
    'beforeCreate',
    'created',
    'beforeMount',
    'mounted',
    'beforeUpdate',
    'updated',
    'beforeDestroy',
    'destroyed',
    'activated',
    'deactivated',
    'errorCaptured',
    'serverPrefetch',
    'renderTracked',
    'renderTriggered'
];

var config$2 = {
    /**
     * Option merge strategies (used in core/util/options)
     */
    // $flow-disable-line
    optionMergeStrategies: Object.create(null),
    /**
     * Whether to suppress warnings.
     */
    silent: false,
    /**
     * Show production mode tip message on boot?
     */
    productionTip: "production" !== 'production',
    /**
     * Whether to enable devtools
     */
    devtools: "production" !== 'production',
    /**
     * Whether to record perf
     */
    performance: false,
    /**
     * Error handler for watcher errors
     */
    errorHandler: null,
    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,
    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],
    /**
     * Custom user key aliases for v-on
     */
    // $flow-disable-line
    keyCodes: Object.create(null),
    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,
    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,
    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,
    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop$1,
    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,
    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,
    /**
     * Perform updates asynchronously. Intended to be used by Vue Test Utils
     * This will significantly reduce performance if set to false.
     */
    async: true,
    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
};

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */
function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5f;
}
/**
 * Define a property.
 */
function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
        value: val,
        enumerable: !!enumerable,
        writable: true,
        configurable: true
    });
}
/**
 * Parse simple path.
 */
var bailRE = new RegExp("[^".concat(unicodeRegExp.source, ".$_\\d]"));
function parsePath$1(path) {
    if (bailRE.test(path)) {
        return;
    }
    var segments = path.split('.');
    return function (obj) {
        for (var i = 0; i < segments.length; i++) {
            if (!obj)
                return;
            obj = obj[segments[i]];
        }
        return obj;
    };
}

// can we use __proto__?
var hasProto = '__proto__' in {};
// Browser environment sniffing
var inBrowser$1 = typeof window !== 'undefined';
var UA = inBrowser$1 && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
UA && /chrome\/\d+/.test(UA) && !isEdge;
UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);
// Firefox has a "watch" function on Object.prototype...
// @ts-expect-error firebox support
var nativeWatch = {}.watch;
var supportsPassive = false;
if (inBrowser$1) {
    try {
        var opts = {};
        Object.defineProperty(opts, 'passive', {
            get: function () {
                /* istanbul ignore next */
                supportsPassive = true;
            }
        }); // https://github.com/facebook/flow/issues/285
        window.addEventListener('test-passive', null, opts);
    }
    catch (e) { }
}
// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
    if (_isServer === undefined) {
        /* istanbul ignore if */
        if (!inBrowser$1 && typeof global !== 'undefined') {
            // detect presence of vue-server-renderer and avoid
            // Webpack shimming the process
            _isServer =
                global['process'] && global['process'].env.VUE_ENV === 'server';
        }
        else {
            _isServer = false;
        }
    }
    return _isServer;
};
// detect devtools
var devtools = inBrowser$1 && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */
function isNative(Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}
var hasSymbol$1 = typeof Symbol !== 'undefined' &&
    isNative(Symbol) &&
    typeof Reflect !== 'undefined' &&
    isNative(Reflect.ownKeys);
var _Set; // $flow-disable-line
/* istanbul ignore if */ if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
}
else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = /** @class */ (function () {
        function Set() {
            this.set = Object.create(null);
        }
        Set.prototype.has = function (key) {
            return this.set[key] === true;
        };
        Set.prototype.add = function (key) {
            this.set[key] = true;
        };
        Set.prototype.clear = function () {
            this.set = Object.create(null);
        };
        return Set;
    }());
}

var currentInstance = null;
/**
 * @internal
 */
function setCurrentInstance(vm) {
    if (vm === void 0) { vm = null; }
    if (!vm)
        currentInstance && currentInstance._scope.off();
    currentInstance = vm;
    vm && vm._scope.on();
}

/**
 * @internal
 */
var VNode = /** @class */ (function () {
    function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
        this.tag = tag;
        this.data = data;
        this.children = children;
        this.text = text;
        this.elm = elm;
        this.ns = undefined;
        this.context = context;
        this.fnContext = undefined;
        this.fnOptions = undefined;
        this.fnScopeId = undefined;
        this.key = data && data.key;
        this.componentOptions = componentOptions;
        this.componentInstance = undefined;
        this.parent = undefined;
        this.raw = false;
        this.isStatic = false;
        this.isRootInsert = true;
        this.isComment = false;
        this.isCloned = false;
        this.isOnce = false;
        this.asyncFactory = asyncFactory;
        this.asyncMeta = undefined;
        this.isAsyncPlaceholder = false;
    }
    Object.defineProperty(VNode.prototype, "child", {
        // DEPRECATED: alias for componentInstance for backwards compat.
        /* istanbul ignore next */
        get: function () {
            return this.componentInstance;
        },
        enumerable: false,
        configurable: true
    });
    return VNode;
}());
var createEmptyVNode = function (text) {
    if (text === void 0) { text = ''; }
    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node;
};
function createTextVNode(val) {
    return new VNode(undefined, undefined, undefined, String(val));
}
// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode(vnode) {
    var cloned = new VNode(vnode.tag, vnode.data, 
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.asyncMeta = vnode.asyncMeta;
    cloned.isCloned = true;
    return cloned;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var uid$2 = 0;
var pendingCleanupDeps = [];
var cleanupDeps = function () {
    for (var i = 0; i < pendingCleanupDeps.length; i++) {
        var dep = pendingCleanupDeps[i];
        dep.subs = dep.subs.filter(function (s) { return s; });
        dep._pending = false;
    }
    pendingCleanupDeps.length = 0;
};
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 * @internal
 */
var Dep = /** @class */ (function () {
    function Dep() {
        // pending subs cleanup
        this._pending = false;
        this.id = uid$2++;
        this.subs = [];
    }
    Dep.prototype.addSub = function (sub) {
        this.subs.push(sub);
    };
    Dep.prototype.removeSub = function (sub) {
        // #12696 deps with massive amount of subscribers are extremely slow to
        // clean up in Chromium
        // to workaround this, we unset the sub for now, and clear them on
        // next scheduler flush.
        this.subs[this.subs.indexOf(sub)] = null;
        if (!this._pending) {
            this._pending = true;
            pendingCleanupDeps.push(this);
        }
    };
    Dep.prototype.depend = function (info) {
        if (Dep.target) {
            Dep.target.addDep(this);
        }
    };
    Dep.prototype.notify = function (info) {
        // stabilize the subscriber list first
        var subs = this.subs.filter(function (s) { return s; });
        for (var i = 0, l = subs.length; i < l; i++) {
            var sub = subs[i];
            sub.update();
        }
    };
    return Dep;
}());
// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];
function pushTarget(target) {
    targetStack.push(target);
    Dep.target = target;
}
function popTarget() {
    targetStack.pop();
    Dep.target = targetStack[targetStack.length - 1];
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */
var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = [
    'push',
    'pop',
    'shift',
    'unshift',
    'splice',
    'sort',
    'reverse'
];
/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result = original.apply(this, args);
        var ob = this.__ob__;
        var inserted;
        switch (method) {
            case 'push':
            case 'unshift':
                inserted = args;
                break;
            case 'splice':
                inserted = args.slice(2);
                break;
        }
        if (inserted)
            ob.observeArray(inserted);
        // notify change
        {
            ob.dep.notify();
        }
        return result;
    });
});

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
var NO_INITIAL_VALUE = {};
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;
function toggleObserving(value) {
    shouldObserve = value;
}
// ssr mock dep
var mockDep = {
    notify: noop$1,
    depend: noop$1,
    addSub: noop$1,
    removeSub: noop$1
};
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = /** @class */ (function () {
    function Observer(value, shallow, mock) {
        if (shallow === void 0) { shallow = false; }
        if (mock === void 0) { mock = false; }
        this.value = value;
        this.shallow = shallow;
        this.mock = mock;
        // this.value = value
        this.dep = mock ? mockDep : new Dep();
        this.vmCount = 0;
        def(value, '__ob__', this);
        if (isArray$2(value)) {
            if (!mock) {
                if (hasProto) {
                    value.__proto__ = arrayMethods;
                    /* eslint-enable no-proto */
                }
                else {
                    for (var i = 0, l = arrayKeys.length; i < l; i++) {
                        var key = arrayKeys[i];
                        def(value, key, arrayMethods[key]);
                    }
                }
            }
            if (!shallow) {
                this.observeArray(value);
            }
        }
        else {
            /**
             * Walk through all properties and convert them into
             * getter/setters. This method should only be called when
             * value type is Object.
             */
            var keys = Object.keys(value);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                defineReactive(value, key, NO_INITIAL_VALUE, undefined, shallow, mock);
            }
        }
    }
    /**
     * Observe a list of Array items.
     */
    Observer.prototype.observeArray = function (value) {
        for (var i = 0, l = value.length; i < l; i++) {
            observe(value[i], false, this.mock);
        }
    };
    return Observer;
}());
// helpers
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe(value, shallow, ssrMockReactivity) {
    if (value && hasOwn$1(value, '__ob__') && value.__ob__ instanceof Observer) {
        return value.__ob__;
    }
    if (shouldObserve &&
        (ssrMockReactivity || !isServerRendering()) &&
        (isArray$2(value) || isPlainObject$2(value)) &&
        Object.isExtensible(value) &&
        !value.__v_skip /* ReactiveFlags.SKIP */ &&
        !isRef(value) &&
        !(value instanceof VNode)) {
        return new Observer(value, shallow, ssrMockReactivity);
    }
}
/**
 * Define a reactive property on an Object.
 */
function defineReactive(obj, key, val, customSetter, shallow, mock, observeEvenIfShallow) {
    if (observeEvenIfShallow === void 0) { observeEvenIfShallow = false; }
    var dep = new Dep();
    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
        return;
    }
    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;
    if ((!getter || setter) &&
        (val === NO_INITIAL_VALUE || arguments.length === 2)) {
        val = obj[key];
    }
    var childOb = shallow ? val && val.__ob__ : observe(val, false, mock);
    Object.defineProperty(obj, key, {
        enumerable: true,
        configurable: true,
        get: function reactiveGetter() {
            var value = getter ? getter.call(obj) : val;
            if (Dep.target) {
                {
                    dep.depend();
                }
                if (childOb) {
                    childOb.dep.depend();
                    if (isArray$2(value)) {
                        dependArray(value);
                    }
                }
            }
            return isRef(value) && !shallow ? value.value : value;
        },
        set: function reactiveSetter(newVal) {
            var value = getter ? getter.call(obj) : val;
            if (!hasChanged(value, newVal)) {
                return;
            }
            if (setter) {
                setter.call(obj, newVal);
            }
            else if (getter) {
                // #7981: for accessor properties without setter
                return;
            }
            else if (!shallow && isRef(value) && !isRef(newVal)) {
                value.value = newVal;
                return;
            }
            else {
                val = newVal;
            }
            childOb = shallow ? newVal && newVal.__ob__ : observe(newVal, false, mock);
            {
                dep.notify();
            }
        }
    });
    return dep;
}
function set(target, key, val) {
    if (isReadonly(target)) {
        return;
    }
    var ob = target.__ob__;
    if (isArray$2(target) && isValidArrayIndex(key)) {
        target.length = Math.max(target.length, key);
        target.splice(key, 1, val);
        // when mocking for SSR, array methods are not hijacked
        if (ob && !ob.shallow && ob.mock) {
            observe(val, false, true);
        }
        return val;
    }
    if (key in target && !(key in Object.prototype)) {
        target[key] = val;
        return val;
    }
    if (target._isVue || (ob && ob.vmCount)) {
        return val;
    }
    if (!ob) {
        target[key] = val;
        return val;
    }
    defineReactive(ob.value, key, val, undefined, ob.shallow, ob.mock);
    {
        ob.dep.notify();
    }
    return val;
}
function del$1(target, key) {
    if (isArray$2(target) && isValidArrayIndex(key)) {
        target.splice(key, 1);
        return;
    }
    var ob = target.__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
        return;
    }
    if (isReadonly(target)) {
        return;
    }
    if (!hasOwn$1(target, key)) {
        return;
    }
    delete target[key];
    if (!ob) {
        return;
    }
    {
        ob.dep.notify();
    }
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray(value) {
    for (var e = void 0, i = 0, l = value.length; i < l; i++) {
        e = value[i];
        if (e && e.__ob__) {
            e.__ob__.dep.depend();
        }
        if (isArray$2(e)) {
            dependArray(e);
        }
    }
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */
function shallowReactive(target) {
    makeReactive(target, true);
    def(target, "__v_isShallow" /* ReactiveFlags.IS_SHALLOW */, true);
    return target;
}
function makeReactive(target, shallow) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (!isReadonly(target)) {
        observe(target, shallow, isServerRendering() /* ssr mock reactivity */);
    }
}
function isReadonly(value) {
    return !!(value && value.__v_isReadonly);
}
function isRef(r) {
    return !!(r && r.__v_isRef === true);
}
function proxyWithRefUnwrap(target, source, key) {
    Object.defineProperty(target, key, {
        enumerable: true,
        configurable: true,
        get: function () {
            var val = source[key];
            if (isRef(val)) {
                return val.value;
            }
            else {
                var ob = val && val.__ob__;
                if (ob)
                    ob.dep.depend();
                return val;
            }
        },
        set: function (value) {
            var oldValue = source[key];
            if (isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
            }
            else {
                source[key] = value;
            }
        }
    });
}

var activeEffectScope;
var EffectScope = /** @class */ (function () {
    function EffectScope(detached) {
        if (detached === void 0) { detached = false; }
        this.detached = detached;
        /**
         * @internal
         */
        this.active = true;
        /**
         * @internal
         */
        this.effects = [];
        /**
         * @internal
         */
        this.cleanups = [];
        this.parent = activeEffectScope;
        if (!detached && activeEffectScope) {
            this.index =
                (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
    }
    EffectScope.prototype.run = function (fn) {
        if (this.active) {
            var currentEffectScope = activeEffectScope;
            try {
                activeEffectScope = this;
                return fn();
            }
            finally {
                activeEffectScope = currentEffectScope;
            }
        }
    };
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    EffectScope.prototype.on = function () {
        activeEffectScope = this;
    };
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    EffectScope.prototype.off = function () {
        activeEffectScope = this.parent;
    };
    EffectScope.prototype.stop = function (fromParent) {
        if (this.active) {
            var i = void 0, l = void 0;
            for (i = 0, l = this.effects.length; i < l; i++) {
                this.effects[i].teardown();
            }
            for (i = 0, l = this.cleanups.length; i < l; i++) {
                this.cleanups[i]();
            }
            if (this.scopes) {
                for (i = 0, l = this.scopes.length; i < l; i++) {
                    this.scopes[i].stop(true);
                }
            }
            // nested scope, dereference from parent to avoid memory leaks
            if (!this.detached && this.parent && !fromParent) {
                // optimized O(1) removal
                var last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.parent = undefined;
            this.active = false;
        }
    };
    return EffectScope;
}());
/**
 * @internal
 */
function recordEffectScope(effect, scope) {
    if (scope === void 0) { scope = activeEffectScope; }
    if (scope && scope.active) {
        scope.effects.push(effect);
    }
}
function getCurrentScope() {
    return activeEffectScope;
}
function resolveProvided(vm) {
    // by default an instance inherits its parent's provides object
    // but when it needs to provide values of its own, it creates its
    // own provides object using parent provides object as prototype.
    // this way in `inject` we can simply look up injections from direct
    // parent and let the prototype chain do the work.
    var existing = vm._provided;
    var parentProvides = vm.$parent && vm.$parent._provided;
    if (parentProvides === existing) {
        return (vm._provided = Object.create(parentProvides));
    }
    else {
        return existing;
    }
}

var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
        name: name,
        once: once,
        capture: capture,
        passive: passive
    };
});
function createFnInvoker(fns, vm) {
    function invoker() {
        var fns = invoker.fns;
        if (isArray$2(fns)) {
            var cloned = fns.slice();
            for (var i = 0; i < cloned.length; i++) {
                invokeWithErrorHandling(cloned[i], null, arguments, vm, "v-on handler");
            }
        }
        else {
            // return handler return value for single handlers
            return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
        }
    }
    invoker.fns = fns;
    return invoker;
}
function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {
    var name, cur, old, event;
    for (name in on) {
        cur = on[name];
        old = oldOn[name];
        event = normalizeEvent(name);
        if (isUndef(cur)) ;
        else if (isUndef(old)) {
            if (isUndef(cur.fns)) {
                cur = on[name] = createFnInvoker(cur, vm);
            }
            if (isTrue(event.once)) {
                cur = on[name] = createOnceHandler(event.name, cur, event.capture);
            }
            add(event.name, cur, event.capture, event.passive, event.params);
        }
        else if (cur !== old) {
            old.fns = cur;
            on[name] = old;
        }
    }
    for (name in oldOn) {
        if (isUndef(on[name])) {
            event = normalizeEvent(name);
            remove(event.name, oldOn[name], event.capture);
        }
    }
}

function mergeVNodeHook(def, hookKey, hook) {
    if (def instanceof VNode) {
        def = def.data.hook || (def.data.hook = {});
    }
    var invoker;
    var oldHook = def[hookKey];
    function wrappedHook() {
        hook.apply(this, arguments);
        // important: remove merged hook to ensure it's called only once
        // and prevent memory leak
        remove$2(invoker.fns, wrappedHook);
    }
    if (isUndef(oldHook)) {
        // no existing hook
        invoker = createFnInvoker([wrappedHook]);
    }
    else {
        /* istanbul ignore if */
        if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
            // already a merged invoker
            invoker = oldHook;
            invoker.fns.push(wrappedHook);
        }
        else {
            // existing plain hook
            invoker = createFnInvoker([oldHook, wrappedHook]);
        }
    }
    invoker.merged = true;
    def[hookKey] = invoker;
}

function extractPropsFromVNodeData(data, Ctor, tag) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
        return;
    }
    var res = {};
    var attrs = data.attrs, props = data.props;
    if (isDef(attrs) || isDef(props)) {
        for (var key in propOptions) {
            var altKey = hyphenate(key);
            checkProp(res, props, key, altKey, true) ||
                checkProp(res, attrs, key, altKey, false);
        }
    }
    return res;
}
function checkProp(res, hash, key, altKey, preserve) {
    if (isDef(hash)) {
        if (hasOwn$1(hash, key)) {
            res[key] = hash[key];
            if (!preserve) {
                delete hash[key];
            }
            return true;
        }
        else if (hasOwn$1(hash, altKey)) {
            res[key] = hash[altKey];
            if (!preserve) {
                delete hash[altKey];
            }
            return true;
        }
    }
    return false;
}

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren(children) {
    for (var i = 0; i < children.length; i++) {
        if (isArray$2(children[i])) {
            return Array.prototype.concat.apply([], children);
        }
    }
    return children;
}
// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren(children) {
    return isPrimitive(children)
        ? [createTextVNode(children)]
        : isArray$2(children)
            ? normalizeArrayChildren(children)
            : undefined;
}
function isTextNode(node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}
function normalizeArrayChildren(children, nestedIndex) {
    var res = [];
    var i, c, lastIndex, last;
    for (i = 0; i < children.length; i++) {
        c = children[i];
        if (isUndef(c) || typeof c === 'boolean')
            continue;
        lastIndex = res.length - 1;
        last = res[lastIndex];
        //  nested
        if (isArray$2(c)) {
            if (c.length > 0) {
                c = normalizeArrayChildren(c, "".concat(nestedIndex || '', "_").concat(i));
                // merge adjacent text nodes
                if (isTextNode(c[0]) && isTextNode(last)) {
                    res[lastIndex] = createTextVNode(last.text + c[0].text);
                    c.shift();
                }
                res.push.apply(res, c);
            }
        }
        else if (isPrimitive(c)) {
            if (isTextNode(last)) {
                // merge adjacent text nodes
                // this is necessary for SSR hydration because text nodes are
                // essentially merged when rendered to HTML strings
                res[lastIndex] = createTextVNode(last.text + c);
            }
            else if (c !== '') {
                // convert primitive to vnode
                res.push(createTextVNode(c));
            }
        }
        else {
            if (isTextNode(c) && isTextNode(last)) {
                // merge adjacent text nodes
                res[lastIndex] = createTextVNode(last.text + c.text);
            }
            else {
                // default key for nested array children (likely generated by v-for)
                if (isTrue(children._isVList) &&
                    isDef(c.tag) &&
                    isUndef(c.key) &&
                    isDef(nestedIndex)) {
                    c.key = "__vlist".concat(nestedIndex, "_").concat(i, "__");
                }
                res.push(c);
            }
        }
    }
    return res;
}

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList(val, render) {
    var ret = null, i, l, keys, key;
    if (isArray$2(val) || typeof val === 'string') {
        ret = new Array(val.length);
        for (i = 0, l = val.length; i < l; i++) {
            ret[i] = render(val[i], i);
        }
    }
    else if (typeof val === 'number') {
        ret = new Array(val);
        for (i = 0; i < val; i++) {
            ret[i] = render(i + 1, i);
        }
    }
    else if (isObject$3(val)) {
        if (hasSymbol$1 && val[Symbol.iterator]) {
            ret = [];
            var iterator = val[Symbol.iterator]();
            var result = iterator.next();
            while (!result.done) {
                ret.push(render(result.value, ret.length));
                result = iterator.next();
            }
        }
        else {
            keys = Object.keys(val);
            ret = new Array(keys.length);
            for (i = 0, l = keys.length; i < l; i++) {
                key = keys[i];
                ret[i] = render(val[key], key, i);
            }
        }
    }
    if (!isDef(ret)) {
        ret = [];
    }
    ret._isVList = true;
    return ret;
}

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot(name, fallbackRender, props, bindObject) {
    var scopedSlotFn = this.$scopedSlots[name];
    var nodes;
    if (scopedSlotFn) {
        // scoped slot
        props = props || {};
        if (bindObject) {
            props = extend$3(extend$3({}, bindObject), props);
        }
        nodes =
            scopedSlotFn(props) ||
                (isFunction$2(fallbackRender) ? fallbackRender() : fallbackRender);
    }
    else {
        nodes =
            this.$slots[name] ||
                (isFunction$2(fallbackRender) ? fallbackRender() : fallbackRender);
    }
    var target = props && props.slot;
    if (target) {
        return this.$createElement('template', { slot: target }, nodes);
    }
    else {
        return nodes;
    }
}

/**
 * Runtime helper for resolving filters
 */
function resolveFilter(id) {
    return resolveAsset(this.$options, 'filters', id) || identity;
}

function isKeyNotMatch(expect, actual) {
    if (isArray$2(expect)) {
        return expect.indexOf(actual) === -1;
    }
    else {
        return expect !== actual;
    }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
    var mappedKeyCode = config$2.keyCodes[key] || builtInKeyCode;
    if (builtInKeyName && eventKeyName && !config$2.keyCodes[key]) {
        return isKeyNotMatch(builtInKeyName, eventKeyName);
    }
    else if (mappedKeyCode) {
        return isKeyNotMatch(mappedKeyCode, eventKeyCode);
    }
    else if (eventKeyName) {
        return hyphenate(eventKeyName) !== key;
    }
    return eventKeyCode === undefined;
}

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps(data, tag, value, asProp, isSync) {
    if (value) {
        if (!isObject$3(value)) ;
        else {
            if (isArray$2(value)) {
                value = toObject(value);
            }
            var hash = void 0;
            var _loop_1 = function (key) {
                if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
                    hash = data;
                }
                else {
                    var type = data.attrs && data.attrs.type;
                    hash =
                        asProp || config$2.mustUseProp(tag, type, key)
                            ? data.domProps || (data.domProps = {})
                            : data.attrs || (data.attrs = {});
                }
                var camelizedKey = camelize$1(key);
                var hyphenatedKey = hyphenate(key);
                if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
                    hash[key] = value[key];
                    if (isSync) {
                        var on = data.on || (data.on = {});
                        on["update:".concat(key)] = function ($event) {
                            value[key] = $event;
                        };
                    }
                }
            };
            for (var key in value) {
                _loop_1(key);
            }
        }
    }
    return data;
}

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic(index, isInFor) {
    var cached = this._staticTrees || (this._staticTrees = []);
    var tree = cached[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree.
    if (tree && !isInFor) {
        return tree;
    }
    // otherwise, render a fresh tree.
    tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, this._c, this // for render fns generated for functional component templates
    );
    markStatic(tree, "__static__".concat(index), false);
    return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce(tree, index, key) {
    markStatic(tree, "__once__".concat(index).concat(key ? "_".concat(key) : ""), true);
    return tree;
}
function markStatic(tree, key, isOnce) {
    if (isArray$2(tree)) {
        for (var i = 0; i < tree.length; i++) {
            if (tree[i] && typeof tree[i] !== 'string') {
                markStaticNode(tree[i], "".concat(key, "_").concat(i), isOnce);
            }
        }
    }
    else {
        markStaticNode(tree, key, isOnce);
    }
}
function markStaticNode(node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
}

function bindObjectListeners(data, value) {
    if (value) {
        if (!isPlainObject$2(value)) ;
        else {
            var on = (data.on = data.on ? extend$3({}, data.on) : {});
            for (var key in value) {
                var existing = on[key];
                var ours = value[key];
                on[key] = existing ? [].concat(existing, ours) : ours;
            }
        }
    }
    return data;
}

function resolveScopedSlots(fns, res, 
// the following are added in 2.6
hasDynamicKeys, contentHashKey) {
    res = res || { $stable: !hasDynamicKeys };
    for (var i = 0; i < fns.length; i++) {
        var slot = fns[i];
        if (isArray$2(slot)) {
            resolveScopedSlots(slot, res, hasDynamicKeys);
        }
        else if (slot) {
            // marker for reverse proxying v-slot without scope on this.$slots
            // @ts-expect-error
            if (slot.proxy) {
                // @ts-expect-error
                slot.fn.proxy = true;
            }
            res[slot.key] = slot.fn;
        }
    }
    if (contentHashKey) {
        res.$key = contentHashKey;
    }
    return res;
}

// helper to process dynamic keys for dynamic arguments in v-bind and v-on.
function bindDynamicKeys(baseObj, values) {
    for (var i = 0; i < values.length; i += 2) {
        var key = values[i];
        if (typeof key === 'string' && key) {
            baseObj[values[i]] = values[i + 1];
        }
    }
    return baseObj;
}
// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier(value, symbol) {
    return typeof value === 'string' ? symbol + value : value;
}

function installRenderHelpers(target) {
    target._o = markOnce;
    target._n = toNumber;
    target._s = toString$3;
    target._l = renderList;
    target._t = renderSlot;
    target._q = looseEqual$1;
    target._i = looseIndexOf;
    target._m = renderStatic;
    target._f = resolveFilter;
    target._k = checkKeyCodes;
    target._b = bindObjectProps;
    target._v = createTextVNode;
    target._e = createEmptyVNode;
    target._u = resolveScopedSlots;
    target._g = bindObjectListeners;
    target._d = bindDynamicKeys;
    target._p = prependModifier;
}

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots(children, context) {
    if (!children || !children.length) {
        return {};
    }
    var slots = {};
    for (var i = 0, l = children.length; i < l; i++) {
        var child = children[i];
        var data = child.data;
        // remove slot attribute if the node is resolved as a Vue slot node
        if (data && data.attrs && data.attrs.slot) {
            delete data.attrs.slot;
        }
        // named slots should only be respected if the vnode was rendered in the
        // same context.
        if ((child.context === context || child.fnContext === context) &&
            data &&
            data.slot != null) {
            var name_1 = data.slot;
            var slot = slots[name_1] || (slots[name_1] = []);
            if (child.tag === 'template') {
                slot.push.apply(slot, child.children || []);
            }
            else {
                slot.push(child);
            }
        }
        else {
            (slots.default || (slots.default = [])).push(child);
        }
    }
    // ignore slots that contains only whitespace
    for (var name_2 in slots) {
        if (slots[name_2].every(isWhitespace)) {
            delete slots[name_2];
        }
    }
    return slots;
}
function isWhitespace(node) {
    return (node.isComment && !node.asyncFactory) || node.text === ' ';
}

function isAsyncPlaceholder(node) {
    // @ts-expect-error not really boolean type
    return node.isComment && node.asyncFactory;
}

function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {
    var res;
    var hasNormalSlots = Object.keys(normalSlots).length > 0;
    var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;
    var key = scopedSlots && scopedSlots.$key;
    if (!scopedSlots) {
        res = {};
    }
    else if (scopedSlots._normalized) {
        // fast path 1: child component re-render only, parent did not change
        return scopedSlots._normalized;
    }
    else if (isStable &&
        prevScopedSlots &&
        prevScopedSlots !== emptyObject &&
        key === prevScopedSlots.$key &&
        !hasNormalSlots &&
        !prevScopedSlots.$hasNormal) {
        // fast path 2: stable scoped slots w/ no normal slots to proxy,
        // only need to normalize once
        return prevScopedSlots;
    }
    else {
        res = {};
        for (var key_1 in scopedSlots) {
            if (scopedSlots[key_1] && key_1[0] !== '$') {
                res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]);
            }
        }
    }
    // expose normal slots on scopedSlots
    for (var key_2 in normalSlots) {
        if (!(key_2 in res)) {
            res[key_2] = proxyNormalSlot(normalSlots, key_2);
        }
    }
    // avoriaz seems to mock a non-extensible $scopedSlots object
    // and when that is passed down this would cause an error
    if (scopedSlots && Object.isExtensible(scopedSlots)) {
        scopedSlots._normalized = res;
    }
    def(res, '$stable', isStable);
    def(res, '$key', key);
    def(res, '$hasNormal', hasNormalSlots);
    return res;
}
function normalizeScopedSlot(vm, normalSlots, key, fn) {
    var normalized = function () {
        var cur = currentInstance;
        setCurrentInstance(vm);
        var res = arguments.length ? fn.apply(null, arguments) : fn({});
        res =
            res && typeof res === 'object' && !isArray$2(res)
                ? [res] // single vnode
                : normalizeChildren(res);
        var vnode = res && res[0];
        setCurrentInstance(cur);
        return res &&
            (!vnode ||
                (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode))) // #9658, #10391
            ? undefined
            : res;
    };
    // this is a slot using the new v-slot syntax without scope. although it is
    // compiled as a scoped slot, render fn users would expect it to be present
    // on this.$slots because the usage is semantically a normal slot.
    if (fn.proxy) {
        Object.defineProperty(normalSlots, key, {
            get: normalized,
            enumerable: true,
            configurable: true
        });
    }
    return normalized;
}
function proxyNormalSlot(slots, key) {
    return function () { return slots[key]; };
}

function initSetup(vm) {
    var options = vm.$options;
    var setup = options.setup;
    if (setup) {
        var ctx = (vm._setupContext = createSetupContext(vm));
        setCurrentInstance(vm);
        pushTarget();
        var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, "setup");
        popTarget();
        setCurrentInstance();
        if (isFunction$2(setupResult)) {
            // render function
            // @ts-ignore
            options.render = setupResult;
        }
        else if (isObject$3(setupResult)) {
            vm._setupState = setupResult;
            // __sfc indicates compiled bindings from <script setup>
            if (!setupResult.__sfc) {
                for (var key in setupResult) {
                    if (!isReserved(key)) {
                        proxyWithRefUnwrap(vm, setupResult, key);
                    }
                }
            }
            else {
                // exposed for compiled render fn
                var proxy = (vm._setupProxy = {});
                for (var key in setupResult) {
                    if (key !== '__sfc') {
                        proxyWithRefUnwrap(proxy, setupResult, key);
                    }
                }
            }
        }
        else ;
    }
}
function createSetupContext(vm) {
    return {
        get attrs() {
            if (!vm._attrsProxy) {
                var proxy = (vm._attrsProxy = {});
                def(proxy, '_v_attr_proxy', true);
                syncSetupProxy(proxy, vm.$attrs, emptyObject, vm, '$attrs');
            }
            return vm._attrsProxy;
        },
        get listeners() {
            if (!vm._listenersProxy) {
                var proxy = (vm._listenersProxy = {});
                syncSetupProxy(proxy, vm.$listeners, emptyObject, vm, '$listeners');
            }
            return vm._listenersProxy;
        },
        get slots() {
            return initSlotsProxy(vm);
        },
        emit: bind$4(vm.$emit, vm),
        expose: function (exposed) {
            if (exposed) {
                Object.keys(exposed).forEach(function (key) {
                    return proxyWithRefUnwrap(vm, exposed, key);
                });
            }
        }
    };
}
function syncSetupProxy(to, from, prev, instance, type) {
    var changed = false;
    for (var key in from) {
        if (!(key in to)) {
            changed = true;
            defineProxyAttr(to, key, instance, type);
        }
        else if (from[key] !== prev[key]) {
            changed = true;
        }
    }
    for (var key in to) {
        if (!(key in from)) {
            changed = true;
            delete to[key];
        }
    }
    return changed;
}
function defineProxyAttr(proxy, key, instance, type) {
    Object.defineProperty(proxy, key, {
        enumerable: true,
        configurable: true,
        get: function () {
            return instance[type][key];
        }
    });
}
function initSlotsProxy(vm) {
    if (!vm._slotsProxy) {
        syncSetupSlots((vm._slotsProxy = {}), vm.$scopedSlots);
    }
    return vm._slotsProxy;
}
function syncSetupSlots(to, from) {
    for (var key in from) {
        to[key] = from[key];
    }
    for (var key in to) {
        if (!(key in from)) {
            delete to[key];
        }
    }
}

function initRender(vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null; // v-once cached trees
    var options = vm.$options;
    var parentVnode = (vm.$vnode = options._parentVnode); // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(options._renderChildren, renderContext);
    vm.$scopedSlots = parentVnode
        ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots)
        : emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    // @ts-expect-error
    vm._c = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, false); };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    // @ts-expect-error
    vm.$createElement = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, true); };
    // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated
    var parentData = parentVnode && parentVnode.data;
    /* istanbul ignore else */
    {
        defineReactive(vm, '$attrs', (parentData && parentData.attrs) || emptyObject, null, true);
        defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
    }
}
var currentRenderingInstance = null;
function renderMixin(Vue) {
    // install runtime convenience helpers
    installRenderHelpers(Vue.prototype);
    Vue.prototype.$nextTick = function (fn) {
        return nextTick(fn, this);
    };
    Vue.prototype._render = function () {
        var vm = this;
        var _a = vm.$options, render = _a.render, _parentVnode = _a._parentVnode;
        if (_parentVnode && vm._isMounted) {
            vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
            if (vm._slotsProxy) {
                syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);
            }
        }
        // set parent vnode. this allows render functions to have access
        // to the data on the placeholder node.
        vm.$vnode = _parentVnode;
        // render self
        var prevInst = currentInstance;
        var prevRenderInst = currentRenderingInstance;
        var vnode;
        try {
            setCurrentInstance(vm);
            currentRenderingInstance = vm;
            vnode = render.call(vm._renderProxy, vm.$createElement);
        }
        catch (e) {
            handleError(e, vm, "render");
            // return error render result,
            // or previous vnode to prevent render error causing blank component
            /* istanbul ignore else */
            {
                vnode = vm._vnode;
            }
        }
        finally {
            currentRenderingInstance = prevRenderInst;
            setCurrentInstance(prevInst);
        }
        // if the returned array contains only a single node, allow it
        if (isArray$2(vnode) && vnode.length === 1) {
            vnode = vnode[0];
        }
        // return empty vnode in case the render function errored out
        if (!(vnode instanceof VNode)) {
            vnode = createEmptyVNode();
        }
        // set parent
        vnode.parent = _parentVnode;
        return vnode;
    };
}

function ensureCtor(comp, base) {
    if (comp.__esModule || (hasSymbol$1 && comp[Symbol.toStringTag] === 'Module')) {
        comp = comp.default;
    }
    return isObject$3(comp) ? base.extend(comp) : comp;
}
function createAsyncPlaceholder(factory, data, context, children, tag) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data: data, context: context, children: children, tag: tag };
    return node;
}
function resolveAsyncComponent(factory, baseCtor) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
        return factory.errorComp;
    }
    if (isDef(factory.resolved)) {
        return factory.resolved;
    }
    var owner = currentRenderingInstance;
    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
        // already pending
        factory.owners.push(owner);
    }
    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
        return factory.loadingComp;
    }
    if (owner && !isDef(factory.owners)) {
        var owners_1 = (factory.owners = [owner]);
        var sync_1 = true;
        var timerLoading_1 = null;
        var timerTimeout_1 = null;
        owner.$on('hook:destroyed', function () { return remove$2(owners_1, owner); });
        var forceRender_1 = function (renderCompleted) {
            for (var i = 0, l = owners_1.length; i < l; i++) {
                owners_1[i].$forceUpdate();
            }
            if (renderCompleted) {
                owners_1.length = 0;
                if (timerLoading_1 !== null) {
                    clearTimeout(timerLoading_1);
                    timerLoading_1 = null;
                }
                if (timerTimeout_1 !== null) {
                    clearTimeout(timerTimeout_1);
                    timerTimeout_1 = null;
                }
            }
        };
        var resolve = once$1(function (res) {
            // cache resolved
            factory.resolved = ensureCtor(res, baseCtor);
            // invoke callbacks only if this is not a synchronous resolve
            // (async resolves are shimmed as synchronous during SSR)
            if (!sync_1) {
                forceRender_1(true);
            }
            else {
                owners_1.length = 0;
            }
        });
        var reject_1 = once$1(function (reason) {
            if (isDef(factory.errorComp)) {
                factory.error = true;
                forceRender_1(true);
            }
        });
        var res_1 = factory(resolve, reject_1);
        if (isObject$3(res_1)) {
            if (isPromise(res_1)) {
                // () => Promise
                if (isUndef(factory.resolved)) {
                    res_1.then(resolve, reject_1);
                }
            }
            else if (isPromise(res_1.component)) {
                res_1.component.then(resolve, reject_1);
                if (isDef(res_1.error)) {
                    factory.errorComp = ensureCtor(res_1.error, baseCtor);
                }
                if (isDef(res_1.loading)) {
                    factory.loadingComp = ensureCtor(res_1.loading, baseCtor);
                    if (res_1.delay === 0) {
                        factory.loading = true;
                    }
                    else {
                        // @ts-expect-error NodeJS timeout type
                        timerLoading_1 = setTimeout(function () {
                            timerLoading_1 = null;
                            if (isUndef(factory.resolved) && isUndef(factory.error)) {
                                factory.loading = true;
                                forceRender_1(false);
                            }
                        }, res_1.delay || 200);
                    }
                }
                if (isDef(res_1.timeout)) {
                    // @ts-expect-error NodeJS timeout type
                    timerTimeout_1 = setTimeout(function () {
                        timerTimeout_1 = null;
                        if (isUndef(factory.resolved)) {
                            reject_1(null);
                        }
                    }, res_1.timeout);
                }
            }
        }
        sync_1 = false;
        // return in case resolved synchronously
        return factory.loading ? factory.loadingComp : factory.resolved;
    }
}

function getFirstComponentChild(children) {
    if (isArray$2(children)) {
        for (var i = 0; i < children.length; i++) {
            var c = children[i];
            if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
                return c;
            }
        }
    }
}

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;
// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {
    if (isArray$2(data) || isPrimitive(data)) {
        normalizationType = children;
        children = data;
        data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
        normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType);
}
function _createElement(context, tag, data, children, normalizationType) {
    if (isDef(data) && isDef(data.__ob__)) {
        return createEmptyVNode();
    }
    // object syntax in v-bind
    if (isDef(data) && isDef(data.is)) {
        tag = data.is;
    }
    if (!tag) {
        // in case of component :is set to falsy value
        return createEmptyVNode();
    }
    // support single function children as default scoped slot
    if (isArray$2(children) && isFunction$2(children[0])) {
        data = data || {};
        data.scopedSlots = { default: children[0] };
        children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
        children = normalizeChildren(children);
    }
    else if (normalizationType === SIMPLE_NORMALIZE) {
        children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
        var Ctor = void 0;
        ns = (context.$vnode && context.$vnode.ns) || config$2.getTagNamespace(tag);
        if (config$2.isReservedTag(tag)) {
            vnode = new VNode(config$2.parsePlatformTagName(tag), data, children, undefined, undefined, context);
        }
        else if ((!data || !data.pre) &&
            isDef((Ctor = resolveAsset(context.$options, 'components', tag)))) {
            // component
            vnode = createComponent(Ctor, data, context, children, tag);
        }
        else {
            // unknown or unlisted namespaced elements
            // check at runtime because it may get assigned a namespace when its
            // parent normalizes children
            vnode = new VNode(tag, data, children, undefined, undefined, context);
        }
    }
    else {
        // direct component options / constructor
        vnode = createComponent(tag, data, context, children);
    }
    if (isArray$2(vnode)) {
        return vnode;
    }
    else if (isDef(vnode)) {
        if (isDef(ns))
            applyNS(vnode, ns);
        if (isDef(data))
            registerDeepBindings(data);
        return vnode;
    }
    else {
        return createEmptyVNode();
    }
}
function applyNS(vnode, ns, force) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
        // use default namespace inside foreignObject
        ns = undefined;
        force = true;
    }
    if (isDef(vnode.children)) {
        for (var i = 0, l = vnode.children.length; i < l; i++) {
            var child = vnode.children[i];
            if (isDef(child.tag) &&
                (isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
                applyNS(child, ns, force);
            }
        }
    }
}
// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings(data) {
    if (isObject$3(data.style)) {
        traverse(data.style);
    }
    if (isObject$3(data.class)) {
        traverse(data.class);
    }
}

function handleError(err, vm, info) {
    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
    // See: https://github.com/vuejs/vuex/issues/1505
    pushTarget();
    try {
        if (vm) {
            var cur = vm;
            while ((cur = cur.$parent)) {
                var hooks = cur.$options.errorCaptured;
                if (hooks) {
                    for (var i = 0; i < hooks.length; i++) {
                        try {
                            var capture = hooks[i].call(cur, err, vm, info) === false;
                            if (capture)
                                return;
                        }
                        catch (e) {
                            globalHandleError(e, cur, 'errorCaptured hook');
                        }
                    }
                }
            }
        }
        globalHandleError(err, vm, info);
    }
    finally {
        popTarget();
    }
}
function invokeWithErrorHandling(handler, context, args, vm, info) {
    var res;
    try {
        res = args ? handler.apply(context, args) : handler.call(context);
        if (res && !res._isVue && isPromise(res) && !res._handled) {
            res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
            res._handled = true;
        }
    }
    catch (e) {
        handleError(e, vm, info);
    }
    return res;
}
function globalHandleError(err, vm, info) {
    if (config$2.errorHandler) {
        try {
            return config$2.errorHandler.call(null, err, vm, info);
        }
        catch (e) {
            // if the user intentionally throws the original error in the handler,
            // do not log it twice
            if (e !== err) {
                logError(e);
            }
        }
    }
    logError(err);
}
function logError(err, vm, info) {
    /* istanbul ignore else */
    if (inBrowser$1 && typeof console !== 'undefined') {
        console.error(err);
    }
    else {
        throw err;
    }
}

/* globals MutationObserver */
var isUsingMicroTask = false;
var callbacks = [];
var pending = false;
function flushCallbacks() {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
        copies[i]();
    }
}
// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;
// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p_1 = Promise.resolve();
    timerFunc = function () {
        p_1.then(flushCallbacks);
        // In problematic UIWebViews, Promise.then doesn't completely break, but
        // it can get stuck in a weird state where callbacks are pushed into the
        // microtask queue but the queue isn't being flushed, until the browser
        // needs to do some other work, e.g. handle a timer. Therefore we can
        // "force" the microtask queue to be flushed by adding an empty timer.
        if (isIOS)
            setTimeout(noop$1);
    };
    isUsingMicroTask = true;
}
else if (!isIE &&
    typeof MutationObserver !== 'undefined' &&
    (isNative(MutationObserver) ||
        // PhantomJS and iOS 7.x
        MutationObserver.toString() === '[object MutationObserverConstructor]')) {
    // Use MutationObserver where native Promise is not available,
    // e.g. PhantomJS, iOS7, Android 4.4
    // (#6466 MutationObserver is unreliable in IE11)
    var counter_1 = 1;
    var observer = new MutationObserver(flushCallbacks);
    var textNode_1 = document.createTextNode(String(counter_1));
    observer.observe(textNode_1, {
        characterData: true
    });
    timerFunc = function () {
        counter_1 = (counter_1 + 1) % 2;
        textNode_1.data = String(counter_1);
    };
    isUsingMicroTask = true;
}
else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
    // Fallback to setImmediate.
    // Technically it leverages the (macro) task queue,
    // but it is still a better choice than setTimeout.
    timerFunc = function () {
        setImmediate(flushCallbacks);
    };
}
else {
    // Fallback to setTimeout.
    timerFunc = function () {
        setTimeout(flushCallbacks, 0);
    };
}
/**
 * @internal
 */
function nextTick(cb, ctx) {
    var _resolve;
    callbacks.push(function () {
        if (cb) {
            try {
                cb.call(ctx);
            }
            catch (e) {
                handleError(e, ctx, 'nextTick');
            }
        }
        else if (_resolve) {
            _resolve(ctx);
        }
    });
    if (!pending) {
        pending = true;
        timerFunc();
    }
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve) {
            _resolve = resolve;
        });
    }
}

/**
 * Note: also update dist/vue.runtime.mjs when adding new exports to this file.
 */
var version = '2.7.16';

var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse(val) {
    _traverse(val, seenObjects);
    seenObjects.clear();
    return val;
}
function _traverse(val, seen) {
    var i, keys;
    var isA = isArray$2(val);
    if ((!isA && !isObject$3(val)) ||
        val.__v_skip /* ReactiveFlags.SKIP */ ||
        Object.isFrozen(val) ||
        val instanceof VNode) {
        return;
    }
    if (val.__ob__) {
        var depId = val.__ob__.dep.id;
        if (seen.has(depId)) {
            return;
        }
        seen.add(depId);
    }
    if (isA) {
        i = val.length;
        while (i--)
            _traverse(val[i], seen);
    }
    else if (isRef(val)) {
        _traverse(val.value, seen);
    }
    else {
        keys = Object.keys(val);
        i = keys.length;
        while (i--)
            _traverse(val[keys[i]], seen);
    }
}

var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 * @internal
 */
var Watcher = /** @class */ (function () {
    function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
        recordEffectScope(this, 
        // if the active effect scope is manually created (not a component scope),
        // prioritize it
        activeEffectScope && !activeEffectScope._vm
            ? activeEffectScope
            : vm
                ? vm._scope
                : undefined);
        if ((this.vm = vm) && isRenderWatcher) {
            vm._watcher = this;
        }
        // options
        if (options) {
            this.deep = !!options.deep;
            this.user = !!options.user;
            this.lazy = !!options.lazy;
            this.sync = !!options.sync;
            this.before = options.before;
        }
        else {
            this.deep = this.user = this.lazy = this.sync = false;
        }
        this.cb = cb;
        this.id = ++uid$1; // uid for batching
        this.active = true;
        this.post = false;
        this.dirty = this.lazy; // for lazy watchers
        this.deps = [];
        this.newDeps = [];
        this.depIds = new _Set();
        this.newDepIds = new _Set();
        this.expression = '';
        // parse expression for getter
        if (isFunction$2(expOrFn)) {
            this.getter = expOrFn;
        }
        else {
            this.getter = parsePath$1(expOrFn);
            if (!this.getter) {
                this.getter = noop$1;
            }
        }
        this.value = this.lazy ? undefined : this.get();
    }
    /**
     * Evaluate the getter, and re-collect dependencies.
     */
    Watcher.prototype.get = function () {
        pushTarget(this);
        var value;
        var vm = this.vm;
        try {
            value = this.getter.call(vm, vm);
        }
        catch (e) {
            if (this.user) {
                handleError(e, vm, "getter for watcher \"".concat(this.expression, "\""));
            }
            else {
                throw e;
            }
        }
        finally {
            // "touch" every property so they are all tracked as
            // dependencies for deep watching
            if (this.deep) {
                traverse(value);
            }
            popTarget();
            this.cleanupDeps();
        }
        return value;
    };
    /**
     * Add a dependency to this directive.
     */
    Watcher.prototype.addDep = function (dep) {
        var id = dep.id;
        if (!this.newDepIds.has(id)) {
            this.newDepIds.add(id);
            this.newDeps.push(dep);
            if (!this.depIds.has(id)) {
                dep.addSub(this);
            }
        }
    };
    /**
     * Clean up for dependency collection.
     */
    Watcher.prototype.cleanupDeps = function () {
        var i = this.deps.length;
        while (i--) {
            var dep = this.deps[i];
            if (!this.newDepIds.has(dep.id)) {
                dep.removeSub(this);
            }
        }
        var tmp = this.depIds;
        this.depIds = this.newDepIds;
        this.newDepIds = tmp;
        this.newDepIds.clear();
        tmp = this.deps;
        this.deps = this.newDeps;
        this.newDeps = tmp;
        this.newDeps.length = 0;
    };
    /**
     * Subscriber interface.
     * Will be called when a dependency changes.
     */
    Watcher.prototype.update = function () {
        /* istanbul ignore else */
        if (this.lazy) {
            this.dirty = true;
        }
        else if (this.sync) {
            this.run();
        }
        else {
            queueWatcher(this);
        }
    };
    /**
     * Scheduler job interface.
     * Will be called by the scheduler.
     */
    Watcher.prototype.run = function () {
        if (this.active) {
            var value = this.get();
            if (value !== this.value ||
                // Deep watchers and watchers on Object/Arrays should fire even
                // when the value is the same, because the value may
                // have mutated.
                isObject$3(value) ||
                this.deep) {
                // set new value
                var oldValue = this.value;
                this.value = value;
                if (this.user) {
                    var info = "callback for watcher \"".concat(this.expression, "\"");
                    invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
                }
                else {
                    this.cb.call(this.vm, value, oldValue);
                }
            }
        }
    };
    /**
     * Evaluate the value of the watcher.
     * This only gets called for lazy watchers.
     */
    Watcher.prototype.evaluate = function () {
        this.value = this.get();
        this.dirty = false;
    };
    /**
     * Depend on all deps collected by this watcher.
     */
    Watcher.prototype.depend = function () {
        var i = this.deps.length;
        while (i--) {
            this.deps[i].depend();
        }
    };
    /**
     * Remove self from all dependencies' subscriber list.
     */
    Watcher.prototype.teardown = function () {
        if (this.vm && !this.vm._isBeingDestroyed) {
            remove$2(this.vm._scope.effects, this);
        }
        if (this.active) {
            var i = this.deps.length;
            while (i--) {
                this.deps[i].removeSub(this);
            }
            this.active = false;
            if (this.onStop) {
                this.onStop();
            }
        }
    };
    return Watcher;
}());

function initEvents(vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
        updateComponentListeners(vm, listeners);
    }
}
var target$1;
function add$1(event, fn) {
    target$1.$on(event, fn);
}
function remove$1(event, fn) {
    target$1.$off(event, fn);
}
function createOnceHandler$1(event, fn) {
    var _target = target$1;
    return function onceHandler() {
        var res = fn.apply(null, arguments);
        if (res !== null) {
            _target.$off(event, onceHandler);
        }
    };
}
function updateComponentListeners(vm, listeners, oldListeners) {
    target$1 = vm;
    updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);
    target$1 = undefined;
}
function eventsMixin(Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
        var vm = this;
        if (isArray$2(event)) {
            for (var i = 0, l = event.length; i < l; i++) {
                vm.$on(event[i], fn);
            }
        }
        else {
            (vm._events[event] || (vm._events[event] = [])).push(fn);
            // optimize hook:event cost by using a boolean flag marked at registration
            // instead of a hash lookup
            if (hookRE.test(event)) {
                vm._hasHookEvent = true;
            }
        }
        return vm;
    };
    Vue.prototype.$once = function (event, fn) {
        var vm = this;
        function on() {
            vm.$off(event, on);
            fn.apply(vm, arguments);
        }
        on.fn = fn;
        vm.$on(event, on);
        return vm;
    };
    Vue.prototype.$off = function (event, fn) {
        var vm = this;
        // all
        if (!arguments.length) {
            vm._events = Object.create(null);
            return vm;
        }
        // array of events
        if (isArray$2(event)) {
            for (var i_1 = 0, l = event.length; i_1 < l; i_1++) {
                vm.$off(event[i_1], fn);
            }
            return vm;
        }
        // specific event
        var cbs = vm._events[event];
        if (!cbs) {
            return vm;
        }
        if (!fn) {
            vm._events[event] = null;
            return vm;
        }
        // specific handler
        var cb;
        var i = cbs.length;
        while (i--) {
            cb = cbs[i];
            if (cb === fn || cb.fn === fn) {
                cbs.splice(i, 1);
                break;
            }
        }
        return vm;
    };
    Vue.prototype.$emit = function (event) {
        var vm = this;
        var cbs = vm._events[event];
        if (cbs) {
            cbs = cbs.length > 1 ? toArray$1(cbs) : cbs;
            var args = toArray$1(arguments, 1);
            var info = "event handler for \"".concat(event, "\"");
            for (var i = 0, l = cbs.length; i < l; i++) {
                invokeWithErrorHandling(cbs[i], vm, args, vm, info);
            }
        }
        return vm;
    };
}

var activeInstance = null;
function setActiveInstance(vm) {
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    return function () {
        activeInstance = prevActiveInstance;
    };
}
function initLifecycle(vm) {
    var options = vm.$options;
    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
        while (parent.$options.abstract && parent.$parent) {
            parent = parent.$parent;
        }
        parent.$children.push(vm);
    }
    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;
    vm.$children = [];
    vm.$refs = {};
    vm._provided = parent ? parent._provided : Object.create(null);
    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
}
function lifecycleMixin(Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
        var vm = this;
        var prevEl = vm.$el;
        var prevVnode = vm._vnode;
        var restoreActiveInstance = setActiveInstance(vm);
        vm._vnode = vnode;
        // Vue.prototype.__patch__ is injected in entry points
        // based on the rendering backend used.
        if (!prevVnode) {
            // initial render
            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
        }
        else {
            // updates
            vm.$el = vm.__patch__(prevVnode, vnode);
        }
        restoreActiveInstance();
        // update __vue__ reference
        if (prevEl) {
            prevEl.__vue__ = null;
        }
        if (vm.$el) {
            vm.$el.__vue__ = vm;
        }
        // if parent is an HOC, update its $el as well
        var wrapper = vm;
        while (wrapper &&
            wrapper.$vnode &&
            wrapper.$parent &&
            wrapper.$vnode === wrapper.$parent._vnode) {
            wrapper.$parent.$el = wrapper.$el;
            wrapper = wrapper.$parent;
        }
        // updated hook is called by the scheduler to ensure that children are
        // updated in a parent's updated hook.
    };
    Vue.prototype.$forceUpdate = function () {
        var vm = this;
        if (vm._watcher) {
            vm._watcher.update();
        }
    };
    Vue.prototype.$destroy = function () {
        var vm = this;
        if (vm._isBeingDestroyed) {
            return;
        }
        callHook$1(vm, 'beforeDestroy');
        vm._isBeingDestroyed = true;
        // remove self from parent
        var parent = vm.$parent;
        if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
            remove$2(parent.$children, vm);
        }
        // teardown scope. this includes both the render watcher and other
        // watchers created
        vm._scope.stop();
        // remove reference from data ob
        // frozen object may not have observer.
        if (vm._data.__ob__) {
            vm._data.__ob__.vmCount--;
        }
        // call the last hook...
        vm._isDestroyed = true;
        // invoke destroy hooks on current rendered tree
        vm.__patch__(vm._vnode, null);
        // fire destroyed hook
        callHook$1(vm, 'destroyed');
        // turn off all instance listeners.
        vm.$off();
        // remove __vue__ reference
        if (vm.$el) {
            vm.$el.__vue__ = null;
        }
        // release circular reference (#6759)
        if (vm.$vnode) {
            vm.$vnode.parent = null;
        }
    };
}
function mountComponent(vm, el, hydrating) {
    vm.$el = el;
    if (!vm.$options.render) {
        // @ts-expect-error invalid type
        vm.$options.render = createEmptyVNode;
    }
    callHook$1(vm, 'beforeMount');
    var updateComponent;
    /* istanbul ignore if */
    {
        updateComponent = function () {
            vm._update(vm._render(), hydrating);
        };
    }
    var watcherOptions = {
        before: function () {
            if (vm._isMounted && !vm._isDestroyed) {
                callHook$1(vm, 'beforeUpdate');
            }
        }
    };
    // we set this to vm._watcher inside the watcher's constructor
    // since the watcher's initial patch may call $forceUpdate (e.g. inside child
    // component's mounted hook), which relies on vm._watcher being already defined
    new Watcher(vm, updateComponent, noop$1, watcherOptions, true /* isRenderWatcher */);
    hydrating = false;
    // flush buffer for flush: "pre" watchers queued in setup()
    var preWatchers = vm._preWatchers;
    if (preWatchers) {
        for (var i = 0; i < preWatchers.length; i++) {
            preWatchers[i].run();
        }
    }
    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
        vm._isMounted = true;
        callHook$1(vm, 'mounted');
    }
    return vm;
}
function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren.
    // check if there are dynamic scopedSlots (hand-written or compiled but with
    // dynamic slot names). Static scoped slots compiled from template has the
    // "$stable" marker.
    var newScopedSlots = parentVnode.data.scopedSlots;
    var oldScopedSlots = vm.$scopedSlots;
    var hasDynamicScopedSlot = !!((newScopedSlots && !newScopedSlots.$stable) ||
        (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
        (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
        (!newScopedSlots && vm.$scopedSlots.$key));
    // Any static slot children from the parent may have changed during parent's
    // update. Dynamic scoped slots may also have changed. In such cases, a forced
    // update is necessary to ensure correctness.
    var needsForceUpdate = !!(renderChildren || // has new static slots
        vm.$options._renderChildren || // has old static slots
        hasDynamicScopedSlot);
    var prevVNode = vm.$vnode;
    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render
    if (vm._vnode) {
        // update child tree's parent
        vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;
    // update $attrs and $listeners hash
    // these are also reactive so they may trigger child update if the child
    // used them during render
    var attrs = parentVnode.data.attrs || emptyObject;
    if (vm._attrsProxy) {
        // force update if attrs are accessed and has changed since it may be
        // passed to a child component.
        if (syncSetupProxy(vm._attrsProxy, attrs, (prevVNode.data && prevVNode.data.attrs) || emptyObject, vm, '$attrs')) {
            needsForceUpdate = true;
        }
    }
    vm.$attrs = attrs;
    // update listeners
    listeners = listeners || emptyObject;
    var prevListeners = vm.$options._parentListeners;
    if (vm._listenersProxy) {
        syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, '$listeners');
    }
    vm.$listeners = vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, prevListeners);
    // update props
    if (propsData && vm.$options.props) {
        toggleObserving(false);
        var props = vm._props;
        var propKeys = vm.$options._propKeys || [];
        for (var i = 0; i < propKeys.length; i++) {
            var key = propKeys[i];
            var propOptions = vm.$options.props; // wtf flow?
            props[key] = validateProp(key, propOptions, propsData, vm);
        }
        toggleObserving(true);
        // keep a copy of raw propsData
        vm.$options.propsData = propsData;
    }
    // resolve slots + force update if has children
    if (needsForceUpdate) {
        vm.$slots = resolveSlots(renderChildren, parentVnode.context);
        vm.$forceUpdate();
    }
}
function isInInactiveTree(vm) {
    while (vm && (vm = vm.$parent)) {
        if (vm._inactive)
            return true;
    }
    return false;
}
function activateChildComponent(vm, direct) {
    if (direct) {
        vm._directInactive = false;
        if (isInInactiveTree(vm)) {
            return;
        }
    }
    else if (vm._directInactive) {
        return;
    }
    if (vm._inactive || vm._inactive === null) {
        vm._inactive = false;
        for (var i = 0; i < vm.$children.length; i++) {
            activateChildComponent(vm.$children[i]);
        }
        callHook$1(vm, 'activated');
    }
}
function deactivateChildComponent(vm, direct) {
    if (direct) {
        vm._directInactive = true;
        if (isInInactiveTree(vm)) {
            return;
        }
    }
    if (!vm._inactive) {
        vm._inactive = true;
        for (var i = 0; i < vm.$children.length; i++) {
            deactivateChildComponent(vm.$children[i]);
        }
        callHook$1(vm, 'deactivated');
    }
}
function callHook$1(vm, hook, args, setContext) {
    if (setContext === void 0) { setContext = true; }
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var prevInst = currentInstance;
    var prevScope = getCurrentScope();
    setContext && setCurrentInstance(vm);
    var handlers = vm.$options[hook];
    var info = "".concat(hook, " hook");
    if (handlers) {
        for (var i = 0, j = handlers.length; i < j; i++) {
            invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);
        }
    }
    if (vm._hasHookEvent) {
        vm.$emit('hook:' + hook);
    }
    if (setContext) {
        setCurrentInstance(prevInst);
        prevScope && prevScope.on();
    }
    popTarget();
}
var queue = [];
var activatedChildren = [];
var has = {};
var waiting = false;
var flushing = false;
var index$6 = 0;
/**
 * Reset the scheduler's state.
 */
function resetSchedulerState() {
    index$6 = queue.length = activatedChildren.length = 0;
    has = {};
    waiting = flushing = false;
}
// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;
// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;
// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser$1 && !isIE) {
    var performance_1 = window.performance;
    if (performance_1 &&
        typeof performance_1.now === 'function' &&
        getNow() > document.createEvent('Event').timeStamp) {
        // if the event timestamp, although evaluated AFTER the Date.now(), is
        // smaller than it, it means the event is using a hi-res timestamp,
        // and we need to use the hi-res version for event listener timestamps as
        // well.
        getNow = function () { return performance_1.now(); };
    }
}
var sortCompareFn = function (a, b) {
    if (a.post) {
        if (!b.post)
            return 1;
    }
    else if (b.post) {
        return -1;
    }
    return a.id - b.id;
};
/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue() {
    currentFlushTimestamp = getNow();
    flushing = true;
    var watcher, id;
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue.sort(sortCompareFn);
    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index$6 = 0; index$6 < queue.length; index$6++) {
        watcher = queue[index$6];
        if (watcher.before) {
            watcher.before();
        }
        id = watcher.id;
        has[id] = null;
        watcher.run();
    }
    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();
    resetSchedulerState();
    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);
    cleanupDeps();
    // devtool hook
    /* istanbul ignore if */
    if (devtools && config$2.devtools) {
        devtools.emit('flush');
    }
}
function callUpdatedHooks(queue) {
    var i = queue.length;
    while (i--) {
        var watcher = queue[i];
        var vm = watcher.vm;
        if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
            callHook$1(vm, 'updated');
        }
    }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent(vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
}
function callActivatedHooks(queue) {
    for (var i = 0; i < queue.length; i++) {
        queue[i]._inactive = true;
        activateChildComponent(queue[i], true /* true */);
    }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher(watcher) {
    var id = watcher.id;
    if (has[id] != null) {
        return;
    }
    if (watcher === Dep.target && watcher.noRecurse) {
        return;
    }
    has[id] = true;
    if (!flushing) {
        queue.push(watcher);
    }
    else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;
        while (i > index$6 && queue[i].id > watcher.id) {
            i--;
        }
        queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
        waiting = true;
        nextTick(flushSchedulerQueue);
    }
}

function initProvide(vm) {
    var provideOption = vm.$options.provide;
    if (provideOption) {
        var provided = isFunction$2(provideOption)
            ? provideOption.call(vm)
            : provideOption;
        if (!isObject$3(provided)) {
            return;
        }
        var source = resolveProvided(vm);
        // IE9 doesn't support Object.getOwnPropertyDescriptors so we have to
        // iterate the keys ourselves.
        var keys = hasSymbol$1 ? Reflect.ownKeys(provided) : Object.keys(provided);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));
        }
    }
}
function initInjections(vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
        toggleObserving(false);
        Object.keys(result).forEach(function (key) {
            /* istanbul ignore else */
            {
                defineReactive(vm, key, result[key]);
            }
        });
        toggleObserving(true);
    }
}
function resolveInject(inject, vm) {
    if (inject) {
        // inject is :any because flow is not smart enough to figure out cached
        var result = Object.create(null);
        var keys = hasSymbol$1 ? Reflect.ownKeys(inject) : Object.keys(inject);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            // #6574 in case the inject object is observed...
            if (key === '__ob__')
                continue;
            var provideKey = inject[key].from;
            if (provideKey in vm._provided) {
                result[key] = vm._provided[provideKey];
            }
            else if ('default' in inject[key]) {
                var provideDefault = inject[key].default;
                result[key] = isFunction$2(provideDefault)
                    ? provideDefault.call(vm)
                    : provideDefault;
            }
            else ;
        }
        return result;
    }
}

function FunctionalRenderContext(data, props, children, parent, Ctor) {
    var _this = this;
    var options = Ctor.options;
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var contextVm;
    if (hasOwn$1(parent, '_uid')) {
        contextVm = Object.create(parent);
        contextVm._original = parent;
    }
    else {
        // the context vm passed in is a functional context as well.
        // in this case we want to make sure we are able to get a hold to the
        // real context instance.
        contextVm = parent;
        // @ts-ignore
        parent = parent._original;
    }
    var isCompiled = isTrue(options._compiled);
    var needNormalization = !isCompiled;
    this.data = data;
    this.props = props;
    this.children = children;
    this.parent = parent;
    this.listeners = data.on || emptyObject;
    this.injections = resolveInject(options.inject, parent);
    this.slots = function () {
        if (!_this.$slots) {
            normalizeScopedSlots(parent, data.scopedSlots, (_this.$slots = resolveSlots(children, parent)));
        }
        return _this.$slots;
    };
    Object.defineProperty(this, 'scopedSlots', {
        enumerable: true,
        get: function () {
            return normalizeScopedSlots(parent, data.scopedSlots, this.slots());
        }
    });
    // support for compiled functional template
    if (isCompiled) {
        // exposing $options for renderStatic()
        this.$options = options;
        // pre-resolve slots for renderSlot()
        this.$slots = this.slots();
        this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);
    }
    if (options._scopeId) {
        this._c = function (a, b, c, d) {
            var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);
            if (vnode && !isArray$2(vnode)) {
                vnode.fnScopeId = options._scopeId;
                vnode.fnContext = parent;
            }
            return vnode;
        };
    }
    else {
        this._c = function (a, b, c, d) {
            return createElement$1(contextVm, a, b, c, d, needNormalization);
        };
    }
}
installRenderHelpers(FunctionalRenderContext.prototype);
function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
    var options = Ctor.options;
    var props = {};
    var propOptions = options.props;
    if (isDef(propOptions)) {
        for (var key in propOptions) {
            props[key] = validateProp(key, propOptions, propsData || emptyObject);
        }
    }
    else {
        if (isDef(data.attrs))
            mergeProps(props, data.attrs);
        if (isDef(data.props))
            mergeProps(props, data.props);
    }
    var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
    var vnode = options.render.call(null, renderContext._c, renderContext);
    if (vnode instanceof VNode) {
        return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options);
    }
    else if (isArray$2(vnode)) {
        var vnodes = normalizeChildren(vnode) || [];
        var res = new Array(vnodes.length);
        for (var i = 0; i < vnodes.length; i++) {
            res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
        }
        return res;
    }
}
function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
    // #7817 clone node before setting fnContext, otherwise if the node is reused
    // (e.g. it was from a cached normal slot) the fnContext causes named slots
    // that should not be matched to match.
    var clone = cloneVNode(vnode);
    clone.fnContext = contextVm;
    clone.fnOptions = options;
    if (data.slot) {
        (clone.data || (clone.data = {})).slot = data.slot;
    }
    return clone;
}
function mergeProps(to, from) {
    for (var key in from) {
        to[camelize$1(key)] = from[key];
    }
}

function getComponentName(options) {
    return options.name || options.__name || options._componentTag;
}
// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
    init: function (vnode, hydrating) {
        if (vnode.componentInstance &&
            !vnode.componentInstance._isDestroyed &&
            vnode.data.keepAlive) {
            // kept-alive components, treat as a patch
            var mountedNode = vnode; // work around flow
            componentVNodeHooks.prepatch(mountedNode, mountedNode);
        }
        else {
            var child = (vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance));
            child.$mount(hydrating ? vnode.elm : undefined, hydrating);
        }
    },
    prepatch: function (oldVnode, vnode) {
        var options = vnode.componentOptions;
        var child = (vnode.componentInstance = oldVnode.componentInstance);
        updateChildComponent(child, options.propsData, // updated props
        options.listeners, // updated listeners
        vnode, // new parent vnode
        options.children // new children
        );
    },
    insert: function (vnode) {
        var context = vnode.context, componentInstance = vnode.componentInstance;
        if (!componentInstance._isMounted) {
            componentInstance._isMounted = true;
            callHook$1(componentInstance, 'mounted');
        }
        if (vnode.data.keepAlive) {
            if (context._isMounted) {
                // vue-router#1212
                // During updates, a kept-alive component's child components may
                // change, so directly walking the tree here may call activated hooks
                // on incorrect children. Instead we push them into a queue which will
                // be processed after the whole patch process ended.
                queueActivatedComponent(componentInstance);
            }
            else {
                activateChildComponent(componentInstance, true /* direct */);
            }
        }
    },
    destroy: function (vnode) {
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isDestroyed) {
            if (!vnode.data.keepAlive) {
                componentInstance.$destroy();
            }
            else {
                deactivateChildComponent(componentInstance, true /* direct */);
            }
        }
    }
};
var hooksToMerge = Object.keys(componentVNodeHooks);
function createComponent(Ctor, data, context, children, tag) {
    if (isUndef(Ctor)) {
        return;
    }
    var baseCtor = context.$options._base;
    // plain options object: turn it into a constructor
    if (isObject$3(Ctor)) {
        Ctor = baseCtor.extend(Ctor);
    }
    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
        return;
    }
    // async component
    var asyncFactory;
    // @ts-expect-error
    if (isUndef(Ctor.cid)) {
        asyncFactory = Ctor;
        Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
        if (Ctor === undefined) {
            // return a placeholder node for async component, which is rendered
            // as a comment node but preserves all the raw information for the node.
            // the information will be used for async server-rendering and hydration.
            return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
        }
    }
    data = data || {};
    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);
    // transform component v-model data into props & events
    if (isDef(data.model)) {
        // @ts-expect-error
        transformModel(Ctor.options, data);
    }
    // extract props
    // @ts-expect-error
    var propsData = extractPropsFromVNodeData(data, Ctor);
    // functional component
    // @ts-expect-error
    if (isTrue(Ctor.options.functional)) {
        return createFunctionalComponent(Ctor, propsData, data, context, children);
    }
    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    // so it gets processed during parent component patch.
    data.on = data.nativeOn;
    // @ts-expect-error
    if (isTrue(Ctor.options.abstract)) {
        // abstract components do not keep anything
        // other than props & listeners & slot
        // work around flow
        var slot = data.slot;
        data = {};
        if (slot) {
            data.slot = slot;
        }
    }
    // install component management hooks onto the placeholder node
    installComponentHooks(data);
    // return a placeholder vnode
    // @ts-expect-error
    var name = getComponentName(Ctor.options) || tag;
    var vnode = new VNode(
    // @ts-expect-error
    "vue-component-".concat(Ctor.cid).concat(name ? "-".concat(name) : ''), data, undefined, undefined, undefined, context, 
    // @ts-expect-error
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);
    return vnode;
}
function createComponentInstanceForVnode(
// we know it's MountedComponentVNode but flow doesn't
vnode, 
// activeInstance in lifecycle state
parent) {
    var options = {
        _isComponent: true,
        _parentVnode: vnode,
        parent: parent
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
        options.render = inlineTemplate.render;
        options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnode.componentOptions.Ctor(options);
}
function installComponentHooks(data) {
    var hooks = data.hook || (data.hook = {});
    for (var i = 0; i < hooksToMerge.length; i++) {
        var key = hooksToMerge[i];
        var existing = hooks[key];
        var toMerge = componentVNodeHooks[key];
        // @ts-expect-error
        if (existing !== toMerge && !(existing && existing._merged)) {
            hooks[key] = existing ? mergeHook(toMerge, existing) : toMerge;
        }
    }
}
function mergeHook(f1, f2) {
    var merged = function (a, b) {
        // flow complains about extra args which is why we use any
        f1(a, b);
        f2(a, b);
    };
    merged._merged = true;
    return merged;
}
// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel(options, data) {
    var prop = (options.model && options.model.prop) || 'value';
    var event = (options.model && options.model.event) || 'input';
    (data.attrs || (data.attrs = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    var existing = on[event];
    var callback = data.model.callback;
    if (isDef(existing)) {
        if (isArray$2(existing)
            ? existing.indexOf(callback) === -1
            : existing !== callback) {
            on[event] = [callback].concat(existing);
        }
    }
    else {
        on[event] = callback;
    }
}

var warn$1 = noop$1;

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config$2.optionMergeStrategies;
/**
 * Helper that recursively merges two data objects together.
 */
function mergeData$1(to, from, recursive) {
    if (recursive === void 0) { recursive = true; }
    if (!from)
        return to;
    var key, toVal, fromVal;
    var keys = hasSymbol$1
        ? Reflect.ownKeys(from)
        : Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
        key = keys[i];
        // in case the object is already observed...
        if (key === '__ob__')
            continue;
        toVal = to[key];
        fromVal = from[key];
        if (!recursive || !hasOwn$1(to, key)) {
            set(to, key, fromVal);
        }
        else if (toVal !== fromVal &&
            isPlainObject$2(toVal) &&
            isPlainObject$2(fromVal)) {
            mergeData$1(toVal, fromVal);
        }
    }
    return to;
}
/**
 * Data
 */
function mergeDataOrFn(parentVal, childVal, vm) {
    if (!vm) {
        // in a Vue.extend merge, both should be functions
        if (!childVal) {
            return parentVal;
        }
        if (!parentVal) {
            return childVal;
        }
        // when parentVal & childVal are both present,
        // we need to return a function that returns the
        // merged result of both functions... no need to
        // check if parentVal is a function here because
        // it has to be a function to pass previous merges.
        return function mergedDataFn() {
            return mergeData$1(isFunction$2(childVal) ? childVal.call(this, this) : childVal, isFunction$2(parentVal) ? parentVal.call(this, this) : parentVal);
        };
    }
    else {
        return function mergedInstanceDataFn() {
            // instance merge
            var instanceData = isFunction$2(childVal)
                ? childVal.call(vm, vm)
                : childVal;
            var defaultData = isFunction$2(parentVal)
                ? parentVal.call(vm, vm)
                : parentVal;
            if (instanceData) {
                return mergeData$1(instanceData, defaultData);
            }
            else {
                return defaultData;
            }
        };
    }
}
strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
        if (childVal && typeof childVal !== 'function') {
            return parentVal;
        }
        return mergeDataOrFn(parentVal, childVal);
    }
    return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */
function mergeLifecycleHook(parentVal, childVal) {
    var res = childVal
        ? parentVal
            ? parentVal.concat(childVal)
            : isArray$2(childVal)
                ? childVal
                : [childVal]
        : parentVal;
    return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks) {
    var res = [];
    for (var i = 0; i < hooks.length; i++) {
        if (res.indexOf(hooks[i]) === -1) {
            res.push(hooks[i]);
        }
    }
    return res;
}
LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeLifecycleHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets(parentVal, childVal, vm, key) {
    var res = Object.create(parentVal || null);
    if (childVal) {
        return extend$3(res, childVal);
    }
    else {
        return res;
    }
}
ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal, vm, key) {
    // work around Firefox's Object.prototype.watch...
    //@ts-expect-error work around
    if (parentVal === nativeWatch)
        parentVal = undefined;
    //@ts-expect-error work around
    if (childVal === nativeWatch)
        childVal = undefined;
    /* istanbul ignore if */
    if (!childVal)
        return Object.create(parentVal || null);
    if (!parentVal)
        return childVal;
    var ret = {};
    extend$3(ret, parentVal);
    for (var key_1 in childVal) {
        var parent_1 = ret[key_1];
        var child = childVal[key_1];
        if (parent_1 && !isArray$2(parent_1)) {
            parent_1 = [parent_1];
        }
        ret[key_1] = parent_1 ? parent_1.concat(child) : isArray$2(child) ? child : [child];
    }
    return ret;
};
/**
 * Other object hashes.
 */
strats.props =
    strats.methods =
        strats.inject =
            strats.computed =
                function (parentVal, childVal, vm, key) {
                    if (childVal && "production" !== 'production') {
                        assertObjectType(key, childVal);
                    }
                    if (!parentVal)
                        return childVal;
                    var ret = Object.create(null);
                    extend$3(ret, parentVal);
                    if (childVal)
                        extend$3(ret, childVal);
                    return ret;
                };
strats.provide = function (parentVal, childVal) {
    if (!parentVal)
        return childVal;
    return function () {
        var ret = Object.create(null);
        mergeData$1(ret, isFunction$2(parentVal) ? parentVal.call(this) : parentVal);
        if (childVal) {
            mergeData$1(ret, isFunction$2(childVal) ? childVal.call(this) : childVal, false // non-recursive
            );
        }
        return ret;
    };
};
/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
};
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps(options, vm) {
    var props = options.props;
    if (!props)
        return;
    var res = {};
    var i, val, name;
    if (isArray$2(props)) {
        i = props.length;
        while (i--) {
            val = props[i];
            if (typeof val === 'string') {
                name = camelize$1(val);
                res[name] = { type: null };
            }
        }
    }
    else if (isPlainObject$2(props)) {
        for (var key in props) {
            val = props[key];
            name = camelize$1(key);
            res[name] = isPlainObject$2(val) ? val : { type: val };
        }
    }
    else ;
    options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */
function normalizeInject(options, vm) {
    var inject = options.inject;
    if (!inject)
        return;
    var normalized = (options.inject = {});
    if (isArray$2(inject)) {
        for (var i = 0; i < inject.length; i++) {
            normalized[inject[i]] = { from: inject[i] };
        }
    }
    else if (isPlainObject$2(inject)) {
        for (var key in inject) {
            var val = inject[key];
            normalized[key] = isPlainObject$2(val)
                ? extend$3({ from: key }, val)
                : { from: val };
        }
    }
    else ;
}
/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives$1(options) {
    var dirs = options.directives;
    if (dirs) {
        for (var key in dirs) {
            var def = dirs[key];
            if (isFunction$2(def)) {
                dirs[key] = { bind: def, update: def };
            }
        }
    }
}
function assertObjectType(name, value, vm) {
    if (!isPlainObject$2(value)) {
        warn$1("Invalid value for option \"".concat(name, "\": expected an Object, ") +
            "but got ".concat(toRawType(value), "."));
    }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions(parent, child, vm) {
    if (isFunction$2(child)) {
        // @ts-expect-error
        child = child.options;
    }
    normalizeProps(child);
    normalizeInject(child);
    normalizeDirectives$1(child);
    // Apply extends and mixins on the child options,
    // but only if it is a raw options object that isn't
    // the result of another mergeOptions call.
    // Only merged options has the _base property.
    if (!child._base) {
        if (child.extends) {
            parent = mergeOptions(parent, child.extends, vm);
        }
        if (child.mixins) {
            for (var i = 0, l = child.mixins.length; i < l; i++) {
                parent = mergeOptions(parent, child.mixins[i], vm);
            }
        }
    }
    var options = {};
    var key;
    for (key in parent) {
        mergeField(key);
    }
    for (key in child) {
        if (!hasOwn$1(parent, key)) {
            mergeField(key);
        }
    }
    function mergeField(key) {
        var strat = strats[key] || defaultStrat;
        options[key] = strat(parent[key], child[key], vm, key);
    }
    return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
        return;
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn$1(assets, id))
        return assets[id];
    var camelizedId = camelize$1(id);
    if (hasOwn$1(assets, camelizedId))
        return assets[camelizedId];
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn$1(assets, PascalCaseId))
        return assets[PascalCaseId];
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    return res;
}

function validateProp(key, propOptions, propsData, vm) {
    var prop = propOptions[key];
    var absent = !hasOwn$1(propsData, key);
    var value = propsData[key];
    // boolean casting
    var booleanIndex = getTypeIndex(Boolean, prop.type);
    if (booleanIndex > -1) {
        if (absent && !hasOwn$1(prop, 'default')) {
            value = false;
        }
        else if (value === '' || value === hyphenate(key)) {
            // only cast empty string / same name to boolean if
            // boolean has higher priority
            var stringIndex = getTypeIndex(String, prop.type);
            if (stringIndex < 0 || booleanIndex < stringIndex) {
                value = true;
            }
        }
    }
    // check default value
    if (value === undefined) {
        value = getPropDefaultValue(vm, prop, key);
        // since the default value is a fresh copy,
        // make sure to observe it.
        var prevShouldObserve = shouldObserve;
        toggleObserving(true);
        observe(value);
        toggleObserving(prevShouldObserve);
    }
    return value;
}
/**
 * Get the default value of a prop.
 */
function getPropDefaultValue(vm, prop, key) {
    // no default, return undefined
    if (!hasOwn$1(prop, 'default')) {
        return undefined;
    }
    var def = prop.default;
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm &&
        vm.$options.propsData &&
        vm.$options.propsData[key] === undefined &&
        vm._props[key] !== undefined) {
        return vm._props[key];
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return isFunction$2(def) && getType(prop.type) !== 'Function'
        ? def.call(vm)
        : def;
}
var functionTypeCheckRE = /^\s*function (\w+)/;
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType(fn) {
    var match = fn && fn.toString().match(functionTypeCheckRE);
    return match ? match[1] : '';
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if (!isArray$2(expectedTypes)) {
        return isSameType(expectedTypes, type) ? 0 : -1;
    }
    for (var i = 0, len = expectedTypes.length; i < len; i++) {
        if (isSameType(expectedTypes[i], type)) {
            return i;
        }
    }
    return -1;
}

var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop$1,
    set: noop$1
};
function proxy(target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter() {
        return this[sourceKey][key];
    };
    sharedPropertyDefinition.set = function proxySetter(val) {
        this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
}
function initState(vm) {
    var opts = vm.$options;
    if (opts.props)
        initProps$1(vm, opts.props);
    // Composition API
    initSetup(vm);
    if (opts.methods)
        initMethods(vm, opts.methods);
    if (opts.data) {
        initData(vm);
    }
    else {
        var ob = observe((vm._data = {}));
        ob && ob.vmCount++;
    }
    if (opts.computed)
        initComputed$1(vm, opts.computed);
    if (opts.watch && opts.watch !== nativeWatch) {
        initWatch(vm, opts.watch);
    }
}
function initProps$1(vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = (vm._props = shallowReactive({}));
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = (vm.$options._propKeys = []);
    var isRoot = !vm.$parent;
    // root instance props should be converted
    if (!isRoot) {
        toggleObserving(false);
    }
    var _loop_1 = function (key) {
        keys.push(key);
        var value = validateProp(key, propsOptions, propsData, vm);
        /* istanbul ignore else */
        {
            defineReactive(props, key, value, undefined, true /* shallow */);
        }
        // static props are already proxied on the component's prototype
        // during Vue.extend(). We only need to proxy props defined at
        // instantiation here.
        if (!(key in vm)) {
            proxy(vm, "_props", key);
        }
    };
    for (var key in propsOptions) {
        _loop_1(key);
    }
    toggleObserving(true);
}
function initData(vm) {
    var data = vm.$options.data;
    data = vm._data = isFunction$2(data) ? getData(data, vm) : data || {};
    if (!isPlainObject$2(data)) {
        data = {};
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    vm.$options.methods;
    var i = keys.length;
    while (i--) {
        var key = keys[i];
        if (props && hasOwn$1(props, key)) ;
        else if (!isReserved(key)) {
            proxy(vm, "_data", key);
        }
    }
    // observe data
    var ob = observe(data);
    ob && ob.vmCount++;
}
function getData(data, vm) {
    // #7573 disable dep collection when invoking data getters
    pushTarget();
    try {
        return data.call(vm, vm);
    }
    catch (e) {
        handleError(e, vm, "data()");
        return {};
    }
    finally {
        popTarget();
    }
}
var computedWatcherOptions = { lazy: true };
function initComputed$1(vm, computed) {
    // $flow-disable-line
    var watchers = (vm._computedWatchers = Object.create(null));
    // computed properties are just getters during SSR
    var isSSR = isServerRendering();
    for (var key in computed) {
        var userDef = computed[key];
        var getter = isFunction$2(userDef) ? userDef : userDef.get;
        if (!isSSR) {
            // create internal watcher for the computed property.
            watchers[key] = new Watcher(vm, getter || noop$1, noop$1, computedWatcherOptions);
        }
        // component-defined computed properties are already defined on the
        // component prototype. We only need to define computed properties defined
        // at instantiation here.
        if (!(key in vm)) {
            defineComputed(vm, key, userDef);
        }
    }
}
function defineComputed(target, key, userDef) {
    var shouldCache = !isServerRendering();
    if (isFunction$2(userDef)) {
        sharedPropertyDefinition.get = shouldCache
            ? createComputedGetter(key)
            : createGetterInvoker(userDef);
        sharedPropertyDefinition.set = noop$1;
    }
    else {
        sharedPropertyDefinition.get = userDef.get
            ? shouldCache && userDef.cache !== false
                ? createComputedGetter(key)
                : createGetterInvoker(userDef.get)
            : noop$1;
        sharedPropertyDefinition.set = userDef.set || noop$1;
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
}
function createComputedGetter(key) {
    return function computedGetter() {
        var watcher = this._computedWatchers && this._computedWatchers[key];
        if (watcher) {
            if (watcher.dirty) {
                watcher.evaluate();
            }
            if (Dep.target) {
                watcher.depend();
            }
            return watcher.value;
        }
    };
}
function createGetterInvoker(fn) {
    return function computedGetter() {
        return fn.call(this, this);
    };
}
function initMethods(vm, methods) {
    vm.$options.props;
    for (var key in methods) {
        vm[key] = typeof methods[key] !== 'function' ? noop$1 : bind$4(methods[key], vm);
    }
}
function initWatch(vm, watch) {
    for (var key in watch) {
        var handler = watch[key];
        if (isArray$2(handler)) {
            for (var i = 0; i < handler.length; i++) {
                createWatcher(vm, key, handler[i]);
            }
        }
        else {
            createWatcher(vm, key, handler);
        }
    }
}
function createWatcher(vm, expOrFn, handler, options) {
    if (isPlainObject$2(handler)) {
        options = handler;
        handler = handler.handler;
    }
    if (typeof handler === 'string') {
        handler = vm[handler];
    }
    return vm.$watch(expOrFn, handler, options);
}
function stateMixin(Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () {
        return this._data;
    };
    var propsDef = {};
    propsDef.get = function () {
        return this._props;
    };
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);
    Vue.prototype.$set = set;
    Vue.prototype.$delete = del$1;
    Vue.prototype.$watch = function (expOrFn, cb, options) {
        var vm = this;
        if (isPlainObject$2(cb)) {
            return createWatcher(vm, expOrFn, cb, options);
        }
        options = options || {};
        options.user = true;
        var watcher = new Watcher(vm, expOrFn, cb, options);
        if (options.immediate) {
            var info = "callback for immediate watcher \"".concat(watcher.expression, "\"");
            pushTarget();
            invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
            popTarget();
        }
        return function unwatchFn() {
            watcher.teardown();
        };
    };
}

var uid = 0;
function initMixin$1(Vue) {
    Vue.prototype._init = function (options) {
        var vm = this;
        // a uid
        vm._uid = uid++;
        // a flag to mark this as a Vue instance without having to do instanceof
        // check
        vm._isVue = true;
        // avoid instances from being observed
        vm.__v_skip = true;
        // effect scope
        vm._scope = new EffectScope(true /* detached */);
        // #13134 edge case where a child component is manually created during the
        // render of a parent component
        vm._scope.parent = undefined;
        vm._scope._vm = true;
        // merge options
        if (options && options._isComponent) {
            // optimize internal component instantiation
            // since dynamic options merging is pretty slow, and none of the
            // internal component options needs special treatment.
            initInternalComponent(vm, options);
        }
        else {
            vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
        }
        /* istanbul ignore else */
        {
            vm._renderProxy = vm;
        }
        // expose real self
        vm._self = vm;
        initLifecycle(vm);
        initEvents(vm);
        initRender(vm);
        callHook$1(vm, 'beforeCreate', undefined, false /* setContext */);
        initInjections(vm); // resolve injections before data/props
        initState(vm);
        initProvide(vm); // resolve provide after data/props
        callHook$1(vm, 'created');
        if (vm.$options.el) {
            vm.$mount(vm.$options.el);
        }
    };
}
function initInternalComponent(vm, options) {
    var opts = (vm.$options = Object.create(vm.constructor.options));
    // doing this because it's faster than dynamic enumeration.
    var parentVnode = options._parentVnode;
    opts.parent = options.parent;
    opts._parentVnode = parentVnode;
    var vnodeComponentOptions = parentVnode.componentOptions;
    opts.propsData = vnodeComponentOptions.propsData;
    opts._parentListeners = vnodeComponentOptions.listeners;
    opts._renderChildren = vnodeComponentOptions.children;
    opts._componentTag = vnodeComponentOptions.tag;
    if (options.render) {
        opts.render = options.render;
        opts.staticRenderFns = options.staticRenderFns;
    }
}
function resolveConstructorOptions(Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
        var superOptions = resolveConstructorOptions(Ctor.super);
        var cachedSuperOptions = Ctor.superOptions;
        if (superOptions !== cachedSuperOptions) {
            // super option changed,
            // need to resolve new options.
            Ctor.superOptions = superOptions;
            // check if there are any late-modified/attached options (#4976)
            var modifiedOptions = resolveModifiedOptions(Ctor);
            // update base extend options
            if (modifiedOptions) {
                extend$3(Ctor.extendOptions, modifiedOptions);
            }
            options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
            if (options.name) {
                options.components[options.name] = Ctor;
            }
        }
    }
    return options;
}
function resolveModifiedOptions(Ctor) {
    var modified;
    var latest = Ctor.options;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
        if (latest[key] !== sealed[key]) {
            if (!modified)
                modified = {};
            modified[key] = latest[key];
        }
    }
    return modified;
}

function Vue$1(options) {
    this._init(options);
}
//@ts-expect-error Vue has function type
initMixin$1(Vue$1);
//@ts-expect-error Vue has function type
stateMixin(Vue$1);
//@ts-expect-error Vue has function type
eventsMixin(Vue$1);
//@ts-expect-error Vue has function type
lifecycleMixin(Vue$1);
//@ts-expect-error Vue has function type
renderMixin(Vue$1);

function initUse(Vue) {
    Vue.use = function (plugin) {
        var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
        if (installedPlugins.indexOf(plugin) > -1) {
            return this;
        }
        // additional parameters
        var args = toArray$1(arguments, 1);
        args.unshift(this);
        if (isFunction$2(plugin.install)) {
            plugin.install.apply(plugin, args);
        }
        else if (isFunction$2(plugin)) {
            plugin.apply(null, args);
        }
        installedPlugins.push(plugin);
        return this;
    };
}

function initMixin(Vue) {
    Vue.mixin = function (mixin) {
        this.options = mergeOptions(this.options, mixin);
        return this;
    };
}

function initExtend(Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;
    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
        extendOptions = extendOptions || {};
        var Super = this;
        var SuperId = Super.cid;
        var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
        if (cachedCtors[SuperId]) {
            return cachedCtors[SuperId];
        }
        var name = getComponentName(extendOptions) || getComponentName(Super.options);
        var Sub = function VueComponent(options) {
            this._init(options);
        };
        Sub.prototype = Object.create(Super.prototype);
        Sub.prototype.constructor = Sub;
        Sub.cid = cid++;
        Sub.options = mergeOptions(Super.options, extendOptions);
        Sub['super'] = Super;
        // For props and computed properties, we define the proxy getters on
        // the Vue instances at extension time, on the extended prototype. This
        // avoids Object.defineProperty calls for each instance created.
        if (Sub.options.props) {
            initProps(Sub);
        }
        if (Sub.options.computed) {
            initComputed(Sub);
        }
        // allow further extension/mixin/plugin usage
        Sub.extend = Super.extend;
        Sub.mixin = Super.mixin;
        Sub.use = Super.use;
        // create asset registers, so extended classes
        // can have their private assets too.
        ASSET_TYPES.forEach(function (type) {
            Sub[type] = Super[type];
        });
        // enable recursive self-lookup
        if (name) {
            Sub.options.components[name] = Sub;
        }
        // keep a reference to the super options at extension time.
        // later at instantiation we can check if Super's options have
        // been updated.
        Sub.superOptions = Super.options;
        Sub.extendOptions = extendOptions;
        Sub.sealedOptions = extend$3({}, Sub.options);
        // cache constructor
        cachedCtors[SuperId] = Sub;
        return Sub;
    };
}
function initProps(Comp) {
    var props = Comp.options.props;
    for (var key in props) {
        proxy(Comp.prototype, "_props", key);
    }
}
function initComputed(Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
        defineComputed(Comp.prototype, key, computed[key]);
    }
}

function initAssetRegisters(Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
        // @ts-expect-error function is not exact same type
        Vue[type] = function (id, definition) {
            if (!definition) {
                return this.options[type + 's'][id];
            }
            else {
                if (type === 'component' && isPlainObject$2(definition)) {
                    // @ts-expect-error
                    definition.name = definition.name || id;
                    definition = this.options._base.extend(definition);
                }
                if (type === 'directive' && isFunction$2(definition)) {
                    definition = { bind: definition, update: definition };
                }
                this.options[type + 's'][id] = definition;
                return definition;
            }
        };
    });
}

function _getComponentName(opts) {
    return opts && (getComponentName(opts.Ctor.options) || opts.tag);
}
function matches(pattern, name) {
    if (isArray$2(pattern)) {
        return pattern.indexOf(name) > -1;
    }
    else if (typeof pattern === 'string') {
        return pattern.split(',').indexOf(name) > -1;
    }
    else if (isRegExp(pattern)) {
        return pattern.test(name);
    }
    /* istanbul ignore next */
    return false;
}
function pruneCache(keepAliveInstance, filter) {
    var cache = keepAliveInstance.cache, keys = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode, $vnode = keepAliveInstance.$vnode;
    for (var key in cache) {
        var entry = cache[key];
        if (entry) {
            var name_1 = entry.name;
            if (name_1 && !filter(name_1)) {
                pruneCacheEntry(cache, key, keys, _vnode);
            }
        }
    }
    $vnode.componentOptions.children = undefined;
}
function pruneCacheEntry(cache, key, keys, current) {
    var entry = cache[key];
    if (entry && (!current || entry.tag !== current.tag)) {
        // @ts-expect-error can be undefined
        entry.componentInstance.$destroy();
    }
    cache[key] = null;
    remove$2(keys, key);
}
var patternTypes = [String, RegExp, Array];
// TODO defineComponent
var KeepAlive = {
    name: 'keep-alive',
    abstract: true,
    props: {
        include: patternTypes,
        exclude: patternTypes,
        max: [String, Number]
    },
    methods: {
        cacheVNode: function () {
            var _a = this, cache = _a.cache, keys = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache;
            if (vnodeToCache) {
                var tag = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions;
                cache[keyToCache] = {
                    name: _getComponentName(componentOptions),
                    tag: tag,
                    componentInstance: componentInstance
                };
                keys.push(keyToCache);
                // prune oldest entry
                if (this.max && keys.length > parseInt(this.max)) {
                    pruneCacheEntry(cache, keys[0], keys, this._vnode);
                }
                this.vnodeToCache = null;
            }
        }
    },
    created: function () {
        this.cache = Object.create(null);
        this.keys = [];
    },
    destroyed: function () {
        for (var key in this.cache) {
            pruneCacheEntry(this.cache, key, this.keys);
        }
    },
    mounted: function () {
        var _this = this;
        this.cacheVNode();
        this.$watch('include', function (val) {
            pruneCache(_this, function (name) { return matches(val, name); });
        });
        this.$watch('exclude', function (val) {
            pruneCache(_this, function (name) { return !matches(val, name); });
        });
    },
    updated: function () {
        this.cacheVNode();
    },
    render: function () {
        var slot = this.$slots.default;
        var vnode = getFirstComponentChild(slot);
        var componentOptions = vnode && vnode.componentOptions;
        if (componentOptions) {
            // check pattern
            var name_2 = _getComponentName(componentOptions);
            var _a = this, include = _a.include, exclude = _a.exclude;
            if (
            // not included
            (include && (!name_2 || !matches(include, name_2))) ||
                // excluded
                (exclude && name_2 && matches(exclude, name_2))) {
                return vnode;
            }
            var _b = this, cache = _b.cache, keys = _b.keys;
            var key = vnode.key == null
                ? // same constructor may get registered as different local components
                    // so cid alone is not enough (#3269)
                    componentOptions.Ctor.cid +
                        (componentOptions.tag ? "::".concat(componentOptions.tag) : '')
                : vnode.key;
            if (cache[key]) {
                vnode.componentInstance = cache[key].componentInstance;
                // make current key freshest
                remove$2(keys, key);
                keys.push(key);
            }
            else {
                // delay setting the cache until update
                this.vnodeToCache = vnode;
                this.keyToCache = key;
            }
            // @ts-expect-error can vnode.data can be undefined
            vnode.data.keepAlive = true;
        }
        return vnode || (slot && slot[0]);
    }
};

var builtInComponents = {
    KeepAlive: KeepAlive
};

function initGlobalAPI(Vue) {
    // config
    var configDef = {};
    configDef.get = function () { return config$2; };
    Object.defineProperty(Vue, 'config', configDef);
    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
        warn: warn$1,
        extend: extend$3,
        mergeOptions: mergeOptions,
        defineReactive: defineReactive
    };
    Vue.set = set;
    Vue.delete = del$1;
    Vue.nextTick = nextTick;
    // 2.6 explicit observable API
    Vue.observable = function (obj) {
        observe(obj);
        return obj;
    };
    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
        Vue.options[type + 's'] = Object.create(null);
    });
    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;
    extend$3(Vue.options.components, builtInComponents);
    initUse(Vue);
    initMixin(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
}

initGlobalAPI(Vue$1);
Object.defineProperty(Vue$1.prototype, '$isServer', {
    get: isServerRendering
});
Object.defineProperty(Vue$1.prototype, '$ssrContext', {
    get: function () {
        /* istanbul ignore next */
        return this.$vnode && this.$vnode.ssrContext;
    }
});
// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue$1, 'FunctionalRenderContext', {
    value: FunctionalRenderContext
});
Vue$1.version = version;

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');
// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
    return ((attr === 'value' && acceptValue(tag) && type !== 'button') ||
        (attr === 'selected' && tag === 'option') ||
        (attr === 'checked' && tag === 'input') ||
        (attr === 'muted' && tag === 'video'));
};
var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');
var convertEnumeratedValue = function (key, value) {
    return isFalsyAttrValue(value) || value === 'false'
        ? 'false'
        : // allow arbitrary string value for contenteditable
            key === 'contenteditable' && isValidContentEditableValue(value)
                ? value
                : 'true';
};
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
    'required,reversed,scoped,seamless,selected,sortable,' +
    'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';
var isXlink = function (name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};
var getXlinkProp = function (name) {
    return isXlink(name) ? name.slice(6, name.length) : '';
};
var isFalsyAttrValue = function (val) {
    return val == null || val === false;
};

function genClassForVnode(vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
        childNode = childNode.componentInstance._vnode;
        if (childNode && childNode.data) {
            data = mergeClassData(childNode.data, data);
        }
    }
    // @ts-expect-error parentNode.parent not VNodeWithData
    while (isDef((parentNode = parentNode.parent))) {
        if (parentNode && parentNode.data) {
            data = mergeClassData(data, parentNode.data);
        }
    }
    return renderClass(data.staticClass, data.class);
}
function mergeClassData(child, parent) {
    return {
        staticClass: concat(child.staticClass, parent.staticClass),
        class: isDef(child.class) ? [child.class, parent.class] : parent.class
    };
}
function renderClass(staticClass, dynamicClass) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
        return concat(staticClass, stringifyClass(dynamicClass));
    }
    /* istanbul ignore next */
    return '';
}
function concat(a, b) {
    return a ? (b ? a + ' ' + b : a) : b || '';
}
function stringifyClass(value) {
    if (Array.isArray(value)) {
        return stringifyArray(value);
    }
    if (isObject$3(value)) {
        return stringifyObject(value);
    }
    if (typeof value === 'string') {
        return value;
    }
    /* istanbul ignore next */
    return '';
}
function stringifyArray(value) {
    var res = '';
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
        if (isDef((stringified = stringifyClass(value[i]))) && stringified !== '') {
            if (res)
                res += ' ';
            res += stringified;
        }
    }
    return res;
}
function stringifyObject(value) {
    var res = '';
    for (var key in value) {
        if (value[key]) {
            if (res)
                res += ' ';
            res += key;
        }
    }
    return res;
}

var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' +
    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
    'embed,object,param,source,canvas,script,noscript,del,ins,' +
    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
    'output,progress,select,textarea,' +
    'details,dialog,menu,menuitem,summary,' +
    'content,element,shadow,template,blockquote,iframe,tfoot');
// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
    'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);
var isReservedTag = function (tag) {
    return isHTMLTag(tag) || isSVG(tag);
};
function getTagNamespace(tag) {
    if (isSVG(tag)) {
        return 'svg';
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
        return 'math';
    }
}
var unknownElementCache = Object.create(null);
function isUnknownElement(tag) {
    /* istanbul ignore if */
    if (!inBrowser$1) {
        return true;
    }
    if (isReservedTag(tag)) {
        return false;
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
        return unknownElementCache[tag];
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
        // https://stackoverflow.com/a/28210364/1070244
        return (unknownElementCache[tag] =
            el.constructor === window.HTMLUnknownElement ||
                el.constructor === window.HTMLElement);
    }
    else {
        return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()));
    }
}
var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/**
 * Query an element selector if it's not an element already.
 */
function query(el) {
    if (typeof el === 'string') {
        var selected = document.querySelector(el);
        if (!selected) {
            return document.createElement('div');
        }
        return selected;
    }
    else {
        return el;
    }
}

function createElement(tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
        return elm;
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data &&
        vnode.data.attrs &&
        vnode.data.attrs.multiple !== undefined) {
        elm.setAttribute('multiple', 'multiple');
    }
    return elm;
}
function createElementNS(namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName);
}
function createTextNode(text) {
    return document.createTextNode(text);
}
function createComment(text) {
    return document.createComment(text);
}
function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
    node.removeChild(child);
}
function appendChild(node, child) {
    node.appendChild(child);
}
function parentNode(node) {
    return node.parentNode;
}
function nextSibling(node) {
    return node.nextSibling;
}
function tagName(node) {
    return node.tagName;
}
function setTextContent(node, text) {
    node.textContent = text;
}
function setStyleScope(node, scopeId) {
    node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createElement: createElement,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

var ref = {
    create: function (_, vnode) {
        registerRef(vnode);
    },
    update: function (oldVnode, vnode) {
        if (oldVnode.data.ref !== vnode.data.ref) {
            registerRef(oldVnode, true);
            registerRef(vnode);
        }
    },
    destroy: function (vnode) {
        registerRef(vnode, true);
    }
};
function registerRef(vnode, isRemoval) {
    var ref = vnode.data.ref;
    if (!isDef(ref))
        return;
    var vm = vnode.context;
    var refValue = vnode.componentInstance || vnode.elm;
    var value = isRemoval ? null : refValue;
    var $refsValue = isRemoval ? undefined : refValue;
    if (isFunction$2(ref)) {
        invokeWithErrorHandling(ref, vm, [value], vm, "template ref function");
        return;
    }
    var isFor = vnode.data.refInFor;
    var _isString = typeof ref === 'string' || typeof ref === 'number';
    var _isRef = isRef(ref);
    var refs = vm.$refs;
    if (_isString || _isRef) {
        if (isFor) {
            var existing = _isString ? refs[ref] : ref.value;
            if (isRemoval) {
                isArray$2(existing) && remove$2(existing, refValue);
            }
            else {
                if (!isArray$2(existing)) {
                    if (_isString) {
                        refs[ref] = [refValue];
                        setSetupRef(vm, ref, refs[ref]);
                    }
                    else {
                        ref.value = [refValue];
                    }
                }
                else if (!existing.includes(refValue)) {
                    existing.push(refValue);
                }
            }
        }
        else if (_isString) {
            if (isRemoval && refs[ref] !== refValue) {
                return;
            }
            refs[ref] = $refsValue;
            setSetupRef(vm, ref, value);
        }
        else if (_isRef) {
            if (isRemoval && ref.value !== refValue) {
                return;
            }
            ref.value = value;
        }
        else ;
    }
}
function setSetupRef(_a, key, val) {
    var _setupState = _a._setupState;
    if (_setupState && hasOwn$1(_setupState, key)) {
        if (isRef(_setupState[key])) {
            _setupState[key].value = val;
        }
        else {
            _setupState[key] = val;
        }
    }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */
var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];
function sameVnode(a, b) {
    return (a.key === b.key &&
        a.asyncFactory === b.asyncFactory &&
        ((a.tag === b.tag &&
            a.isComment === b.isComment &&
            isDef(a.data) === isDef(b.data) &&
            sameInputType(a, b)) ||
            (isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error))));
}
function sameInputType(a, b) {
    if (a.tag !== 'input')
        return true;
    var i;
    var typeA = isDef((i = a.data)) && isDef((i = i.attrs)) && i.type;
    var typeB = isDef((i = b.data)) && isDef((i = i.attrs)) && i.type;
    return typeA === typeB || (isTextInputType(typeA) && isTextInputType(typeB));
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
        key = children[i].key;
        if (isDef(key))
            map[key] = i;
    }
    return map;
}
function createPatchFunction(backend) {
    var i, j;
    var cbs = {};
    var modules = backend.modules, nodeOps = backend.nodeOps;
    for (i = 0; i < hooks.length; ++i) {
        cbs[hooks[i]] = [];
        for (j = 0; j < modules.length; ++j) {
            if (isDef(modules[j][hooks[i]])) {
                cbs[hooks[i]].push(modules[j][hooks[i]]);
            }
        }
    }
    function emptyNodeAt(elm) {
        return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
    }
    function createRmCb(childElm, listeners) {
        function remove() {
            if (--remove.listeners === 0) {
                removeNode(childElm);
            }
        }
        remove.listeners = listeners;
        return remove;
    }
    function removeNode(el) {
        var parent = nodeOps.parentNode(el);
        // element may have already been removed due to v-html / v-text
        if (isDef(parent)) {
            nodeOps.removeChild(parent, el);
        }
    }
    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
        if (isDef(vnode.elm) && isDef(ownerArray)) {
            // This vnode was used in a previous render!
            // now it's used as a new node, overwriting its elm would cause
            // potential patch errors down the road when it's used as an insertion
            // reference node. Instead, we clone the node on-demand before creating
            // associated DOM element for it.
            vnode = ownerArray[index] = cloneVNode(vnode);
        }
        vnode.isRootInsert = !nested; // for transition enter check
        if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
            return;
        }
        var data = vnode.data;
        var children = vnode.children;
        var tag = vnode.tag;
        if (isDef(tag)) {
            vnode.elm = vnode.ns
                ? nodeOps.createElementNS(vnode.ns, tag)
                : nodeOps.createElement(tag, vnode);
            setScope(vnode);
            createChildren(vnode, children, insertedVnodeQueue);
            if (isDef(data)) {
                invokeCreateHooks(vnode, insertedVnodeQueue);
            }
            insert(parentElm, vnode.elm, refElm);
        }
        else if (isTrue(vnode.isComment)) {
            vnode.elm = nodeOps.createComment(vnode.text);
            insert(parentElm, vnode.elm, refElm);
        }
        else {
            vnode.elm = nodeOps.createTextNode(vnode.text);
            insert(parentElm, vnode.elm, refElm);
        }
    }
    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
        var i = vnode.data;
        if (isDef(i)) {
            var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
            if (isDef((i = i.hook)) && isDef((i = i.init))) {
                i(vnode, false /* hydrating */);
            }
            // after calling the init hook, if the vnode is a child component
            // it should've created a child instance and mounted it. the child
            // component also has set the placeholder vnode's elm.
            // in that case we can just return the element and be done.
            if (isDef(vnode.componentInstance)) {
                initComponent(vnode, insertedVnodeQueue);
                insert(parentElm, vnode.elm, refElm);
                if (isTrue(isReactivated)) {
                    reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
                }
                return true;
            }
        }
    }
    function initComponent(vnode, insertedVnodeQueue) {
        if (isDef(vnode.data.pendingInsert)) {
            insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
            vnode.data.pendingInsert = null;
        }
        vnode.elm = vnode.componentInstance.$el;
        if (isPatchable(vnode)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            setScope(vnode);
        }
        else {
            // empty component root.
            // skip all element-related modules except for ref (#3455)
            registerRef(vnode);
            // make sure to invoke the insert hook
            insertedVnodeQueue.push(vnode);
        }
    }
    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
        var i;
        // hack for #4339: a reactivated component with inner transition
        // does not trigger because the inner node's created hooks are not called
        // again. It's not ideal to involve module-specific logic in here but
        // there doesn't seem to be a better way to do it.
        var innerNode = vnode;
        while (innerNode.componentInstance) {
            innerNode = innerNode.componentInstance._vnode;
            if (isDef((i = innerNode.data)) && isDef((i = i.transition))) {
                for (i = 0; i < cbs.activate.length; ++i) {
                    cbs.activate[i](emptyNode, innerNode);
                }
                insertedVnodeQueue.push(innerNode);
                break;
            }
        }
        // unlike a newly created component,
        // a reactivated keep-alive component doesn't insert itself
        insert(parentElm, vnode.elm, refElm);
    }
    function insert(parent, elm, ref) {
        if (isDef(parent)) {
            if (isDef(ref)) {
                if (nodeOps.parentNode(ref) === parent) {
                    nodeOps.insertBefore(parent, elm, ref);
                }
            }
            else {
                nodeOps.appendChild(parent, elm);
            }
        }
    }
    function createChildren(vnode, children, insertedVnodeQueue) {
        if (isArray$2(children)) {
            for (var i_1 = 0; i_1 < children.length; ++i_1) {
                createElm(children[i_1], insertedVnodeQueue, vnode.elm, null, true, children, i_1);
            }
        }
        else if (isPrimitive(vnode.text)) {
            nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
        }
    }
    function isPatchable(vnode) {
        while (vnode.componentInstance) {
            vnode = vnode.componentInstance._vnode;
        }
        return isDef(vnode.tag);
    }
    function invokeCreateHooks(vnode, insertedVnodeQueue) {
        for (var i_2 = 0; i_2 < cbs.create.length; ++i_2) {
            cbs.create[i_2](emptyNode, vnode);
        }
        i = vnode.data.hook; // Reuse variable
        if (isDef(i)) {
            if (isDef(i.create))
                i.create(emptyNode, vnode);
            if (isDef(i.insert))
                insertedVnodeQueue.push(vnode);
        }
    }
    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope(vnode) {
        var i;
        if (isDef((i = vnode.fnScopeId))) {
            nodeOps.setStyleScope(vnode.elm, i);
        }
        else {
            var ancestor = vnode;
            while (ancestor) {
                if (isDef((i = ancestor.context)) && isDef((i = i.$options._scopeId))) {
                    nodeOps.setStyleScope(vnode.elm, i);
                }
                ancestor = ancestor.parent;
            }
        }
        // for slot content they should also get the scopeId from the host instance.
        if (isDef((i = activeInstance)) &&
            i !== vnode.context &&
            i !== vnode.fnContext &&
            isDef((i = i.$options._scopeId))) {
            nodeOps.setStyleScope(vnode.elm, i);
        }
    }
    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
            createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
        }
    }
    function invokeDestroyHook(vnode) {
        var i, j;
        var data = vnode.data;
        if (isDef(data)) {
            if (isDef((i = data.hook)) && isDef((i = i.destroy)))
                i(vnode);
            for (i = 0; i < cbs.destroy.length; ++i)
                cbs.destroy[i](vnode);
        }
        if (isDef((i = vnode.children))) {
            for (j = 0; j < vnode.children.length; ++j) {
                invokeDestroyHook(vnode.children[j]);
            }
        }
    }
    function removeVnodes(vnodes, startIdx, endIdx) {
        for (; startIdx <= endIdx; ++startIdx) {
            var ch = vnodes[startIdx];
            if (isDef(ch)) {
                if (isDef(ch.tag)) {
                    removeAndInvokeRemoveHook(ch);
                    invokeDestroyHook(ch);
                }
                else {
                    // Text node
                    removeNode(ch.elm);
                }
            }
        }
    }
    function removeAndInvokeRemoveHook(vnode, rm) {
        if (isDef(rm) || isDef(vnode.data)) {
            var i_3;
            var listeners = cbs.remove.length + 1;
            if (isDef(rm)) {
                // we have a recursively passed down rm callback
                // increase the listeners count
                rm.listeners += listeners;
            }
            else {
                // directly removing
                rm = createRmCb(vnode.elm, listeners);
            }
            // recursively invoke hooks on child component root node
            if (isDef((i_3 = vnode.componentInstance)) &&
                isDef((i_3 = i_3._vnode)) &&
                isDef(i_3.data)) {
                removeAndInvokeRemoveHook(i_3, rm);
            }
            for (i_3 = 0; i_3 < cbs.remove.length; ++i_3) {
                cbs.remove[i_3](vnode, rm);
            }
            if (isDef((i_3 = vnode.data.hook)) && isDef((i_3 = i_3.remove))) {
                i_3(vnode, rm);
            }
            else {
                rm();
            }
        }
        else {
            removeNode(vnode.elm);
        }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
        var oldStartIdx = 0;
        var newStartIdx = 0;
        var oldEndIdx = oldCh.length - 1;
        var oldStartVnode = oldCh[0];
        var oldEndVnode = oldCh[oldEndIdx];
        var newEndIdx = newCh.length - 1;
        var newStartVnode = newCh[0];
        var newEndVnode = newCh[newEndIdx];
        var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
        // removeOnly is a special flag used only by <transition-group>
        // to ensure removed elements stay in correct relative positions
        // during leaving transitions
        var canMove = !removeOnly;
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (isUndef(oldStartVnode)) {
                oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
            }
            else if (isUndef(oldEndVnode)) {
                oldEndVnode = oldCh[--oldEndIdx];
            }
            else if (sameVnode(oldStartVnode, newStartVnode)) {
                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                oldStartVnode = oldCh[++oldStartIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else if (sameVnode(oldEndVnode, newEndVnode)) {
                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                oldEndVnode = oldCh[--oldEndIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newEndVnode)) {
                // Vnode moved right
                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                canMove &&
                    nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
                oldStartVnode = oldCh[++oldStartIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldEndVnode, newStartVnode)) {
                // Vnode moved left
                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                canMove &&
                    nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                oldEndVnode = oldCh[--oldEndIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                if (isUndef(oldKeyToIdx))
                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                idxInOld = isDef(newStartVnode.key)
                    ? oldKeyToIdx[newStartVnode.key]
                    : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
                if (isUndef(idxInOld)) {
                    // New element
                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                }
                else {
                    vnodeToMove = oldCh[idxInOld];
                    if (sameVnode(vnodeToMove, newStartVnode)) {
                        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                        oldCh[idxInOld] = undefined;
                        canMove &&
                            nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                    }
                    else {
                        // same key but different element. treat as new element
                        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                    }
                }
                newStartVnode = newCh[++newStartIdx];
            }
        }
        if (oldStartIdx > oldEndIdx) {
            refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
        }
        else if (newStartIdx > newEndIdx) {
            removeVnodes(oldCh, oldStartIdx, oldEndIdx);
        }
    }
    function findIdxInOld(node, oldCh, start, end) {
        for (var i_5 = start; i_5 < end; i_5++) {
            var c = oldCh[i_5];
            if (isDef(c) && sameVnode(node, c))
                return i_5;
        }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
        if (oldVnode === vnode) {
            return;
        }
        if (isDef(vnode.elm) && isDef(ownerArray)) {
            // clone reused vnode
            vnode = ownerArray[index] = cloneVNode(vnode);
        }
        var elm = (vnode.elm = oldVnode.elm);
        if (isTrue(oldVnode.isAsyncPlaceholder)) {
            if (isDef(vnode.asyncFactory.resolved)) {
                hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
            }
            else {
                vnode.isAsyncPlaceholder = true;
            }
            return;
        }
        // reuse element for static trees.
        // note we only do this if the vnode is cloned -
        // if the new node is not cloned it means the render functions have been
        // reset by the hot-reload-api and we need to do a proper re-render.
        if (isTrue(vnode.isStatic) &&
            isTrue(oldVnode.isStatic) &&
            vnode.key === oldVnode.key &&
            (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
            vnode.componentInstance = oldVnode.componentInstance;
            return;
        }
        var i;
        var data = vnode.data;
        if (isDef(data) && isDef((i = data.hook)) && isDef((i = i.prepatch))) {
            i(oldVnode, vnode);
        }
        var oldCh = oldVnode.children;
        var ch = vnode.children;
        if (isDef(data) && isPatchable(vnode)) {
            for (i = 0; i < cbs.update.length; ++i)
                cbs.update[i](oldVnode, vnode);
            if (isDef((i = data.hook)) && isDef((i = i.update)))
                i(oldVnode, vnode);
        }
        if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
                if (oldCh !== ch)
                    updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
            }
            else if (isDef(ch)) {
                if (isDef(oldVnode.text))
                    nodeOps.setTextContent(elm, '');
                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            }
            else if (isDef(oldCh)) {
                removeVnodes(oldCh, 0, oldCh.length - 1);
            }
            else if (isDef(oldVnode.text)) {
                nodeOps.setTextContent(elm, '');
            }
        }
        else if (oldVnode.text !== vnode.text) {
            nodeOps.setTextContent(elm, vnode.text);
        }
        if (isDef(data)) {
            if (isDef((i = data.hook)) && isDef((i = i.postpatch)))
                i(oldVnode, vnode);
        }
    }
    function invokeInsertHook(vnode, queue, initial) {
        // delay insert hooks for component root nodes, invoke them after the
        // element is really inserted
        if (isTrue(initial) && isDef(vnode.parent)) {
            vnode.parent.data.pendingInsert = queue;
        }
        else {
            for (var i_6 = 0; i_6 < queue.length; ++i_6) {
                queue[i_6].data.hook.insert(queue[i_6]);
            }
        }
    }
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    // Note: style is excluded because it relies on initial clone for future
    // deep updates (#7063).
    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');
    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
        var i;
        var tag = vnode.tag, data = vnode.data, children = vnode.children;
        inVPre = inVPre || (data && data.pre);
        vnode.elm = elm;
        if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
            vnode.isAsyncPlaceholder = true;
            return true;
        }
        if (isDef(data)) {
            if (isDef((i = data.hook)) && isDef((i = i.init)))
                i(vnode, true /* hydrating */);
            if (isDef((i = vnode.componentInstance))) {
                // child component. it should have hydrated its own tree.
                initComponent(vnode, insertedVnodeQueue);
                return true;
            }
        }
        if (isDef(tag)) {
            if (isDef(children)) {
                // empty element, allow client to pick up and populate children
                if (!elm.hasChildNodes()) {
                    createChildren(vnode, children, insertedVnodeQueue);
                }
                else {
                    // v-html and domProps: innerHTML
                    if (isDef((i = data)) &&
                        isDef((i = i.domProps)) &&
                        isDef((i = i.innerHTML))) {
                        if (i !== elm.innerHTML) {
                            return false;
                        }
                    }
                    else {
                        // iterate and compare children lists
                        var childrenMatch = true;
                        var childNode = elm.firstChild;
                        for (var i_7 = 0; i_7 < children.length; i_7++) {
                            if (!childNode ||
                                !hydrate(childNode, children[i_7], insertedVnodeQueue, inVPre)) {
                                childrenMatch = false;
                                break;
                            }
                            childNode = childNode.nextSibling;
                        }
                        // if childNode is not null, it means the actual childNodes list is
                        // longer than the virtual children list.
                        if (!childrenMatch || childNode) {
                            return false;
                        }
                    }
                }
            }
            if (isDef(data)) {
                var fullInvoke = false;
                for (var key in data) {
                    if (!isRenderedModule(key)) {
                        fullInvoke = true;
                        invokeCreateHooks(vnode, insertedVnodeQueue);
                        break;
                    }
                }
                if (!fullInvoke && data['class']) {
                    // ensure collecting deps for deep class bindings for future updates
                    traverse(data['class']);
                }
            }
        }
        else if (elm.data !== vnode.text) {
            elm.data = vnode.text;
        }
        return true;
    }
    return function patch(oldVnode, vnode, hydrating, removeOnly) {
        if (isUndef(vnode)) {
            if (isDef(oldVnode))
                invokeDestroyHook(oldVnode);
            return;
        }
        var isInitialPatch = false;
        var insertedVnodeQueue = [];
        if (isUndef(oldVnode)) {
            // empty mount (likely as component), create new root element
            isInitialPatch = true;
            createElm(vnode, insertedVnodeQueue);
        }
        else {
            var isRealElement = isDef(oldVnode.nodeType);
            if (!isRealElement && sameVnode(oldVnode, vnode)) {
                // patch existing root node
                patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
            }
            else {
                if (isRealElement) {
                    // mounting to a real element
                    // check if this is server-rendered content and if we can perform
                    // a successful hydration.
                    if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                        oldVnode.removeAttribute(SSR_ATTR);
                        hydrating = true;
                    }
                    if (isTrue(hydrating)) {
                        if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                            invokeInsertHook(vnode, insertedVnodeQueue, true);
                            return oldVnode;
                        }
                    }
                    // either not server-rendered, or hydration failed.
                    // create an empty node and replace it
                    oldVnode = emptyNodeAt(oldVnode);
                }
                // replacing existing element
                var oldElm = oldVnode.elm;
                var parentElm = nodeOps.parentNode(oldElm);
                // create new node
                createElm(vnode, insertedVnodeQueue, 
                // extremely rare edge case: do not insert if old element is in a
                // leaving transition. Only happens when combining transition +
                // keep-alive + HOCs. (#4590)
                oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm));
                // update parent placeholder node element, recursively
                if (isDef(vnode.parent)) {
                    var ancestor = vnode.parent;
                    var patchable = isPatchable(vnode);
                    while (ancestor) {
                        for (var i_8 = 0; i_8 < cbs.destroy.length; ++i_8) {
                            cbs.destroy[i_8](ancestor);
                        }
                        ancestor.elm = vnode.elm;
                        if (patchable) {
                            for (var i_9 = 0; i_9 < cbs.create.length; ++i_9) {
                                cbs.create[i_9](emptyNode, ancestor);
                            }
                            // #6513
                            // invoke insert hooks that may have been merged by create hooks.
                            // e.g. for directives that uses the "inserted" hook.
                            var insert_1 = ancestor.data.hook.insert;
                            if (insert_1.merged) {
                                // start at index 1 to avoid re-invoking component mounted hook
                                // clone insert hooks to avoid being mutated during iteration.
                                // e.g. for customed directives under transition group.
                                var cloned = insert_1.fns.slice(1);
                                for (var i_10 = 0; i_10 < cloned.length; i_10++) {
                                    cloned[i_10]();
                                }
                            }
                        }
                        else {
                            registerRef(ancestor);
                        }
                        ancestor = ancestor.parent;
                    }
                }
                // destroy old node
                if (isDef(parentElm)) {
                    removeVnodes([oldVnode], 0, 0);
                }
                else if (isDef(oldVnode.tag)) {
                    invokeDestroyHook(oldVnode);
                }
            }
        }
        invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
        return vnode.elm;
    };
}

var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives(vnode) {
        // @ts-expect-error emptyNode is not VNodeWithData
        updateDirectives(vnode, emptyNode);
    }
};
function updateDirectives(oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
        _update(oldVnode, vnode);
    }
}
function _update(oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives(vnode.data.directives, vnode.context);
    var dirsWithInsert = [];
    var dirsWithPostpatch = [];
    var key, oldDir, dir;
    for (key in newDirs) {
        oldDir = oldDirs[key];
        dir = newDirs[key];
        if (!oldDir) {
            // new directive, bind
            callHook(dir, 'bind', vnode, oldVnode);
            if (dir.def && dir.def.inserted) {
                dirsWithInsert.push(dir);
            }
        }
        else {
            // existing directive, update
            dir.oldValue = oldDir.value;
            dir.oldArg = oldDir.arg;
            callHook(dir, 'update', vnode, oldVnode);
            if (dir.def && dir.def.componentUpdated) {
                dirsWithPostpatch.push(dir);
            }
        }
    }
    if (dirsWithInsert.length) {
        var callInsert = function () {
            for (var i = 0; i < dirsWithInsert.length; i++) {
                callHook(dirsWithInsert[i], 'inserted', vnode, oldVnode);
            }
        };
        if (isCreate) {
            mergeVNodeHook(vnode, 'insert', callInsert);
        }
        else {
            callInsert();
        }
    }
    if (dirsWithPostpatch.length) {
        mergeVNodeHook(vnode, 'postpatch', function () {
            for (var i = 0; i < dirsWithPostpatch.length; i++) {
                callHook(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
            }
        });
    }
    if (!isCreate) {
        for (key in oldDirs) {
            if (!newDirs[key]) {
                // no longer present, unbind
                callHook(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
            }
        }
    }
}
var emptyModifiers = Object.create(null);
function normalizeDirectives(dirs, vm) {
    var res = Object.create(null);
    if (!dirs) {
        // $flow-disable-line
        return res;
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
        dir = dirs[i];
        if (!dir.modifiers) {
            // $flow-disable-line
            dir.modifiers = emptyModifiers;
        }
        res[getRawDirName(dir)] = dir;
        if (vm._setupState && vm._setupState.__sfc) {
            var setupDef = dir.def || resolveAsset(vm, '_setupState', 'v-' + dir.name);
            if (typeof setupDef === 'function') {
                dir.def = {
                    bind: setupDef,
                    update: setupDef,
                };
            }
            else {
                dir.def = setupDef;
            }
        }
        dir.def = dir.def || resolveAsset(vm.$options, 'directives', dir.name);
    }
    // $flow-disable-line
    return res;
}
function getRawDirName(dir) {
    return (dir.rawName || "".concat(dir.name, ".").concat(Object.keys(dir.modifiers || {}).join('.')));
}
function callHook(dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
        try {
            fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
        }
        catch (e) {
            handleError(e, vnode.context, "directive ".concat(dir.name, " ").concat(hook, " hook"));
        }
    }
}

var baseModules = [ref, directives];

function updateAttrs(oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
        return;
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
        return;
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__) || isTrue(attrs._v_attr_proxy)) {
        attrs = vnode.data.attrs = extend$3({}, attrs);
    }
    for (key in attrs) {
        cur = attrs[key];
        old = oldAttrs[key];
        if (old !== cur) {
            setAttr(elm, key, cur, vnode.data.pre);
        }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    // #6666: IE/Edge forces progress value down to 1 before setting a max
    /* istanbul ignore if */
    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
        setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
        if (isUndef(attrs[key])) {
            if (isXlink(key)) {
                elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
            }
            else if (!isEnumeratedAttr(key)) {
                elm.removeAttribute(key);
            }
        }
    }
}
function setAttr(el, key, value, isInPre) {
    if (isInPre || el.tagName.indexOf('-') > -1) {
        baseSetAttr(el, key, value);
    }
    else if (isBooleanAttr(key)) {
        // set attribute for blank value
        // e.g. <option disabled>Select one</option>
        if (isFalsyAttrValue(value)) {
            el.removeAttribute(key);
        }
        else {
            // technically allowfullscreen is a boolean attribute for <iframe>,
            // but Flash expects a value of "true" when used on <embed> tag
            value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
            el.setAttribute(key, value);
        }
    }
    else if (isEnumeratedAttr(key)) {
        el.setAttribute(key, convertEnumeratedValue(key, value));
    }
    else if (isXlink(key)) {
        if (isFalsyAttrValue(value)) {
            el.removeAttributeNS(xlinkNS, getXlinkProp(key));
        }
        else {
            el.setAttributeNS(xlinkNS, key, value);
        }
    }
    else {
        baseSetAttr(el, key, value);
    }
}
function baseSetAttr(el, key, value) {
    if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
    }
    else {
        // #7138: IE10 & 11 fires input event when setting placeholder on
        // <textarea>... block the first input event and remove the blocker
        // immediately.
        /* istanbul ignore if */
        if (isIE &&
            !isIE9 &&
            el.tagName === 'TEXTAREA' &&
            key === 'placeholder' &&
            value !== '' &&
            !el.__ieph) {
            var blocker_1 = function (e) {
                e.stopImmediatePropagation();
                el.removeEventListener('input', blocker_1);
            };
            el.addEventListener('input', blocker_1);
            // $flow-disable-line
            el.__ieph = true; /* IE placeholder patched */
        }
        el.setAttribute(key, value);
    }
}
var attrs = {
    create: updateAttrs,
    update: updateAttrs
};

function updateClass(oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticClass) &&
        isUndef(data.class) &&
        (isUndef(oldData) ||
            (isUndef(oldData.staticClass) && isUndef(oldData.class)))) {
        return;
    }
    var cls = genClassForVnode(vnode);
    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
        cls = concat(cls, stringifyClass(transitionClass));
    }
    // set the class
    if (cls !== el._prevClass) {
        el.setAttribute('class', cls);
        el._prevClass = cls;
    }
}
var klass = {
    create: updateClass,
    update: updateClass
};

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents(on) {
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
        // IE input[type=range] only supports `change` event
        var event_1 = isIE ? 'change' : 'input';
        on[event_1] = [].concat(on[RANGE_TOKEN], on[event_1] || []);
        delete on[RANGE_TOKEN];
    }
    // This was originally intended to fix #4521 but no longer necessary
    // after 2.5. Keeping it for backwards compat with generated code from < 2.4
    /* istanbul ignore if */
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
        on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
        delete on[CHECKBOX_RADIO_TOKEN];
    }
}
var target;
function createOnceHandler(event, handler, capture) {
    var _target = target; // save current target element in closure
    return function onceHandler() {
        var res = handler.apply(null, arguments);
        if (res !== null) {
            remove$3(event, onceHandler, capture, _target);
        }
    };
}
// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
function add(name, handler, capture, passive) {
    // async edge case #6566: inner click event triggers patch, event handler
    // attached to outer element during patch, and triggered again. This
    // happens because browsers fire microtask ticks between event propagation.
    // the solution is simple: we save the timestamp when a handler is attached,
    // and the handler would only fire if the event passed to it was fired
    // AFTER it was attached.
    if (useMicrotaskFix) {
        var attachedTimestamp_1 = currentFlushTimestamp;
        var original_1 = handler;
        //@ts-expect-error
        handler = original_1._wrapper = function (e) {
            if (
            // no bubbling, should always fire.
            // this is just a safety net in case event.timeStamp is unreliable in
            // certain weird environments...
            e.target === e.currentTarget ||
                // event is fired after handler attachment
                e.timeStamp >= attachedTimestamp_1 ||
                // bail for environments that have buggy event.timeStamp implementations
                // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
                // #9681 QtWebEngine event.timeStamp is negative value
                e.timeStamp <= 0 ||
                // #9448 bail if event is fired in another document in a multi-page
                // electron/nw.js app, since event.timeStamp will be using a different
                // starting reference
                e.target.ownerDocument !== document) {
                return original_1.apply(this, arguments);
            }
        };
    }
    target.addEventListener(name, handler, supportsPassive ? { capture: capture, passive: passive } : capture);
}
function remove$3(name, handler, capture, _target) {
    (_target || target).removeEventListener(name, 
    //@ts-expect-error
    handler._wrapper || handler, capture);
}
function updateDOMListeners(oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
        return;
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    // vnode is empty when removing all listeners,
    // and use old vnode dom element
    target = vnode.elm || oldVnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add, remove$3, createOnceHandler, vnode.context);
    target = undefined;
}
var events = {
    create: updateDOMListeners,
    update: updateDOMListeners,
    // @ts-expect-error emptyNode has actually data
    destroy: function (vnode) { return updateDOMListeners(vnode, emptyNode); }
};

var svgContainer;
function updateDOMProps(oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
        return;
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__) || isTrue(props._v_attr_proxy)) {
        props = vnode.data.domProps = extend$3({}, props);
    }
    for (key in oldProps) {
        if (!(key in props)) {
            elm[key] = '';
        }
    }
    for (key in props) {
        cur = props[key];
        // ignore children if the node has textContent or innerHTML,
        // as these will throw away existing DOM nodes and cause removal errors
        // on subsequent patches (#3360)
        if (key === 'textContent' || key === 'innerHTML') {
            if (vnode.children)
                vnode.children.length = 0;
            if (cur === oldProps[key])
                continue;
            // #6601 work around Chrome version <= 55 bug where single textNode
            // replaced by innerHTML/textContent retains its parentNode property
            if (elm.childNodes.length === 1) {
                elm.removeChild(elm.childNodes[0]);
            }
        }
        if (key === 'value' && elm.tagName !== 'PROGRESS') {
            // store value as _value as well since
            // non-string values will be stringified
            elm._value = cur;
            // avoid resetting cursor position when value is the same
            var strCur = isUndef(cur) ? '' : String(cur);
            if (shouldUpdateValue(elm, strCur)) {
                elm.value = strCur;
            }
        }
        else if (key === 'innerHTML' &&
            isSVG(elm.tagName) &&
            isUndef(elm.innerHTML)) {
            // IE doesn't support innerHTML for SVG elements
            svgContainer = svgContainer || document.createElement('div');
            svgContainer.innerHTML = "<svg>".concat(cur, "</svg>");
            var svg = svgContainer.firstChild;
            while (elm.firstChild) {
                elm.removeChild(elm.firstChild);
            }
            while (svg.firstChild) {
                elm.appendChild(svg.firstChild);
            }
        }
        else if (
        // skip the update if old and new VDOM state is the same.
        // `value` is handled separately because the DOM value may be temporarily
        // out of sync with VDOM state due to focus, composition and modifiers.
        // This  #4521 by skipping the unnecessary `checked` update.
        cur !== oldProps[key]) {
            // some property updates can throw
            // e.g. `value` on <progress> w/ non-finite value
            try {
                elm[key] = cur;
            }
            catch (e) { }
        }
    }
}
function shouldUpdateValue(elm, checkVal) {
    return (
    //@ts-expect-error
    !elm.composing &&
        (elm.tagName === 'OPTION' ||
            isNotInFocusAndDirty(elm, checkVal) ||
            isDirtyWithModifiers(elm, checkVal)));
}
function isNotInFocusAndDirty(elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true;
    // #6157
    // work around IE bug when accessing document.activeElement in an iframe
    try {
        notInFocus = document.activeElement !== elm;
    }
    catch (e) { }
    return notInFocus && elm.value !== checkVal;
}
function isDirtyWithModifiers(elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers)) {
        if (modifiers.number) {
            return toNumber(value) !== toNumber(newVal);
        }
        if (modifiers.trim) {
            return value.trim() !== newVal.trim();
        }
    }
    return value !== newVal;
}
var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
};

var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
        if (item) {
            var tmp = item.split(propertyDelimiter);
            tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return res;
});
// merge static and dynamic style data on the same vnode
function normalizeStyleData(data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle ? extend$3(data.staticStyle, style) : style;
}
// normalize possible array / string values into Object
function normalizeStyleBinding(bindingStyle) {
    if (Array.isArray(bindingStyle)) {
        return toObject(bindingStyle);
    }
    if (typeof bindingStyle === 'string') {
        return parseStyleText(bindingStyle);
    }
    return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle(vnode, checkChild) {
    var res = {};
    var styleData;
    if (checkChild) {
        var childNode = vnode;
        while (childNode.componentInstance) {
            childNode = childNode.componentInstance._vnode;
            if (childNode &&
                childNode.data &&
                (styleData = normalizeStyleData(childNode.data))) {
                extend$3(res, styleData);
            }
        }
    }
    if ((styleData = normalizeStyleData(vnode.data))) {
        extend$3(res, styleData);
    }
    var parentNode = vnode;
    // @ts-expect-error parentNode.parent not VNodeWithData
    while ((parentNode = parentNode.parent)) {
        if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
            extend$3(res, styleData);
        }
    }
    return res;
}

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
        el.style.setProperty(name, val);
    }
    else if (importantRE.test(val)) {
        el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
    }
    else {
        var normalizedName = normalize(name);
        if (Array.isArray(val)) {
            // Support values array created by autoprefixer, e.g.
            // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
            // Set them one by one, and the browser will only set those it can recognize
            for (var i = 0, len = val.length; i < len; i++) {
                el.style[normalizedName] = val[i];
            }
        }
        else {
            el.style[normalizedName] = val;
        }
    }
};
var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize$1(prop);
    if (prop !== 'filter' && prop in emptyStyle) {
        return prop;
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
        var name_1 = vendorNames[i] + capName;
        if (name_1 in emptyStyle) {
            return name_1;
        }
    }
});
function updateStyle(oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticStyle) &&
        isUndef(data.style) &&
        isUndef(oldData.staticStyle) &&
        isUndef(oldData.style)) {
        return;
    }
    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;
    var style = normalizeStyleBinding(vnode.data.style) || {};
    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likely wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__) ? extend$3({}, style) : style;
    var newStyle = getStyle(vnode, true);
    for (name in oldStyle) {
        if (isUndef(newStyle[name])) {
            setProp(el, name, '');
        }
    }
    for (name in newStyle) {
        cur = newStyle[name];
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
    }
}
var style = {
    create: updateStyle,
    update: updateStyle
};

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
        return;
    }
    /* istanbul ignore else */
    if (el.classList) {
        if (cls.indexOf(' ') > -1) {
            cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
        }
        else {
            el.classList.add(cls);
        }
    }
    else {
        var cur = " ".concat(el.getAttribute('class') || '', " ");
        if (cur.indexOf(' ' + cls + ' ') < 0) {
            el.setAttribute('class', (cur + cls).trim());
        }
    }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
        return;
    }
    /* istanbul ignore else */
    if (el.classList) {
        if (cls.indexOf(' ') > -1) {
            cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
        }
        else {
            el.classList.remove(cls);
        }
        if (!el.classList.length) {
            el.removeAttribute('class');
        }
    }
    else {
        var cur = " ".concat(el.getAttribute('class') || '', " ");
        var tar = ' ' + cls + ' ';
        while (cur.indexOf(tar) >= 0) {
            cur = cur.replace(tar, ' ');
        }
        cur = cur.trim();
        if (cur) {
            el.setAttribute('class', cur);
        }
        else {
            el.removeAttribute('class');
        }
    }
}

function resolveTransition(def) {
    if (!def) {
        return;
    }
    /* istanbul ignore else */
    if (typeof def === 'object') {
        var res = {};
        if (def.css !== false) {
            extend$3(res, autoCssTransition(def.name || 'v'));
        }
        extend$3(res, def);
        return res;
    }
    else if (typeof def === 'string') {
        return autoCssTransition(def);
    }
}
var autoCssTransition = cached(function (name) {
    return {
        enterClass: "".concat(name, "-enter"),
        enterToClass: "".concat(name, "-enter-to"),
        enterActiveClass: "".concat(name, "-enter-active"),
        leaveClass: "".concat(name, "-leave"),
        leaveToClass: "".concat(name, "-leave-to"),
        leaveActiveClass: "".concat(name, "-leave-active")
    };
});
var hasTransition = inBrowser$1 && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';
// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined &&
        window.onwebkittransitionend !== undefined) {
        transitionProp = 'WebkitTransition';
        transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined &&
        window.onwebkitanimationend !== undefined) {
        animationProp = 'WebkitAnimation';
        animationEndEvent = 'webkitAnimationEnd';
    }
}
// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser$1
    ? window.requestAnimationFrame
        ? window.requestAnimationFrame.bind(window)
        : setTimeout
    : /* istanbul ignore next */ function (/* istanbul ignore next */ fn) { return fn(); };
function nextFrame(fn) {
    raf(function () {
        // @ts-expect-error
        raf(fn);
    });
}
function addTransitionClass(el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
        transitionClasses.push(cls);
        addClass(el, cls);
    }
}
function removeTransitionClass(el, cls) {
    if (el._transitionClasses) {
        remove$2(el._transitionClasses, cls);
    }
    removeClass(el, cls);
}
function whenTransitionEnds(el, expectedType, cb) {
    var _a = getTransitionInfo(el, expectedType), type = _a.type, timeout = _a.timeout, propCount = _a.propCount;
    if (!type)
        return cb();
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function () {
        el.removeEventListener(event, onEnd);
        cb();
    };
    var onEnd = function (e) {
        if (e.target === el) {
            if (++ended >= propCount) {
                end();
            }
        }
    };
    setTimeout(function () {
        if (ended < propCount) {
            end();
        }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
}
var transformRE = /\b(transform|all)(,|$)/;
function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);
    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    }
    else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    }
    else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type =
            timeout > 0
                ? transitionTimeout > animationTimeout
                    ? TRANSITION
                    : ANIMATION
                : null;
        propCount = type
            ? type === TRANSITION
                ? transitionDurations.length
                : animationDurations.length
            : 0;
    }
    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
    return {
        type: type,
        timeout: timeout,
        propCount: propCount,
        hasTransform: hasTransform
    };
}
function getTimeout(delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
        delays = delays.concat(delays);
    }
    return Math.max.apply(null, durations.map(function (d, i) {
        return toMs(d) + toMs(delays[i]);
    }));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}

function enter(vnode, toggleDisplay) {
    var el = vnode.elm;
    // call leave callback now
    if (isDef(el._leaveCb)) {
        el._leaveCb.cancelled = true;
        el._leaveCb();
    }
    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
        return;
    }
    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
        return;
    }
    var css = data.css, type = data.type, enterClass = data.enterClass, enterToClass = data.enterToClass, enterActiveClass = data.enterActiveClass, appearClass = data.appearClass, appearToClass = data.appearToClass, appearActiveClass = data.appearActiveClass, beforeEnter = data.beforeEnter, enter = data.enter, afterEnter = data.afterEnter, enterCancelled = data.enterCancelled, beforeAppear = data.beforeAppear, appear = data.appear, afterAppear = data.afterAppear, appearCancelled = data.appearCancelled, duration = data.duration;
    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
        context = transitionNode.context;
        transitionNode = transitionNode.parent;
    }
    var isAppear = !context._isMounted || !vnode.isRootInsert;
    if (isAppear && !appear && appear !== '') {
        return;
    }
    var startClass = isAppear && appearClass ? appearClass : enterClass;
    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
    var enterHook = isAppear ? (isFunction$2(appear) ? appear : enter) : enter;
    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
    var enterCancelledHook = isAppear
        ? appearCancelled || enterCancelled
        : enterCancelled;
    var explicitEnterDuration = toNumber(isObject$3(duration) ? duration.enter : duration);
    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);
    var cb = (el._enterCb = once$1(function () {
        if (expectsCSS) {
            removeTransitionClass(el, toClass);
            removeTransitionClass(el, activeClass);
        }
        // @ts-expect-error
        if (cb.cancelled) {
            if (expectsCSS) {
                removeTransitionClass(el, startClass);
            }
            enterCancelledHook && enterCancelledHook(el);
        }
        else {
            afterEnterHook && afterEnterHook(el);
        }
        el._enterCb = null;
    }));
    if (!vnode.data.show) {
        // remove pending leave element on enter by injecting an insert hook
        mergeVNodeHook(vnode, 'insert', function () {
            var parent = el.parentNode;
            var pendingNode = parent && parent._pending && parent._pending[vnode.key];
            if (pendingNode &&
                pendingNode.tag === vnode.tag &&
                pendingNode.elm._leaveCb) {
                pendingNode.elm._leaveCb();
            }
            enterHook && enterHook(el, cb);
        });
    }
    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
        addTransitionClass(el, startClass);
        addTransitionClass(el, activeClass);
        nextFrame(function () {
            removeTransitionClass(el, startClass);
            // @ts-expect-error
            if (!cb.cancelled) {
                addTransitionClass(el, toClass);
                if (!userWantsControl) {
                    if (isValidDuration(explicitEnterDuration)) {
                        setTimeout(cb, explicitEnterDuration);
                    }
                    else {
                        whenTransitionEnds(el, type, cb);
                    }
                }
            }
        });
    }
    if (vnode.data.show) {
        toggleDisplay && toggleDisplay();
        enterHook && enterHook(el, cb);
    }
    if (!expectsCSS && !userWantsControl) {
        cb();
    }
}
function leave(vnode, rm) {
    var el = vnode.elm;
    // call enter callback now
    if (isDef(el._enterCb)) {
        el._enterCb.cancelled = true;
        el._enterCb();
    }
    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data) || el.nodeType !== 1) {
        return rm();
    }
    /* istanbul ignore if */
    if (isDef(el._leaveCb)) {
        return;
    }
    var css = data.css, type = data.type, leaveClass = data.leaveClass, leaveToClass = data.leaveToClass, leaveActiveClass = data.leaveActiveClass, beforeLeave = data.beforeLeave, leave = data.leave, afterLeave = data.afterLeave, leaveCancelled = data.leaveCancelled, delayLeave = data.delayLeave, duration = data.duration;
    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);
    var explicitLeaveDuration = toNumber(isObject$3(duration) ? duration.leave : duration);
    var cb = (el._leaveCb = once$1(function () {
        if (el.parentNode && el.parentNode._pending) {
            el.parentNode._pending[vnode.key] = null;
        }
        if (expectsCSS) {
            removeTransitionClass(el, leaveToClass);
            removeTransitionClass(el, leaveActiveClass);
        }
        // @ts-expect-error
        if (cb.cancelled) {
            if (expectsCSS) {
                removeTransitionClass(el, leaveClass);
            }
            leaveCancelled && leaveCancelled(el);
        }
        else {
            rm();
            afterLeave && afterLeave(el);
        }
        el._leaveCb = null;
    }));
    if (delayLeave) {
        delayLeave(performLeave);
    }
    else {
        performLeave();
    }
    function performLeave() {
        // the delayed leave may have already been cancelled
        // @ts-expect-error
        if (cb.cancelled) {
            return;
        }
        // record leaving element
        if (!vnode.data.show && el.parentNode) {
            (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] =
                vnode;
        }
        beforeLeave && beforeLeave(el);
        if (expectsCSS) {
            addTransitionClass(el, leaveClass);
            addTransitionClass(el, leaveActiveClass);
            nextFrame(function () {
                removeTransitionClass(el, leaveClass);
                // @ts-expect-error
                if (!cb.cancelled) {
                    addTransitionClass(el, leaveToClass);
                    if (!userWantsControl) {
                        if (isValidDuration(explicitLeaveDuration)) {
                            setTimeout(cb, explicitLeaveDuration);
                        }
                        else {
                            whenTransitionEnds(el, type, cb);
                        }
                    }
                }
            });
        }
        leave && leave(el, cb);
        if (!expectsCSS && !userWantsControl) {
            cb();
        }
    }
}
function isValidDuration(val) {
    return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength(fn) {
    if (isUndef(fn)) {
        return false;
    }
    // @ts-expect-error
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
        // invoker
        return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
    }
    else {
        // @ts-expect-error
        return (fn._length || fn.length) > 1;
    }
}
function _enter(_, vnode) {
    if (vnode.data.show !== true) {
        enter(vnode);
    }
}
var transition = inBrowser$1
    ? {
        create: _enter,
        activate: _enter,
        remove: function (vnode, rm) {
            /* istanbul ignore else */
            if (vnode.data.show !== true) {
                // @ts-expect-error
                leave(vnode, rm);
            }
            else {
                rm();
            }
        }
    }
    : {};

var platformModules = [attrs, klass, events, domProps, style, transition];

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules$1 = platformModules.concat(baseModules);
var patch$2 = createPatchFunction({ nodeOps: nodeOps, modules: modules$1 });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */
/* istanbul ignore if */
if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
        var el = document.activeElement;
        // @ts-expect-error
        if (el && el.vmodel) {
            trigger(el, 'input');
        }
    });
}
var directive$2 = {
    inserted: function (el, binding, vnode, oldVnode) {
        if (vnode.tag === 'select') {
            // #6903
            if (oldVnode.elm && !oldVnode.elm._vOptions) {
                mergeVNodeHook(vnode, 'postpatch', function () {
                    directive$2.componentUpdated(el, binding, vnode);
                });
            }
            else {
                setSelected(el, binding, vnode.context);
            }
            el._vOptions = [].map.call(el.options, getValue);
        }
        else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
            el._vModifiers = binding.modifiers;
            if (!binding.modifiers.lazy) {
                el.addEventListener('compositionstart', onCompositionStart);
                el.addEventListener('compositionend', onCompositionEnd);
                // Safari < 10.2 & UIWebView doesn't fire compositionend when
                // switching focus before confirming composition choice
                // this also fixes the issue where some browsers e.g. iOS Chrome
                // fires "change" instead of "input" on autocomplete.
                el.addEventListener('change', onCompositionEnd);
                /* istanbul ignore if */
                if (isIE9) {
                    el.vmodel = true;
                }
            }
        }
    },
    componentUpdated: function (el, binding, vnode) {
        if (vnode.tag === 'select') {
            setSelected(el, binding, vnode.context);
            // in case the options rendered by v-for have changed,
            // it's possible that the value is out-of-sync with the rendered options.
            // detect such cases and filter out values that no longer has a matching
            // option in the DOM.
            var prevOptions_1 = el._vOptions;
            var curOptions_1 = (el._vOptions = [].map.call(el.options, getValue));
            if (curOptions_1.some(function (o, i) { return !looseEqual$1(o, prevOptions_1[i]); })) {
                // trigger change event if
                // no matching option found for at least one value
                var needReset = el.multiple
                    ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions_1); })
                    : binding.value !== binding.oldValue &&
                        hasNoMatchingOption(binding.value, curOptions_1);
                if (needReset) {
                    trigger(el, 'change');
                }
            }
        }
    }
};
function setSelected(el, binding, vm) {
    actuallySetSelected(el, binding);
    /* istanbul ignore if */
    if (isIE || isEdge) {
        setTimeout(function () {
            actuallySetSelected(el, binding);
        }, 0);
    }
}
function actuallySetSelected(el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
        return;
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
        option = el.options[i];
        if (isMultiple) {
            selected = looseIndexOf(value, getValue(option)) > -1;
            if (option.selected !== selected) {
                option.selected = selected;
            }
        }
        else {
            if (looseEqual$1(getValue(option), value)) {
                if (el.selectedIndex !== i) {
                    el.selectedIndex = i;
                }
                return;
            }
        }
    }
    if (!isMultiple) {
        el.selectedIndex = -1;
    }
}
function hasNoMatchingOption(value, options) {
    return options.every(function (o) { return !looseEqual$1(o, value); });
}
function getValue(option) {
    return '_value' in option ? option._value : option.value;
}
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing)
        return;
    e.target.composing = false;
    trigger(e.target, 'input');
}
function trigger(el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
}

// recursively search for possible transition defined inside the component root
function locateNode(vnode) {
    // @ts-expect-error
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
        ? locateNode(vnode.componentInstance._vnode)
        : vnode;
}
var show = {
    bind: function (el, _a, vnode) {
        var value = _a.value;
        vnode = locateNode(vnode);
        var transition = vnode.data && vnode.data.transition;
        var originalDisplay = (el.__vOriginalDisplay =
            el.style.display === 'none' ? '' : el.style.display);
        if (value && transition) {
            vnode.data.show = true;
            enter(vnode, function () {
                el.style.display = originalDisplay;
            });
        }
        else {
            el.style.display = value ? originalDisplay : 'none';
        }
    },
    update: function (el, _a, vnode) {
        var value = _a.value, oldValue = _a.oldValue;
        /* istanbul ignore if */
        if (!value === !oldValue)
            return;
        vnode = locateNode(vnode);
        var transition = vnode.data && vnode.data.transition;
        if (transition) {
            vnode.data.show = true;
            if (value) {
                enter(vnode, function () {
                    el.style.display = el.__vOriginalDisplay;
                });
            }
            else {
                leave(vnode, function () {
                    el.style.display = 'none';
                });
            }
        }
        else {
            el.style.display = value ? el.__vOriginalDisplay : 'none';
        }
    },
    unbind: function (el, binding, vnode, oldVnode, isDestroy) {
        if (!isDestroy) {
            el.style.display = el.__vOriginalDisplay;
        }
    }
};

var platformDirectives = {
    model: directive$2,
    show: show
};

// Provides transition support for a single element/component.
var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
};
// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild(vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
        return getRealChild(getFirstComponentChild(compOptions.children));
    }
    else {
        return vnode;
    }
}
function extractTransitionData(comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
        data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key in listeners) {
        data[camelize$1(key)] = listeners[key];
    }
    return data;
}
function placeholder(h, rawChild) {
    // @ts-expect-error
    if (/\d-keep-alive$/.test(rawChild.tag)) {
        return h('keep-alive', {
            props: rawChild.componentOptions.propsData
        });
    }
}
function hasParentTransition(vnode) {
    while ((vnode = vnode.parent)) {
        if (vnode.data.transition) {
            return true;
        }
    }
}
function isSameChild(child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag;
}
var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };
var isVShowDirective = function (d) { return d.name === 'show'; };
var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,
    render: function (h) {
        var _this = this;
        var children = this.$slots.default;
        if (!children) {
            return;
        }
        // filter out text nodes (possible whitespaces)
        children = children.filter(isNotTextNode);
        /* istanbul ignore if */
        if (!children.length) {
            return;
        }
        var mode = this.mode;
        var rawChild = children[0];
        // if this is a component root node and the component's
        // parent container node also has transition, skip.
        if (hasParentTransition(this.$vnode)) {
            return rawChild;
        }
        // apply transition data to child
        // use getRealChild() to ignore abstract components e.g. keep-alive
        var child = getRealChild(rawChild);
        /* istanbul ignore if */
        if (!child) {
            return rawChild;
        }
        if (this._leaving) {
            return placeholder(h, rawChild);
        }
        // ensure a key that is unique to the vnode type and to this transition
        // component instance. This key will be used to remove pending leaving nodes
        // during entering.
        var id = "__transition-".concat(this._uid, "-");
        child.key =
            child.key == null
                ? child.isComment
                    ? id + 'comment'
                    : id + child.tag
                : isPrimitive(child.key)
                    ? String(child.key).indexOf(id) === 0
                        ? child.key
                        : id + child.key
                    : child.key;
        var data = ((child.data || (child.data = {})).transition =
            extractTransitionData(this));
        var oldRawChild = this._vnode;
        var oldChild = getRealChild(oldRawChild);
        // mark v-show
        // so that the transition module can hand over the control to the directive
        if (child.data.directives && child.data.directives.some(isVShowDirective)) {
            child.data.show = true;
        }
        if (oldChild &&
            oldChild.data &&
            !isSameChild(child, oldChild) &&
            !isAsyncPlaceholder(oldChild) &&
            // #6687 component root is a comment node
            !(oldChild.componentInstance &&
                oldChild.componentInstance._vnode.isComment)) {
            // replace old child transition data with fresh one
            // important for dynamic transitions!
            var oldData = (oldChild.data.transition = extend$3({}, data));
            // handle transition mode
            if (mode === 'out-in') {
                // return placeholder node and queue update when leave finishes
                this._leaving = true;
                mergeVNodeHook(oldData, 'afterLeave', function () {
                    _this._leaving = false;
                    _this.$forceUpdate();
                });
                return placeholder(h, rawChild);
            }
            else if (mode === 'in-out') {
                if (isAsyncPlaceholder(child)) {
                    return oldRawChild;
                }
                var delayedLeave_1;
                var performLeave = function () {
                    delayedLeave_1();
                };
                mergeVNodeHook(data, 'afterEnter', performLeave);
                mergeVNodeHook(data, 'enterCancelled', performLeave);
                mergeVNodeHook(oldData, 'delayLeave', function (leave) {
                    delayedLeave_1 = leave;
                });
            }
        }
        return rawChild;
    }
};

// Provides transition support for list items.
var props = extend$3({
    tag: String,
    moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
    props: props,
    beforeMount: function () {
        var _this = this;
        var update = this._update;
        this._update = function (vnode, hydrating) {
            var restoreActiveInstance = setActiveInstance(_this);
            // force removing pass
            _this.__patch__(_this._vnode, _this.kept, false, // hydrating
            true // removeOnly (!important, avoids unnecessary moves)
            );
            _this._vnode = _this.kept;
            restoreActiveInstance();
            update.call(_this, vnode, hydrating);
        };
    },
    render: function (h) {
        var tag = this.tag || this.$vnode.data.tag || 'span';
        var map = Object.create(null);
        var prevChildren = (this.prevChildren = this.children);
        var rawChildren = this.$slots.default || [];
        var children = (this.children = []);
        var transitionData = extractTransitionData(this);
        for (var i = 0; i < rawChildren.length; i++) {
            var c = rawChildren[i];
            if (c.tag) {
                if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
                    children.push(c);
                    map[c.key] = c;
                    (c.data || (c.data = {})).transition = transitionData;
                }
            }
        }
        if (prevChildren) {
            var kept = [];
            var removed = [];
            for (var i = 0; i < prevChildren.length; i++) {
                var c = prevChildren[i];
                c.data.transition = transitionData;
                // @ts-expect-error .getBoundingClientRect is not typed in Node
                c.data.pos = c.elm.getBoundingClientRect();
                if (map[c.key]) {
                    kept.push(c);
                }
                else {
                    removed.push(c);
                }
            }
            this.kept = h(tag, null, kept);
            this.removed = removed;
        }
        return h(tag, null, children);
    },
    updated: function () {
        var children = this.prevChildren;
        var moveClass = this.moveClass || (this.name || 'v') + '-move';
        if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
            return;
        }
        // we divide the work into three loops to avoid mixing DOM reads and writes
        // in each iteration - which helps prevent layout thrashing.
        children.forEach(callPendingCbs);
        children.forEach(recordPosition);
        children.forEach(applyTranslation);
        // force reflow to put everything in position
        // assign to this to avoid being removed in tree-shaking
        // $flow-disable-line
        this._reflow = document.body.offsetHeight;
        children.forEach(function (c) {
            if (c.data.moved) {
                var el_1 = c.elm;
                var s = el_1.style;
                addTransitionClass(el_1, moveClass);
                s.transform = s.WebkitTransform = s.transitionDuration = '';
                el_1.addEventListener(transitionEndEvent, (el_1._moveCb = function cb(e) {
                    if (e && e.target !== el_1) {
                        return;
                    }
                    if (!e || /transform$/.test(e.propertyName)) {
                        el_1.removeEventListener(transitionEndEvent, cb);
                        el_1._moveCb = null;
                        removeTransitionClass(el_1, moveClass);
                    }
                }));
            }
        });
    },
    methods: {
        hasMove: function (el, moveClass) {
            /* istanbul ignore if */
            if (!hasTransition) {
                return false;
            }
            /* istanbul ignore if */
            if (this._hasMove) {
                return this._hasMove;
            }
            // Detect whether an element with the move class applied has
            // CSS transitions. Since the element may be inside an entering
            // transition at this very moment, we make a clone of it and remove
            // all other transition classes applied to ensure only the move class
            // is applied.
            var clone = el.cloneNode();
            if (el._transitionClasses) {
                el._transitionClasses.forEach(function (cls) {
                    removeClass(clone, cls);
                });
            }
            addClass(clone, moveClass);
            clone.style.display = 'none';
            this.$el.appendChild(clone);
            var info = getTransitionInfo(clone);
            this.$el.removeChild(clone);
            return (this._hasMove = info.hasTransform);
        }
    }
};
function callPendingCbs(c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
        c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
        c.elm._enterCb();
    }
}
function recordPosition(c) {
    c.data.newPos = c.elm.getBoundingClientRect();
}
function applyTranslation(c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
        c.data.moved = true;
        var s = c.elm.style;
        s.transform = s.WebkitTransform = "translate(".concat(dx, "px,").concat(dy, "px)");
        s.transitionDuration = '0s';
    }
}

var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
};

// install platform specific utils
Vue$1.config.mustUseProp = mustUseProp;
Vue$1.config.isReservedTag = isReservedTag;
Vue$1.config.isReservedAttr = isReservedAttr;
Vue$1.config.getTagNamespace = getTagNamespace;
Vue$1.config.isUnknownElement = isUnknownElement;
// install platform runtime directives & components
extend$3(Vue$1.options.directives, platformDirectives);
extend$3(Vue$1.options.components, platformComponents);
// install platform patch function
Vue$1.prototype.__patch__ = inBrowser$1 ? patch$2 : noop$1;
// public mount method
Vue$1.prototype.$mount = function (el, hydrating) {
    el = el && inBrowser$1 ? query(el) : undefined;
    return mountComponent(this, el, hydrating);
};
// devtools global hook
/* istanbul ignore next */
if (inBrowser$1) {
    setTimeout(function () {
        if (config$2.devtools) {
            if (devtools) {
                devtools.emit('init', Vue$1);
            }
        }
    }, 0);
}

var re$4 = {exports: {}};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0';

const MAX_LENGTH$1 = 256;
const MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991;

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
];

var constants$1 = {
  MAX_LENGTH: MAX_LENGTH$1,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
};

const debug$3 = (
  typeof process === 'object' &&
  process.env &&
  ({}).NODE_DEBUG &&
  /\bsemver\b/i.test(({}).NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {};

var debug_1 = debug$3;

(function (module, exports) {
const {
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_LENGTH,
} = constants$1;
const debug = debug_1;
exports = module.exports = {};

// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const t = exports.t = {};
let R = 0;

const LETTERDASHNUMBER = '[a-zA-Z0-9-]';

// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
  ['\\s', 1],
  ['\\d', MAX_LENGTH],
  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
];

const makeSafeRegex = (value) => {
  for (const [token, max] of safeRegexReplacements) {
    value = value
      .split(`${token}*`).join(`${token}{0,${max}}`)
      .split(`${token}+`).join(`${token}{1,${max}}`);
  }
  return value
};

const createToken = (name, value, isGlobal) => {
  const safe = makeSafeRegex(value);
  const index = R++;
  debug(name, index, value);
  t[name] = index;
  src[index] = value;
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);
};

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
createToken('NUMERICIDENTIFIERLOOSE', '\\d+');

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`);

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`);

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`);

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`);

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`);

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`);

createToken('FULL', `^${src[t.FULLPLAIN]}$`);

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`);

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);

createToken('GTLT', '((?:<|>)?=?)');

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`);

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`);

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
createToken('COERCEFULL', src[t.COERCEPLAIN] +
              `(?:${src[t.PRERELEASE]})?` +
              `(?:${src[t.BUILD]})?` +
              `(?:$|[^\\d])`);
createToken('COERCERTL', src[t.COERCE], true);
createToken('COERCERTLFULL', src[t.COERCEFULL], true);

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)');

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = '$1~';

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)');

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = '$1^';

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = '$1$2$3';

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`);

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`);

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*');
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$');
}(re$4, re$4.exports));

// parse out just the options we care about
const looseOption = Object.freeze({ loose: true });
const emptyOpts = Object.freeze({ });
const parseOptions$3 = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
};
var parseOptions_1 = parseOptions$3;

const numeric = /^[0-9]+$/;
const compareIdentifiers$1 = (a, b) => {
  const anum = numeric.test(a);
  const bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
};

const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);

var identifiers$1 = {
  compareIdentifiers: compareIdentifiers$1,
  rcompareIdentifiers,
};

const debug$2 = debug_1;
const { MAX_LENGTH, MAX_SAFE_INTEGER } = constants$1;
const { safeRe: re$3, t: t$4 } = re$4.exports;

const parseOptions$2 = parseOptions_1;
const { compareIdentifiers } = identifiers$1;
class SemVer$f {
  constructor (version, options) {
    options = parseOptions$2(options);

    if (version instanceof SemVer$f) {
      if (version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version;
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug$2('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose;
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease;

    const m = version.trim().match(options.loose ? re$3[t$4.LOOSE] : re$3[t$4.FULL]);

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version;

    // these are actually numbers
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      });
    }

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`;
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`;
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug$2('SemVer.compare', this.version, this.options, other);
    if (!(other instanceof SemVer$f)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer$f(other, this.options);
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer$f)) {
      other = new SemVer$f(other, this.options);
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer$f)) {
      other = new SemVer$f(other, this.options);
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0;
    do {
      const a = this.prerelease[i];
      const b = other.prerelease[i];
      debug$2('prerelease compare', i, a, b);
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer$f)) {
      other = new SemVer$f(other, this.options);
    }

    let i = 0;
    do {
      const a = this.build[i];
      const b = other.build[i];
      debug$2('prerelease compare', i, a, b);
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier, identifierBase);
        break
      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier, identifierBase);
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0;
        this.inc('patch', identifier, identifierBase);
        this.inc('pre', identifier, identifierBase);
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase);
        }
        this.inc('pre', identifier, identifierBase);
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0;

        if (!identifier && identifierBase === false) {
          throw new Error('invalid increment argument: identifier is empty')
        }

        if (this.prerelease.length === 0) {
          this.prerelease = [base];
        } else {
          let i = this.prerelease.length;
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++;
              i = -2;
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base);
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base];
          if (identifierBase === false) {
            prerelease = [identifier];
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease;
            }
          } else {
            this.prerelease = prerelease;
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format();
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`;
    }
    return this
  }
}

var semver$1 = SemVer$f;

const SemVer$e = semver$1;
const parse$9 = (version, options, throwErrors = false) => {
  if (version instanceof SemVer$e) {
    return version
  }
  try {
    return new SemVer$e(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
};

var parse_1$1 = parse$9;

const parse$8 = parse_1$1;
const valid$2 = (version, options) => {
  const v = parse$8(version, options);
  return v ? v.version : null
};
var valid_1 = valid$2;

const parse$7 = parse_1$1;
const clean$1 = (version, options) => {
  const s = parse$7(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null
};
var clean_1 = clean$1;

const SemVer$d = semver$1;

const inc$1 = (version, release, options, identifier, identifierBase) => {
  if (typeof (options) === 'string') {
    identifierBase = identifier;
    identifier = options;
    options = undefined;
  }

  try {
    return new SemVer$d(
      version instanceof SemVer$d ? version.version : version,
      options
    ).inc(release, identifier, identifierBase).version
  } catch (er) {
    return null
  }
};
var inc_1 = inc$1;

const parse$6 = parse_1$1;

const diff$1 = (version1, version2) => {
  const v1 = parse$6(version1, null, true);
  const v2 = parse$6(version2, null, true);
  const comparison = v1.compare(v2);

  if (comparison === 0) {
    return null
  }

  const v1Higher = comparison > 0;
  const highVersion = v1Higher ? v1 : v2;
  const lowVersion = v1Higher ? v2 : v1;
  const highHasPre = !!highVersion.prerelease.length;
  const lowHasPre = !!lowVersion.prerelease.length;

  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major'
    }

    // Otherwise it can be determined by checking the high version

    if (highVersion.patch) {
      // anything higher than a patch bump would result in the wrong version
      return 'patch'
    }

    if (highVersion.minor) {
      // anything higher than a minor bump would result in the wrong version
      return 'minor'
    }

    // bumping major/minor/patch all have same result
    return 'major'
  }

  // add the `pre` prefix if we are going to a prerelease version
  const prefix = highHasPre ? 'pre' : '';

  if (v1.major !== v2.major) {
    return prefix + 'major'
  }

  if (v1.minor !== v2.minor) {
    return prefix + 'minor'
  }

  if (v1.patch !== v2.patch) {
    return prefix + 'patch'
  }

  // high and low are preleases
  return 'prerelease'
};

var diff_1 = diff$1;

const SemVer$c = semver$1;
const major$1 = (a, loose) => new SemVer$c(a, loose).major;
var major_1 = major$1;

const SemVer$b = semver$1;
const minor$1 = (a, loose) => new SemVer$b(a, loose).minor;
var minor_1 = minor$1;

const SemVer$a = semver$1;
const patch$1 = (a, loose) => new SemVer$a(a, loose).patch;
var patch_1 = patch$1;

const parse$5 = parse_1$1;
const prerelease$1 = (version, options) => {
  const parsed = parse$5(version, options);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
};
var prerelease_1 = prerelease$1;

const SemVer$9 = semver$1;
const compare$b = (a, b, loose) =>
  new SemVer$9(a, loose).compare(new SemVer$9(b, loose));

var compare_1 = compare$b;

const compare$a = compare_1;
const rcompare$1 = (a, b, loose) => compare$a(b, a, loose);
var rcompare_1 = rcompare$1;

const compare$9 = compare_1;
const compareLoose$1 = (a, b) => compare$9(a, b, true);
var compareLoose_1 = compareLoose$1;

const SemVer$8 = semver$1;
const compareBuild$3 = (a, b, loose) => {
  const versionA = new SemVer$8(a, loose);
  const versionB = new SemVer$8(b, loose);
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
};
var compareBuild_1 = compareBuild$3;

const compareBuild$2 = compareBuild_1;
const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));
var sort_1 = sort$1;

const compareBuild$1 = compareBuild_1;
const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));
var rsort_1 = rsort$1;

const compare$8 = compare_1;
const gt$4 = (a, b, loose) => compare$8(a, b, loose) > 0;
var gt_1 = gt$4;

const compare$7 = compare_1;
const lt$3 = (a, b, loose) => compare$7(a, b, loose) < 0;
var lt_1 = lt$3;

const compare$6 = compare_1;
const eq$2 = (a, b, loose) => compare$6(a, b, loose) === 0;
var eq_1 = eq$2;

const compare$5 = compare_1;
const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;
var neq_1 = neq$2;

const compare$4 = compare_1;
const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;
var gte_1 = gte$3;

const compare$3 = compare_1;
const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;
var lte_1 = lte$3;

const eq$1 = eq_1;
const neq$1 = neq_1;
const gt$3 = gt_1;
const gte$2 = gte_1;
const lt$2 = lt_1;
const lte$2 = lte_1;

const cmp$2 = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version;
      }
      if (typeof b === 'object') {
        b = b.version;
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version;
      }
      if (typeof b === 'object') {
        b = b.version;
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq$1(a, b, loose)

    case '!=':
      return neq$1(a, b, loose)

    case '>':
      return gt$3(a, b, loose)

    case '>=':
      return gte$2(a, b, loose)

    case '<':
      return lt$2(a, b, loose)

    case '<=':
      return lte$2(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
};
var cmp_1 = cmp$2;

const SemVer$7 = semver$1;
const parse$4 = parse_1$1;
const { safeRe: re$2, t: t$3 } = re$4.exports;

const coerce$1 = (version, options) => {
  if (version instanceof SemVer$7) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version);
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {};

  let match = null;
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re$2[t$3.COERCEFULL] : re$2[t$3.COERCE]);
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    const coerceRtlRegex = options.includePrerelease ? re$2[t$3.COERCERTLFULL] : re$2[t$3.COERCERTL];
    let next;
    while ((next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next;
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1;
  }

  if (match === null) {
    return null
  }

  const major = match[2];
  const minor = match[3] || '0';
  const patch = match[4] || '0';
  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : '';
  const build = options.includePrerelease && match[6] ? `+${match[6]}` : '';

  return parse$4(`${major}.${minor}.${patch}${prerelease}${build}`, options)
};
var coerce_1 = coerce$1;

var yallist = Yallist$1;

Yallist$1.Node = Node$1;
Yallist$1.create = Yallist$1;

function Yallist$1 (list) {
  var self = this;
  if (!(self instanceof Yallist$1)) {
    self = new Yallist$1();
  }

  self.tail = null;
  self.head = null;
  self.length = 0;

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item);
    });
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i]);
    }
  }

  return self
}

Yallist$1.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next;
  var prev = node.prev;

  if (next) {
    next.prev = prev;
  }

  if (prev) {
    prev.next = next;
  }

  if (node === this.head) {
    this.head = next;
  }
  if (node === this.tail) {
    this.tail = prev;
  }

  node.list.length--;
  node.next = null;
  node.prev = null;
  node.list = null;

  return next
};

Yallist$1.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var head = this.head;
  node.list = this;
  node.next = head;
  if (head) {
    head.prev = node;
  }

  this.head = node;
  if (!this.tail) {
    this.tail = node;
  }
  this.length++;
};

Yallist$1.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var tail = this.tail;
  node.list = this;
  node.prev = tail;
  if (tail) {
    tail.next = node;
  }

  this.tail = node;
  if (!this.head) {
    this.head = node;
  }
  this.length++;
};

Yallist$1.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i]);
  }
  return this.length
};

Yallist$1.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i]);
  }
  return this.length
};

Yallist$1.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value;
  this.tail = this.tail.prev;
  if (this.tail) {
    this.tail.next = null;
  } else {
    this.head = null;
  }
  this.length--;
  return res
};

Yallist$1.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value;
  this.head = this.head.next;
  if (this.head) {
    this.head.prev = null;
  } else {
    this.tail = null;
  }
  this.length--;
  return res
};

Yallist$1.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.next;
  }
};

Yallist$1.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.prev;
  }
};

Yallist$1.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next;
  }
  if (i === n && walker !== null) {
    return walker.value
  }
};

Yallist$1.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev;
  }
  if (i === n && walker !== null) {
    return walker.value
  }
};

Yallist$1.prototype.map = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.next;
  }
  return res
};

Yallist$1.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.prev;
  }
  return res
};

Yallist$1.prototype.reduce = function (fn, initial) {
  var acc;
  var walker = this.head;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.head) {
    walker = this.head.next;
    acc = this.head.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i);
    walker = walker.next;
  }

  return acc
};

Yallist$1.prototype.reduceReverse = function (fn, initial) {
  var acc;
  var walker = this.tail;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.tail) {
    walker = this.tail.prev;
    acc = this.tail.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i);
    walker = walker.prev;
  }

  return acc
};

Yallist$1.prototype.toArray = function () {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.next;
  }
  return arr
};

Yallist$1.prototype.toArrayReverse = function () {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.prev;
  }
  return arr
};

Yallist$1.prototype.slice = function (from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next;
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value);
  }
  return ret
};

Yallist$1.prototype.sliceReverse = function (from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev;
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value);
  }
  return ret
};

Yallist$1.prototype.splice = function (start, deleteCount, ...nodes) {
  if (start > this.length) {
    start = this.length - 1;
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next;
  }

  var ret = [];
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value);
    walker = this.removeNode(walker);
  }
  if (walker === null) {
    walker = this.tail;
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev;
  }

  for (var i = 0; i < nodes.length; i++) {
    walker = insert(this, walker, nodes[i]);
  }
  return ret;
};

Yallist$1.prototype.reverse = function () {
  var head = this.head;
  var tail = this.tail;
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev;
    walker.prev = walker.next;
    walker.next = p;
  }
  this.head = tail;
  this.tail = head;
  return this
};

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node$1(value, null, node, self) :
    new Node$1(value, node, node.next, self);

  if (inserted.next === null) {
    self.tail = inserted;
  }
  if (inserted.prev === null) {
    self.head = inserted;
  }

  self.length++;

  return inserted
}

function push (self, item) {
  self.tail = new Node$1(item, self.tail, null, self);
  if (!self.head) {
    self.head = self.tail;
  }
  self.length++;
}

function unshift (self, item) {
  self.head = new Node$1(item, null, self.head, self);
  if (!self.tail) {
    self.tail = self.head;
  }
  self.length++;
}

function Node$1 (value, prev, next, list) {
  if (!(this instanceof Node$1)) {
    return new Node$1(value, prev, next, list)
  }

  this.list = list;
  this.value = value;

  if (prev) {
    prev.next = this;
    this.prev = prev;
  } else {
    this.prev = null;
  }

  if (next) {
    next.prev = this;
    this.next = next;
  } else {
    this.next = null;
  }
}

try {
  // add if support for Symbol.iterator is present
  require('./iterator.js')(Yallist$1);
} catch (er) {}

// A linked list to keep track of recently-used-ness
const Yallist = yallist;

const MAX = Symbol('max');
const LENGTH = Symbol('length');
const LENGTH_CALCULATOR = Symbol('lengthCalculator');
const ALLOW_STALE = Symbol('allowStale');
const MAX_AGE = Symbol('maxAge');
const DISPOSE = Symbol('dispose');
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
const LRU_LIST = Symbol('lruList');
const CACHE = Symbol('cache');
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

const naiveLength = () => 1;

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
  constructor (options) {
    if (typeof options === 'number')
      options = { max: options };

    if (!options)
      options = {};

    if (options.max && (typeof options.max !== 'number' || options.max < 0))
      throw new TypeError('max must be a non-negative number')
    // Kind of weird to have a default max of Infinity, but oh well.
    this[MAX] = options.max || Infinity;

    const lc = options.length || naiveLength;
    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
    this[ALLOW_STALE] = options.stale || false;
    if (options.maxAge && typeof options.maxAge !== 'number')
      throw new TypeError('maxAge must be a number')
    this[MAX_AGE] = options.maxAge || 0;
    this[DISPOSE] = options.dispose;
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    this.reset();
  }

  // resize the cache when the max changes.
  set max (mL) {
    if (typeof mL !== 'number' || mL < 0)
      throw new TypeError('max must be a non-negative number')

    this[MAX] = mL || Infinity;
    trim$1(this);
  }
  get max () {
    return this[MAX]
  }

  set allowStale (allowStale) {
    this[ALLOW_STALE] = !!allowStale;
  }
  get allowStale () {
    return this[ALLOW_STALE]
  }

  set maxAge (mA) {
    if (typeof mA !== 'number')
      throw new TypeError('maxAge must be a non-negative number')

    this[MAX_AGE] = mA;
    trim$1(this);
  }
  get maxAge () {
    return this[MAX_AGE]
  }

  // resize the cache when the lengthCalculator changes.
  set lengthCalculator (lC) {
    if (typeof lC !== 'function')
      lC = naiveLength;

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC;
      this[LENGTH] = 0;
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
        this[LENGTH] += hit.length;
      });
    }
    trim$1(this);
  }
  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

  get length () { return this[LENGTH] }
  get itemCount () { return this[LRU_LIST].length }

  rforEach (fn, thisp) {
    thisp = thisp || this;
    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev;
      forEachStep(this, fn, walker, thisp);
      walker = prev;
    }
  }

  forEach (fn, thisp) {
    thisp = thisp || this;
    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next;
      forEachStep(this, fn, walker, thisp);
      walker = next;
    }
  }

  keys () {
    return this[LRU_LIST].toArray().map(k => k.key)
  }

  values () {
    return this[LRU_LIST].toArray().map(k => k.value)
  }

  reset () {
    if (this[DISPOSE] &&
        this[LRU_LIST] &&
        this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
    }

    this[CACHE] = new Map(); // hash of items by key
    this[LRU_LIST] = new Yallist(); // list of items in order of use recency
    this[LENGTH] = 0; // length of items in the list
  }

  dump () {
    return this[LRU_LIST].map(hit =>
      isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h)
  }

  dumpLru () {
    return this[LRU_LIST]
  }

  set (key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE];

    if (maxAge && typeof maxAge !== 'number')
      throw new TypeError('maxAge must be a number')

    const now = maxAge ? Date.now() : 0;
    const len = this[LENGTH_CALCULATOR](value, key);

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key));
        return false
      }

      const node = this[CACHE].get(key);
      const item = node.value;

      // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key, item.value);
      }

      item.now = now;
      item.maxAge = maxAge;
      item.value = value;
      this[LENGTH] += len - item.length;
      item.length = len;
      this.get(key);
      trim$1(this);
      return true
    }

    const hit = new Entry(key, value, len, now, maxAge);

    // oversized objects fall out of cache automatically.
    if (hit.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key, value);

      return false
    }

    this[LENGTH] += hit.length;
    this[LRU_LIST].unshift(hit);
    this[CACHE].set(key, this[LRU_LIST].head);
    trim$1(this);
    return true
  }

  has (key) {
    if (!this[CACHE].has(key)) return false
    const hit = this[CACHE].get(key).value;
    return !isStale(this, hit)
  }

  get (key) {
    return get(this, key, true)
  }

  peek (key) {
    return get(this, key, false)
  }

  pop () {
    const node = this[LRU_LIST].tail;
    if (!node)
      return null

    del(this, node);
    return node.value
  }

  del (key) {
    del(this, this[CACHE].get(key));
  }

  load (arr) {
    // reset the cache
    this.reset();

    const now = Date.now();
    // A previous serialized cache has the most recent items first
    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l];
      const expiresAt = hit.e || 0;
      if (expiresAt === 0)
        // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v);
      else {
        const maxAge = expiresAt - now;
        // dont add already expired items
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge);
        }
      }
    }
  }

  prune () {
    this[CACHE].forEach((value, key) => get(this, key, false));
  }
}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key);
  if (node) {
    const hit = node.value;
    if (isStale(self, hit)) {
      del(self, node);
      if (!self[ALLOW_STALE])
        return undefined
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now();
        self[LRU_LIST].unshiftNode(node);
      }
    }
    return hit.value
  }
};

const isStale = (self, hit) => {
  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    return false

  const diff = Date.now() - hit.now;
  return hit.maxAge ? diff > hit.maxAge
    : self[MAX_AGE] && (diff > self[MAX_AGE])
};

const trim$1 = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail;
      self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev;
      del(self, walker);
      walker = prev;
    }
  }
};

const del = (self, node) => {
  if (node) {
    const hit = node.value;
    if (self[DISPOSE])
      self[DISPOSE](hit.key, hit.value);

    self[LENGTH] -= hit.length;
    self[CACHE].delete(hit.key);
    self[LRU_LIST].removeNode(node);
  }
};

class Entry {
  constructor (key, value, length, now, maxAge) {
    this.key = key;
    this.value = value;
    this.length = length;
    this.now = now;
    this.maxAge = maxAge || 0;
  }
}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value;
  if (isStale(self, hit)) {
    del(self, node);
    if (!self[ALLOW_STALE])
      hit = undefined;
  }
  if (hit)
    fn.call(thisp, hit.value, hit.key, self);
};

var lruCache = LRUCache;

// hoisted class for cyclic dependency
class Range$b {
  constructor (range, options) {
    options = parseOptions$1(options);

    if (range instanceof Range$b) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range$b(range.raw, options)
      }
    }

    if (range instanceof Comparator$4) {
      // just put it in the set and return
      this.raw = range.value;
      this.set = [[range]];
      this.format();
      return this
    }

    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    this.raw = range
      .trim()
      .split(/\s+/)
      .join(' ');

    // First, split on ||
    this.set = this.raw
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length);

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0];
      this.set = this.set.filter(c => !isNullSet(c[0]));
      if (this.set.length === 0) {
        this.set = [first];
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c];
            break
          }
        }
      }
    }

    this.format();
  }

  format () {
    this.range = this.set
      .map((comps) => comps.join(' ').trim())
      .join('||')
      .trim();
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts =
      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
      (this.options.loose && FLAG_LOOSE);
    const memoKey = memoOpts + ':' + range;
    const cached = cache$2.get(memoKey);
    if (cached) {
      return cached
    }

    const loose = this.options.loose;
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re$1[t$2.HYPHENRANGELOOSE] : re$1[t$2.HYPHENRANGE];
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
    debug$1('hyphen replace', range);

    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re$1[t$2.COMPARATORTRIM], comparatorTrimReplace);
    debug$1('comparator trim', range);

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re$1[t$2.TILDETRIM], tildeTrimReplace);
    debug$1('tilde trim', range);

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re$1[t$2.CARETTRIM], caretTrimReplace);
    debug$1('caret trim', range);

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options));

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug$1('loose invalid filter', comp, this.options);
        return !!comp.match(re$1[t$2.COMPARATORLOOSE])
      });
    }
    debug$1('range list', rangeList);

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map();
    const comparators = rangeList.map(comp => new Comparator$4(comp, this.options));
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp);
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('');
    }

    const result = [...rangeMap.values()];
    cache$2.set(memoKey, result);
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range$b)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer$6(version, this.options);
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}

var range = Range$b;

const LRU = lruCache;
const cache$2 = new LRU({ max: 1000 });

const parseOptions$1 = parseOptions_1;
const Comparator$4 = comparator;
const debug$1 = debug_1;
const SemVer$6 = semver$1;
const {
  safeRe: re$1,
  t: t$2,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = re$4.exports;
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$1;

const isNullSet = c => c.value === '<0.0.0-0';
const isAny = c => c.value === '';

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true;
  const remainingComparators = comparators.slice();
  let testComparator = remainingComparators.pop();

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    });

    testComparator = remainingComparators.pop();
  }

  return result
};

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug$1('comp', comp, options);
  comp = replaceCarets(comp, options);
  debug$1('caret', comp);
  comp = replaceTildes(comp, options);
  debug$1('tildes', comp);
  comp = replaceXRanges(comp, options);
  debug$1('xrange', comp);
  comp = replaceStars(comp, options);
  debug$1('stars', comp);
  return comp
};

const isX = id => !id || id.toLowerCase() === 'x' || id === '*';

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceTilde(c, options))
    .join(' ')
};

const replaceTilde = (comp, options) => {
  const r = options.loose ? re$1[t$2.TILDELOOSE] : re$1[t$2.TILDE];
  return comp.replace(r, (_, M, m, p, pr) => {
    debug$1('tilde', comp, _, M, m, p, pr);
    let ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
    } else if (pr) {
      debug$1('replaceTilde pr', pr);
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`;
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`;
    }

    debug$1('tilde return', ret);
    return ret
  })
};

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceCaret(c, options))
    .join(' ')
};

const replaceCaret = (comp, options) => {
  debug$1('caret', comp, options);
  const r = options.loose ? re$1[t$2.CARETLOOSE] : re$1[t$2.CARET];
  const z = options.includePrerelease ? '-0' : '';
  return comp.replace(r, (_, M, m, p, pr) => {
    debug$1('caret', comp, _, M, m, p, pr);
    let ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
      }
    } else if (pr) {
      debug$1('replaceCaret pr', pr);
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`;
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`;
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`;
      }
    } else {
      debug$1('no pr');
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`;
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`;
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`;
      }
    }

    debug$1('caret return', ret);
    return ret
  })
};

const replaceXRanges = (comp, options) => {
  debug$1('replaceXRanges', comp, options);
  return comp
    .split(/\s+/)
    .map((c) => replaceXRange(c, options))
    .join(' ')
};

const replaceXRange = (comp, options) => {
  comp = comp.trim();
  const r = options.loose ? re$1[t$2.XRANGELOOSE] : re$1[t$2.XRANGE];
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug$1('xRange', comp, ret, gtlt, M, m, p, pr);
    const xM = isX(M);
    const xm = xM || isX(m);
    const xp = xm || isX(p);
    const anyX = xp;

    if (gtlt === '=' && anyX) {
      gtlt = '';
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0;
      }
      p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>=';
        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';
        if (xm) {
          M = +M + 1;
        } else {
          m = +m + 1;
        }
      }

      if (gtlt === '<') {
        pr = '-0';
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`;
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`;
    }

    debug$1('xRange return', ret);

    return ret
  })
};

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug$1('replaceStars', comp, options);
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp
    .trim()
    .replace(re$1[t$2.STAR], '')
};

const replaceGTE0 = (comp, options) => {
  debug$1('replaceGTE0', comp, options);
  return comp
    .trim()
    .replace(re$1[options.includePrerelease ? t$2.GTE0PRE : t$2.GTE0], '')
};

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) => {
  if (isX(fM)) {
    from = '';
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
  } else if (fpr) {
    from = `>=${from}`;
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`;
  }

  if (isX(tM)) {
    to = '';
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`;
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`;
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`;
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`;
  } else {
    to = `<=${to}`;
  }

  return `${from} ${to}`.trim()
};

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug$1(set[i].semver);
      if (set[i].semver === Comparator$4.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver;
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
};

const ANY$2 = Symbol('SemVer ANY');
// hoisted class for cyclic dependency
class Comparator$3 {
  static get ANY () {
    return ANY$2
  }

  constructor (comp, options) {
    options = parseOptions(options);

    if (comp instanceof Comparator$3) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value;
      }
    }

    comp = comp.trim().split(/\s+/).join(' ');
    debug('comparator', comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);

    if (this.semver === ANY$2) {
      this.value = '';
    } else {
      this.value = this.operator + this.semver.version;
    }

    debug('comp', this);
  }

  parse (comp) {
    const r = this.options.loose ? re[t$1.COMPARATORLOOSE] : re[t$1.COMPARATOR];
    const m = comp.match(r);

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : '';
    if (this.operator === '=') {
      this.operator = '';
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY$2;
    } else {
      this.semver = new SemVer$5(m[2], this.options.loose);
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose);

    if (this.semver === ANY$2 || version === ANY$2) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer$5(version, this.options);
      } catch (er) {
        return false
      }
    }

    return cmp$1(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator$3)) {
      throw new TypeError('a Comparator is required')
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range$a(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range$a(this.value, options).test(comp.semver)
    }

    options = parseOptions(options);

    // Special cases where nothing can possibly be lower
    if (options.includePrerelease &&
      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
      return false
    }
    if (!options.includePrerelease &&
      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
      return false
    }

    // Same direction increasing (> or >=)
    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
      return true
    }
    // Same direction decreasing (< or <=)
    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
      return true
    }
    // same SemVer and both sides are inclusive (<= or >=)
    if (
      (this.semver.version === comp.semver.version) &&
      this.operator.includes('=') && comp.operator.includes('=')) {
      return true
    }
    // opposite directions less than
    if (cmp$1(this.semver, '<', comp.semver, options) &&
      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
      return true
    }
    // opposite directions greater than
    if (cmp$1(this.semver, '>', comp.semver, options) &&
      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
      return true
    }
    return false
  }
}

var comparator = Comparator$3;

const parseOptions = parseOptions_1;
const { safeRe: re, t: t$1 } = re$4.exports;
const cmp$1 = cmp_1;
const debug = debug_1;
const SemVer$5 = semver$1;
const Range$a = range;

const Range$9 = range;
const satisfies$4 = (version, range, options) => {
  try {
    range = new Range$9(range, options);
  } catch (er) {
    return false
  }
  return range.test(version)
};
var satisfies_1 = satisfies$4;

const Range$8 = range;

// Mostly just for testing and legacy API reasons
const toComparators$1 = (range, options) =>
  new Range$8(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));

var toComparators_1 = toComparators$1;

const SemVer$4 = semver$1;
const Range$7 = range;

const maxSatisfying$1 = (versions, range, options) => {
  let max = null;
  let maxSV = null;
  let rangeObj = null;
  try {
    rangeObj = new Range$7(range, options);
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v;
        maxSV = new SemVer$4(max, options);
      }
    }
  });
  return max
};
var maxSatisfying_1 = maxSatisfying$1;

const SemVer$3 = semver$1;
const Range$6 = range;
const minSatisfying$1 = (versions, range, options) => {
  let min = null;
  let minSV = null;
  let rangeObj = null;
  try {
    rangeObj = new Range$6(range, options);
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v;
        minSV = new SemVer$3(min, options);
      }
    }
  });
  return min
};
var minSatisfying_1 = minSatisfying$1;

const SemVer$2 = semver$1;
const Range$5 = range;
const gt$2 = gt_1;

const minVersion$1 = (range, loose) => {
  range = new Range$5(range, loose);

  let minver = new SemVer$2('0.0.0');
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer$2('0.0.0-0');
  if (range.test(minver)) {
    return minver
  }

  minver = null;
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i];

    let setMin = null;
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer$2(comparator.semver.version);
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }
          compver.raw = compver.format();
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt$2(compver, setMin)) {
            setMin = compver;
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    });
    if (setMin && (!minver || gt$2(minver, setMin))) {
      minver = setMin;
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
};
var minVersion_1 = minVersion$1;

const Range$4 = range;
const validRange$1 = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range$4(range, options).range || '*'
  } catch (er) {
    return null
  }
};
var valid$1 = validRange$1;

const SemVer$1 = semver$1;
const Comparator$2 = comparator;
const { ANY: ANY$1 } = Comparator$2;
const Range$3 = range;
const satisfies$3 = satisfies_1;
const gt$1 = gt_1;
const lt$1 = lt_1;
const lte$1 = lte_1;
const gte$1 = gte_1;

const outside$3 = (version, range, hilo, options) => {
  version = new SemVer$1(version, options);
  range = new Range$3(range, options);

  let gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt$1;
      ltefn = lte$1;
      ltfn = lt$1;
      comp = '>';
      ecomp = '>=';
      break
    case '<':
      gtfn = lt$1;
      ltefn = gte$1;
      ltfn = gt$1;
      comp = '<';
      ecomp = '<=';
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies$3(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i];

    let high = null;
    let low = null;

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY$1) {
        comparator = new Comparator$2('>=0.0.0');
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
};

var outside_1 = outside$3;

// Determine if version is greater than all the versions possible in the range.
const outside$2 = outside_1;
const gtr$1 = (version, range, options) => outside$2(version, range, '>', options);
var gtr_1 = gtr$1;

const outside$1 = outside_1;
// Determine if version is less than all the versions possible in the range
const ltr$1 = (version, range, options) => outside$1(version, range, '<', options);
var ltr_1 = ltr$1;

const Range$2 = range;
const intersects$1 = (r1, r2, options) => {
  r1 = new Range$2(r1, options);
  r2 = new Range$2(r2, options);
  return r1.intersects(r2, options)
};
var intersects_1 = intersects$1;

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies$2 = satisfies_1;
const compare$2 = compare_1;
var simplify = (versions, range, options) => {
  const set = [];
  let first = null;
  let prev = null;
  const v = versions.sort((a, b) => compare$2(a, b, options));
  for (const version of v) {
    const included = satisfies$2(version, range, options);
    if (included) {
      prev = version;
      if (!first) {
        first = version;
      }
    } else {
      if (prev) {
        set.push([first, prev]);
      }
      prev = null;
      first = null;
    }
  }
  if (first) {
    set.push([first, null]);
  }

  const ranges = [];
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min);
    } else if (!max && min === v[0]) {
      ranges.push('*');
    } else if (!max) {
      ranges.push(`>=${min}`);
    } else if (min === v[0]) {
      ranges.push(`<=${max}`);
    } else {
      ranges.push(`${min} - ${max}`);
    }
  }
  const simplified = ranges.join(' || ');
  const original = typeof range.raw === 'string' ? range.raw : String(range);
  return simplified.length < original.length ? simplified : range
};

const Range$1 = range;
const Comparator$1 = comparator;
const { ANY } = Comparator$1;
const satisfies$1 = satisfies_1;
const compare$1 = compare_1;

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset$1 = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range$1(sub, options);
  dom = new Range$1(dom, options);
  let sawNonNull = false;

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options);
      sawNonNull = sawNonNull || isSub !== null;
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
};

const minimumVersionWithPreRelease = [new Comparator$1('>=0.0.0-0')];
const minimumVersion = [new Comparator$1('>=0.0.0')];

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease;
    } else {
      sub = minimumVersion;
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = minimumVersion;
    }
  }

  const eqSet = new Set();
  let gt, lt;
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options);
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options);
    } else {
      eqSet.add(c.semver);
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp;
  if (gt && lt) {
    gtltComp = compare$1(gt.semver, lt.semver, options);
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies$1(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies$1(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies$1(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower;
  let hasDomLT, hasDomGT;
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false;
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false;
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false;
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false;
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options);
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies$1(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false;
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options);
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies$1(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
};

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare$1(a.semver, b.semver, options);
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
};

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare$1(a.semver, b.semver, options);
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
};

var subset_1 = subset$1;

// just pre-load all the stuff that index.js lazily exports
const internalRe = re$4.exports;
const constants = constants$1;
const SemVer = semver$1;
const identifiers = identifiers$1;
const parse$3 = parse_1$1;
const valid = valid_1;
const clean = clean_1;
const inc = inc_1;
const diff = diff_1;
const major = major_1;
const minor = minor_1;
const patch = patch_1;
const prerelease = prerelease_1;
const compare = compare_1;
const rcompare = rcompare_1;
const compareLoose = compareLoose_1;
const compareBuild = compareBuild_1;
const sort = sort_1;
const rsort = rsort_1;
const gt = gt_1;
const lt = lt_1;
const eq = eq_1;
const neq = neq_1;
const gte = gte_1;
const lte = lte_1;
const cmp = cmp_1;
const coerce = coerce_1;
const Comparator = comparator;
const Range = range;
const satisfies = satisfies_1;
const toComparators = toComparators_1;
const maxSatisfying = maxSatisfying_1;
const minSatisfying = minSatisfying_1;
const minVersion = minVersion_1;
const validRange = valid$1;
const outside = outside_1;
const gtr = gtr_1;
const ltr = ltr_1;
const intersects = intersects_1;
const simplifyRange = simplify;
const subset = subset_1;
var semver = {
  parse: parse$3,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
};

const scriptRel = 'modulepreload';const seen = {};const base = '/';const __vitePreload = function preload(baseModule, deps) {
    // @ts-ignore
    if (!true || !deps || deps.length === 0) {
        return baseModule();
    }
    return Promise.all(deps.map((dep) => {
        // @ts-ignore
        dep = `${base}${dep}`;
        // @ts-ignore
        if (dep in seen)
            return;
        // @ts-ignore
        seen[dep] = true;
        const isCss = dep.endsWith('.css');
        const cssSelector = isCss ? '[rel="stylesheet"]' : '';
        // @ts-ignore check if the file is already preloaded by SSR markup
        if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
            return;
        }
        // @ts-ignore
        const link = document.createElement('link');
        // @ts-ignore
        link.rel = isCss ? 'stylesheet' : scriptRel;
        if (!isCss) {
            link.as = 'script';
            link.crossOrigin = '';
        }
        link.href = dep;
        // @ts-ignore
        document.head.appendChild(link);
        if (isCss) {
            return new Promise((res, rej) => {
                link.addEventListener('load', res);
                link.addEventListener('error', () => rej(new Error(`Unable to preload CSS for ${dep}`)));
            });
        }
    })).then(() => baseModule());
};

/*!
 * vue-i18n v8.28.2 
 * (c) 2022 kazuya kawaguchi
 * Released under the MIT License.
 */
/*  */

/**
 * constants
 */

var numberFormatKeys = [
  'compactDisplay',
  'currency',
  'currencyDisplay',
  'currencySign',
  'localeMatcher',
  'notation',
  'numberingSystem',
  'signDisplay',
  'style',
  'unit',
  'unitDisplay',
  'useGrouping',
  'minimumIntegerDigits',
  'minimumFractionDigits',
  'maximumFractionDigits',
  'minimumSignificantDigits',
  'maximumSignificantDigits'
];

var dateTimeFormatKeys = [
  'dateStyle',
  'timeStyle',
  'calendar',
  'localeMatcher',
  "hour12",
  "hourCycle",
  "timeZone",
  "formatMatcher",
  'weekday',
  'era',
  'year',
  'month',
  'day',
  'hour',
  'minute',
  'second',
  'timeZoneName' ];

/**
 * utilities
 */

function warn (msg, err) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.warn(err.stack);
    }
  }
}

function error (msg, err) {
  if (typeof console !== 'undefined') {
    console.error('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.error(err.stack);
    }
  }
}

var isArray$1 = Array.isArray;

function isObject$2 (obj) {
  return obj !== null && typeof obj === 'object'
}

function isBoolean (val) {
  return typeof val === 'boolean'
}

function isString$1 (val) {
  return typeof val === 'string'
}

var toString$2 = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';
function isPlainObject$1 (obj) {
  return toString$2.call(obj) === OBJECT_STRING
}

function isNull (val) {
  return val === null || val === undefined
}

function isFunction$1 (val) {
  return typeof val === 'function'
}

function parseArgs () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  var locale = null;
  var params = null;
  if (args.length === 1) {
    if (isObject$2(args[0]) || isArray$1(args[0])) {
      params = args[0];
    } else if (typeof args[0] === 'string') {
      locale = args[0];
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      locale = args[0];
    }
    /* istanbul ignore if */
    if (isObject$2(args[1]) || isArray$1(args[1])) {
      params = args[1];
    }
  }

  return { locale: locale, params: params }
}

function looseClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function remove (arr, item) {
  if (arr.delete(item)) {
    return arr
  }
}

function arrayFrom (arr) {
  var ret = [];
  arr.forEach(function (a) { return ret.push(a); });
  return ret
}

function includes (arr, item) {
  return !!~arr.indexOf(item)
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

function merge$1 (target) {
  var arguments$1 = arguments;

  var output = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments$1[i];
    if (source !== undefined && source !== null) {
      var key = (void 0);
      for (key in source) {
        if (hasOwn(source, key)) {
          if (isObject$2(source[key])) {
            output[key] = merge$1(output[key], source[key]);
          } else {
            output[key] = source[key];
          }
        }
      }
    }
  }
  return output
}

function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject$2(a);
  var isObjectB = isObject$2(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = isArray$1(a);
      var isArrayB = isArray$1(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Sanitizes html special characters from input strings. For mitigating risk of XSS attacks.
 * @param rawText The raw input from the user that should be escaped.
 */
function escapeHtml(rawText) {
  return rawText
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;')
}

/**
 * Escapes html tags and special symbols from all provided params which were returned from parseArgs().params.
 * This method performs an in-place operation on the params object.
 *
 * @param {any} params Parameters as provided from `parseArgs().params`.
 *                     May be either an array of strings or a string->any map.
 *
 * @returns The manipulated `params` object.
 */
function escapeParams(params) {
  if(params != null) {
    Object.keys(params).forEach(function (key) {
      if(typeof(params[key]) == 'string') {
        params[key] = escapeHtml(params[key]);
      }
    });
  }
  return params
}

/*  */

function extend$2 (Vue) {
  if (!Vue.prototype.hasOwnProperty('$i18n')) {
    // $FlowFixMe
    Object.defineProperty(Vue.prototype, '$i18n', {
      get: function get () { return this._i18n }
    });
  }

  Vue.prototype.$t = function (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

    var i18n = this.$i18n;
    return i18n._t.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this ].concat( values ))
  };

  Vue.prototype.$tc = function (key, choice) {
    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

    var i18n = this.$i18n;
    return i18n._tc.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this, choice ].concat( values ))
  };

  Vue.prototype.$te = function (key, locale) {
    var i18n = this.$i18n;
    return i18n._te(key, i18n.locale, i18n._getMessages(), locale)
  };

  Vue.prototype.$d = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).d.apply(ref, [ value ].concat( args ))
  };

  Vue.prototype.$n = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).n.apply(ref, [ value ].concat( args ))
  };
}

/*  */

/**
 * Mixin
 * 
 * If `bridge` mode, empty mixin is returned,
 * else regulary mixin implementation is returned.
 */
function defineMixin (bridge) {
  if ( bridge === void 0 ) bridge = false;

  function mounted () {
    if (this !== this.$root && this.$options.__INTLIFY_META__ && this.$el) {
      this.$el.setAttribute('data-intlify', this.$options.__INTLIFY_META__);
    }
  }

  return bridge
    ? { mounted: mounted } // delegate `vue-i18n-bridge` mixin implementation
    : { // regulary 
    beforeCreate: function beforeCreate () {
      var options = this.$options;
      options.i18n = options.i18n || ((options.__i18nBridge || options.__i18n) ? {} : null);

      if (options.i18n) {
        if (options.i18n instanceof VueI18n) {
          // init locale messages via custom blocks
          if ((options.__i18nBridge || options.__i18n)) {
            try {
              var localeMessages = options.i18n && options.i18n.messages ? options.i18n.messages : {};
              var _i18n = options.__i18nBridge || options.__i18n;
              _i18n.forEach(function (resource) {
                localeMessages = merge$1(localeMessages, JSON.parse(resource));
              });
              Object.keys(localeMessages).forEach(function (locale) {
                options.i18n.mergeLocaleMessage(locale, localeMessages[locale]);
              });
            } catch (e) {
            }
          }
          this._i18n = options.i18n;
          this._i18nWatcher = this._i18n.watchI18nData();
        } else if (isPlainObject$1(options.i18n)) {
          var rootI18n = this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n
            ? this.$root.$i18n
            : null;
          // component local i18n
          if (rootI18n) {
            options.i18n.root = this.$root;
            options.i18n.formatter = rootI18n.formatter;
            options.i18n.fallbackLocale = rootI18n.fallbackLocale;
            options.i18n.formatFallbackMessages = rootI18n.formatFallbackMessages;
            options.i18n.silentTranslationWarn = rootI18n.silentTranslationWarn;
            options.i18n.silentFallbackWarn = rootI18n.silentFallbackWarn;
            options.i18n.pluralizationRules = rootI18n.pluralizationRules;
            options.i18n.preserveDirectiveContent = rootI18n.preserveDirectiveContent;
          }

          // init locale messages via custom blocks
          if ((options.__i18nBridge || options.__i18n)) {
            try {
              var localeMessages$1 = options.i18n && options.i18n.messages ? options.i18n.messages : {};
              var _i18n$1 = options.__i18nBridge || options.__i18n;
              _i18n$1.forEach(function (resource) {
                localeMessages$1 = merge$1(localeMessages$1, JSON.parse(resource));
              });
              options.i18n.messages = localeMessages$1;
            } catch (e) {
            }
          }

          var ref = options.i18n;
          var sharedMessages = ref.sharedMessages;
          if (sharedMessages && isPlainObject$1(sharedMessages)) {
            options.i18n.messages = merge$1(options.i18n.messages, sharedMessages);
          }

          this._i18n = new VueI18n(options.i18n);
          this._i18nWatcher = this._i18n.watchI18nData();

          if (options.i18n.sync === undefined || !!options.i18n.sync) {
            this._localeWatcher = this.$i18n.watchLocale();
          }

          if (rootI18n) {
            rootI18n.onComponentInstanceCreated(this._i18n);
          }
        } else ;
      } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
        // root i18n
        this._i18n = this.$root.$i18n;
      } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
        // parent i18n
        this._i18n = options.parent.$i18n;
      }
    },

    beforeMount: function beforeMount () {
      var options = this.$options;
      options.i18n = options.i18n || ((options.__i18nBridge || options.__i18n) ? {} : null);

      if (options.i18n) {
        if (options.i18n instanceof VueI18n) {
          // init locale messages via custom blocks
          this._i18n.subscribeDataChanging(this);
          this._subscribing = true;
        } else if (isPlainObject$1(options.i18n)) {
          this._i18n.subscribeDataChanging(this);
          this._subscribing = true;
        } else ;
      } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      }
    },

    mounted: mounted,

    beforeDestroy: function beforeDestroy () {
      if (!this._i18n) { return }

      var self = this;
      this.$nextTick(function () {
        if (self._subscribing) {
          self._i18n.unsubscribeDataChanging(self);
          delete self._subscribing;
        }

        if (self._i18nWatcher) {
          self._i18nWatcher();
          self._i18n.destroyVM();
          delete self._i18nWatcher;
        }

        if (self._localeWatcher) {
          self._localeWatcher();
          delete self._localeWatcher;
        }
      });
    }
  }
}

/*  */

var interpolationComponent = {
  name: 'i18n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    locale: {
      type: String
    },
    places: {
      type: [Array, Object]
    }
  },
  render: function render (h, ref) {
    var data = ref.data;
    var parent = ref.parent;
    var props = ref.props;
    var slots = ref.slots;

    var $i18n = parent.$i18n;
    if (!$i18n) {
      return
    }

    var path = props.path;
    var locale = props.locale;
    var places = props.places;
    var params = slots();
    var children = $i18n.i(
      path,
      locale,
      onlyHasDefaultPlace(params) || places
        ? useLegacyPlaces(params.default, places)
        : params
    );

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag ? h(tag, data, children) : children
  }
};

function onlyHasDefaultPlace (params) {
  var prop;
  for (prop in params) {
    if (prop !== 'default') { return false }
  }
  return Boolean(prop)
}

function useLegacyPlaces (children, places) {
  var params = places ? createParamsFromPlaces(places) : {};

  if (!children) { return params }

  // Filter empty text nodes
  children = children.filter(function (child) {
    return child.tag || child.text.trim() !== ''
  });

  var everyPlace = children.every(vnodeHasPlaceAttribute);

  return children.reduce(
    everyPlace ? assignChildPlace : assignChildIndex,
    params
  )
}

function createParamsFromPlaces (places) {

  return Array.isArray(places)
    ? places.reduce(assignChildIndex, {})
    : Object.assign({}, places)
}

function assignChildPlace (params, child) {
  if (child.data && child.data.attrs && child.data.attrs.place) {
    params[child.data.attrs.place] = child;
  }
  return params
}

function assignChildIndex (params, child, index) {
  params[index] = child;
  return params
}

function vnodeHasPlaceAttribute (vnode) {
  return Boolean(vnode.data && vnode.data.attrs && vnode.data.attrs.place)
}

/*  */

var numberComponent = {
  name: 'i18n-n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    },
    locale: {
      type: String
    }
  },
  render: function render (h, ref) {
    var props = ref.props;
    var parent = ref.parent;
    var data = ref.data;

    var i18n = parent.$i18n;

    if (!i18n) {
      return null
    }

    var key = null;
    var options = null;

    if (isString$1(props.format)) {
      key = props.format;
    } else if (isObject$2(props.format)) {
      if (props.format.key) {
        key = props.format.key;
      }

      // Filter out number format options only
      options = Object.keys(props.format).reduce(function (acc, prop) {
        var obj;

        if (includes(numberFormatKeys, prop)) {
          return Object.assign({}, acc, ( obj = {}, obj[prop] = props.format[prop], obj ))
        }
        return acc
      }, null);
    }

    var locale = props.locale || i18n.locale;
    var parts = i18n._ntp(props.value, locale, key, options);

    var values = parts.map(function (part, index) {
      var obj;

      var slot = data.scopedSlots && data.scopedSlots[part.type];
      return slot ? slot(( obj = {}, obj[part.type] = part.value, obj.index = index, obj.parts = parts, obj )) : part.value
    });

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag
      ? h(tag, {
        attrs: data.attrs,
        'class': data['class'],
        staticClass: data.staticClass
      }, values)
      : values
  }
};

/*  */

function bind$3 (el, binding, vnode) {
  if (!assert(el, vnode)) { return }

  t(el, binding, vnode);
}

function update$1 (el, binding, vnode, oldVNode) {
  if (!assert(el, vnode)) { return }

  var i18n = vnode.context.$i18n;
  if (localeEqual(el, vnode) &&
    (looseEqual(binding.value, binding.oldValue) &&
     looseEqual(el._localeMessage, i18n.getLocaleMessage(i18n.locale)))) { return }

  t(el, binding, vnode);
}

function unbind$5 (el, binding, vnode, oldVNode) {
  var vm = vnode.context;
  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return
  }

  var i18n = vnode.context.$i18n || {};
  if (!binding.modifiers.preserve && !i18n.preserveDirectiveContent) {
    el.textContent = '';
  }
  el._vt = undefined;
  delete el['_vt'];
  el._locale = undefined;
  delete el['_locale'];
  el._localeMessage = undefined;
  delete el['_localeMessage'];
}

function assert (el, vnode) {
  var vm = vnode.context;
  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return false
  }

  if (!vm.$i18n) {
    warn('VueI18n instance does not exists in Vue instance');
    return false
  }

  return true
}

function localeEqual (el, vnode) {
  var vm = vnode.context;
  return el._locale === vm.$i18n.locale
}

function t (el, binding, vnode) {
  var ref$1, ref$2;

  var value = binding.value;

  var ref = parseValue(value);
  var path = ref.path;
  var locale = ref.locale;
  var args = ref.args;
  var choice = ref.choice;
  if (!path && !locale && !args) {
    warn('value type not supported');
    return
  }

  if (!path) {
    warn('`path` is required in v-t directive');
    return
  }

  var vm = vnode.context;
  if (choice != null) {
    el._vt = el.textContent = (ref$1 = vm.$i18n).tc.apply(ref$1, [ path, choice ].concat( makeParams(locale, args) ));
  } else {
    el._vt = el.textContent = (ref$2 = vm.$i18n).t.apply(ref$2, [ path ].concat( makeParams(locale, args) ));
  }
  el._locale = vm.$i18n.locale;
  el._localeMessage = vm.$i18n.getLocaleMessage(vm.$i18n.locale);
}

function parseValue (value) {
  var path;
  var locale;
  var args;
  var choice;

  if (isString$1(value)) {
    path = value;
  } else if (isPlainObject$1(value)) {
    path = value.path;
    locale = value.locale;
    args = value.args;
    choice = value.choice;
  }

  return { path: path, locale: locale, args: args, choice: choice }
}

function makeParams (locale, args) {
  var params = [];

  locale && params.push(locale);
  if (args && (Array.isArray(args) || isPlainObject$1(args))) {
    params.push(args);
  }

  return params
}

var Vue;

function install$2 (_Vue, options) {
  if ( options === void 0 ) options = { bridge: false };
  install$2.installed = true;

  Vue = _Vue;

  (Vue.version && Number(Vue.version.split('.')[0])) || -1;

  extend$2(Vue);
  Vue.mixin(defineMixin(options.bridge));
  Vue.directive('t', { bind: bind$3, update: update$1, unbind: unbind$5 });
  Vue.component(interpolationComponent.name, interpolationComponent);
  Vue.component(numberComponent.name, numberComponent);

  // use simple mergeStrategies to prevent i18n instance lose '__proto__'
  var strats = Vue.config.optionMergeStrategies;
  strats.i18n = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };
}

/*  */

var BaseFormatter = function BaseFormatter () {
  this._caches = Object.create(null);
};

BaseFormatter.prototype.interpolate = function interpolate (message, values) {
  if (!values) {
    return [message]
  }
  var tokens = this._caches[message];
  if (!tokens) {
    tokens = parse$2(message);
    this._caches[message] = tokens;
  }
  return compile$1(tokens, values)
};



var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;

function parse$2 (format) {
  var tokens = [];
  var position = 0;

  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === '{') {
      if (text) {
        tokens.push({ type: 'text', value: text });
      }

      text = '';
      var sub = '';
      char = format[position++];
      while (char !== undefined && char !== '}') {
        sub += char;
        char = format[position++];
      }
      var isClosed = char === '}';

      var type = RE_TOKEN_LIST_VALUE.test(sub)
        ? 'list'
        : isClosed && RE_TOKEN_NAMED_VALUE.test(sub)
          ? 'named'
          : 'unknown';
      tokens.push({ value: sub, type: type });
    } else if (char === '%') {
      // when found rails i18n syntax, skip text capture
      if (format[(position)] !== '{') {
        text += char;
      }
    } else {
      text += char;
    }
  }

  text && tokens.push({ type: 'text', value: text });

  return tokens
}

function compile$1 (tokens, values) {
  var compiled = [];
  var index = 0;

  var mode = Array.isArray(values)
    ? 'list'
    : isObject$2(values)
      ? 'named'
      : 'unknown';
  if (mode === 'unknown') { return compiled }

  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break
      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break
      case 'named':
        if (mode === 'named') {
          compiled.push((values)[token.value]);
        }
        break
    }
    index++;
  }

  return compiled
}

/*  */

/**
 *  Path parser
 *  - Inspired:
 *    Vue.js Path parser
 */

// actions
var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3;

// states
var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;

var pathStateMachine = [];

pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND]
};

pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};

pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};

pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};

pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};

/**
 * Check if an expression is a literal value.
 */

var literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral (exp) {
  return literalValueRE.test(exp)
}

/**
 * Strip quotes from a string
 */

function stripQuotes (str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27)
    ? str.slice(1, -1)
    : str
}

/**
 * Determine the type of a character in a keypath.
 */

function getPathCharType (ch) {
  if (ch === undefined || ch === null) { return 'eof' }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
      return ch

    case 0x5F: // _
    case 0x24: // $
    case 0x2D: // -
      return 'ident'

    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0:  // No-break space
    case 0xFEFF:  // Byte Order Mark
    case 0x2028:  // Line Separator
    case 0x2029:  // Paragraph Separator
      return 'ws'
  }

  return 'ident'
}

/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */

function formatSubPath (path) {
  var trimmed = path.trim();
  // invalid leading 0
  if (path.charAt(0) === '0' && isNaN(path)) { return false }

  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed
}

/**
 * Parse a string path into an array of segments
 */

function parse$1$1 (path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c;
  var key;
  var newChar;
  var type;
  var transition;
  var action;
  var typeMap;
  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;
      if (key === undefined) { return false }
      key = formatSubPath(key);
      if (key === false) {
        return false
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote () {
    var nextChar = path[index + 1];
    if ((mode === IN_SINGLE_QUOTE && nextChar === "'") ||
      (mode === IN_DOUBLE_QUOTE && nextChar === '"')) {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true
    }
  }

  while (mode !== null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];
    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined
        ? c
        : newChar;
      if (action() === false) {
        return
      }
    }

    if (mode === AFTER_PATH) {
      return keys
    }
  }
}





var I18nPath = function I18nPath () {
  this._cache = Object.create(null);
};

/**
 * External parse that check for a cache hit first
 */
I18nPath.prototype.parsePath = function parsePath (path) {
  var hit = this._cache[path];
  if (!hit) {
    hit = parse$1$1(path);
    if (hit) {
      this._cache[path] = hit;
    }
  }
  return hit || []
};

/**
 * Get path value from path string
 */
I18nPath.prototype.getPathValue = function getPathValue (obj, path) {
  if (!isObject$2(obj)) { return null }

  var paths = this.parsePath(path);
  if (paths.length === 0) {
    return null
  } else {
    var length = paths.length;
    var last = obj;
    var i = 0;
    while (i < length) {
      var value = last[paths[i]];
      if (value === undefined || value === null) {
        return null
      }
      last = value;
      i++;
    }

    return last
  }
};

/*  */



var htmlTagMatcher = /<\/?[\w\s="/.':;#-\/]+>/;
var linkKeyMatcher = /(?:@(?:\.[a-zA-Z]+)?:(?:[\w\-_|./]+|\([\w\-_:|./]+\)))/g;
var linkKeyPrefixMatcher = /^@(?:\.([a-zA-Z]+))?:/;
var bracketsMatcher = /[()]/g;
var defaultModifiers = {
  'upper': function (str) { return str.toLocaleUpperCase(); },
  'lower': function (str) { return str.toLocaleLowerCase(); },
  'capitalize': function (str) { return ("" + (str.charAt(0).toLocaleUpperCase()) + (str.substr(1))); }
};

var defaultFormatter = new BaseFormatter();

var VueI18n = function VueI18n (options) {
  var this$1$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #290
  /* istanbul ignore if */
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install$2(window.Vue);
  }

  var locale = options.locale || 'en-US';
  var fallbackLocale = options.fallbackLocale === false
    ? false
    : options.fallbackLocale || 'en-US';
  var messages = options.messages || {};
  var dateTimeFormats = options.dateTimeFormats || options.datetimeFormats || {};
  var numberFormats = options.numberFormats || {};

  this._vm = null;
  this._formatter = options.formatter || defaultFormatter;
  this._modifiers = options.modifiers || {};
  this._missing = options.missing || null;
  this._root = options.root || null;
  this._sync = options.sync === undefined ? true : !!options.sync;
  this._fallbackRoot = options.fallbackRoot === undefined
    ? true
    : !!options.fallbackRoot;
  this._fallbackRootWithEmptyString = options.fallbackRootWithEmptyString === undefined
    ? true
    : !!options.fallbackRootWithEmptyString;
  this._formatFallbackMessages = options.formatFallbackMessages === undefined
    ? false
    : !!options.formatFallbackMessages;
  this._silentTranslationWarn = options.silentTranslationWarn === undefined
    ? false
    : options.silentTranslationWarn;
  this._silentFallbackWarn = options.silentFallbackWarn === undefined
    ? false
    : !!options.silentFallbackWarn;
  this._dateTimeFormatters = {};
  this._numberFormatters = {};
  this._path = new I18nPath();
  this._dataListeners = new Set();
  this._componentInstanceCreatedListener = options.componentInstanceCreatedListener || null;
  this._preserveDirectiveContent = options.preserveDirectiveContent === undefined
    ? false
    : !!options.preserveDirectiveContent;
  this.pluralizationRules = options.pluralizationRules || {};
  this._warnHtmlInMessage = options.warnHtmlInMessage || 'off';
  this._postTranslation = options.postTranslation || null;
  this._escapeParameterHtml = options.escapeParameterHtml || false;

  if ('__VUE_I18N_BRIDGE__' in options) {
    this.__VUE_I18N_BRIDGE__ = options.__VUE_I18N_BRIDGE__;
  }

  /**
   * @param choice {number} a choice index given by the input to $tc: `$tc('path.to.rule', choiceIndex)`
   * @param choicesLength {number} an overall amount of available choices
   * @returns a final choice index
  */
  this.getChoiceIndex = function (choice, choicesLength) {
    var thisPrototype = Object.getPrototypeOf(this$1$1);
    if (thisPrototype && thisPrototype.getChoiceIndex) {
      var prototypeGetChoiceIndex = (thisPrototype.getChoiceIndex);
      return (prototypeGetChoiceIndex).call(this$1$1, choice, choicesLength)
    }

    // Default (old) getChoiceIndex implementation - english-compatible
    var defaultImpl = function (_choice, _choicesLength) {
      _choice = Math.abs(_choice);

      if (_choicesLength === 2) {
        return _choice
          ? _choice > 1
            ? 1
            : 0
          : 1
      }

      return _choice ? Math.min(_choice, 2) : 0
    };

    if (this$1$1.locale in this$1$1.pluralizationRules) {
      return this$1$1.pluralizationRules[this$1$1.locale].apply(this$1$1, [choice, choicesLength])
    } else {
      return defaultImpl(choice, choicesLength)
    }
  };


  this._exist = function (message, key) {
    if (!message || !key) { return false }
    if (!isNull(this$1$1._path.getPathValue(message, key))) { return true }
    // fallback for flat key
    if (message[key]) { return true }
    return false
  };

  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    Object.keys(messages).forEach(function (locale) {
      this$1$1._checkLocaleMessage(locale, this$1$1._warnHtmlInMessage, messages[locale]);
    });
  }

  this._initVM({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    dateTimeFormats: dateTimeFormats,
    numberFormats: numberFormats
  });
};

var prototypeAccessors$1 = { vm: { configurable: true },messages: { configurable: true },dateTimeFormats: { configurable: true },numberFormats: { configurable: true },availableLocales: { configurable: true },locale: { configurable: true },fallbackLocale: { configurable: true },formatFallbackMessages: { configurable: true },missing: { configurable: true },formatter: { configurable: true },silentTranslationWarn: { configurable: true },silentFallbackWarn: { configurable: true },preserveDirectiveContent: { configurable: true },warnHtmlInMessage: { configurable: true },postTranslation: { configurable: true },sync: { configurable: true } };

VueI18n.prototype._checkLocaleMessage = function _checkLocaleMessage (locale, level, message) {
  var paths = [];

  var fn = function (level, locale, message, paths) {
    if (isPlainObject$1(message)) {
      Object.keys(message).forEach(function (key) {
        var val = message[key];
        if (isPlainObject$1(val)) {
          paths.push(key);
          paths.push('.');
          fn(level, locale, val, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(key);
          fn(level, locale, val, paths);
          paths.pop();
        }
      });
    } else if (isArray$1(message)) {
      message.forEach(function (item, index) {
        if (isPlainObject$1(item)) {
          paths.push(("[" + index + "]"));
          paths.push('.');
          fn(level, locale, item, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(("[" + index + "]"));
          fn(level, locale, item, paths);
          paths.pop();
        }
      });
    } else if (isString$1(message)) {
      var ret = htmlTagMatcher.test(message);
      if (ret) {
        var msg = "Detected HTML in message '" + message + "' of keypath '" + (paths.join('')) + "' at '" + locale + "'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";
        if (level === 'warn') {
          warn(msg);
        } else if (level === 'error') {
          error(msg);
        }
      }
    }
  };

  fn(level, locale, message, paths);
};

VueI18n.prototype._initVM = function _initVM (data) {
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  this._vm = new Vue({ data: data, __VUE18N__INSTANCE__: true });
  Vue.config.silent = silent;
};

VueI18n.prototype.destroyVM = function destroyVM () {
  this._vm.$destroy();
};

VueI18n.prototype.subscribeDataChanging = function subscribeDataChanging (vm) {
  this._dataListeners.add(vm);
};

VueI18n.prototype.unsubscribeDataChanging = function unsubscribeDataChanging (vm) {
  remove(this._dataListeners, vm);
};

VueI18n.prototype.watchI18nData = function watchI18nData () {
    var this$1$1 = this;
  return this._vm.$watch('$data', function () {
    var listeners = arrayFrom(this$1$1._dataListeners);
    var i = listeners.length;
    while(i--) {
      Vue.nextTick(function () {
        listeners[i] && listeners[i].$forceUpdate();
      });
    }
  }, { deep: true })
};

VueI18n.prototype.watchLocale = function watchLocale (composer) {
  if (!composer) {
    /* istanbul ignore if */
    if (!this._sync || !this._root) { return null }
    var target = this._vm;
    return this._root.$i18n.vm.$watch('locale', function (val) {
      target.$set(target, 'locale', val);
      target.$forceUpdate();
    }, { immediate: true })
  } else {
    // deal with vue-i18n-bridge
    if (!this.__VUE_I18N_BRIDGE__) { return null }
    var self = this;
    var target$1 = this._vm;
    return this.vm.$watch('locale', function (val) {
      target$1.$set(target$1, 'locale', val);
      if (self.__VUE_I18N_BRIDGE__ && composer) {
        composer.locale.value = val;
      }
      target$1.$forceUpdate();
    }, { immediate: true })
  }
};

VueI18n.prototype.onComponentInstanceCreated = function onComponentInstanceCreated (newI18n) {
  if (this._componentInstanceCreatedListener) {
    this._componentInstanceCreatedListener(newI18n, this);
  }
};

prototypeAccessors$1.vm.get = function () { return this._vm };

prototypeAccessors$1.messages.get = function () { return looseClone(this._getMessages()) };
prototypeAccessors$1.dateTimeFormats.get = function () { return looseClone(this._getDateTimeFormats()) };
prototypeAccessors$1.numberFormats.get = function () { return looseClone(this._getNumberFormats()) };
prototypeAccessors$1.availableLocales.get = function () { return Object.keys(this.messages).sort() };

prototypeAccessors$1.locale.get = function () { return this._vm.locale };
prototypeAccessors$1.locale.set = function (locale) {
  this._vm.$set(this._vm, 'locale', locale);
};

prototypeAccessors$1.fallbackLocale.get = function () { return this._vm.fallbackLocale };
prototypeAccessors$1.fallbackLocale.set = function (locale) {
  this._localeChainCache = {};
  this._vm.$set(this._vm, 'fallbackLocale', locale);
};

prototypeAccessors$1.formatFallbackMessages.get = function () { return this._formatFallbackMessages };
prototypeAccessors$1.formatFallbackMessages.set = function (fallback) { this._formatFallbackMessages = fallback; };

prototypeAccessors$1.missing.get = function () { return this._missing };
prototypeAccessors$1.missing.set = function (handler) { this._missing = handler; };

prototypeAccessors$1.formatter.get = function () { return this._formatter };
prototypeAccessors$1.formatter.set = function (formatter) { this._formatter = formatter; };

prototypeAccessors$1.silentTranslationWarn.get = function () { return this._silentTranslationWarn };
prototypeAccessors$1.silentTranslationWarn.set = function (silent) { this._silentTranslationWarn = silent; };

prototypeAccessors$1.silentFallbackWarn.get = function () { return this._silentFallbackWarn };
prototypeAccessors$1.silentFallbackWarn.set = function (silent) { this._silentFallbackWarn = silent; };

prototypeAccessors$1.preserveDirectiveContent.get = function () { return this._preserveDirectiveContent };
prototypeAccessors$1.preserveDirectiveContent.set = function (preserve) { this._preserveDirectiveContent = preserve; };

prototypeAccessors$1.warnHtmlInMessage.get = function () { return this._warnHtmlInMessage };
prototypeAccessors$1.warnHtmlInMessage.set = function (level) {
    var this$1$1 = this;

  var orgLevel = this._warnHtmlInMessage;
  this._warnHtmlInMessage = level;
  if (orgLevel !== level && (level === 'warn' || level === 'error')) {
    var messages = this._getMessages();
    Object.keys(messages).forEach(function (locale) {
      this$1$1._checkLocaleMessage(locale, this$1$1._warnHtmlInMessage, messages[locale]);
    });
  }
};

prototypeAccessors$1.postTranslation.get = function () { return this._postTranslation };
prototypeAccessors$1.postTranslation.set = function (handler) { this._postTranslation = handler; };

prototypeAccessors$1.sync.get = function () { return this._sync };
prototypeAccessors$1.sync.set = function (val) { this._sync = val; };

VueI18n.prototype._getMessages = function _getMessages () { return this._vm.messages };
VueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats () { return this._vm.dateTimeFormats };
VueI18n.prototype._getNumberFormats = function _getNumberFormats () { return this._vm.numberFormats };

VueI18n.prototype._warnDefault = function _warnDefault (locale, key, result, vm, values, interpolateMode) {
  if (!isNull(result)) { return result }
  if (this._missing) {
    var missingRet = this._missing.apply(null, [locale, key, vm, values]);
    if (isString$1(missingRet)) {
      return missingRet
    }
  }

  if (this._formatFallbackMessages) {
    var parsedArgs = parseArgs.apply(void 0, values);
    return this._render(key, interpolateMode, parsedArgs.params, key)
  } else {
    return key
  }
};

VueI18n.prototype._isFallbackRoot = function _isFallbackRoot (val) {
  return (this._fallbackRootWithEmptyString? !val : isNull(val)) && !isNull(this._root) && this._fallbackRoot
};

VueI18n.prototype._isSilentFallbackWarn = function _isSilentFallbackWarn (key) {
  return this._silentFallbackWarn instanceof RegExp
    ? this._silentFallbackWarn.test(key)
    : this._silentFallbackWarn
};

VueI18n.prototype._isSilentFallback = function _isSilentFallback (locale, key) {
  return this._isSilentFallbackWarn(key) && (this._isFallbackRoot() || locale !== this.fallbackLocale)
};

VueI18n.prototype._isSilentTranslationWarn = function _isSilentTranslationWarn (key) {
  return this._silentTranslationWarn instanceof RegExp
    ? this._silentTranslationWarn.test(key)
    : this._silentTranslationWarn
};

VueI18n.prototype._interpolate = function _interpolate (
  locale,
  message,
  key,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  if (!message) { return null }

  var pathRet = this._path.getPathValue(message, key);
  if (isArray$1(pathRet) || isPlainObject$1(pathRet)) { return pathRet }

  var ret;
  if (isNull(pathRet)) {
    /* istanbul ignore else */
    if (isPlainObject$1(message)) {
      ret = message[key];
      if (!(isString$1(ret) || isFunction$1(ret))) {
        return null
      }
    } else {
      return null
    }
  } else {
    /* istanbul ignore else */
    if (isString$1(pathRet) || isFunction$1(pathRet)) {
      ret = pathRet;
    } else {
      return null
    }
  }

  // Check for the existence of links within the translated string
  if (isString$1(ret) && (ret.indexOf('@:') >= 0 || ret.indexOf('@.') >= 0)) {
    ret = this._link(locale, message, ret, host, 'raw', values, visitedLinkStack);
  }

  return this._render(ret, interpolateMode, values, key)
};

VueI18n.prototype._link = function _link (
  locale,
  message,
  str,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  var ret = str;

  // Match all the links within the local
  // We are going to replace each of
  // them with its translation
  var matches = ret.match(linkKeyMatcher);

  // eslint-disable-next-line no-autofix/prefer-const
  for (var idx in matches) {
    // ie compatible: filter custom array
    // prototype method
    if (!matches.hasOwnProperty(idx)) {
      continue
    }
    var link = matches[idx];
    var linkKeyPrefixMatches = link.match(linkKeyPrefixMatcher);
    var linkPrefix = linkKeyPrefixMatches[0];
      var formatterName = linkKeyPrefixMatches[1];

    // Remove the leading @:, @.case: and the brackets
    var linkPlaceholder = link.replace(linkPrefix, '').replace(bracketsMatcher, '');

    if (includes(visitedLinkStack, linkPlaceholder)) {
      return ret
    }
    visitedLinkStack.push(linkPlaceholder);

    // Translate the link
    var translated = this._interpolate(
      locale, message, linkPlaceholder, host,
      interpolateMode === 'raw' ? 'string' : interpolateMode,
      interpolateMode === 'raw' ? undefined : values,
      visitedLinkStack
    );

    if (this._isFallbackRoot(translated)) {
      /* istanbul ignore if */
      if (!this._root) { throw Error('unexpected error') }
      var root = this._root.$i18n;
      translated = root._translate(
        root._getMessages(), root.locale, root.fallbackLocale,
        linkPlaceholder, host, interpolateMode, values
      );
    }
    translated = this._warnDefault(
      locale, linkPlaceholder, translated, host,
      isArray$1(values) ? values : [values],
      interpolateMode
    );

    if (this._modifiers.hasOwnProperty(formatterName)) {
      translated = this._modifiers[formatterName](translated);
    } else if (defaultModifiers.hasOwnProperty(formatterName)) {
      translated = defaultModifiers[formatterName](translated);
    }

    visitedLinkStack.pop();

    // Replace the link with the translated
    ret = !translated ? ret : ret.replace(link, translated);
  }

  return ret
};

VueI18n.prototype._createMessageContext = function _createMessageContext (values, formatter, path, interpolateMode) {
    var this$1$1 = this;

  var _list = isArray$1(values) ? values : [];
  var _named = isObject$2(values) ? values : {};
  var list = function (index) { return _list[index]; };
  var named = function (key) { return _named[key]; };
  var messages = this._getMessages();
  var locale = this.locale;

  return {
    list: list,
    named: named,
    values: values,
    formatter: formatter,
    path: path,
    messages: messages,
    locale: locale,
    linked: function (linkedKey) { return this$1$1._interpolate(locale, messages[locale] || {}, linkedKey, null, interpolateMode, undefined, [linkedKey]); }
  }
};

VueI18n.prototype._render = function _render (message, interpolateMode, values, path) {
  if (isFunction$1(message)) {
    return message(
      this._createMessageContext(values, this._formatter || defaultFormatter, path, interpolateMode)
    )
  }

  var ret = this._formatter.interpolate(message, values, path);

  // If the custom formatter refuses to work - apply the default one
  if (!ret) {
    ret = defaultFormatter.interpolate(message, values, path);
  }

  // if interpolateMode is **not** 'string' ('row'),
  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter
  return interpolateMode === 'string' && !isString$1(ret) ? ret.join('') : ret
};

VueI18n.prototype._appendItemToChain = function _appendItemToChain (chain, item, blocks) {
  var follow = false;
  if (!includes(chain, item)) {
    follow = true;
    if (item) {
      follow = item[item.length - 1] !== '!';
      item = item.replace(/!/g, '');
      chain.push(item);
      if (blocks && blocks[item]) {
        follow = blocks[item];
      }
    }
  }
  return follow
};

VueI18n.prototype._appendLocaleToChain = function _appendLocaleToChain (chain, locale, blocks) {
  var follow;
  var tokens = locale.split('-');
  do {
    var item = tokens.join('-');
    follow = this._appendItemToChain(chain, item, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && (follow === true))
  return follow
};

VueI18n.prototype._appendBlockToChain = function _appendBlockToChain (chain, block, blocks) {
  var follow = true;
  for (var i = 0; (i < block.length) && (isBoolean(follow)); i++) {
    var locale = block[i];
    if (isString$1(locale)) {
      follow = this._appendLocaleToChain(chain, locale, blocks);
    }
  }
  return follow
};

VueI18n.prototype._getLocaleChain = function _getLocaleChain (start, fallbackLocale) {
  if (start === '') { return [] }

  if (!this._localeChainCache) {
    this._localeChainCache = {};
  }

  var chain = this._localeChainCache[start];
  if (!chain) {
    if (!fallbackLocale) {
      fallbackLocale = this.fallbackLocale;
    }
    chain = [];

    // first block defined by start
    var block = [start];

    // while any intervening block found
    while (isArray$1(block)) {
      block = this._appendBlockToChain(
        chain,
        block,
        fallbackLocale
      );
    }

    // last block defined by default
    var defaults;
    if (isArray$1(fallbackLocale)) {
      defaults = fallbackLocale;
    } else if (isObject$2(fallbackLocale)) {
      /* $FlowFixMe */
      if (fallbackLocale['default']) {
        defaults = fallbackLocale['default'];
      } else {
        defaults = null;
      }
    } else {
      defaults = fallbackLocale;
    }

    // convert defaults to array
    if (isString$1(defaults)) {
      block = [defaults];
    } else {
      block = defaults;
    }
    if (block) {
      this._appendBlockToChain(
        chain,
        block,
        null
      );
    }
    this._localeChainCache[start] = chain;
  }
  return chain
};

VueI18n.prototype._translate = function _translate (
  messages,
  locale,
  fallback,
  key,
  host,
  interpolateMode,
  args
) {
  var chain = this._getLocaleChain(locale, fallback);
  var res;
  for (var i = 0; i < chain.length; i++) {
    var step = chain[i];
    res =
      this._interpolate(step, messages[step], key, host, interpolateMode, args, [key]);
    if (!isNull(res)) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to translate the keypath '" + key + "' with '" + step + "' locale."));
      }
      return res
    }
  }
  return null
};

VueI18n.prototype._t = function _t (key, _locale, messages, host) {
    var ref;

    var values = [], len = arguments.length - 4;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 4 ];
  if (!key) { return '' }

  var parsedArgs = parseArgs.apply(void 0, values);
  if(this._escapeParameterHtml) {
    parsedArgs.params = escapeParams(parsedArgs.params);
  }

  var locale = parsedArgs.locale || _locale;

  var ret = this._translate(
    messages, locale, this.fallbackLocale, key,
    host, 'string', parsedArgs.params
  );
  if (this._isFallbackRoot(ret)) {
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return (ref = this._root).$t.apply(ref, [ key ].concat( values ))
  } else {
    ret = this._warnDefault(locale, key, ret, host, values, 'string');
    if (this._postTranslation && ret !== null && ret !== undefined) {
      ret = this._postTranslation(ret, key);
    }
    return ret
  }
};

VueI18n.prototype.t = function t (key) {
    var ref;

    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];
  return (ref = this)._t.apply(ref, [ key, this.locale, this._getMessages(), null ].concat( values ))
};

VueI18n.prototype._i = function _i (key, locale, messages, host, values) {
  var ret =
    this._translate(messages, locale, this.fallbackLocale, key, host, 'raw', values);
  if (this._isFallbackRoot(ret)) {
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.i(key, locale, values)
  } else {
    return this._warnDefault(locale, key, ret, host, [values], 'raw')
  }
};

VueI18n.prototype.i = function i (key, locale, values) {
  /* istanbul ignore if */
  if (!key) { return '' }

  if (!isString$1(locale)) {
    locale = this.locale;
  }

  return this._i(key, locale, this._getMessages(), null, values)
};

VueI18n.prototype._tc = function _tc (
  key,
  _locale,
  messages,
  host,
  choice
) {
    var ref;

    var values = [], len = arguments.length - 5;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 5 ];
  if (!key) { return '' }
  if (choice === undefined) {
    choice = 1;
  }

  var predefined = { 'count': choice, 'n': choice };
  var parsedArgs = parseArgs.apply(void 0, values);
  parsedArgs.params = Object.assign(predefined, parsedArgs.params);
  values = parsedArgs.locale === null ? [parsedArgs.params] : [parsedArgs.locale, parsedArgs.params];
  return this.fetchChoice((ref = this)._t.apply(ref, [ key, _locale, messages, host ].concat( values )), choice)
};

VueI18n.prototype.fetchChoice = function fetchChoice (message, choice) {
  /* istanbul ignore if */
  if (!message || !isString$1(message)) { return null }
  var choices = message.split('|');

  choice = this.getChoiceIndex(choice, choices.length);
  if (!choices[choice]) { return message }
  return choices[choice].trim()
};

VueI18n.prototype.tc = function tc (key, choice) {
    var ref;

    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];
  return (ref = this)._tc.apply(ref, [ key, this.locale, this._getMessages(), null, choice ].concat( values ))
};

VueI18n.prototype._te = function _te (key, locale, messages) {
    var args = [], len = arguments.length - 3;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

  var _locale = parseArgs.apply(void 0, args).locale || locale;
  return this._exist(messages[_locale], key)
};

VueI18n.prototype.te = function te (key, locale) {
  return this._te(key, this.locale, this._getMessages(), locale)
};

VueI18n.prototype.getLocaleMessage = function getLocaleMessage (locale) {
  return looseClone(this._vm.messages[locale] || {})
};

VueI18n.prototype.setLocaleMessage = function setLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, message);
};

VueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, merge$1(
    typeof this._vm.messages[locale] !== 'undefined' && Object.keys(this._vm.messages[locale]).length
      ? Object.assign({}, this._vm.messages[locale])
      : {},
    message
  ));
};

VueI18n.prototype.getDateTimeFormat = function getDateTimeFormat (locale) {
  return looseClone(this._vm.dateTimeFormats[locale] || {})
};

VueI18n.prototype.setDateTimeFormat = function setDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, format);
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, merge$1(this._vm.dateTimeFormats[locale] || {}, format));
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype._clearDateTimeFormat = function _clearDateTimeFormat (locale, format) {
  // eslint-disable-next-line no-autofix/prefer-const
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._dateTimeFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._dateTimeFormatters[id];
  }
};

VueI18n.prototype._localizeDateTime = function _localizeDateTime (
  value,
  locale,
  fallback,
  dateTimeFormats,
  key,
  options
) {
  var _locale = locale;
  var formats = dateTimeFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = dateTimeFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to '" + step + "' datetime formats from '" + current + "' datetime formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];

    var formatter;
    if (options) {
      formatter = new Intl.DateTimeFormat(_locale, Object.assign({}, format, options));
    } else {
      var id = _locale + "__" + key;
      formatter = this._dateTimeFormatters[id];
      if (!formatter) {
        formatter = this._dateTimeFormatters[id] = new Intl.DateTimeFormat(_locale, format);
      }
    }

    return formatter.format(value)
  }
};

VueI18n.prototype._d = function _d (value, locale, key, options) {

  if (!key) {
    var dtf = !options ? new Intl.DateTimeFormat(locale) : new Intl.DateTimeFormat(locale, options);
    return dtf.format(value)
  }

  var ret =
    this._localizeDateTime(value, locale, this.fallbackLocale, this._getDateTimeFormats(), key, options);
  if (this._isFallbackRoot(ret)) {
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.d(value, key, locale)
  } else {
    return ret || ''
  }
};

VueI18n.prototype.d = function d (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;
  var options = null;

  if (args.length === 1) {
    if (isString$1(args[0])) {
      key = args[0];
    } else if (isObject$2(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }
    }

    options = Object.keys(args[0]).reduce(function (acc, key) {
        var obj;

      if (includes(dateTimeFormatKeys, key)) {
        return Object.assign({}, acc, ( obj = {}, obj[key] = args[0][key], obj ))
      }
      return acc
    }, null);

  } else if (args.length === 2) {
    if (isString$1(args[0])) {
      key = args[0];
    }
    if (isString$1(args[1])) {
      locale = args[1];
    }
  }

  return this._d(value, locale, key, options)
};

VueI18n.prototype.getNumberFormat = function getNumberFormat (locale) {
  return looseClone(this._vm.numberFormats[locale] || {})
};

VueI18n.prototype.setNumberFormat = function setNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, format);
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype.mergeNumberFormat = function mergeNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, merge$1(this._vm.numberFormats[locale] || {}, format));
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype._clearNumberFormat = function _clearNumberFormat (locale, format) {
  // eslint-disable-next-line no-autofix/prefer-const
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._numberFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._numberFormatters[id];
  }
};

VueI18n.prototype._getNumberFormatter = function _getNumberFormatter (
  value,
  locale,
  fallback,
  numberFormats,
  key,
  options
) {
  var _locale = locale;
  var formats = numberFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = numberFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to '" + step + "' number formats from '" + current + "' number formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];

    var formatter;
    if (options) {
      // If options specified - create one time number formatter
      formatter = new Intl.NumberFormat(_locale, Object.assign({}, format, options));
    } else {
      var id = _locale + "__" + key;
      formatter = this._numberFormatters[id];
      if (!formatter) {
        formatter = this._numberFormatters[id] = new Intl.NumberFormat(_locale, format);
      }
    }
    return formatter
  }
};

VueI18n.prototype._n = function _n (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    return ''
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.format(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.format(value);
  if (this._isFallbackRoot(ret)) {
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.n(value, Object.assign({}, { key: key, locale: locale }, options))
  } else {
    return ret || ''
  }
};

VueI18n.prototype.n = function n (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;
  var options = null;

  if (args.length === 1) {
    if (isString$1(args[0])) {
      key = args[0];
    } else if (isObject$2(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }

      // Filter out number format options only
      options = Object.keys(args[0]).reduce(function (acc, key) {
          var obj;

        if (includes(numberFormatKeys, key)) {
          return Object.assign({}, acc, ( obj = {}, obj[key] = args[0][key], obj ))
        }
        return acc
      }, null);
    }
  } else if (args.length === 2) {
    if (isString$1(args[0])) {
      key = args[0];
    }
    if (isString$1(args[1])) {
      locale = args[1];
    }
  }

  return this._n(value, locale, key, options)
};

VueI18n.prototype._ntp = function _ntp (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    return []
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.formatToParts(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.formatToParts(value);
  if (this._isFallbackRoot(ret)) {
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n._ntp(value, locale, key, options)
  } else {
    return ret || []
  }
};

Object.defineProperties( VueI18n.prototype, prototypeAccessors$1 );

var availabilities;
// $FlowFixMe
Object.defineProperty(VueI18n, 'availabilities', {
  get: function get () {
    if (!availabilities) {
      var intlDefined = typeof Intl !== 'undefined';
      availabilities = {
        dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',
        numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined'
      };
    }

    return availabilities
  }
});

VueI18n.install = install$2;
VueI18n.version = '8.28.2';

var VueI18n$1 = VueI18n;

Vue$1.use(VueI18n$1);

const supported_locales = [
  "en", // ENGLISH
  "es", // SPANISH
  "fr" // FRENCH
];

const incomplete_locales = [
  "fr" // FRENCH
];

function getLocales() {
  const messages = {};
  const locales = { "./locales/en.json": () => (true? __vitePreload(()=>import('./en.ac847327.js'),[]): import('./en.ac847327.js')), "./locales/es.json": () => (true? __vitePreload(()=>import('./es.8d6d400c.js'),[]): import('./es.8d6d400c.js')), "./locales/fr.json": () => (true? __vitePreload(()=>import('./fr.4b21e499.js'),[]): import('./fr.4b21e499.js')),};
  Object.keys(locales).forEach(async k => {
    const matched = k.match(/([A-Za-z0-9_-]+)\./i);
    if (matched && matched.length > 1) {
      const locale = matched[1];
      const locale_msgs = await locales[k]();
      messages[locale] = locale_msgs;
    }
  });
  return messages
}

var i18n = new VueI18n$1({
  locale: "en" ,
  fallbackLocale: "en" ,
  messages: getLocales()
});

var card = '';

var VApp = '';

/* @vue/component */

const Themeable = Vue$1.extend().extend({
  name: 'themeable',

  provide() {
    return {
      theme: this.themeableProvide
    };
  },

  inject: {
    theme: {
      default: {
        isDark: false
      }
    }
  },
  props: {
    dark: {
      type: Boolean,
      default: null
    },
    light: {
      type: Boolean,
      default: null
    }
  },

  data() {
    return {
      themeableProvide: {
        isDark: false
      }
    };
  },

  computed: {
    appIsDark() {
      return this.$vuetify.theme.dark || false;
    },

    isDark() {
      if (this.dark === true) {
        // explicitly dark
        return true;
      } else if (this.light === true) {
        // explicitly light
        return false;
      } else {
        // inherit from parent, or default false if there is none
        return this.theme.isDark;
      }
    },

    themeClasses() {
      return {
        'theme--dark': this.isDark,
        'theme--light': !this.isDark
      };
    },

    /** Used by menus and dialogs, inherits from v-app instead of the parent */
    rootIsDark() {
      if (this.dark === true) {
        // explicitly dark
        return true;
      } else if (this.light === true) {
        // explicitly light
        return false;
      } else {
        // inherit from v-app
        return this.appIsDark;
      }
    },

    rootThemeClasses() {
      return {
        'theme--dark': this.rootIsDark,
        'theme--light': !this.rootIsDark
      };
    }

  },
  watch: {
    isDark: {
      handler(newVal, oldVal) {
        if (newVal !== oldVal) {
          this.themeableProvide.isDark = this.isDark;
        }
      },

      immediate: true
    }
  }
});
var Themeable$1 = Themeable;
function functionalThemeClasses(context) {
  const vm = { ...context.props,
    ...context.injections
  };
  const isDark = Themeable.options.computed.isDark.call(vm);
  return Themeable.options.computed.themeClasses.call({
    isDark
  });
}

/* eslint-disable max-len, import/export, no-use-before-define */
function mixins(...args) {
  return Vue$1.extend({
    mixins: args
  });
}

// Styles
/* @vue/component */

var __unplugin_components_0$5 = mixins(Themeable$1).extend({
  name: 'v-app',
  props: {
    dark: {
      type: Boolean,
      default: undefined
    },
    id: {
      type: String,
      default: 'app'
    },
    light: {
      type: Boolean,
      default: undefined
    }
  },
  computed: {
    isDark() {
      return this.$vuetify.theme.dark;
    }

  },

  beforeCreate() {
    if (!this.$vuetify || this.$vuetify === this.$root) {
      throw new Error('Vuetify is not properly initialized, see https://v2.vuetifyjs.com/getting-started/quick-start#bootstrapping-the-vuetify-object');
    }
  },

  render(h) {
    const wrapper = h('div', {
      staticClass: 'v-application--wrap'
    }, this.$slots.default);
    return h('div', {
      staticClass: 'v-application',
      class: {
        'v-application--is-rtl': this.$vuetify.rtl,
        'v-application--is-ltr': !this.$vuetify.rtl,
        ...this.themeClasses
      },
      attrs: {
        'data-app': true
      },
      domProps: {
        id: this.id
      }
    }, [wrapper]);
  }

});

var VAppBar = '';

var VToolbar$1 = '';

var VSheet$1 = '';

/**
 * This mixin provides `attrs$` and `listeners$` to work around
 * vue bug https://github.com/vuejs/vue/issues/10115
 */

function makeWatcher(property) {
  return function (val, oldVal) {
    for (const attr in oldVal) {
      if (!Object.prototype.hasOwnProperty.call(val, attr)) {
        this.$delete(this.$data[property], attr);
      }
    }

    for (const attr in val) {
      this.$set(this.$data[property], attr, val[attr]);
    }
  };
}

var BindsAttrs = Vue$1.extend({
  data: () => ({
    attrs$: {},
    listeners$: {}
  }),

  created() {
    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115
    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)
    this.$watch('$attrs', makeWatcher('attrs$'), {
      immediate: true
    });
    this.$watch('$listeners', makeWatcher('listeners$'), {
      immediate: true
    });
  }

});

function install$1(Vue, args = {}) {
  if (install$1.installed) return;
  install$1.installed = true;

  if (Vue$1 !== Vue) {
    consoleError(`Multiple instances of Vue detected
See https://github.com/vuetifyjs/vuetify/issues/4068

If you're seeing "$attrs is readonly", it's caused by this`);
  }

  const components = args.components || {};
  const directives = args.directives || {};

  for (const name in directives) {
    const directive = directives[name];
    Vue.directive(name, directive);
  }

  (function registerComponents(components) {
    if (components) {
      for (const key in components) {
        const component = components[key];

        if (component && !registerComponents(component.$_vuetify_subcomponents)) {
          Vue.component(key, component);
        }
      }

      return true;
    }

    return false;
  })(components); // Used to avoid multiple mixins being setup
  // when in dev mode and hot module reload
  // https://github.com/vuejs/vue/issues/5089#issuecomment-284260111


  if (Vue.$_vuetify_installed) return;
  Vue.$_vuetify_installed = true;
  Vue.mixin({
    beforeCreate() {
      const options = this.$options;

      if (options.vuetify) {
        options.vuetify.init(this, this.$ssrContext);
        this.$vuetify = Vue.observable(options.vuetify.framework);
      } else {
        this.$vuetify = options.parent && options.parent.$vuetify || this;
      }
    },

    beforeMount() {
      // @ts-ignore
      if (this.$options.vuetify && this.$el && this.$el.hasAttribute('data-server-rendered')) {
        // @ts-ignore
        this.$vuetify.isHydrating = true; // @ts-ignore

        this.$vuetify.breakpoint.update(true);
      }
    },

    mounted() {
      // @ts-ignore
      if (this.$options.vuetify && this.$vuetify.isHydrating) {
        // @ts-ignore
        this.$vuetify.isHydrating = false; // @ts-ignore

        this.$vuetify.breakpoint.update();
      }
    }

  });
}

class Service {
  constructor() {
    this.framework = {};
  }

  init(root, ssrContext) {}

}

// Extensions
class Application$1 extends Service {
  constructor() {
    super(...arguments);
    this.bar = 0;
    this.top = 0;
    this.left = 0;
    this.insetFooter = 0;
    this.right = 0;
    this.bottom = 0;
    this.footer = 0;
    this.application = {
      bar: {},
      top: {},
      left: {},
      insetFooter: {},
      right: {},
      bottom: {},
      footer: {}
    };
  }

  register(uid, location, size) {
    this.application[location][uid] = size;
    this.update(location);
  }

  unregister(uid, location) {
    if (this.application[location][uid] == null) return;
    delete this.application[location][uid];
    this.update(location);
  }

  update(location) {
    this[location] = Object.values(this.application[location]).reduce((acc, cur) => acc + cur, 0);
  }

}
Application$1.property = 'application';

// Extensions
class Breakpoint extends Service {
  constructor(preset) {
    super(); // Public

    this.xs = false;
    this.sm = false;
    this.md = false;
    this.lg = false;
    this.xl = false;
    this.xsOnly = false;
    this.smOnly = false;
    this.smAndDown = false;
    this.smAndUp = false;
    this.mdOnly = false;
    this.mdAndDown = false;
    this.mdAndUp = false;
    this.lgOnly = false;
    this.lgAndDown = false;
    this.lgAndUp = false;
    this.xlOnly = false; // Value is xs to match v2.x functionality

    this.name = 'xs';
    this.height = 0;
    this.width = 0; // TODO: Add functionality to detect this dynamically in v3
    // Value is true to match v2.x functionality

    this.mobile = true;
    this.resizeTimeout = 0;
    const {
      mobileBreakpoint,
      scrollBarWidth,
      thresholds
    } = preset[Breakpoint.property];
    this.mobileBreakpoint = mobileBreakpoint;
    this.scrollBarWidth = scrollBarWidth;
    this.thresholds = thresholds;
  }

  init() {
    this.update();
    /* istanbul ignore if */

    if (typeof window === 'undefined') return;
    window.addEventListener('resize', this.onResize.bind(this), {
      passive: true
    });
  }
  /* eslint-disable-next-line max-statements */


  update(ssr = false) {
    const height = ssr ? 0 : this.getClientHeight();
    const width = ssr ? 0 : this.getClientWidth();
    const xs = width < this.thresholds.xs;
    const sm = width < this.thresholds.sm && !xs;
    const md = width < this.thresholds.md - this.scrollBarWidth && !(sm || xs);
    const lg = width < this.thresholds.lg - this.scrollBarWidth && !(md || sm || xs);
    const xl = width >= this.thresholds.lg - this.scrollBarWidth;
    this.height = height;
    this.width = width;
    this.xs = xs;
    this.sm = sm;
    this.md = md;
    this.lg = lg;
    this.xl = xl;
    this.xsOnly = xs;
    this.smOnly = sm;
    this.smAndDown = (xs || sm) && !(md || lg || xl);
    this.smAndUp = !xs && (sm || md || lg || xl);
    this.mdOnly = md;
    this.mdAndDown = (xs || sm || md) && !(lg || xl);
    this.mdAndUp = !(xs || sm) && (md || lg || xl);
    this.lgOnly = lg;
    this.lgAndDown = (xs || sm || md || lg) && !xl;
    this.lgAndUp = !(xs || sm || md) && (lg || xl);
    this.xlOnly = xl;

    switch (true) {
      case xs:
        this.name = 'xs';
        break;

      case sm:
        this.name = 'sm';
        break;

      case md:
        this.name = 'md';
        break;

      case lg:
        this.name = 'lg';
        break;

      default:
        this.name = 'xl';
        break;
    }

    if (typeof this.mobileBreakpoint === 'number') {
      this.mobile = width < parseInt(this.mobileBreakpoint, 10);
      return;
    }

    const breakpoints = {
      xs: 0,
      sm: 1,
      md: 2,
      lg: 3,
      xl: 4
    };
    const current = breakpoints[this.name];
    const max = breakpoints[this.mobileBreakpoint];
    this.mobile = current <= max;
  }

  onResize() {
    clearTimeout(this.resizeTimeout); // Added debounce to match what
    // v-resize used to do but was
    // removed due to a memory leak
    // https://github.com/vuetifyjs/vuetify/pull/2997

    this.resizeTimeout = window.setTimeout(this.update.bind(this), 200);
  } // Cross-browser support as described in:
  // https://stackoverflow.com/questions/1248081


  getClientWidth() {
    /* istanbul ignore if */
    if (typeof document === 'undefined') return 0; // SSR

    return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
  }

  getClientHeight() {
    /* istanbul ignore if */
    if (typeof document === 'undefined') return 0; // SSR

    return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
  }

}
Breakpoint.property = 'breakpoint';

// linear
const linear = t => t; // accelerating from zero velocity

const easeInQuad = t => t ** 2; // decelerating to zero velocity

const easeOutQuad = t => t * (2 - t); // acceleration until halfway, then deceleration

const easeInOutQuad = t => t < 0.5 ? 2 * t ** 2 : -1 + (4 - 2 * t) * t; // accelerating from zero velocity

const easeInCubic = t => t ** 3; // decelerating to zero velocity

const easeOutCubic = t => --t ** 3 + 1; // acceleration until halfway, then deceleration

const easeInOutCubic = t => t < 0.5 ? 4 * t ** 3 : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; // accelerating from zero velocity

const easeInQuart = t => t ** 4; // decelerating to zero velocity

const easeOutQuart = t => 1 - --t ** 4; // acceleration until halfway, then deceleration

const easeInOutQuart = t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t; // accelerating from zero velocity

const easeInQuint = t => t ** 5; // decelerating to zero velocity

const easeOutQuint = t => 1 + --t ** 5; // acceleration until halfway, then deceleration

const easeInOutQuint = t => t < 0.5 ? 16 * t ** 5 : 1 + 16 * --t ** 5;

var easingPatterns = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    linear: linear,
    easeInQuad: easeInQuad,
    easeOutQuad: easeOutQuad,
    easeInOutQuad: easeInOutQuad,
    easeInCubic: easeInCubic,
    easeOutCubic: easeOutCubic,
    easeInOutCubic: easeInOutCubic,
    easeInQuart: easeInQuart,
    easeOutQuart: easeOutQuart,
    easeInOutQuart: easeInOutQuart,
    easeInQuint: easeInQuint,
    easeOutQuint: easeOutQuint,
    easeInOutQuint: easeInOutQuint
}, Symbol.toStringTag, { value: 'Module' }));

// Return target's cumulative offset from the top
function getOffset(target) {
  if (typeof target === 'number') {
    return target;
  }

  let el = $(target);

  if (!el) {
    throw typeof target === 'string' ? new Error(`Target element "${target}" not found.`) : new TypeError(`Target must be a Number/Selector/HTMLElement/VueComponent, received ${type(target)} instead.`);
  }

  let totalOffset = 0;

  while (el) {
    totalOffset += el.offsetTop;
    el = el.offsetParent;
  }

  return totalOffset;
}
function getContainer(container) {
  const el = $(container);
  if (el) return el;
  throw typeof container === 'string' ? new Error(`Container element "${container}" not found.`) : new TypeError(`Container must be a Selector/HTMLElement/VueComponent, received ${type(container)} instead.`);
}

function type(el) {
  return el == null ? el : el.constructor.name;
}

function $(el) {
  if (typeof el === 'string') {
    return document.querySelector(el);
  } else if (el && el._isVue) {
    return el.$el;
  } else if (el instanceof HTMLElement) {
    return el;
  } else {
    return null;
  }
}

// Extensions
function goTo(_target, _settings = {}) {
  const settings = {
    container: document.scrollingElement || document.body || document.documentElement,
    duration: 500,
    offset: 0,
    easing: 'easeInOutCubic',
    appOffset: true,
    ..._settings
  };
  const container = getContainer(settings.container);
  /* istanbul ignore else */

  if (settings.appOffset && goTo.framework.application) {
    const isDrawer = container.classList.contains('v-navigation-drawer');
    const isClipped = container.classList.contains('v-navigation-drawer--clipped');
    const {
      bar,
      top
    } = goTo.framework.application;
    settings.offset += bar;
    /* istanbul ignore else */

    if (!isDrawer || isClipped) settings.offset += top;
  }

  const startTime = performance.now();
  let targetLocation;

  if (typeof _target === 'number') {
    targetLocation = getOffset(_target) - settings.offset;
  } else {
    targetLocation = getOffset(_target) - getOffset(container) - settings.offset;
  }

  const startLocation = container.scrollTop;
  if (targetLocation === startLocation) return Promise.resolve(targetLocation);
  const ease = typeof settings.easing === 'function' ? settings.easing : easingPatterns[settings.easing];
  /* istanbul ignore else */

  if (!ease) throw new TypeError(`Easing function "${settings.easing}" not found.`); // Cannot be tested properly in jsdom

  /* istanbul ignore next */

  return new Promise(resolve => requestAnimationFrame(function step(currentTime) {
    const timeElapsed = currentTime - startTime;
    const progress = Math.abs(settings.duration ? Math.min(timeElapsed / settings.duration, 1) : 1);
    container.scrollTop = Math.floor(startLocation + (targetLocation - startLocation) * ease(progress));
    const clientHeight = container === document.body ? document.documentElement.clientHeight : container.clientHeight;
    const reachBottom = clientHeight + container.scrollTop >= container.scrollHeight;

    if (progress === 1 || // Need to go lower but reach bottom
    targetLocation > container.scrollTop && reachBottom) {
      return resolve(targetLocation);
    }

    requestAnimationFrame(step);
  }));
}
goTo.framework = {};

goTo.init = () => {};

class Goto extends Service {
  constructor() {
    super();
    return goTo;
  }

}
Goto.property = 'goTo';

function createSimpleFunctional(c, el = 'div', name) {
  return Vue$1.extend({
    name: name || c.replace(/__/g, '-'),
    functional: true,
    props: {
      tag: {
        type: String,
        default: el
      }
    },

    render(h, {
      data,
      props,
      children
    }) {
      data.staticClass = `${c} ${data.staticClass || ''}`.trim();
      return h(props.tag, data, children);
    }

  });
}
function addOnceEventListener(el, eventName, cb, options = false) {
  const once = event => {
    cb(event);
    el.removeEventListener(eventName, once, options);
  };

  el.addEventListener(eventName, once, options);
}
let passiveSupported = false;

try {
  if (typeof window !== 'undefined') {
    const testListenerOpts = Object.defineProperty({}, 'passive', {
      get: () => {
        passiveSupported = true;
      }
    });
    window.addEventListener('testListener', testListenerOpts, testListenerOpts);
    window.removeEventListener('testListener', testListenerOpts, testListenerOpts);
  }
} catch (e) {
  console.warn(e);
}
function addPassiveEventListener(el, event, cb, options) {
  el.addEventListener(event, cb, passiveSupported ? options : false);
}
function getNestedValue(obj, path, fallback) {
  const last = path.length - 1;
  if (last < 0) return obj === undefined ? fallback : obj;

  for (let i = 0; i < last; i++) {
    if (obj == null) {
      return fallback;
    }

    obj = obj[path[i]];
  }

  if (obj == null) return fallback;
  return obj[path[last]] === undefined ? fallback : obj[path[last]];
}
function deepEqual(a, b) {
  if (a === b) return true;

  if (a instanceof Date && b instanceof Date && a.getTime() !== b.getTime()) {
    // If the values are Date, compare them as timestamps
    return false;
  }

  if (a !== Object(a) || b !== Object(b)) {
    // If the values aren't objects, they were already checked for equality
    return false;
  }

  const props = Object.keys(a);

  if (props.length !== Object.keys(b).length) {
    // Different number of props, don't bother to check
    return false;
  }

  return props.every(p => deepEqual(a[p], b[p]));
}
function getObjectValueByPath(obj, path, fallback) {
  // credit: http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key#comment55278413_6491621
  if (obj == null || !path || typeof path !== 'string') return fallback;
  if (obj[path] !== undefined) return obj[path];
  path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties

  path = path.replace(/^\./, ''); // strip a leading dot

  return getNestedValue(obj, path.split('.'), fallback);
}
function getPropertyFromItem(item, property, fallback) {
  if (property == null) return item === undefined ? fallback : item;
  if (item !== Object(item)) return fallback === undefined ? item : fallback;
  if (typeof property === 'string') return getObjectValueByPath(item, property, fallback);
  if (Array.isArray(property)) return getNestedValue(item, property, fallback);
  if (typeof property !== 'function') return fallback;
  const value = property(item, fallback);
  return typeof value === 'undefined' ? fallback : value;
}
function createRange(length) {
  return Array.from({
    length
  }, (v, k) => k);
}
function getZIndex(el) {
  if (!el || el.nodeType !== Node.ELEMENT_NODE) return 0;
  const index = +window.getComputedStyle(el).getPropertyValue('z-index');
  if (!index) return getZIndex(el.parentNode);
  return index;
}
function filterObjectOnKeys(obj, keys) {
  const filtered = {};

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];

    if (typeof obj[key] !== 'undefined') {
      filtered[key] = obj[key];
    }
  }

  return filtered;
}
function convertToUnit(str, unit = 'px') {
  if (str == null || str === '') {
    return undefined;
  } else if (isNaN(+str)) {
    return String(str);
  } else {
    return `${Number(str)}${unit}`;
  }
}
function kebabCase(str) {
  return (str || '').replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}
function isObject$1(obj) {
  return obj !== null && typeof obj === 'object';
} // KeyboardEvent.keyCode aliases

const keyCodes = Object.freeze({
  enter: 13,
  tab: 9,
  delete: 46,
  esc: 27,
  space: 32,
  up: 38,
  down: 40,
  left: 37,
  right: 39,
  end: 35,
  home: 36,
  del: 46,
  backspace: 8,
  insert: 45,
  pageup: 33,
  pagedown: 34,
  shift: 16
});
/**
 * This remaps internal names like '$cancel' or '$vuetify.icons.cancel'
 * to the current name or component for that icon.
 */

function remapInternalIcon(vm, iconName) {
  // Look for custom component in the configuration
  const component = vm.$vuetify.icons.component; // Look for overrides

  if (iconName.startsWith('$')) {
    // Get the target icon name
    const iconPath = `$vuetify.icons.values.${iconName.split('$').pop().split('.').pop()}`; // Now look up icon indirection name,
    // e.g. '$vuetify.icons.values.cancel'

    const override = getObjectValueByPath(vm, iconPath, iconName);
    if (typeof override === 'string') iconName = override;else return override;
  }

  if (component == null) {
    return iconName;
  }

  return {
    component,
    props: {
      icon: iconName
    }
  };
}
function keys(o) {
  return Object.keys(o);
}
/**
 * Camelize a hyphen-delimited string.
 */

const camelizeRE = /-(\w)/g;
const camelize = str => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '');
};
/**
 * Returns the set difference of B and A, i.e. the set of elements in B but not in A
 */

function arrayDiff(a, b) {
  const diff = [];

  for (let i = 0; i < b.length; i++) {
    if (a.indexOf(b[i]) < 0) diff.push(b[i]);
  }

  return diff;
}
/**
 * Makes the first character of a string uppercase
 */

function upperFirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function groupItems(items, groupBy, groupDesc) {
  const key = groupBy[0];
  const groups = [];
  let current;

  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    const val = getObjectValueByPath(item, key, null);

    if (current !== val) {
      current = val;
      groups.push({
        name: val !== null && val !== void 0 ? val : '',
        items: []
      });
    }

    groups[groups.length - 1].items.push(item);
  }

  return groups;
}
function wrapInArray(v) {
  return v != null ? Array.isArray(v) ? v : [v] : [];
}
function sortItems(items, sortBy, sortDesc, locale, customSorters) {
  if (sortBy === null || !sortBy.length) return items;
  const stringCollator = new Intl.Collator(locale, {
    sensitivity: 'accent',
    usage: 'sort'
  });
  return items.sort((a, b) => {
    for (let i = 0; i < sortBy.length; i++) {
      const sortKey = sortBy[i];
      let sortA = getObjectValueByPath(a, sortKey);
      let sortB = getObjectValueByPath(b, sortKey);

      if (sortDesc[i]) {
        [sortA, sortB] = [sortB, sortA];
      }

      if (customSorters && customSorters[sortKey]) {
        const customResult = customSorters[sortKey](sortA, sortB);
        if (!customResult) continue;
        return customResult;
      } // Check if both cannot be evaluated


      if (sortA === null && sortB === null) {
        continue;
      } // Dates should be compared numerically


      if (sortA instanceof Date && sortB instanceof Date) {
        return sortA.getTime() - sortB.getTime();
      }

      [sortA, sortB] = [sortA, sortB].map(s => (s || '').toString().toLocaleLowerCase());

      if (sortA !== sortB) {
        if (!isNaN(sortA) && !isNaN(sortB)) return Number(sortA) - Number(sortB);
        return stringCollator.compare(sortA, sortB);
      }
    }

    return 0;
  });
}
function defaultFilter$2(value, search, item) {
  return value != null && search != null && typeof value !== 'boolean' && value.toString().toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) !== -1;
}
function searchItems(items, search) {
  if (!search) return items;
  search = search.toString().toLowerCase();
  if (search.trim() === '') return items;
  return items.filter(item => Object.keys(item).some(key => defaultFilter$2(getObjectValueByPath(item, key), search)));
}
/**
 * Returns:
 *  - 'normal' for old style slots - `<template slot="default">`
 *  - 'scoped' for old style scoped slots (`<template slot="default" slot-scope="data">`) or bound v-slot (`#default="data"`)
 *  - 'v-slot' for unbound v-slot (`#default`) - only if the third param is true, otherwise counts as scoped
 */

function getSlotType(vm, name, split) {
  if (vm.$slots.hasOwnProperty(name) && vm.$scopedSlots.hasOwnProperty(name) && vm.$scopedSlots[name].name) {
    return split ? 'v-slot' : 'scoped';
  }

  if (vm.$slots.hasOwnProperty(name)) return 'normal';
  if (vm.$scopedSlots.hasOwnProperty(name)) return 'scoped';
}
function getPrefixedScopedSlots(prefix, scopedSlots) {
  return Object.keys(scopedSlots).filter(k => k.startsWith(prefix)).reduce((obj, k) => {
    obj[k.replace(prefix, '')] = scopedSlots[k];
    return obj;
  }, {});
}
function getSlot(vm, name = 'default', data, optional = false) {
  if (vm.$scopedSlots.hasOwnProperty(name)) {
    return vm.$scopedSlots[name](data instanceof Function ? data() : data);
  } else if (vm.$slots.hasOwnProperty(name) && (!data || optional)) {
    return vm.$slots[name];
  }

  return undefined;
}
function clamp(value, min = 0, max = 1) {
  return Math.max(min, Math.min(max, value));
}
function humanReadableFileSize(bytes, binary = false) {
  const base = binary ? 1024 : 1000;

  if (bytes < base) {
    return `${bytes} B`;
  }

  const prefix = binary ? ['Ki', 'Mi', 'Gi'] : ['k', 'M', 'G'];
  let unit = -1;

  while (Math.abs(bytes) >= base && unit < prefix.length - 1) {
    bytes /= base;
    ++unit;
  }

  return `${bytes.toFixed(1)} ${prefix[unit]}B`;
}
function camelizeObjectKeys(obj) {
  if (!obj) return {};
  return Object.keys(obj).reduce((o, key) => {
    o[camelize(key)] = obj[key];
    return o;
  }, {});
}
function mergeDeep(source = {}, target = {}) {
  for (const key in target) {
    const sourceProperty = source[key];
    const targetProperty = target[key]; // Only continue deep merging if
    // both properties are objects

    if (isObject$1(sourceProperty) && isObject$1(targetProperty)) {
      source[key] = mergeDeep(sourceProperty, targetProperty);
      continue;
    }

    source[key] = targetProperty;
  }

  return source;
}
function fillArray(length, obj) {
  return Array(length).fill(obj);
}
/**  Polyfill for Event.prototype.composedPath */

function composedPath(e) {
  if (e.composedPath) return e.composedPath();
  const path = [];
  let el = e.target;

  while (el) {
    path.push(el);

    if (el.tagName === 'HTML') {
      path.push(document);
      path.push(window);
      return path;
    }

    el = el.parentElement;
  }

  return path;
}

const icons$4 = {
  complete: 'M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z',
  cancel: 'M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z',
  close: 'M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z',
  delete: 'M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z',
  clear: 'M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z',
  success: 'M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z',
  info: 'M13,9H11V7H13M13,17H11V11H13M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z',
  warning: 'M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z',
  error: 'M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z',
  prev: 'M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z',
  next: 'M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z',
  checkboxOn: 'M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.89 20.1,3 19,3Z',
  checkboxOff: 'M19,3H5C3.89,3 3,3.89 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z',
  checkboxIndeterminate: 'M17,13H7V11H17M19,3H5C3.89,3 3,3.89 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.89 20.1,3 19,3Z',
  delimiter: 'M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2Z',
  sort: 'M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z',
  expand: 'M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z',
  menu: 'M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z',
  subgroup: 'M7,10L12,15L17,10H7Z',
  dropdown: 'M7,10L12,15L17,10H7Z',
  radioOn: 'M12,20C7.58,20 4,16.42 4,12C4,7.58 7.58,4 12,4C16.42,4 20,7.58 20,12C20,16.42 16.42,20 12,20M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2M12,7C9.24,7 7,9.24 7,12C7,14.76 9.24,17 12,17C14.76,17 17,14.76 17,12C17,9.24 14.76,7 12,7Z',
  radioOff: 'M12,20C7.58,20 4,16.42 4,12C4,7.58 7.58,4 12,4C16.42,4 20,7.58 20,12C20,16.42 16.42,20 12,20M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2Z',
  edit: 'M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z',
  ratingEmpty: 'M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z',
  ratingFull: 'M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z',
  ratingHalf: 'M12,15.4V6.1L13.71,10.13L18.09,10.5L14.77,13.39L15.76,17.67M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z',
  loading: 'M19,8L15,12H18C18,15.31 15.31,18 12,18C11,18 10.03,17.75 9.2,17.3L7.74,18.76C8.97,19.54 10.43,20 12,20C16.42,20 20,16.42 20,12H23M6,12C6,8.69 8.69,6 12,6C13,6 13.97,6.25 14.8,6.7L16.26,5.24C15.03,4.46 13.57,4 12,4C7.58,4 4,7.58 4,12H1L5,16L9,12',
  first: 'M18.41,16.59L13.82,12L18.41,7.41L17,6L11,12L17,18L18.41,16.59M6,6H8V18H6V6Z',
  last: 'M5.59,7.41L10.18,12L5.59,16.59L7,18L13,12L7,6L5.59,7.41M16,6H18V18H16V6Z',
  unfold: 'M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z',
  file: 'M16.5,6V17.5C16.5,19.71 14.71,21.5 12.5,21.5C10.29,21.5 8.5,19.71 8.5,17.5V5C8.5,3.62 9.62,2.5 11,2.5C12.38,2.5 13.5,3.62 13.5,5V15.5C13.5,16.05 13.05,16.5 12.5,16.5C11.95,16.5 11.5,16.05 11.5,15.5V6H10V15.5C10,16.88 11.12,18 12.5,18C13.88,18 15,16.88 15,15.5V5C15,2.79 13.21,1 11,1C8.79,1 7,2.79 7,5V17.5C7,20.54 9.46,23 12.5,23C15.54,23 18,20.54 18,17.5V6H16.5Z',
  plus: 'M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z',
  minus: 'M19,13H5V11H19V13Z'
};
var mdiSvg = icons$4;

const icons$3 = {
  complete: 'check',
  cancel: 'cancel',
  close: 'close',
  delete: 'cancel',
  clear: 'clear',
  success: 'check_circle',
  info: 'info',
  warning: 'priority_high',
  error: 'warning',
  prev: 'chevron_left',
  next: 'chevron_right',
  checkboxOn: 'check_box',
  checkboxOff: 'check_box_outline_blank',
  checkboxIndeterminate: 'indeterminate_check_box',
  delimiter: 'fiber_manual_record',
  sort: 'arrow_upward',
  expand: 'keyboard_arrow_down',
  menu: 'menu',
  subgroup: 'arrow_drop_down',
  dropdown: 'arrow_drop_down',
  radioOn: 'radio_button_checked',
  radioOff: 'radio_button_unchecked',
  edit: 'edit',
  ratingEmpty: 'star_border',
  ratingFull: 'star',
  ratingHalf: 'star_half',
  loading: 'cached',
  first: 'first_page',
  last: 'last_page',
  unfold: 'unfold_more',
  file: 'attach_file',
  plus: 'add',
  minus: 'remove'
};
var md = icons$3;

const icons$2 = {
  complete: 'mdi-check',
  cancel: 'mdi-close-circle',
  close: 'mdi-close',
  delete: 'mdi-close-circle',
  clear: 'mdi-close',
  success: 'mdi-check-circle',
  info: 'mdi-information',
  warning: 'mdi-exclamation',
  error: 'mdi-alert',
  prev: 'mdi-chevron-left',
  next: 'mdi-chevron-right',
  checkboxOn: 'mdi-checkbox-marked',
  checkboxOff: 'mdi-checkbox-blank-outline',
  checkboxIndeterminate: 'mdi-minus-box',
  delimiter: 'mdi-circle',
  sort: 'mdi-arrow-up',
  expand: 'mdi-chevron-down',
  menu: 'mdi-menu',
  subgroup: 'mdi-menu-down',
  dropdown: 'mdi-menu-down',
  radioOn: 'mdi-radiobox-marked',
  radioOff: 'mdi-radiobox-blank',
  edit: 'mdi-pencil',
  ratingEmpty: 'mdi-star-outline',
  ratingFull: 'mdi-star',
  ratingHalf: 'mdi-star-half-full',
  loading: 'mdi-cached',
  first: 'mdi-page-first',
  last: 'mdi-page-last',
  unfold: 'mdi-unfold-more-horizontal',
  file: 'mdi-paperclip',
  plus: 'mdi-plus',
  minus: 'mdi-minus'
};
var mdi = icons$2;

const icons$1 = {
  complete: 'fas fa-check',
  cancel: 'fas fa-times-circle',
  close: 'fas fa-times',
  delete: 'fas fa-times-circle',
  clear: 'fas fa-times-circle',
  success: 'fas fa-check-circle',
  info: 'fas fa-info-circle',
  warning: 'fas fa-exclamation-circle',
  error: 'fas fa-exclamation-triangle',
  prev: 'fas fa-chevron-left',
  next: 'fas fa-chevron-right',
  checkboxOn: 'fas fa-check-square',
  checkboxOff: 'far fa-square',
  checkboxIndeterminate: 'fas fa-minus-square',
  delimiter: 'fas fa-circle',
  sort: 'fas fa-sort-up',
  expand: 'fas fa-chevron-down',
  menu: 'fas fa-bars',
  subgroup: 'fas fa-caret-down',
  dropdown: 'fas fa-caret-down',
  radioOn: 'far fa-dot-circle',
  radioOff: 'far fa-circle',
  edit: 'fas fa-edit',
  ratingEmpty: 'far fa-star',
  ratingFull: 'fas fa-star',
  ratingHalf: 'fas fa-star-half',
  loading: 'fas fa-sync',
  first: 'fas fa-step-backward',
  last: 'fas fa-step-forward',
  unfold: 'fas fa-arrows-alt-v',
  file: 'fas fa-paperclip',
  plus: 'fas fa-plus',
  minus: 'fas fa-minus'
};
var fa = icons$1;

const icons = {
  complete: 'fa fa-check',
  cancel: 'fa fa-times-circle',
  close: 'fa fa-times',
  delete: 'fa fa-times-circle',
  clear: 'fa fa-times-circle',
  success: 'fa fa-check-circle',
  info: 'fa fa-info-circle',
  warning: 'fa fa-exclamation',
  error: 'fa fa-exclamation-triangle',
  prev: 'fa fa-chevron-left',
  next: 'fa fa-chevron-right',
  checkboxOn: 'fa fa-check-square',
  checkboxOff: 'fa fa-square-o',
  checkboxIndeterminate: 'fa fa-minus-square',
  delimiter: 'fa fa-circle',
  sort: 'fa fa-sort-up',
  expand: 'fa fa-chevron-down',
  menu: 'fa fa-bars',
  subgroup: 'fa fa-caret-down',
  dropdown: 'fa fa-caret-down',
  radioOn: 'fa fa-dot-circle-o',
  radioOff: 'fa fa-circle-o',
  edit: 'fa fa-pencil',
  ratingEmpty: 'fa fa-star-o',
  ratingFull: 'fa fa-star',
  ratingHalf: 'fa fa-star-half-o',
  loading: 'fa fa-refresh',
  first: 'fa fa-step-backward',
  last: 'fa fa-step-forward',
  unfold: 'fa fa-angle-double-down',
  file: 'fa fa-paperclip',
  plus: 'fa fa-plus',
  minus: 'fa fa-minus'
};
var fa4 = icons;

function convertToComponentDeclarations(component, iconSet) {
  const result = {};

  for (const key in iconSet) {
    result[key] = {
      component,
      props: {
        icon: iconSet[key].split(' fa-')
      }
    };
  }

  return result;
}
var faSvg = convertToComponentDeclarations('font-awesome-icon', fa);

var presets = Object.freeze({
  mdiSvg,
  md,
  mdi,
  fa,
  fa4,
  faSvg
});

// Extensions
class Icons extends Service {
  constructor(preset) {
    super();
    const {
      iconfont,
      values,
      component
    } = preset[Icons.property];
    this.component = component;
    this.iconfont = iconfont;
    this.values = mergeDeep(presets[iconfont], values);
  }

}
Icons.property = 'icons';

// Extensions
const LANG_PREFIX = '$vuetify.';
const fallback = Symbol('Lang fallback');

function getTranslation(locale, key, usingDefault = false, defaultLocale) {
  const shortKey = key.replace(LANG_PREFIX, '');
  let translation = getObjectValueByPath(locale, shortKey, fallback);

  if (translation === fallback) {
    if (usingDefault) {
      consoleError(`Translation key "${shortKey}" not found in fallback`);
      translation = key;
    } else {
      consoleWarn(`Translation key "${shortKey}" not found, falling back to default`);
      translation = getTranslation(defaultLocale, key, true, defaultLocale);
    }
  }

  return translation;
}

class Lang extends Service {
  constructor(preset) {
    super();
    this.defaultLocale = 'en';
    const {
      current,
      locales,
      t
    } = preset[Lang.property];
    this.current = current;
    this.locales = locales;
    this.translator = t || this.defaultTranslator;
  }

  currentLocale(key) {
    const translation = this.locales[this.current];
    const defaultLocale = this.locales[this.defaultLocale];
    return getTranslation(translation, key, false, defaultLocale);
  }

  t(key, ...params) {
    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params);
    return this.translator(key, ...params);
  }

  defaultTranslator(key, ...params) {
    return this.replace(this.currentLocale(key), params);
  }

  replace(str, params) {
    return str.replace(/\{(\d+)\}/g, (match, index) => {
      /* istanbul ignore next */
      return String(params[+index]);
    });
  }

}
Lang.property = 'lang';

var main = '';

var en = {
  badge: 'Badge',
  close: 'Close',
  dataIterator: {
    noResultsText: 'No matching records found',
    loadingText: 'Loading items...'
  },
  dataTable: {
    itemsPerPageText: 'Rows per page:',
    ariaLabel: {
      sortDescending: 'Sorted descending.',
      sortAscending: 'Sorted ascending.',
      sortNone: 'Not sorted.',
      activateNone: 'Activate to remove sorting.',
      activateDescending: 'Activate to sort descending.',
      activateAscending: 'Activate to sort ascending.'
    },
    sortBy: 'Sort by'
  },
  dataFooter: {
    itemsPerPageText: 'Items per page:',
    itemsPerPageAll: 'All',
    nextPage: 'Next page',
    prevPage: 'Previous page',
    firstPage: 'First page',
    lastPage: 'Last page',
    pageText: '{0}-{1} of {2}'
  },
  datePicker: {
    itemsSelected: '{0} selected',
    nextMonthAriaLabel: 'Next month',
    nextYearAriaLabel: 'Next year',
    prevMonthAriaLabel: 'Previous month',
    prevYearAriaLabel: 'Previous year'
  },
  noDataText: 'No data available',
  carousel: {
    prev: 'Previous visual',
    next: 'Next visual',
    ariaLabel: {
      delimiter: 'Carousel slide {0} of {1}'
    }
  },
  calendar: {
    moreEvents: '{0} more'
  },
  input: {
    clear: 'Clear {0}',
    prependAction: '{0} prepended action',
    appendAction: '{0} appended action'
  },
  fileInput: {
    counter: '{0} files',
    counterSize: '{0} files ({1} in total)'
  },
  timePicker: {
    am: 'AM',
    pm: 'PM'
  },
  pagination: {
    ariaLabel: {
      wrapper: 'Pagination Navigation',
      next: 'Next page',
      previous: 'Previous page',
      page: 'Goto Page {0}',
      currentPage: 'Current Page, Page {0}'
    }
  },
  rating: {
    ariaLabel: {
      icon: 'Rating {0} of {1}'
    }
  },
  loading: 'Loading...'
};

// Styles
const preset = {
  breakpoint: {
    // TODO: update to MD2 spec in v3 - 1280
    mobileBreakpoint: 1264,
    scrollBarWidth: 16,
    thresholds: {
      xs: 600,
      sm: 960,
      md: 1280,
      lg: 1920
    }
  },
  icons: {
    // TODO: remove v3
    iconfont: 'mdi',
    values: {}
  },
  lang: {
    current: 'en',
    locales: {
      en
    },
    // Default translator exists in lang service
    t: undefined
  },
  rtl: false,
  theme: {
    dark: false,
    default: 'light',
    disable: false,
    options: {
      cspNonce: undefined,
      customProperties: undefined,
      minifyTheme: undefined,
      themeCache: undefined,
      variations: true
    },
    themes: {
      light: {
        primary: '#1976D2',
        secondary: '#424242',
        accent: '#82B1FF',
        error: '#FF5252',
        info: '#2196F3',
        success: '#4CAF50',
        warning: '#FB8C00'
      },
      dark: {
        primary: '#2196F3',
        secondary: '#424242',
        accent: '#FF4081',
        error: '#FF5252',
        info: '#2196F3',
        success: '#4CAF50',
        warning: '#FB8C00'
      }
    }
  }
};

// Preset
class Presets extends Service {
  constructor(parentPreset, parent) {
    super(); // The default preset

    const defaultPreset = mergeDeep({}, preset); // The user provided preset

    const {
      userPreset
    } = parent; // The user provided global preset

    const {
      preset: globalPreset = {},
      ...preset$1
    } = userPreset;

    if (globalPreset.preset != null) {
      consoleWarn('Global presets do not support the **preset** option, it can be safely omitted');
    }

    parent.preset = mergeDeep(mergeDeep(defaultPreset, globalPreset), preset$1);
  }

}
Presets.property = 'presets';

const srgbForwardMatrix = [[3.2406, -1.5372, -0.4986], [-0.9689, 1.8758, 0.0415], [0.0557, -0.2040, 1.0570]]; // Forward gamma adjust

const srgbForwardTransform = C => C <= 0.0031308 ? C * 12.92 : 1.055 * C ** (1 / 2.4) - 0.055; // For converting sRGB to XYZ


const srgbReverseMatrix = [[0.4124, 0.3576, 0.1805], [0.2126, 0.7152, 0.0722], [0.0193, 0.1192, 0.9505]]; // Reverse gamma adjust

const srgbReverseTransform = C => C <= 0.04045 ? C / 12.92 : ((C + 0.055) / 1.055) ** 2.4;

function fromXYZ$1(xyz) {
  const rgb = Array(3);
  const transform = srgbForwardTransform;
  const matrix = srgbForwardMatrix; // Matrix transform, then gamma adjustment

  for (let i = 0; i < 3; ++i) {
    rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);
  } // Rescale back to [0, 255]


  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);
}
function toXYZ$1(rgb) {
  const xyz = [0, 0, 0];
  const transform = srgbReverseTransform;
  const matrix = srgbReverseMatrix; // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB

  const r = transform((rgb >> 16 & 0xff) / 255);
  const g = transform((rgb >> 8 & 0xff) / 255);
  const b = transform((rgb >> 0 & 0xff) / 255); // Matrix color space transform

  for (let i = 0; i < 3; ++i) {
    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;
  }

  return xyz;
}

// Utilities
function isCssColor(color) {
  return !!color && !!color.match(/^(#|var\(--|(rgb|hsl)a?\()/);
}
function colorToInt(color) {
  let rgb;

  if (typeof color === 'number') {
    rgb = color;
  } else if (typeof color === 'string') {
    let c = color[0] === '#' ? color.substring(1) : color;

    if (c.length === 3) {
      c = c.split('').map(char => char + char).join('');
    }

    if (c.length !== 6) {
      consoleWarn(`'${color}' is not a valid rgb color`);
    }

    rgb = parseInt(c, 16);
  } else {
    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);
  }

  if (rgb < 0) {
    consoleWarn(`Colors cannot be negative: '${color}'`);
    rgb = 0;
  } else if (rgb > 0xffffff || isNaN(rgb)) {
    consoleWarn(`'${color}' is not a valid rgb color`);
    rgb = 0xffffff;
  }

  return rgb;
}
function intToHex(color) {
  let hexColor = color.toString(16);
  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;
  return '#' + hexColor;
}
function colorToHex(color) {
  return intToHex(colorToInt(color));
}

const delta = 0.20689655172413793; // 6÷29

const cielabForwardTransform = t => t > delta ** 3 ? Math.cbrt(t) : t / (3 * delta ** 2) + 4 / 29;

const cielabReverseTransform = t => t > delta ? t ** 3 : 3 * delta ** 2 * (t - 4 / 29);

function fromXYZ(xyz) {
  const transform = cielabForwardTransform;
  const transformedY = transform(xyz[1]);
  return [116 * transformedY - 16, 500 * (transform(xyz[0] / 0.95047) - transformedY), 200 * (transformedY - transform(xyz[2] / 1.08883))];
}
function toXYZ(lab) {
  const transform = cielabReverseTransform;
  const Ln = (lab[0] + 16) / 116;
  return [transform(Ln + lab[1] / 500) * 0.95047, transform(Ln), transform(Ln - lab[2] / 200) * 1.08883];
}

function parse$1(theme, isItem = false, variations = true) {
  const {
    anchor,
    ...variant
  } = theme;
  const colors = Object.keys(variant);
  const parsedTheme = {};

  for (let i = 0; i < colors.length; ++i) {
    const name = colors[i];
    const value = theme[name];
    if (value == null) continue;

    if (!variations) {
      parsedTheme[name] = {
        base: intToHex(colorToInt(value))
      };
    } else if (isItem) {
      /* istanbul ignore else */
      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {
        parsedTheme[name] = colorToHex(value);
      }
    } else if (typeof value === 'object') {
      parsedTheme[name] = parse$1(value, true, variations);
    } else {
      parsedTheme[name] = genVariations(name, colorToInt(value));
    }
  }

  if (!isItem) {
    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;
  }

  return parsedTheme;
}
/**
 * Generate the CSS for a base color (.primary)
 */

const genBaseColor = (name, value) => {
  return `
.v-application .${name} {
  background-color: ${value} !important;
  border-color: ${value} !important;
}
.v-application .${name}--text {
  color: ${value} !important;
  caret-color: ${value} !important;
}`;
};
/**
 * Generate the CSS for a variant color (.primary.darken-2)
 */


const genVariantColor = (name, variant, value) => {
  const [type, n] = variant.split(/(\d)/, 2);
  return `
.v-application .${name}.${type}-${n} {
  background-color: ${value} !important;
  border-color: ${value} !important;
}
.v-application .${name}--text.text--${type}-${n} {
  color: ${value} !important;
  caret-color: ${value} !important;
}`;
};

const genColorVariableName = (name, variant = 'base') => `--v-${name}-${variant}`;

const genColorVariable = (name, variant = 'base') => `var(${genColorVariableName(name, variant)})`;

function genStyles(theme, cssVar = false) {
  const {
    anchor,
    ...variant
  } = theme;
  const colors = Object.keys(variant);
  if (!colors.length) return '';
  let variablesCss = '';
  let css = '';
  const aColor = cssVar ? genColorVariable('anchor') : anchor;
  css += `.v-application a { color: ${aColor}; }`;
  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\n`);

  for (let i = 0; i < colors.length; ++i) {
    const name = colors[i];
    const value = theme[name];
    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);
    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\n`);
    const variants = keys(value);

    for (let i = 0; i < variants.length; ++i) {
      const variant = variants[i];
      const variantValue = value[variant];
      if (variant === 'base') continue;
      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);
      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\n`);
    }
  }

  if (cssVar) {
    variablesCss = `:root {\n${variablesCss}}\n\n`;
  }

  return variablesCss + css;
}
function genVariations(name, value) {
  const values = {
    base: intToHex(value)
  };

  for (let i = 5; i > 0; --i) {
    values[`lighten${i}`] = intToHex(lighten(value, i));
  }

  for (let i = 1; i <= 4; ++i) {
    values[`darken${i}`] = intToHex(darken(value, i));
  }

  return values;
}
function lighten(value, amount) {
  const lab = fromXYZ(toXYZ$1(value));
  lab[0] = lab[0] + amount * 10;
  return fromXYZ$1(toXYZ(lab));
}
function darken(value, amount) {
  const lab = fromXYZ(toXYZ$1(value));
  lab[0] = lab[0] - amount * 10;
  return fromXYZ$1(toXYZ(lab));
}

/* eslint-disable no-multi-spaces */
class Theme extends Service {
  constructor(preset) {
    super();
    this.disabled = false;
    this.isDark = null;
    this.unwatch = null;
    this.vueMeta = null;
    const {
      dark,
      disable,
      options,
      themes
    } = preset[Theme.property];
    this.dark = Boolean(dark);
    this.defaults = this.themes = themes;
    this.options = options;

    if (disable) {
      this.disabled = true;
      return;
    }

    this.themes = {
      dark: this.fillVariant(themes.dark, true),
      light: this.fillVariant(themes.light, false)
    };
  } // When setting css, check for element and apply new values

  /* eslint-disable-next-line accessor-pairs */


  set css(val) {
    if (this.vueMeta) {
      if (this.isVueMeta23) {
        this.applyVueMeta23();
      }

      return;
    }

    this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);
  }

  set dark(val) {
    const oldDark = this.isDark;
    this.isDark = val; // Only apply theme after dark
    // has already been set before

    oldDark != null && this.applyTheme();
  }

  get dark() {
    return Boolean(this.isDark);
  } // Apply current theme default
  // only called on client side


  applyTheme() {
    if (this.disabled) return this.clearCss();
    this.css = this.generatedStyles;
  }

  clearCss() {
    this.css = '';
  } // Initialize theme for SSR and SPA
  // Attach to ssrContext head or
  // apply new theme to document


  init(root, ssrContext) {
    if (this.disabled) return;
    /* istanbul ignore else */

    if (root.$meta) {
      this.initVueMeta(root);
    } else if (ssrContext) {
      this.initSSR(ssrContext);
    }

    this.initTheme(root);
  } // Allows for you to set target theme


  setTheme(theme, value) {
    this.themes[theme] = Object.assign(this.themes[theme], value);
    this.applyTheme();
  } // Reset theme defaults


  resetThemes() {
    this.themes.light = Object.assign({}, this.defaults.light);
    this.themes.dark = Object.assign({}, this.defaults.dark);
    this.applyTheme();
  } // Check for existence of style element


  checkOrCreateStyleElement() {
    this.styleEl = document.getElementById('vuetify-theme-stylesheet');
    /* istanbul ignore next */

    if (this.styleEl) return true;
    this.genStyleElement(); // If doesn't have it, create it

    return Boolean(this.styleEl);
  }

  fillVariant(theme = {}, dark) {
    const defaultTheme = this.themes[dark ? 'dark' : 'light'];
    return Object.assign({}, defaultTheme, theme);
  } // Generate the style element
  // if applicable


  genStyleElement() {
    /* istanbul ignore if */
    if (typeof document === 'undefined') return;
    /* istanbul ignore next */

    this.styleEl = document.createElement('style');
    this.styleEl.type = 'text/css';
    this.styleEl.id = 'vuetify-theme-stylesheet';

    if (this.options.cspNonce) {
      this.styleEl.setAttribute('nonce', this.options.cspNonce);
    }

    document.head.appendChild(this.styleEl);
  }

  initVueMeta(root) {
    this.vueMeta = root.$meta();

    if (this.isVueMeta23) {
      // vue-meta needs to apply after mounted()
      root.$nextTick(() => {
        this.applyVueMeta23();
      });
      return;
    }

    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';
    const metaInfo = root.$options[metaKeyName] || {};

    root.$options[metaKeyName] = () => {
      metaInfo.style = metaInfo.style || [];
      const vuetifyStylesheet = metaInfo.style.find(s => s.id === 'vuetify-theme-stylesheet');

      if (!vuetifyStylesheet) {
        metaInfo.style.push({
          cssText: this.generatedStyles,
          type: 'text/css',
          id: 'vuetify-theme-stylesheet',
          nonce: (this.options || {}).cspNonce
        });
      } else {
        vuetifyStylesheet.cssText = this.generatedStyles;
      }

      return metaInfo;
    };
  }

  applyVueMeta23() {
    const {
      set
    } = this.vueMeta.addApp('vuetify');
    set({
      style: [{
        cssText: this.generatedStyles,
        type: 'text/css',
        id: 'vuetify-theme-stylesheet',
        nonce: this.options.cspNonce
      }]
    });
  }

  initSSR(ssrContext) {
    // SSR
    const nonce = this.options.cspNonce ? ` nonce="${this.options.cspNonce}"` : '';
    ssrContext.head = ssrContext.head || '';
    ssrContext.head += `<style type="text/css" id="vuetify-theme-stylesheet"${nonce}>${this.generatedStyles}</style>`;
  }

  initTheme(root) {
    // Only watch for reactivity on client side
    if (typeof document === 'undefined') return; // If we get here somehow, ensure
    // existing instance is removed

    if (this.unwatch) {
      this.unwatch();
      this.unwatch = null;
    } // TODO: Update to use RFC if merged
    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md


    root.$once('hook:created', () => {
      const obs = Vue$1.observable({
        themes: this.themes
      });
      this.unwatch = root.$watch(() => obs.themes, () => this.applyTheme(), {
        deep: true
      });
    });
    this.applyTheme();
  }

  get currentTheme() {
    const target = this.dark ? 'dark' : 'light';
    return this.themes[target];
  }

  get generatedStyles() {
    const theme = this.parsedTheme;
    /* istanbul ignore next */

    const options = this.options || {};
    let css;

    if (options.themeCache != null) {
      css = options.themeCache.get(theme);
      /* istanbul ignore if */

      if (css != null) return css;
    }

    css = genStyles(theme, options.customProperties);

    if (options.minifyTheme != null) {
      css = options.minifyTheme(css);
    }

    if (options.themeCache != null) {
      options.themeCache.set(theme, css);
    }

    return css;
  }

  get parsedTheme() {
    return parse$1(this.currentTheme || {}, undefined, getNestedValue(this.options, ['variations'], true));
  } // Is using v2.3 of vue-meta
  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0


  get isVueMeta23() {
    return typeof this.vueMeta.addApp === 'function';
  }

}
Theme.property = 'theme';

class Vuetify {
  constructor(userPreset = {}) {
    this.framework = {
      isHydrating: false
    };
    this.installed = [];
    this.preset = {};
    this.userPreset = {};
    this.userPreset = userPreset;
    this.use(Presets);
    this.use(Application$1);
    this.use(Breakpoint);
    this.use(Goto);
    this.use(Icons);
    this.use(Lang);
    this.use(Theme);
  } // Called on the new vuetify instance
  // bootstrap in install beforeCreate
  // Exposes ssrContext if available


  init(root, ssrContext) {
    this.installed.forEach(property => {
      const service = this.framework[property];
      service.framework = this.framework;
      service.init(root, ssrContext);
    }); // rtl is not installed and
    // will never be called by
    // the init process

    this.framework.rtl = Boolean(this.preset.rtl);
  } // Instantiate a VuetifyService


  use(Service) {
    const property = Service.property;
    if (this.installed.includes(property)) return; // TODO maybe a specific type for arg 2?

    this.framework[property] = new Service(this.preset, this);
    this.installed.push(property);
  }

}
Vuetify.install = install$1;
Vuetify.installed = false;
Vuetify.version = "2.7.1";
Vuetify.config = {
  silent: false
};

/* eslint-disable no-console */

function createMessage(message, vm, parent) {
  if (Vuetify.config.silent) return;

  if (parent) {
    vm = {
      _isVue: true,
      $parent: parent,
      $options: vm
    };
  }

  if (vm) {
    // Only show each message once per instance
    vm.$_alreadyWarned = vm.$_alreadyWarned || [];
    if (vm.$_alreadyWarned.includes(message)) return;
    vm.$_alreadyWarned.push(message);
  }

  return `[Vuetify] ${message}` + (vm ? generateComponentTrace(vm) : '');
}
function consoleWarn(message, vm, parent) {
  const newMessage = createMessage(message, vm, parent);
  newMessage != null && console.warn(newMessage);
}
function consoleError(message, vm, parent) {
  const newMessage = createMessage(message, vm, parent);
  newMessage != null && console.error(newMessage);
}
function deprecate(original, replacement, vm, parent) {
  consoleWarn(`[UPGRADE] '${original}' is deprecated, use '${replacement}' instead.`, vm, parent);
}
function breaking(original, replacement, vm, parent) {
  consoleError(`[BREAKING] '${original}' has been removed, use '${replacement}' instead. For more information, see the upgrade guide https://github.com/vuetifyjs/vuetify/releases/tag/v2.0.0#user-content-upgrade-guide`, vm, parent);
}
function removed(original, vm, parent) {
  consoleWarn(`[REMOVED] '${original}' has been removed. You can safely omit it.`, vm, parent);
}
/**
 * Shamelessly stolen from vuejs/vue/blob/dev/src/core/util/debug.js
 */

const classifyRE = /(?:^|[-_])(\w)/g;

const classify = str => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');

function formatComponentName(vm, includeFile) {
  if (vm.$root === vm) {
    return '<Root>';
  }

  const options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
  let name = options.name || options._componentTag;
  const file = options.__file;

  if (!name && file) {
    const match = file.match(/([^/\\]+)\.vue$/);
    name = match && match[1];
  }

  return (name ? `<${classify(name)}>` : `<Anonymous>`) + (file && includeFile !== false ? ` at ${file}` : '');
}

function generateComponentTrace(vm) {
  if (vm._isVue && vm.$parent) {
    const tree = [];
    let currentRecursiveSequence = 0;

    while (vm) {
      if (tree.length > 0) {
        const last = tree[tree.length - 1];

        if (last.constructor === vm.constructor) {
          currentRecursiveSequence++;
          vm = vm.$parent;
          continue;
        } else if (currentRecursiveSequence > 0) {
          tree[tree.length - 1] = [last, currentRecursiveSequence];
          currentRecursiveSequence = 0;
        }
      }

      tree.push(vm);
      vm = vm.$parent;
    }

    return '\n\nfound in\n\n' + tree.map((vm, i) => `${i === 0 ? '---> ' : ' '.repeat(5 + i * 2)}${Array.isArray(vm) ? `${formatComponentName(vm[0])}... (${vm[1]} recursive calls)` : formatComponentName(vm)}`).join('\n');
  } else {
    return `\n\n(found in ${formatComponentName(vm)})`;
  }
}

var Colorable = Vue$1.extend({
  name: 'colorable',
  props: {
    color: String
  },
  methods: {
    setBackgroundColor(color, data = {}) {
      if (typeof data.style === 'string') {
        // istanbul ignore next
        consoleError('style must be an object', this); // istanbul ignore next

        return data;
      }

      if (typeof data.class === 'string') {
        // istanbul ignore next
        consoleError('class must be an object', this); // istanbul ignore next

        return data;
      }

      if (isCssColor(color)) {
        data.style = { ...data.style,
          'background-color': `${color}`,
          'border-color': `${color}`
        };
      } else if (color) {
        data.class = { ...data.class,
          [color]: true
        };
      }

      return data;
    },

    setTextColor(color, data = {}) {
      if (typeof data.style === 'string') {
        // istanbul ignore next
        consoleError('style must be an object', this); // istanbul ignore next

        return data;
      }

      if (typeof data.class === 'string') {
        // istanbul ignore next
        consoleError('class must be an object', this); // istanbul ignore next

        return data;
      }

      if (isCssColor(color)) {
        data.style = { ...data.style,
          color: `${color}`,
          'caret-color': `${color}`
        };
      } else if (color) {
        const [colorName, colorModifier] = color.toString().trim().split(' ', 2);
        data.class = { ...data.class,
          [colorName + '--text']: true
        };

        if (colorModifier) {
          data.class['text--' + colorModifier] = true;
        }
      }

      return data;
    }

  }
});

var Elevatable = Vue$1.extend({
  name: 'elevatable',
  props: {
    elevation: [Number, String]
  },
  computed: {
    computedElevation() {
      return this.elevation;
    },

    elevationClasses() {
      const elevation = this.computedElevation;
      if (elevation == null) return {};
      if (isNaN(parseInt(elevation))) return {};
      return {
        [`elevation-${this.elevation}`]: true
      };
    }

  }
});

// Helpers
var Measurable = Vue$1.extend({
  name: 'measurable',
  props: {
    height: [Number, String],
    maxHeight: [Number, String],
    maxWidth: [Number, String],
    minHeight: [Number, String],
    minWidth: [Number, String],
    width: [Number, String]
  },
  computed: {
    measurableStyles() {
      const styles = {};
      const height = convertToUnit(this.height);
      const minHeight = convertToUnit(this.minHeight);
      const minWidth = convertToUnit(this.minWidth);
      const maxHeight = convertToUnit(this.maxHeight);
      const maxWidth = convertToUnit(this.maxWidth);
      const width = convertToUnit(this.width);
      if (height) styles.height = height;
      if (minHeight) styles.minHeight = minHeight;
      if (minWidth) styles.minWidth = minWidth;
      if (maxHeight) styles.maxHeight = maxHeight;
      if (maxWidth) styles.maxWidth = maxWidth;
      if (width) styles.width = width;
      return styles;
    }

  }
});

/* @vue/component */

var Roundable = Vue$1.extend({
  name: 'roundable',
  props: {
    rounded: [Boolean, String],
    tile: Boolean
  },
  computed: {
    roundedClasses() {
      const composite = [];
      const rounded = typeof this.rounded === 'string' ? String(this.rounded) : this.rounded === true;

      if (this.tile) {
        composite.push('rounded-0');
      } else if (typeof rounded === 'string') {
        const values = rounded.split(' ');

        for (const value of values) {
          composite.push(`rounded-${value}`);
        }
      } else if (rounded) {
        composite.push('rounded');
      }

      return composite.length > 0 ? {
        [composite.join(' ')]: true
      } : {};
    }

  }
});

// Styles
/* @vue/component */

var VSheet = mixins(BindsAttrs, Colorable, Elevatable, Measurable, Roundable, Themeable$1).extend({
  name: 'v-sheet',
  props: {
    outlined: Boolean,
    shaped: Boolean,
    tag: {
      type: String,
      default: 'div'
    }
  },
  computed: {
    classes() {
      return {
        'v-sheet': true,
        'v-sheet--outlined': this.outlined,
        'v-sheet--shaped': this.shaped,
        ...this.themeClasses,
        ...this.elevationClasses,
        ...this.roundedClasses
      };
    },

    styles() {
      return this.measurableStyles;
    }

  },

  render(h) {
    const data = {
      class: this.classes,
      style: this.styles,
      on: this.listeners$
    };
    return h(this.tag, this.setBackgroundColor(this.color, data), this.$slots.default);
  }

});

var VImg = '';

function inserted$3(el, binding, vnode) {
  if (typeof window === 'undefined' || !('IntersectionObserver' in window)) return;
  const modifiers = binding.modifiers || {};
  const value = binding.value;
  const {
    handler,
    options
  } = typeof value === 'object' ? value : {
    handler: value,
    options: {}
  };
  const observer = new IntersectionObserver((entries = [], observer) => {
    var _a;

    const _observe = (_a = el._observe) === null || _a === void 0 ? void 0 : _a[vnode.context._uid];

    if (!_observe) return; // Just in case, should never fire

    const isIntersecting = entries.some(entry => entry.isIntersecting); // If is not quiet or has already been
    // initted, invoke the user callback

    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {
      handler(entries, observer, isIntersecting);
    }

    if (isIntersecting && modifiers.once) unbind$4(el, binding, vnode);else _observe.init = true;
  }, options);
  el._observe = Object(el._observe);
  el._observe[vnode.context._uid] = {
    init: false,
    observer
  };
  observer.observe(el);
}

function unbind$4(el, binding, vnode) {
  var _a;

  const observe = (_a = el._observe) === null || _a === void 0 ? void 0 : _a[vnode.context._uid];
  if (!observe) return;
  observe.observer.unobserve(el);
  delete el._observe[vnode.context._uid];
}

const Intersect = {
  inserted: inserted$3,
  unbind: unbind$4
};
var intersect = Intersect;

var VResponsive$1 = '';

/* @vue/component */

var VResponsive = mixins(Measurable).extend({
  name: 'v-responsive',
  props: {
    aspectRatio: [String, Number],
    contentClass: String
  },
  computed: {
    computedAspectRatio() {
      return Number(this.aspectRatio);
    },

    aspectStyle() {
      return this.computedAspectRatio ? {
        paddingBottom: 1 / this.computedAspectRatio * 100 + '%'
      } : undefined;
    },

    __cachedSizer() {
      if (!this.aspectStyle) return [];
      return this.$createElement('div', {
        style: this.aspectStyle,
        staticClass: 'v-responsive__sizer'
      });
    }

  },
  methods: {
    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-responsive__content',
        class: this.contentClass
      }, getSlot(this));
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'v-responsive',
      style: this.measurableStyles,
      on: this.$listeners
    }, [this.__cachedSizer, this.genContent()]);
  }

});

const pattern = {
  styleList: /;(?![^(]*\))/g,
  styleProp: /:(.*)/
};

function parseStyle(style) {
  const styleMap = {};

  for (const s of style.split(pattern.styleList)) {
    let [key, val] = s.split(pattern.styleProp);
    key = key.trim();

    if (!key) {
      continue;
    } // May be undefined if the `key: value` pair is incomplete.


    if (typeof val === 'string') {
      val = val.trim();
    }

    styleMap[camelize(key)] = val;
  }

  return styleMap;
}

function mergeData() {
  const mergeTarget = {};
  let i = arguments.length;
  let prop; // Allow for variadic argument length.

  while (i--) {
    // Iterate through the data properties and execute merge strategies
    // Object.keys eliminates need for hasOwnProperty call
    for (prop of Object.keys(arguments[i])) {
      switch (prop) {
        // Array merge strategy (array concatenation)
        case 'class':
        case 'directives':
          if (arguments[i][prop]) {
            mergeTarget[prop] = mergeClasses(mergeTarget[prop], arguments[i][prop]);
          }

          break;

        case 'style':
          if (arguments[i][prop]) {
            mergeTarget[prop] = mergeStyles(mergeTarget[prop], arguments[i][prop]);
          }

          break;
        // Space delimited string concatenation strategy

        case 'staticClass':
          if (!arguments[i][prop]) {
            break;
          }

          if (mergeTarget[prop] === undefined) {
            mergeTarget[prop] = '';
          }

          if (mergeTarget[prop]) {
            // Not an empty string, so concatenate
            mergeTarget[prop] += ' ';
          }

          mergeTarget[prop] += arguments[i][prop].trim();
          break;
        // Object, the properties of which to merge via array merge strategy (array concatenation).
        // Callback merge strategy merges callbacks to the beginning of the array,
        // so that the last defined callback will be invoked first.
        // This is done since to mimic how Object.assign merging
        // uses the last given value to assign.

        case 'on':
        case 'nativeOn':
          if (arguments[i][prop]) {
            mergeTarget[prop] = mergeListeners(mergeTarget[prop], arguments[i][prop]);
          }

          break;
        // Object merge strategy

        case 'attrs':
        case 'props':
        case 'domProps':
        case 'scopedSlots':
        case 'staticStyle':
        case 'hook':
        case 'transition':
          if (!arguments[i][prop]) {
            break;
          }

          if (!mergeTarget[prop]) {
            mergeTarget[prop] = {};
          }

          mergeTarget[prop] = { ...arguments[i][prop],
            ...mergeTarget[prop]
          };
          break;
        // Reassignment strategy (no merge)

        default:
          // slot, key, ref, tag, show, keepAlive
          if (!mergeTarget[prop]) {
            mergeTarget[prop] = arguments[i][prop];
          }

      }
    }
  }

  return mergeTarget;
}
function mergeStyles(target, source) {
  if (!target) return source;
  if (!source) return target;
  target = wrapInArray(typeof target === 'string' ? parseStyle(target) : target);
  return target.concat(typeof source === 'string' ? parseStyle(source) : source);
}
function mergeClasses(target, source) {
  if (!source) return target;
  if (!target) return source;
  return target ? wrapInArray(target).concat(source) : source;
}
function mergeListeners(...args) {
  if (!args[0]) return args[1];
  if (!args[1]) return args[0];
  const dest = {};

  for (let i = 2; i--;) {
    const arg = args[i];

    for (const event in arg) {
      if (!arg[event]) continue;

      if (dest[event]) {
        // Merge current listeners before (because we are iterating backwards).
        // Note that neither "target" or "source" must be altered.
        dest[event] = [].concat(arg[event], dest[event]);
      } else {
        // Straight assign.
        dest[event] = arg[event];
      }
    }
  }

  return dest;
}

// Styles
const hasIntersect = typeof window !== 'undefined' && 'IntersectionObserver' in window;
/* @vue/component */

var __unplugin_components_1 = mixins(VResponsive, Themeable$1).extend({
  name: 'v-img',
  directives: {
    intersect
  },
  props: {
    alt: String,
    contain: Boolean,
    eager: Boolean,
    gradient: String,
    lazySrc: String,
    options: {
      type: Object,
      // For more information on types, navigate to:
      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
      default: () => ({
        root: undefined,
        rootMargin: undefined,
        threshold: undefined
      })
    },
    position: {
      type: String,
      default: 'center center'
    },
    sizes: String,
    src: {
      type: [String, Object],
      default: ''
    },
    srcset: String,
    transition: {
      type: [Boolean, String],
      default: 'fade-transition'
    }
  },

  data() {
    return {
      currentSrc: '',
      image: null,
      isLoading: true,
      calculatedAspectRatio: undefined,
      naturalWidth: undefined,
      hasError: false
    };
  },

  computed: {
    computedAspectRatio() {
      return Number(this.normalisedSrc.aspect || this.calculatedAspectRatio);
    },

    normalisedSrc() {
      return this.src && typeof this.src === 'object' ? {
        src: this.src.src,
        srcset: this.srcset || this.src.srcset,
        lazySrc: this.lazySrc || this.src.lazySrc,
        aspect: Number(this.aspectRatio || this.src.aspect)
      } : {
        src: this.src,
        srcset: this.srcset,
        lazySrc: this.lazySrc,
        aspect: Number(this.aspectRatio || 0)
      };
    },

    __cachedImage() {
      if (!(this.normalisedSrc.src || this.normalisedSrc.lazySrc || this.gradient)) return [];
      const backgroundImage = [];
      const src = this.isLoading ? this.normalisedSrc.lazySrc : this.currentSrc;
      if (this.gradient) backgroundImage.push(`linear-gradient(${this.gradient})`);
      if (src) backgroundImage.push(`url("${src}")`);
      const image = this.$createElement('div', {
        staticClass: 'v-image__image',
        class: {
          'v-image__image--preload': this.isLoading,
          'v-image__image--contain': this.contain,
          'v-image__image--cover': !this.contain
        },
        style: {
          backgroundImage: backgroundImage.join(', '),
          backgroundPosition: this.position
        },
        key: +this.isLoading
      });
      /* istanbul ignore if */

      if (!this.transition) return image;
      return this.$createElement('transition', {
        attrs: {
          name: this.transition,
          mode: 'in-out'
        }
      }, [image]);
    }

  },
  watch: {
    src() {
      // Force re-init when src changes
      if (!this.isLoading) this.init(undefined, undefined, true);else this.loadImage();
    },

    '$vuetify.breakpoint.width': 'getSrc'
  },

  mounted() {
    this.init();
  },

  methods: {
    init(entries, observer, isIntersecting) {
      // If the current browser supports the intersection
      // observer api, the image is not observable, and
      // the eager prop isn't being used, do not load
      if (hasIntersect && !isIntersecting && !this.eager) return;

      if (this.normalisedSrc.lazySrc) {
        const lazyImg = new Image();
        lazyImg.src = this.normalisedSrc.lazySrc;
        this.pollForSize(lazyImg, null);
      }
      /* istanbul ignore else */


      if (this.normalisedSrc.src) this.loadImage();
    },

    onLoad() {
      this.getSrc();
      this.isLoading = false;
      this.$emit('load', this.src);

      if (this.image && (this.normalisedSrc.src.endsWith('.svg') || this.normalisedSrc.src.startsWith('data:image/svg+xml'))) {
        if (this.image.naturalHeight && this.image.naturalWidth) {
          this.naturalWidth = this.image.naturalWidth;
          this.calculatedAspectRatio = this.image.naturalWidth / this.image.naturalHeight;
        } else {
          this.calculatedAspectRatio = 1;
        }
      }
    },

    onError() {
      this.hasError = true;
      this.$emit('error', this.src);
    },

    getSrc() {
      /* istanbul ignore else */
      if (this.image) this.currentSrc = this.image.currentSrc || this.image.src;
    },

    loadImage() {
      const image = new Image();
      this.image = image;

      image.onload = () => {
        /* istanbul ignore if */
        if (image.decode) {
          image.decode().catch(err => {
            consoleWarn(`Failed to decode image, trying to render anyway\n\n` + `src: ${this.normalisedSrc.src}` + (err.message ? `\nOriginal error: ${err.message}` : ''), this);
          }).then(this.onLoad);
        } else {
          this.onLoad();
        }
      };

      image.onerror = this.onError;
      this.hasError = false;
      this.sizes && (image.sizes = this.sizes);
      this.normalisedSrc.srcset && (image.srcset = this.normalisedSrc.srcset);
      image.src = this.normalisedSrc.src;
      this.$emit('loadstart', this.normalisedSrc.src);
      this.aspectRatio || this.pollForSize(image);
      this.getSrc();
    },

    pollForSize(img, timeout = 100) {
      const poll = () => {
        const {
          naturalHeight,
          naturalWidth
        } = img;

        if (naturalHeight || naturalWidth) {
          this.naturalWidth = naturalWidth;
          this.calculatedAspectRatio = naturalWidth / naturalHeight;
        } else if (!img.complete && this.isLoading && !this.hasError && timeout != null) {
          setTimeout(poll, timeout);
        }
      };

      poll();
    },

    genContent() {
      const content = VResponsive.options.methods.genContent.call(this);

      if (this.naturalWidth) {
        this._b(content.data, 'div', {
          style: {
            width: `${this.naturalWidth}px`
          }
        });
      }

      return content;
    },

    __genPlaceholder() {
      const slot = getSlot(this, 'placeholder');

      if (slot) {
        const placeholder = this.isLoading ? [this.$createElement('div', {
          staticClass: 'v-image__placeholder'
        }, slot)] : [];
        if (!this.transition) return placeholder[0];
        return this.$createElement('transition', {
          props: {
            appear: true,
            name: this.transition
          }
        }, placeholder);
      }
    }

  },

  render(h) {
    const node = VResponsive.options.render.call(this, h);
    const data = mergeData(node.data, {
      staticClass: 'v-image',
      attrs: {
        'aria-label': this.alt,
        role: this.alt ? 'img' : undefined
      },
      class: this.themeClasses,
      // Only load intersect directive if it
      // will work in the current browser.
      directives: hasIntersect ? [{
        name: 'intersect',
        modifiers: {
          once: true
        },
        value: {
          handler: this.init,
          options: this.options
        }
      }] : undefined
    });
    node.children = [this.__cachedSizer, this.__cachedImage, this.__genPlaceholder(), this.genContent()];
    return h(node.tag, data, node.children);
  }

});

// Styles
/* @vue/component */

var VToolbar = VSheet.extend({
  name: 'v-toolbar',
  props: {
    absolute: Boolean,
    bottom: Boolean,
    collapse: Boolean,
    dense: Boolean,
    extended: Boolean,
    extensionHeight: {
      default: 48,
      type: [Number, String]
    },
    flat: Boolean,
    floating: Boolean,
    prominent: Boolean,
    short: Boolean,
    src: {
      type: [String, Object],
      default: ''
    },
    tag: {
      type: String,
      default: 'header'
    }
  },
  data: () => ({
    isExtended: false
  }),
  computed: {
    computedHeight() {
      const height = this.computedContentHeight;
      if (!this.isExtended) return height;
      const extensionHeight = parseInt(this.extensionHeight);
      return this.isCollapsed ? height : height + (!isNaN(extensionHeight) ? extensionHeight : 0);
    },

    computedContentHeight() {
      if (this.height) return parseInt(this.height);
      if (this.isProminent && this.dense) return 96;
      if (this.isProminent && this.short) return 112;
      if (this.isProminent) return 128;
      if (this.dense) return 48;
      if (this.short || this.$vuetify.breakpoint.smAndDown) return 56;
      return 64;
    },

    classes() {
      return { ...VSheet.options.computed.classes.call(this),
        'v-toolbar': true,
        'v-toolbar--absolute': this.absolute,
        'v-toolbar--bottom': this.bottom,
        'v-toolbar--collapse': this.collapse,
        'v-toolbar--collapsed': this.isCollapsed,
        'v-toolbar--dense': this.dense,
        'v-toolbar--extended': this.isExtended,
        'v-toolbar--flat': this.flat,
        'v-toolbar--floating': this.floating,
        'v-toolbar--prominent': this.isProminent
      };
    },

    isCollapsed() {
      return this.collapse;
    },

    isProminent() {
      return this.prominent;
    },

    styles() {
      return { ...this.measurableStyles,
        height: convertToUnit(this.computedHeight)
      };
    }

  },

  created() {
    const breakingProps = [['app', '<v-app-bar app>'], ['manual-scroll', '<v-app-bar :value="false">'], ['clipped-left', '<v-app-bar clipped-left>'], ['clipped-right', '<v-app-bar clipped-right>'], ['inverted-scroll', '<v-app-bar inverted-scroll>'], ['scroll-off-screen', '<v-app-bar scroll-off-screen>'], ['scroll-target', '<v-app-bar scroll-target>'], ['scroll-threshold', '<v-app-bar scroll-threshold>'], ['card', '<v-app-bar flat>']];
    /* istanbul ignore next */

    breakingProps.forEach(([original, replacement]) => {
      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);
    });
  },

  methods: {
    genBackground() {
      const props = {
        height: convertToUnit(this.computedHeight),
        src: this.src
      };
      const image = this.$scopedSlots.img ? this.$scopedSlots.img({
        props
      }) : this.$createElement(__unplugin_components_1, {
        props
      });
      return this.$createElement('div', {
        staticClass: 'v-toolbar__image'
      }, [image]);
    },

    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-toolbar__content',
        style: {
          height: convertToUnit(this.computedContentHeight)
        }
      }, getSlot(this));
    },

    genExtension() {
      return this.$createElement('div', {
        staticClass: 'v-toolbar__extension',
        style: {
          height: convertToUnit(this.extensionHeight)
        }
      }, getSlot(this, 'extension'));
    }

  },

  render(h) {
    this.isExtended = this.extended || !!this.$scopedSlots.extension;
    const children = [this.genContent()];
    const data = this.setBackgroundColor(this.color, {
      class: this.classes,
      style: this.styles,
      on: this.$listeners
    });
    if (this.isExtended) children.push(this.genExtension());
    if (this.src || this.$scopedSlots.img) children.unshift(this.genBackground());
    return h(this.tag, data, children);
  }

});

function inserted$2(el, binding, vnode) {
  const {
    self = false
  } = binding.modifiers || {};
  const value = binding.value;
  const options = typeof value === 'object' && value.options || {
    passive: true
  };
  const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler;
  const target = self ? el : binding.arg ? document.querySelector(binding.arg) : window;
  if (!target) return;
  target.addEventListener('scroll', handler, options);
  el._onScroll = Object(el._onScroll);
  el._onScroll[vnode.context._uid] = {
    handler,
    options,
    // Don't reference self
    target: self ? undefined : target
  };
}

function unbind$3(el, binding, vnode) {
  var _a;

  if (!((_a = el._onScroll) === null || _a === void 0 ? void 0 : _a[vnode.context._uid])) return;
  const {
    handler,
    options,
    target = el
  } = el._onScroll[vnode.context._uid];
  target.removeEventListener('scroll', handler, options);
  delete el._onScroll[vnode.context._uid];
}

const Scroll = {
  inserted: inserted$2,
  unbind: unbind$3
};
var Scroll$1 = Scroll;

const availableProps = {
  absolute: Boolean,
  bottom: Boolean,
  fixed: Boolean,
  left: Boolean,
  right: Boolean,
  top: Boolean
};
function factory$3(selected = []) {
  return Vue$1.extend({
    name: 'positionable',
    props: selected.length ? filterObjectOnKeys(availableProps, selected) : availableProps
  });
}
var Positionable = factory$3(); // Add a `*` before the second `/`

/* Tests /
let single = factory(['top']).extend({
  created () {
    this.top
    this.bottom
    this.absolute
  }
})

let some = factory(['top', 'bottom']).extend({
  created () {
    this.top
    this.bottom
    this.absolute
  }
})

let all = factory().extend({
  created () {
    this.top
    this.bottom
    this.absolute
    this.foobar
  }
})
/**/

function applicationable(value, events = []) {
  /* @vue/component */
  return mixins(factory$3(['absolute', 'fixed'])).extend({
    name: 'applicationable',
    props: {
      app: Boolean
    },
    computed: {
      applicationProperty() {
        return value;
      }

    },
    watch: {
      // If previous value was app
      // reset the provided prop
      app(x, prev) {
        prev ? this.removeApplication(true) : this.callUpdate();
      },

      applicationProperty(newVal, oldVal) {
        this.$vuetify.application.unregister(this._uid, oldVal);
      }

    },

    activated() {
      this.callUpdate();
    },

    created() {
      for (let i = 0, length = events.length; i < length; i++) {
        this.$watch(events[i], this.callUpdate);
      }

      this.callUpdate();
    },

    mounted() {
      this.callUpdate();
    },

    deactivated() {
      this.removeApplication();
    },

    destroyed() {
      this.removeApplication();
    },

    methods: {
      callUpdate() {
        if (!this.app) return;
        this.$vuetify.application.register(this._uid, this.applicationProperty, this.updateApplication());
      },

      removeApplication(force = false) {
        if (!force && !this.app) return;
        this.$vuetify.application.unregister(this._uid, this.applicationProperty);
      },

      updateApplication: () => 0
    }
  });
}

/**
 * Returns:
 *  - 'null' if the node is not attached to the DOM
 *  - the root node (HTMLDocument | ShadowRoot) otherwise
 */
function attachedRoot(node) {
  /* istanbul ignore next */
  if (typeof node.getRootNode !== 'function') {
    // Shadow DOM not supported (IE11), lets find the root of this node
    while (node.parentNode) node = node.parentNode; // The root parent is the document if the node is attached to the DOM


    if (node !== document) return null;
    return document;
  }

  const root = node.getRootNode(); // The composed root node is the document if the node is attached to the DOM

  if (root !== document && root.getRootNode({
    composed: true
  }) !== document) return null;
  return root;
}

function defaultConditional() {
  return true;
}

function checkEvent(e, el, binding) {
  // The include element callbacks below can be expensive
  // so we should avoid calling them when we're not active.
  // Explicitly check for false to allow fallback compatibility
  // with non-toggleable components
  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same
  // level of introspection as to _what_ we're clicking. We want to check to see if
  // our target is the shadowroot parent container, and if it is, ignore.

  const root = attachedRoot(el);
  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check
  // (click must be outside all included elements, if any)

  const elements = (typeof binding.value === 'object' && binding.value.include || (() => []))(); // Add the root element for the component this directive was defined on


  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.
  // Non-toggleable components should take action in their callback and return falsy.
  // Toggleable can return true if it wants to deactivate.
  // Note that, because we're in the capture phase, this callback will occur before
  // the bubbling click event on any outside elements.

  return !elements.some(el => el.contains(e.target));
}

function checkIsActive(e, binding) {
  const isActive = typeof binding.value === 'object' && binding.value.closeConditional || defaultConditional;
  return isActive(e);
}

function directive$1(e, el, binding) {
  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;
  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {
    checkIsActive(e, binding) && handler && handler(e);
  }, 0);
}

function handleShadow(el, callback) {
  const root = attachedRoot(el);
  callback(document);

  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {
    callback(root);
  }
}

const ClickOutside = {
  // [data-app] may not be found
  // if using bind, inserted makes
  // sure that the root element is
  // available, iOS does not support
  // clicks on body
  inserted(el, binding, vnode) {
    const onClick = e => directive$1(e, el, binding);

    const onMousedown = e => {
      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);
    };

    handleShadow(el, app => {
      app.addEventListener('click', onClick, true);
      app.addEventListener('mousedown', onMousedown, true);
    });

    if (!el._clickOutside) {
      el._clickOutside = {
        lastMousedownWasOutside: true
      };
    }

    el._clickOutside[vnode.context._uid] = {
      onClick,
      onMousedown
    };
  },

  unbind(el, binding, vnode) {
    if (!el._clickOutside) return;
    handleShadow(el, app => {
      var _a;

      if (!app || !((_a = el._clickOutside) === null || _a === void 0 ? void 0 : _a[vnode.context._uid])) return;
      const {
        onClick,
        onMousedown
      } = el._clickOutside[vnode.context._uid];
      app.removeEventListener('click', onClick, true);
      app.removeEventListener('mousedown', onMousedown, true);
    });
    delete el._clickOutside[vnode.context._uid];
  }

};
var ClickOutside$1 = ClickOutside;

function inserted$1(el, binding, vnode) {
  const callback = binding.value;
  const options = binding.options || {
    passive: true
  };
  window.addEventListener('resize', callback, options);
  el._onResize = Object(el._onResize);
  el._onResize[vnode.context._uid] = {
    callback,
    options
  };

  if (!binding.modifiers || !binding.modifiers.quiet) {
    callback();
  }
}

function unbind$2(el, binding, vnode) {
  var _a;

  if (!((_a = el._onResize) === null || _a === void 0 ? void 0 : _a[vnode.context._uid])) return;
  const {
    callback,
    options
  } = el._onResize[vnode.context._uid];
  window.removeEventListener('resize', callback, options);
  delete el._onResize[vnode.context._uid];
}

const Resize = {
  inserted: inserted$1,
  unbind: unbind$2
};
var Resize$1 = Resize;

var VRipple = '';

// Styles
const DELAY_RIPPLE = 80;

function transform(el, value) {
  el.style.transform = value;
  el.style.webkitTransform = value;
}

function isTouchEvent(e) {
  return e.constructor.name === 'TouchEvent';
}

function isKeyboardEvent(e) {
  return e.constructor.name === 'KeyboardEvent';
}

const calculate = (e, el, value = {}) => {
  let localX = 0;
  let localY = 0;

  if (!isKeyboardEvent(e)) {
    const offset = el.getBoundingClientRect();
    const target = isTouchEvent(e) ? e.touches[e.touches.length - 1] : e;
    localX = target.clientX - offset.left;
    localY = target.clientY - offset.top;
  }

  let radius = 0;
  let scale = 0.3;

  if (el._ripple && el._ripple.circle) {
    scale = 0.15;
    radius = el.clientWidth / 2;
    radius = value.center ? radius : radius + Math.sqrt((localX - radius) ** 2 + (localY - radius) ** 2) / 4;
  } else {
    radius = Math.sqrt(el.clientWidth ** 2 + el.clientHeight ** 2) / 2;
  }

  const centerX = `${(el.clientWidth - radius * 2) / 2}px`;
  const centerY = `${(el.clientHeight - radius * 2) / 2}px`;
  const x = value.center ? centerX : `${localX - radius}px`;
  const y = value.center ? centerY : `${localY - radius}px`;
  return {
    radius,
    scale,
    x,
    y,
    centerX,
    centerY
  };
};

const ripples = {
  /* eslint-disable max-statements */
  show(e, el, value = {}) {
    if (!el._ripple || !el._ripple.enabled) {
      return;
    }

    const container = document.createElement('span');
    const animation = document.createElement('span');
    container.appendChild(animation);
    container.className = 'v-ripple__container';

    if (value.class) {
      container.className += ` ${value.class}`;
    }

    const {
      radius,
      scale,
      x,
      y,
      centerX,
      centerY
    } = calculate(e, el, value);
    const size = `${radius * 2}px`;
    animation.className = 'v-ripple__animation';
    animation.style.width = size;
    animation.style.height = size;
    el.appendChild(container);
    const computed = window.getComputedStyle(el);

    if (computed && computed.position === 'static') {
      el.style.position = 'relative';
      el.dataset.previousPosition = 'static';
    }

    animation.classList.add('v-ripple__animation--enter');
    animation.classList.add('v-ripple__animation--visible');
    transform(animation, `translate(${x}, ${y}) scale3d(${scale},${scale},${scale})`);
    animation.dataset.activated = String(performance.now());
    setTimeout(() => {
      animation.classList.remove('v-ripple__animation--enter');
      animation.classList.add('v-ripple__animation--in');
      transform(animation, `translate(${centerX}, ${centerY}) scale3d(1,1,1)`);
    }, 0);
  },

  hide(el) {
    if (!el || !el._ripple || !el._ripple.enabled) return;
    const ripples = el.getElementsByClassName('v-ripple__animation');
    if (ripples.length === 0) return;
    const animation = ripples[ripples.length - 1];
    if (animation.dataset.isHiding) return;else animation.dataset.isHiding = 'true';
    const diff = performance.now() - Number(animation.dataset.activated);
    const delay = Math.max(250 - diff, 0);
    setTimeout(() => {
      animation.classList.remove('v-ripple__animation--in');
      animation.classList.add('v-ripple__animation--out');
      setTimeout(() => {
        var _a;

        const ripples = el.getElementsByClassName('v-ripple__animation');

        if (ripples.length === 1 && el.dataset.previousPosition) {
          el.style.position = el.dataset.previousPosition;
          delete el.dataset.previousPosition;
        }

        if (((_a = animation.parentNode) === null || _a === void 0 ? void 0 : _a.parentNode) === el) el.removeChild(animation.parentNode);
      }, 300);
    }, delay);
  }

};

function isRippleEnabled(value) {
  return typeof value === 'undefined' || !!value;
}

function rippleShow(e) {
  const value = {};
  const element = e.currentTarget;
  if (!element || !element._ripple || element._ripple.touched || e.rippleStop) return; // Don't allow the event to trigger ripples on any other elements

  e.rippleStop = true;

  if (isTouchEvent(e)) {
    element._ripple.touched = true;
    element._ripple.isTouch = true;
  } else {
    // It's possible for touch events to fire
    // as mouse events on Android/iOS, this
    // will skip the event call if it has
    // already been registered as touch
    if (element._ripple.isTouch) return;
  }

  value.center = element._ripple.centered || isKeyboardEvent(e);

  if (element._ripple.class) {
    value.class = element._ripple.class;
  }

  if (isTouchEvent(e)) {
    // already queued that shows or hides the ripple
    if (element._ripple.showTimerCommit) return;

    element._ripple.showTimerCommit = () => {
      ripples.show(e, element, value);
    };

    element._ripple.showTimer = window.setTimeout(() => {
      if (element && element._ripple && element._ripple.showTimerCommit) {
        element._ripple.showTimerCommit();

        element._ripple.showTimerCommit = null;
      }
    }, DELAY_RIPPLE);
  } else {
    ripples.show(e, element, value);
  }
}

function rippleHide(e) {
  const element = e.currentTarget;
  if (!element || !element._ripple) return;
  window.clearTimeout(element._ripple.showTimer); // The touch interaction occurs before the show timer is triggered.
  // We still want to show ripple effect.

  if (e.type === 'touchend' && element._ripple.showTimerCommit) {
    element._ripple.showTimerCommit();

    element._ripple.showTimerCommit = null; // re-queue ripple hiding

    element._ripple.showTimer = setTimeout(() => {
      rippleHide(e);
    });
    return;
  }

  window.setTimeout(() => {
    if (element._ripple) {
      element._ripple.touched = false;
    }
  });
  ripples.hide(element);
}

function rippleCancelShow(e) {
  const element = e.currentTarget;
  if (!element || !element._ripple) return;

  if (element._ripple.showTimerCommit) {
    element._ripple.showTimerCommit = null;
  }

  window.clearTimeout(element._ripple.showTimer);
}

let keyboardRipple = false;

function keyboardRippleShow(e) {
  if (!keyboardRipple && (e.keyCode === keyCodes.enter || e.keyCode === keyCodes.space)) {
    keyboardRipple = true;
    rippleShow(e);
  }
}

function keyboardRippleHide(e) {
  keyboardRipple = false;
  rippleHide(e);
}

function focusRippleHide(e) {
  if (keyboardRipple === true) {
    keyboardRipple = false;
    rippleHide(e);
  }
}

function updateRipple(el, binding, wasEnabled) {
  const enabled = isRippleEnabled(binding.value);

  if (!enabled) {
    ripples.hide(el);
  }

  el._ripple = el._ripple || {};
  el._ripple.enabled = enabled;
  const value = binding.value || {};

  if (value.center) {
    el._ripple.centered = true;
  }

  if (value.class) {
    el._ripple.class = binding.value.class;
  }

  if (value.circle) {
    el._ripple.circle = value.circle;
  }

  if (enabled && !wasEnabled) {
    el.addEventListener('touchstart', rippleShow, {
      passive: true
    });
    el.addEventListener('touchend', rippleHide, {
      passive: true
    });
    el.addEventListener('touchmove', rippleCancelShow, {
      passive: true
    });
    el.addEventListener('touchcancel', rippleHide);
    el.addEventListener('mousedown', rippleShow);
    el.addEventListener('mouseup', rippleHide);
    el.addEventListener('mouseleave', rippleHide);
    el.addEventListener('keydown', keyboardRippleShow);
    el.addEventListener('keyup', keyboardRippleHide);
    el.addEventListener('blur', focusRippleHide); // Anchor tags can be dragged, causes other hides to fail - #1537

    el.addEventListener('dragstart', rippleHide, {
      passive: true
    });
  } else if (!enabled && wasEnabled) {
    removeListeners(el);
  }
}

function removeListeners(el) {
  el.removeEventListener('mousedown', rippleShow);
  el.removeEventListener('touchstart', rippleShow);
  el.removeEventListener('touchend', rippleHide);
  el.removeEventListener('touchmove', rippleCancelShow);
  el.removeEventListener('touchcancel', rippleHide);
  el.removeEventListener('mouseup', rippleHide);
  el.removeEventListener('mouseleave', rippleHide);
  el.removeEventListener('keydown', keyboardRippleShow);
  el.removeEventListener('keyup', keyboardRippleHide);
  el.removeEventListener('dragstart', rippleHide);
  el.removeEventListener('blur', focusRippleHide);
}

function directive(el, binding, node) {
  updateRipple(el, binding, false);
}

function unbind$1(el) {
  delete el._ripple;
  removeListeners(el);
}

function update(el, binding) {
  if (binding.value === binding.oldValue) {
    return;
  }

  const wasEnabled = isRippleEnabled(binding.oldValue);
  updateRipple(el, binding, wasEnabled);
}

const Ripple = {
  bind: directive,
  unbind: unbind$1,
  update
};
var Ripple$1 = Ripple;

const handleGesture = wrapper => {
  const {
    touchstartX,
    touchendX,
    touchstartY,
    touchendY
  } = wrapper;
  const dirRatio = 0.5;
  const minDistance = 16;
  wrapper.offsetX = touchendX - touchstartX;
  wrapper.offsetY = touchendY - touchstartY;

  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {
    wrapper.left && touchendX < touchstartX - minDistance && wrapper.left(wrapper);
    wrapper.right && touchendX > touchstartX + minDistance && wrapper.right(wrapper);
  }

  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {
    wrapper.up && touchendY < touchstartY - minDistance && wrapper.up(wrapper);
    wrapper.down && touchendY > touchstartY + minDistance && wrapper.down(wrapper);
  }
};

function touchstart(event, wrapper) {
  const touch = event.changedTouches[0];
  wrapper.touchstartX = touch.clientX;
  wrapper.touchstartY = touch.clientY;
  wrapper.start && wrapper.start(Object.assign(event, wrapper));
}

function touchend(event, wrapper) {
  const touch = event.changedTouches[0];
  wrapper.touchendX = touch.clientX;
  wrapper.touchendY = touch.clientY;
  wrapper.end && wrapper.end(Object.assign(event, wrapper));
  handleGesture(wrapper);
}

function touchmove(event, wrapper) {
  const touch = event.changedTouches[0];
  wrapper.touchmoveX = touch.clientX;
  wrapper.touchmoveY = touch.clientY;
  wrapper.move && wrapper.move(Object.assign(event, wrapper));
}

function createHandlers(value) {
  const wrapper = {
    touchstartX: 0,
    touchstartY: 0,
    touchendX: 0,
    touchendY: 0,
    touchmoveX: 0,
    touchmoveY: 0,
    offsetX: 0,
    offsetY: 0,
    left: value.left,
    right: value.right,
    up: value.up,
    down: value.down,
    start: value.start,
    move: value.move,
    end: value.end
  };
  return {
    touchstart: e => touchstart(e, wrapper),
    touchend: e => touchend(e, wrapper),
    touchmove: e => touchmove(e, wrapper)
  };
}

function inserted(el, binding, vnode) {
  const value = binding.value;
  const target = value.parent ? el.parentElement : el;
  const options = value.options || {
    passive: true
  }; // Needed to pass unit tests

  if (!target) return;
  const handlers = createHandlers(binding.value);
  target._touchHandlers = Object(target._touchHandlers);
  target._touchHandlers[vnode.context._uid] = handlers;
  keys(handlers).forEach(eventName => {
    target.addEventListener(eventName, handlers[eventName], options);
  });
}

function unbind(el, binding, vnode) {
  const target = binding.value.parent ? el.parentElement : el;
  if (!target || !target._touchHandlers) return;
  const handlers = target._touchHandlers[vnode.context._uid];
  keys(handlers).forEach(eventName => {
    target.removeEventListener(eventName, handlers[eventName]);
  });
  delete target._touchHandlers[vnode.context._uid];
}

const Touch = {
  inserted,
  unbind
};
var Touch$1 = Touch;

// Directives
/**
 * Scrollable
 *
 * Used for monitoring scrolling and
 * invoking functions based upon
 * scrolling thresholds being
 * met.
 */

/* @vue/component */

var Scrollable = Vue$1.extend({
  name: 'scrollable',
  directives: {
    Scroll
  },
  props: {
    scrollTarget: String,
    scrollThreshold: [String, Number]
  },
  data: () => ({
    currentScroll: 0,
    currentThreshold: 0,
    isActive: false,
    isScrollingUp: false,
    previousScroll: 0,
    savedScroll: 0,
    target: null
  }),
  computed: {
    /**
     * A computed property that returns
     * whether scrolling features are
     * enabled or disabled
     */
    canScroll() {
      return typeof window !== 'undefined';
    },

    /**
     * The threshold that must be met before
     * thresholdMet function is invoked
     */
    computedScrollThreshold() {
      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;
    }

  },
  watch: {
    isScrollingUp() {
      this.savedScroll = this.savedScroll || this.currentScroll;
    },

    isActive() {
      this.savedScroll = 0;
    }

  },

  mounted() {
    if (this.scrollTarget) {
      this.target = document.querySelector(this.scrollTarget);

      if (!this.target) {
        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this);
      }
    }
  },

  methods: {
    onScroll() {
      if (!this.canScroll) return;
      this.previousScroll = this.currentScroll;
      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;
      this.isScrollingUp = this.currentScroll < this.previousScroll;
      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);
      this.$nextTick(() => {
        if (Math.abs(this.currentScroll - this.savedScroll) > this.computedScrollThreshold) this.thresholdMet();
      });
    },

    /**
     * The method invoked when
     * scrolling in any direction
     * has exceeded the threshold
     */
    thresholdMet() {}

  }
});

/**
 * SSRBootable
 *
 * @mixin
 *
 * Used in layout components (drawer, toolbar, content)
 * to avoid an entry animation when using SSR
 */

var SSRBootable = Vue$1.extend({
  name: 'ssr-bootable',
  data: () => ({
    isBooted: false
  }),

  mounted() {
    // Use setAttribute instead of dataset
    // because dataset does not work well
    // with unit tests
    window.requestAnimationFrame(() => {
      this.$el.setAttribute('data-booted', 'true');
      this.isBooted = true;
    });
  }

});

function factory$2(prop = 'value', event = 'input') {
  return Vue$1.extend({
    name: 'toggleable',
    model: {
      prop,
      event
    },
    props: {
      [prop]: {
        required: false
      }
    },

    data() {
      return {
        isActive: !!this[prop]
      };
    },

    watch: {
      [prop](val) {
        this.isActive = !!val;
      },

      isActive(val) {
        !!val !== this[prop] && this.$emit(event, val);
      }

    }
  });
}
/* eslint-disable-next-line @typescript-eslint/no-redeclare */

const Toggleable = factory$2();
var Toggleable$1 = Toggleable;

// Styles
const baseMixins$q = mixins(VToolbar, Scrollable, SSRBootable, Toggleable$1, applicationable('top', ['clippedLeft', 'clippedRight', 'computedHeight', 'invertedScroll', 'isExtended', 'isProminent', 'value']));
/* @vue/component */

var __unplugin_components_3 = baseMixins$q.extend({
  name: 'v-app-bar',
  directives: {
    Scroll: Scroll$1
  },

  provide() {
    return {
      VAppBar: this
    };
  },

  props: {
    clippedLeft: Boolean,
    clippedRight: Boolean,
    collapseOnScroll: Boolean,
    elevateOnScroll: Boolean,
    fadeImgOnScroll: Boolean,
    hideOnScroll: Boolean,
    invertedScroll: Boolean,
    scrollOffScreen: Boolean,
    shrinkOnScroll: Boolean,
    value: {
      type: Boolean,
      default: true
    }
  },

  data() {
    return {
      isActive: this.value
    };
  },

  computed: {
    applicationProperty() {
      return !this.bottom ? 'top' : 'bottom';
    },

    canScroll() {
      return Scrollable.options.computed.canScroll.call(this) && (this.invertedScroll || this.elevateOnScroll || this.hideOnScroll || this.collapseOnScroll || this.isBooted || // If falsy, user has provided an
      // explicit value which should
      // overwrite anything we do
      !this.value);
    },

    classes() {
      return { ...VToolbar.options.computed.classes.call(this),
        'v-toolbar--collapse': this.collapse || this.collapseOnScroll,
        'v-app-bar': true,
        'v-app-bar--clipped': this.clippedLeft || this.clippedRight,
        'v-app-bar--fade-img-on-scroll': this.fadeImgOnScroll,
        'v-app-bar--elevate-on-scroll': this.elevateOnScroll,
        'v-app-bar--fixed': !this.absolute && (this.app || this.fixed),
        'v-app-bar--hide-shadow': this.hideShadow,
        'v-app-bar--is-scrolled': this.currentScroll > 0,
        'v-app-bar--shrink-on-scroll': this.shrinkOnScroll
      };
    },

    scrollRatio() {
      const threshold = this.computedScrollThreshold;
      return Math.max((threshold - this.currentScroll) / threshold, 0);
    },

    computedContentHeight() {
      if (!this.shrinkOnScroll) return VToolbar.options.computed.computedContentHeight.call(this);
      const min = this.dense ? 48 : 56;
      const max = this.computedOriginalHeight;
      return min + (max - min) * this.scrollRatio;
    },

    computedFontSize() {
      if (!this.isProminent) return undefined;
      const min = 1.25;
      const max = 1.5;
      return min + (max - min) * this.scrollRatio;
    },

    computedLeft() {
      if (!this.app || this.clippedLeft) return 0;
      return this.$vuetify.application.left;
    },

    computedMarginTop() {
      if (!this.app) return 0;
      return this.$vuetify.application.bar;
    },

    computedOpacity() {
      if (!this.fadeImgOnScroll) return undefined;
      return this.scrollRatio;
    },

    computedOriginalHeight() {
      let height = VToolbar.options.computed.computedContentHeight.call(this);
      if (this.isExtended) height += parseInt(this.extensionHeight);
      return height;
    },

    computedRight() {
      if (!this.app || this.clippedRight) return 0;
      return this.$vuetify.application.right;
    },

    computedScrollThreshold() {
      if (this.scrollThreshold) return Number(this.scrollThreshold);
      return this.computedOriginalHeight - (this.dense ? 48 : 56);
    },

    computedTransform() {
      if (!this.canScroll || this.elevateOnScroll && this.currentScroll === 0 && this.isActive) return 0;
      if (this.isActive) return 0;
      const scrollOffScreen = this.scrollOffScreen ? this.computedHeight : this.computedContentHeight;
      return this.bottom ? scrollOffScreen : -scrollOffScreen;
    },

    hideShadow() {
      if (this.elevateOnScroll && this.isExtended) {
        return this.currentScroll < this.computedScrollThreshold;
      }

      if (this.elevateOnScroll) {
        return this.currentScroll === 0 || this.computedTransform < 0;
      }

      return (!this.isExtended || this.scrollOffScreen) && this.computedTransform !== 0;
    },

    isCollapsed() {
      if (!this.collapseOnScroll) {
        return VToolbar.options.computed.isCollapsed.call(this);
      }

      return this.currentScroll > 0;
    },

    isProminent() {
      return VToolbar.options.computed.isProminent.call(this) || this.shrinkOnScroll;
    },

    styles() {
      return { ...VToolbar.options.computed.styles.call(this),
        fontSize: convertToUnit(this.computedFontSize, 'rem'),
        marginTop: convertToUnit(this.computedMarginTop),
        transform: `translateY(${convertToUnit(this.computedTransform)})`,
        left: convertToUnit(this.computedLeft),
        right: convertToUnit(this.computedRight)
      };
    }

  },
  watch: {
    canScroll: 'onScroll',

    computedTransform() {
      // Normally we do not want the v-app-bar
      // to update the application top value
      // to avoid screen jump. However, in
      // this situation, we must so that
      // the clipped drawer can update
      // its top value when scrolled
      if (!this.canScroll || !this.clippedLeft && !this.clippedRight) return;
      this.callUpdate();
    },

    invertedScroll(val) {
      this.isActive = !val || this.currentScroll !== 0;
    },

    hideOnScroll(val) {
      this.isActive = !val || this.currentScroll < this.computedScrollThreshold;
    }

  },

  created() {
    if (this.invertedScroll) this.isActive = false;
  },

  methods: {
    genBackground() {
      const render = VToolbar.options.methods.genBackground.call(this);
      render.data = this._b(render.data || {}, render.tag, {
        style: {
          opacity: this.computedOpacity
        }
      });
      return render;
    },

    updateApplication() {
      return this.invertedScroll ? 0 : this.computedHeight + this.computedTransform;
    },

    thresholdMet() {
      if (this.invertedScroll) {
        this.isActive = this.currentScroll > this.computedScrollThreshold;
        return;
      }

      if (this.hideOnScroll) {
        this.isActive = this.isScrollingUp || this.currentScroll < this.computedScrollThreshold;
      }

      if (this.currentThreshold < this.computedScrollThreshold) return;
      this.savedScroll = this.currentScroll;
    }

  },

  render(h) {
    const render = VToolbar.options.render.call(this, h);
    render.data = render.data || {};

    if (this.canScroll) {
      render.data.directives = render.data.directives || [];
      render.data.directives.push({
        arg: this.scrollTarget,
        name: 'scroll',
        value: this.onScroll
      });
    }

    return render;
  }

});

var VIcon$1 = '';

var Sizeable = Vue$1.extend({
  name: 'sizeable',
  props: {
    large: Boolean,
    small: Boolean,
    xLarge: Boolean,
    xSmall: Boolean
  },
  computed: {
    medium() {
      return Boolean(!this.xSmall && !this.small && !this.large && !this.xLarge);
    },

    sizeableClasses() {
      return {
        'v-size--x-small': this.xSmall,
        'v-size--small': this.small,
        'v-size--default': this.medium,
        'v-size--large': this.large,
        'v-size--x-large': this.xLarge
      };
    }

  }
});

var SIZE_MAP;

(function (SIZE_MAP) {
  SIZE_MAP["xSmall"] = "12px";
  SIZE_MAP["small"] = "16px";
  SIZE_MAP["default"] = "24px";
  SIZE_MAP["medium"] = "28px";
  SIZE_MAP["large"] = "36px";
  SIZE_MAP["xLarge"] = "40px";
})(SIZE_MAP || (SIZE_MAP = {}));

function isFontAwesome5(iconType) {
  return ['fas', 'far', 'fal', 'fab', 'fad', 'fak'].some(val => iconType.includes(val));
}

function isSvgPath(icon) {
  return /^[mzlhvcsqta]\s*[-+.0-9][^mlhvzcsqta]+/i.test(icon) && /[\dz]$/i.test(icon) && icon.length > 4;
}

const VIcon = mixins(BindsAttrs, Colorable, Sizeable, Themeable$1
/* @vue/component */
).extend({
  name: 'v-icon',
  props: {
    dense: Boolean,
    disabled: Boolean,
    left: Boolean,
    right: Boolean,
    size: [Number, String],
    tag: {
      type: String,
      required: false,
      default: 'i'
    }
  },
  computed: {
    medium() {
      return false;
    },

    hasClickListener() {
      return Boolean(this.listeners$.click || this.listeners$['!click']);
    }

  },
  methods: {
    getIcon() {
      let iconName = '';
      if (this.$slots.default) iconName = this.$slots.default[0].text.trim();
      return remapInternalIcon(this, iconName);
    },

    getSize() {
      const sizes = {
        xSmall: this.xSmall,
        small: this.small,
        medium: this.medium,
        large: this.large,
        xLarge: this.xLarge
      };
      const explicitSize = keys(sizes).find(key => sizes[key]);
      return explicitSize && SIZE_MAP[explicitSize] || convertToUnit(this.size);
    },

    // Component data for both font icon and SVG wrapper span
    getDefaultData() {
      return {
        staticClass: 'v-icon notranslate',
        class: {
          'v-icon--disabled': this.disabled,
          'v-icon--left': this.left,
          'v-icon--link': this.hasClickListener,
          'v-icon--right': this.right,
          'v-icon--dense': this.dense
        },
        attrs: {
          'aria-hidden': !this.hasClickListener,
          disabled: this.hasClickListener && this.disabled,
          type: this.hasClickListener ? 'button' : undefined,
          ...this.attrs$
        },
        on: this.listeners$
      };
    },

    getSvgWrapperData() {
      const fontSize = this.getSize();
      const wrapperData = { ...this.getDefaultData(),
        style: fontSize ? {
          fontSize,
          height: fontSize,
          width: fontSize
        } : undefined
      };
      this.applyColors(wrapperData);
      return wrapperData;
    },

    applyColors(data) {
      data.class = { ...data.class,
        ...this.themeClasses
      };
      this.setTextColor(this.color, data);
    },

    renderFontIcon(icon, h) {
      const newChildren = [];
      const data = this.getDefaultData();
      let iconType = 'material-icons'; // Material Icon delimiter is _
      // https://material.io/icons/

      const delimiterIndex = icon.indexOf('-');
      const isMaterialIcon = delimiterIndex <= -1;

      if (isMaterialIcon) {
        // Material icon uses ligatures.
        newChildren.push(icon);
      } else {
        iconType = icon.slice(0, delimiterIndex);
        if (isFontAwesome5(iconType)) iconType = '';
      }

      data.class[iconType] = true;
      data.class[icon] = !isMaterialIcon;
      const fontSize = this.getSize();
      if (fontSize) data.style = {
        fontSize
      };
      this.applyColors(data);
      return h(this.hasClickListener ? 'button' : this.tag, data, newChildren);
    },

    renderSvgIcon(icon, h) {
      const svgData = {
        class: 'v-icon__svg',
        attrs: {
          xmlns: 'http://www.w3.org/2000/svg',
          viewBox: '0 0 24 24',
          role: 'img',
          'aria-hidden': true
        }
      };
      const size = this.getSize();

      if (size) {
        svgData.style = {
          fontSize: size,
          height: size,
          width: size
        };
      }

      return h(this.hasClickListener ? 'button' : 'span', this.getSvgWrapperData(), [h('svg', svgData, [h('path', {
        attrs: {
          d: icon
        }
      })])]);
    },

    renderSvgIconComponent(icon, h) {
      const data = {
        class: {
          'v-icon__component': true
        }
      };
      const size = this.getSize();

      if (size) {
        data.style = {
          fontSize: size,
          height: size,
          width: size
        };
      }

      this.applyColors(data);
      const component = icon.component;
      data.props = icon.props;
      data.nativeOn = data.on;
      return h(this.hasClickListener ? 'button' : 'span', this.getSvgWrapperData(), [h(component, data)]);
    }

  },

  render(h) {
    const icon = this.getIcon();

    if (typeof icon === 'string') {
      if (isSvgPath(icon)) {
        return this.renderSvgIcon(icon, h);
      }

      return this.renderFontIcon(icon, h);
    }

    return this.renderSvgIconComponent(icon, h);
  }

});
var __unplugin_components_95 = Vue$1.extend({
  name: 'v-icon',
  $_wrapperFor: VIcon,
  functional: true,

  render(h, {
    data,
    children
  }) {
    let iconName = ''; // Support usage of v-text and v-html

    if (data.domProps) {
      iconName = data.domProps.textContent || data.domProps.innerHTML || iconName; // Remove nodes so it doesn't
      // overwrite our changes

      delete data.domProps.textContent;
      delete data.domProps.innerHTML;
    }

    return h(VIcon, data, iconName ? [iconName] : children);
  }

});

var VBtn = '';

var VProgressCircular = '';

// Styles
/* @vue/component */

var __unplugin_components_7$1 = Colorable.extend({
  name: 'v-progress-circular',
  directives: {
    intersect
  },
  props: {
    button: Boolean,
    indeterminate: Boolean,
    rotate: {
      type: [Number, String],
      default: 0
    },
    size: {
      type: [Number, String],
      default: 32
    },
    width: {
      type: [Number, String],
      default: 4
    },
    value: {
      type: [Number, String],
      default: 0
    }
  },
  data: () => ({
    radius: 20,
    isVisible: true
  }),
  computed: {
    calculatedSize() {
      return Number(this.size) + (this.button ? 8 : 0);
    },

    circumference() {
      return 2 * Math.PI * this.radius;
    },

    classes() {
      return {
        'v-progress-circular--visible': this.isVisible,
        'v-progress-circular--indeterminate': this.indeterminate,
        'v-progress-circular--button': this.button
      };
    },

    normalizedValue() {
      if (this.value < 0) {
        return 0;
      }

      if (this.value > 100) {
        return 100;
      }

      return parseFloat(this.value);
    },

    strokeDashArray() {
      return Math.round(this.circumference * 1000) / 1000;
    },

    strokeDashOffset() {
      return (100 - this.normalizedValue) / 100 * this.circumference + 'px';
    },

    strokeWidth() {
      return Number(this.width) / +this.size * this.viewBoxSize * 2;
    },

    styles() {
      return {
        height: convertToUnit(this.calculatedSize),
        width: convertToUnit(this.calculatedSize)
      };
    },

    svgStyles() {
      return {
        transform: `rotate(${Number(this.rotate)}deg)`
      };
    },

    viewBoxSize() {
      return this.radius / (1 - Number(this.width) / +this.size);
    }

  },
  methods: {
    genCircle(name, offset) {
      return this.$createElement('circle', {
        class: `v-progress-circular__${name}`,
        attrs: {
          fill: 'transparent',
          cx: 2 * this.viewBoxSize,
          cy: 2 * this.viewBoxSize,
          r: this.radius,
          'stroke-width': this.strokeWidth,
          'stroke-dasharray': this.strokeDashArray,
          'stroke-dashoffset': offset
        }
      });
    },

    genSvg() {
      const children = [this.indeterminate || this.genCircle('underlay', 0), this.genCircle('overlay', this.strokeDashOffset)];
      return this.$createElement('svg', {
        style: this.svgStyles,
        attrs: {
          xmlns: 'http://www.w3.org/2000/svg',
          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`
        }
      }, children);
    },

    genInfo() {
      return this.$createElement('div', {
        staticClass: 'v-progress-circular__info'
      }, this.$slots.default);
    },

    onObserve(entries, observer, isIntersecting) {
      this.isVisible = isIntersecting;
    }

  },

  render(h) {
    return h('div', this.setTextColor(this.color, {
      staticClass: 'v-progress-circular',
      attrs: {
        role: 'progressbar',
        'aria-valuemin': 0,
        'aria-valuemax': 100,
        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue
      },
      class: this.classes,
      directives: [{
        name: 'intersect',
        value: this.onObserve
      }],
      style: this.styles,
      on: this.$listeners
    }), [this.genSvg(), this.genInfo()]);
  }

});

function generateWarning(child, parent) {
  return () => consoleWarn(`The ${child} component must be used inside a ${parent}`);
}

function inject(namespace, child, parent) {
  const defaultImpl = child && parent ? {
    register: generateWarning(child, parent),
    unregister: generateWarning(child, parent)
  } : null;
  return Vue$1.extend({
    name: 'registrable-inject',
    inject: {
      [namespace]: {
        default: defaultImpl
      }
    }
  });
}
function provide(namespace, self = false) {
  return Vue$1.extend({
    name: 'registrable-provide',

    provide() {
      return {
        [namespace]: self ? this : {
          register: this.register,
          unregister: this.unregister
        }
      };
    }

  });
}

// Mixins
function factory$1(namespace, child, parent) {
  return inject(namespace, child, parent).extend({
    name: 'groupable',
    props: {
      activeClass: {
        type: String,

        default() {
          if (!this[namespace]) return undefined;
          return this[namespace].activeClass;
        }

      },
      disabled: Boolean
    },

    data() {
      return {
        isActive: false
      };
    },

    computed: {
      groupClasses() {
        if (!this.activeClass) return {};
        return {
          [this.activeClass]: this.isActive
        };
      }

    },

    created() {
      this[namespace] && this[namespace].register(this);
    },

    beforeDestroy() {
      this[namespace] && this[namespace].unregister(this);
    },

    methods: {
      toggle(e) {
        if (this.disabled && e) {
          // Prevent keyboard actions
          // from children elements
          // within disabled tabs
          e.preventDefault();
          return;
        }

        this.$emit('change');
      }

    }
  });
}
/* eslint-disable-next-line @typescript-eslint/no-redeclare */

factory$1('itemGroup');

var Routable = Vue$1.extend({
  name: 'routable',
  directives: {
    Ripple: Ripple$1
  },
  props: {
    activeClass: String,
    append: Boolean,
    disabled: Boolean,
    exact: {
      type: Boolean,
      default: undefined
    },
    exactPath: Boolean,
    exactActiveClass: String,
    link: Boolean,
    href: [String, Object],
    to: [String, Object],
    nuxt: Boolean,
    replace: Boolean,
    ripple: {
      type: [Boolean, Object],
      default: null
    },
    tag: String,
    target: String
  },
  data: () => ({
    isActive: false,
    proxyClass: ''
  }),
  computed: {
    classes() {
      const classes = {};
      if (this.to) return classes;
      if (this.activeClass) classes[this.activeClass] = this.isActive;
      if (this.proxyClass) classes[this.proxyClass] = this.isActive;
      return classes;
    },

    computedRipple() {
      var _a;

      return (_a = this.ripple) !== null && _a !== void 0 ? _a : !this.disabled && this.isClickable;
    },

    isClickable() {
      if (this.disabled) return false;
      return Boolean(this.isLink || this.$listeners.click || this.$listeners['!click'] || this.$attrs.tabindex);
    },

    isLink() {
      return this.to || this.href || this.link;
    },

    styles: () => ({})
  },
  watch: {
    $route: 'onRouteChange'
  },

  mounted() {
    this.onRouteChange();
  },

  methods: {
    generateRouteLink() {
      let exact = this.exact;
      let tag;
      const data = {
        attrs: {
          tabindex: 'tabindex' in this.$attrs ? this.$attrs.tabindex : undefined
        },
        class: this.classes,
        style: this.styles,
        props: {},
        directives: [{
          name: 'ripple',
          value: this.computedRipple
        }],
        [this.to ? 'nativeOn' : 'on']: { ...this.$listeners,
          ...('click' in this ? {
            click: this.click
          } : undefined) // #14447

        },
        ref: 'link'
      };

      if (typeof this.exact === 'undefined') {
        exact = this.to === '/' || this.to === Object(this.to) && this.to.path === '/';
      }

      if (this.to) {
        // Add a special activeClass hook
        // for component level styles
        let activeClass = this.activeClass;
        let exactActiveClass = this.exactActiveClass || activeClass;

        if (this.proxyClass) {
          activeClass = `${activeClass} ${this.proxyClass}`.trim();
          exactActiveClass = `${exactActiveClass} ${this.proxyClass}`.trim();
        }

        tag = this.nuxt ? 'nuxt-link' : 'router-link';
        Object.assign(data.props, {
          to: this.to,
          exact,
          exactPath: this.exactPath,
          activeClass,
          exactActiveClass,
          append: this.append,
          replace: this.replace
        });
      } else {
        tag = this.href && 'a' || this.tag || 'div';
        if (tag === 'a' && this.href) data.attrs.href = this.href;
      }

      if (this.target) data.attrs.target = this.target;
      return {
        tag,
        data
      };
    },

    onRouteChange() {
      if (!this.to || !this.$refs.link || !this.$route) return;
      const activeClass = `${this.activeClass || ''} ${this.proxyClass || ''}`.trim();
      const exactActiveClass = `${this.exactActiveClass || ''} ${this.proxyClass || ''}`.trim() || activeClass;
      const path = '_vnode.data.class.' + (this.exact ? exactActiveClass : activeClass);
      this.$nextTick(() => {
        /* istanbul ignore else */
        if (!getObjectValueByPath(this.$refs.link, path) === this.isActive) {
          this.toggle();
        }
      });
    },

    toggle() {
      this.isActive = !this.isActive;
    }

  }
});

// Styles
const baseMixins$p = mixins(VSheet, Routable, Positionable, Sizeable, factory$1('btnToggle'), factory$2('inputValue')
/* @vue/component */
);
var __unplugin_components_94 = baseMixins$p.extend().extend({
  name: 'v-btn',
  props: {
    activeClass: {
      type: String,

      default() {
        if (!this.btnToggle) return '';
        return this.btnToggle.activeClass;
      }

    },
    block: Boolean,
    depressed: Boolean,
    fab: Boolean,
    icon: Boolean,
    loading: Boolean,
    outlined: Boolean,
    plain: Boolean,
    retainFocusOnClick: Boolean,
    rounded: Boolean,
    tag: {
      type: String,
      default: 'button'
    },
    text: Boolean,
    tile: Boolean,
    type: {
      type: String,
      default: 'button'
    },
    value: null
  },
  data: () => ({
    proxyClass: 'v-btn--active'
  }),
  computed: {
    classes() {
      return {
        'v-btn': true,
        ...Routable.options.computed.classes.call(this),
        'v-btn--absolute': this.absolute,
        'v-btn--block': this.block,
        'v-btn--bottom': this.bottom,
        'v-btn--disabled': this.disabled,
        'v-btn--is-elevated': this.isElevated,
        'v-btn--fab': this.fab,
        'v-btn--fixed': this.fixed,
        'v-btn--has-bg': this.hasBg,
        'v-btn--icon': this.icon,
        'v-btn--left': this.left,
        'v-btn--loading': this.loading,
        'v-btn--outlined': this.outlined,
        'v-btn--plain': this.plain,
        'v-btn--right': this.right,
        'v-btn--round': this.isRound,
        'v-btn--rounded': this.rounded,
        'v-btn--router': this.to,
        'v-btn--text': this.text,
        'v-btn--tile': this.tile,
        'v-btn--top': this.top,
        ...this.themeClasses,
        ...this.groupClasses,
        ...this.elevationClasses,
        ...this.sizeableClasses
      };
    },

    computedElevation() {
      if (this.disabled) return undefined;
      return Elevatable.options.computed.computedElevation.call(this);
    },

    computedRipple() {
      var _a;

      const defaultRipple = this.icon || this.fab ? {
        circle: true
      } : true;
      if (this.disabled) return false;else return (_a = this.ripple) !== null && _a !== void 0 ? _a : defaultRipple;
    },

    hasBg() {
      return !this.text && !this.plain && !this.outlined && !this.icon;
    },

    isElevated() {
      return Boolean(!this.icon && !this.text && !this.outlined && !this.depressed && !this.disabled && !this.plain && (this.elevation == null || Number(this.elevation) > 0));
    },

    isRound() {
      return Boolean(this.icon || this.fab);
    },

    styles() {
      return { ...this.measurableStyles
      };
    }

  },

  created() {
    const breakingProps = [['flat', 'text'], ['outline', 'outlined'], ['round', 'rounded']];
    /* istanbul ignore next */

    breakingProps.forEach(([original, replacement]) => {
      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);
    });
  },

  methods: {
    click(e) {
      // TODO: Remove this in v3
      !this.retainFocusOnClick && !this.fab && e.detail && this.$el.blur();
      this.$emit('click', e);
      this.btnToggle && this.toggle();
    },

    genContent() {
      return this.$createElement('span', {
        staticClass: 'v-btn__content'
      }, this.$slots.default);
    },

    genLoader() {
      return this.$createElement('span', {
        class: 'v-btn__loader'
      }, this.$slots.loader || [this.$createElement(__unplugin_components_7$1, {
        props: {
          indeterminate: true,
          size: 23,
          width: 2
        }
      })]);
    }

  },

  render(h) {
    const children = [this.genContent(), this.loading && this.genLoader()];
    const {
      tag,
      data
    } = this.generateRouteLink();
    const setColor = this.hasBg ? this.setBackgroundColor : this.setTextColor;

    if (tag === 'button') {
      data.attrs.type = this.type;
      data.attrs.disabled = this.disabled;
    }

    data.attrs.value = ['string', 'number'].includes(typeof this.value) ? this.value : JSON.stringify(this.value);
    return h(tag, this.disabled ? data : setColor(this.color, data), children);
  }

});

var VAlert = '';

var Transitionable = Vue$1.extend({
  name: 'transitionable',
  props: {
    mode: String,
    origin: String,
    transition: String
  }
});

// Styles
/* @vue/component */

var __unplugin_components_17 = mixins(VSheet, Toggleable$1, Transitionable).extend({
  name: 'v-alert',
  props: {
    border: {
      type: String,

      validator(val) {
        return ['top', 'right', 'bottom', 'left'].includes(val);
      }

    },
    closeLabel: {
      type: String,
      default: '$vuetify.close'
    },
    coloredBorder: Boolean,
    dense: Boolean,
    dismissible: Boolean,
    closeIcon: {
      type: String,
      default: '$cancel'
    },
    icon: {
      default: '',
      type: [Boolean, String],

      validator(val) {
        return typeof val === 'string' || val === false;
      }

    },
    outlined: Boolean,
    prominent: Boolean,
    text: Boolean,
    type: {
      type: String,

      validator(val) {
        return ['info', 'error', 'success', 'warning'].includes(val);
      }

    },
    value: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    __cachedBorder() {
      if (!this.border) return null;
      let data = {
        staticClass: 'v-alert__border',
        class: {
          [`v-alert__border--${this.border}`]: true
        }
      };

      if (this.coloredBorder) {
        data = this.setBackgroundColor(this.computedColor, data);
        data.class['v-alert__border--has-color'] = true;
      }

      return this.$createElement('div', data);
    },

    __cachedDismissible() {
      if (!this.dismissible) return null;
      const color = this.iconColor;
      return this.$createElement(__unplugin_components_94, {
        staticClass: 'v-alert__dismissible',
        props: {
          color,
          icon: true,
          small: true
        },
        attrs: {
          'aria-label': this.$vuetify.lang.t(this.closeLabel)
        },
        on: {
          click: () => this.isActive = false
        }
      }, [this.$createElement(__unplugin_components_95, {
        props: {
          color
        }
      }, this.closeIcon)]);
    },

    __cachedIcon() {
      if (!this.computedIcon) return null;
      return this.$createElement(__unplugin_components_95, {
        staticClass: 'v-alert__icon',
        props: {
          color: this.iconColor
        }
      }, this.computedIcon);
    },

    classes() {
      const classes = { ...VSheet.options.computed.classes.call(this),
        'v-alert--border': Boolean(this.border),
        'v-alert--dense': this.dense,
        'v-alert--outlined': this.outlined,
        'v-alert--prominent': this.prominent,
        'v-alert--text': this.text
      };

      if (this.border) {
        classes[`v-alert--border-${this.border}`] = true;
      }

      return classes;
    },

    computedColor() {
      return this.color || this.type;
    },

    computedIcon() {
      if (this.icon === false) return false;
      if (typeof this.icon === 'string' && this.icon) return this.icon;
      if (!['error', 'info', 'success', 'warning'].includes(this.type)) return false;
      return `$${this.type}`;
    },

    hasColoredIcon() {
      return this.hasText || Boolean(this.border) && this.coloredBorder;
    },

    hasText() {
      return this.text || this.outlined;
    },

    iconColor() {
      return this.hasColoredIcon ? this.computedColor : undefined;
    },

    isDark() {
      if (this.type && !this.coloredBorder && !this.outlined) return true;
      return Themeable$1.options.computed.isDark.call(this);
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('outline')) {
      breaking('outline', 'outlined', this);
    }
  },

  methods: {
    genWrapper() {
      const children = [this.$slots.prepend || this.__cachedIcon, this.genContent(), this.__cachedBorder, this.$slots.append, this.$scopedSlots.close ? this.$scopedSlots.close({
        toggle: this.toggle
      }) : this.__cachedDismissible];
      const data = {
        staticClass: 'v-alert__wrapper'
      };
      return this.$createElement('div', data, children);
    },

    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-alert__content'
      }, this.$slots.default);
    },

    genAlert() {
      let data = {
        staticClass: 'v-alert',
        attrs: {
          role: 'alert'
        },
        on: this.listeners$,
        class: this.classes,
        style: this.styles,
        directives: [{
          name: 'show',
          value: this.isActive
        }]
      };

      if (!this.coloredBorder) {
        const setColor = this.hasText ? this.setTextColor : this.setBackgroundColor;
        data = setColor(this.computedColor, data);
      }

      return this.$createElement('div', data, [this.genWrapper()]);
    },

    /** @public */
    toggle() {
      this.isActive = !this.isActive;
    }

  },

  render(h) {
    const render = this.genAlert();
    if (!this.transition) return render;
    return h('transition', {
      props: {
        name: this.transition,
        origin: this.origin,
        mode: this.mode
      }
    }, [render]);
  }

});

var VAutocomplete = '';

var VTextField = '';

var VSelect = '';

var VChip = '';

function mergeTransitions(dest = [], ...transitions) {
  /* eslint-disable-next-line no-array-constructor */
  return Array().concat(dest, ...transitions);
}

function createSimpleTransition(name, origin = 'top center 0', mode) {
  return {
    name,
    functional: true,
    props: {
      group: {
        type: Boolean,
        default: false
      },
      hideOnLeave: {
        type: Boolean,
        default: false
      },
      leaveAbsolute: {
        type: Boolean,
        default: false
      },
      mode: {
        type: String,
        default: mode
      },
      origin: {
        type: String,
        default: origin
      }
    },

    render(h, context) {
      const tag = `transition${context.props.group ? '-group' : ''}`;
      const data = {
        props: {
          name,
          mode: context.props.mode
        },
        on: {
          beforeEnter(el) {
            el.style.transformOrigin = context.props.origin;
            el.style.webkitTransformOrigin = context.props.origin;
          }

        }
      };

      if (context.props.leaveAbsolute) {
        data.on.leave = mergeTransitions(data.on.leave, el => {
          const {
            offsetTop,
            offsetLeft,
            offsetWidth,
            offsetHeight
          } = el;
          el._transitionInitialStyles = {
            position: el.style.position,
            top: el.style.top,
            left: el.style.left,
            width: el.style.width,
            height: el.style.height
          };
          el.style.position = 'absolute';
          el.style.top = offsetTop + 'px';
          el.style.left = offsetLeft + 'px';
          el.style.width = offsetWidth + 'px';
          el.style.height = offsetHeight + 'px';
        });
        data.on.afterLeave = mergeTransitions(data.on.afterLeave, el => {
          if (el && el._transitionInitialStyles) {
            const {
              position,
              top,
              left,
              width,
              height
            } = el._transitionInitialStyles;
            delete el._transitionInitialStyles;
            el.style.position = position || '';
            el.style.top = top || '';
            el.style.left = left || '';
            el.style.width = width || '';
            el.style.height = height || '';
          }
        });
      }

      if (context.props.hideOnLeave) {
        data.on.leave = mergeTransitions(data.on.leave, el => {
          el.style.setProperty('display', 'none', 'important');
        });
      }

      return h(tag, mergeData(context.data, data), context.children);
    }

  };
}
function createJavascriptTransition(name, functions, mode = 'in-out') {
  return {
    name,
    functional: true,
    props: {
      mode: {
        type: String,
        default: mode
      }
    },

    render(h, context) {
      return h('transition', mergeData(context.data, {
        props: {
          name
        },
        on: functions
      }), context.children);
    }

  };
}

function ExpandTransitionGenerator (expandedParentClass = '', x = false) {
  const sizeProperty = x ? 'width' : 'height';
  const offsetProperty = `offset${upperFirst(sizeProperty)}`;
  return {
    beforeEnter(el) {
      el._parent = el.parentNode;
      el._initialStyle = {
        transition: el.style.transition,
        overflow: el.style.overflow,
        [sizeProperty]: el.style[sizeProperty]
      };
    },

    enter(el) {
      const initialStyle = el._initialStyle;
      el.style.setProperty('transition', 'none', 'important'); // Hide overflow to account for collapsed margins in the calculated height

      el.style.overflow = 'hidden';
      const offset = `${el[offsetProperty]}px`;
      el.style[sizeProperty] = '0';
      void el.offsetHeight; // force reflow

      el.style.transition = initialStyle.transition;

      if (expandedParentClass && el._parent) {
        el._parent.classList.add(expandedParentClass);
      }

      requestAnimationFrame(() => {
        el.style[sizeProperty] = offset;
      });
    },

    afterEnter: resetStyles,
    enterCancelled: resetStyles,

    leave(el) {
      el._initialStyle = {
        transition: '',
        overflow: el.style.overflow,
        [sizeProperty]: el.style[sizeProperty]
      };
      el.style.overflow = 'hidden';
      el.style[sizeProperty] = `${el[offsetProperty]}px`;
      void el.offsetHeight; // force reflow

      requestAnimationFrame(() => el.style[sizeProperty] = '0');
    },

    afterLeave,
    leaveCancelled: afterLeave
  };

  function afterLeave(el) {
    if (expandedParentClass && el._parent) {
      el._parent.classList.remove(expandedParentClass);
    }

    resetStyles(el);
  }

  function resetStyles(el) {
    const size = el._initialStyle[sizeProperty];
    el.style.overflow = el._initialStyle.overflow;
    if (size != null) el.style[sizeProperty] = size;
    delete el._initialStyle;
  }
}

const VTabTransition = createSimpleTransition('tab-transition');
const VTabReverseTransition = createSimpleTransition('tab-reverse-transition');
const VFabTransition = createSimpleTransition('fab-transition', 'center center', 'out-in'); // Generic transitions
const VFadeTransition = createSimpleTransition('fade-transition');
const VScaleTransition = createSimpleTransition('scale-transition');
const VSlideXTransition = createSimpleTransition('slide-x-transition');
const VSlideXReverseTransition = createSimpleTransition('slide-x-reverse-transition');
const VSlideYTransition = createSimpleTransition('slide-y-transition');
const VSlideYReverseTransition = createSimpleTransition('slide-y-reverse-transition'); // Javascript transitions

const VExpandTransition = createJavascriptTransition('expand-transition', ExpandTransitionGenerator());
const VExpandXTransition = createJavascriptTransition('expand-x-transition', ExpandTransitionGenerator('', true));

// Styles
/* @vue/component */

var __unplugin_components_40 = mixins(Colorable, Sizeable, Routable, Themeable$1, factory$1('chipGroup'), factory$2('inputValue')).extend({
  name: 'v-chip',
  props: {
    active: {
      type: Boolean,
      default: true
    },
    activeClass: {
      type: String,

      default() {
        if (!this.chipGroup) return '';
        return this.chipGroup.activeClass;
      }

    },
    close: Boolean,
    closeIcon: {
      type: String,
      default: '$delete'
    },
    closeLabel: {
      type: String,
      default: '$vuetify.close'
    },
    disabled: Boolean,
    draggable: Boolean,
    filter: Boolean,
    filterIcon: {
      type: String,
      default: '$complete'
    },
    label: Boolean,
    link: Boolean,
    outlined: Boolean,
    pill: Boolean,
    tag: {
      type: String,
      default: 'span'
    },
    textColor: String,
    value: null
  },
  data: () => ({
    proxyClass: 'v-chip--active'
  }),
  computed: {
    classes() {
      return {
        'v-chip': true,
        ...Routable.options.computed.classes.call(this),
        'v-chip--clickable': this.isClickable,
        'v-chip--disabled': this.disabled,
        'v-chip--draggable': this.draggable,
        'v-chip--label': this.label,
        'v-chip--link': this.isLink,
        'v-chip--no-color': !this.color,
        'v-chip--outlined': this.outlined,
        'v-chip--pill': this.pill,
        'v-chip--removable': this.hasClose,
        ...this.themeClasses,
        ...this.sizeableClasses,
        ...this.groupClasses
      };
    },

    hasClose() {
      return Boolean(this.close);
    },

    isClickable() {
      return Boolean(Routable.options.computed.isClickable.call(this) || this.chipGroup);
    }

  },

  created() {
    const breakingProps = [['outline', 'outlined'], ['selected', 'input-value'], ['value', 'active'], ['@input', '@active.sync']];
    /* istanbul ignore next */

    breakingProps.forEach(([original, replacement]) => {
      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);
    });
  },

  methods: {
    click(e) {
      this.$emit('click', e);
      this.chipGroup && this.toggle();
    },

    genFilter() {
      const children = [];

      if (this.isActive) {
        children.push(this.$createElement(__unplugin_components_95, {
          staticClass: 'v-chip__filter',
          props: {
            left: true
          }
        }, this.filterIcon));
      }

      return this.$createElement(VExpandXTransition, children);
    },

    genClose() {
      return this.$createElement(__unplugin_components_95, {
        staticClass: 'v-chip__close',
        props: {
          right: true,
          size: 18
        },
        attrs: {
          'aria-label': this.$vuetify.lang.t(this.closeLabel)
        },
        on: {
          click: e => {
            e.stopPropagation();
            e.preventDefault();
            this.$emit('click:close');
            this.$emit('update:active', false);
          }
        }
      }, this.closeIcon);
    },

    genContent() {
      return this.$createElement('span', {
        staticClass: 'v-chip__content'
      }, [this.filter && this.genFilter(), this.$slots.default, this.hasClose && this.genClose()]);
    }

  },

  render(h) {
    const children = [this.genContent()];
    let {
      tag,
      data
    } = this.generateRouteLink();
    data.attrs = { ...data.attrs,
      draggable: this.draggable ? 'true' : undefined,
      tabindex: this.chipGroup && !this.disabled ? 0 : data.attrs.tabindex
    };
    data.directives.push({
      name: 'show',
      value: this.active
    });
    data = this.setBackgroundColor(this.color, data);
    const color = this.textColor || this.outlined && this.color;
    return h(tag, this.setTextColor(color, data), children);
  }

});

var VMenu = '';

// Mixins
/* @vue/component */

var VThemeProvider = Themeable$1.extend({
  name: 'v-theme-provider',
  props: {
    root: Boolean
  },
  computed: {
    isDark() {
      return this.root ? this.rootIsDark : Themeable$1.options.computed.isDark.call(this);
    }

  },

  render() {
    /* istanbul ignore next */
    return this.$slots.default && this.$slots.default.find(node => !node.isComment && node.text !== ' ');
  }

});

/**
 * Delayable
 *
 * @mixin
 *
 * Changes the open or close delay time for elements
 */

var Delayable = Vue$1.extend().extend({
  name: 'delayable',
  props: {
    openDelay: {
      type: [Number, String],
      default: 0
    },
    closeDelay: {
      type: [Number, String],
      default: 0
    }
  },
  data: () => ({
    openTimeout: undefined,
    closeTimeout: undefined
  }),
  methods: {
    /**
     * Clear any pending delay timers from executing
     */
    clearDelay() {
      clearTimeout(this.openTimeout);
      clearTimeout(this.closeTimeout);
    },

    /**
     * Runs callback after a specified delay
     */
    runDelay(type, cb) {
      this.clearDelay();
      const delay = parseInt(this[`${type}Delay`], 10);
      this[`${type}Timeout`] = setTimeout(cb || (() => {
        this.isActive = {
          open: true,
          close: false
        }[type];
      }), delay);
    }

  }
});

// Mixins
const baseMixins$o = mixins(Delayable, Toggleable$1);
/* @vue/component */

var Activatable = baseMixins$o.extend({
  name: 'activatable',
  props: {
    activator: {
      default: null,
      validator: val => {
        return ['string', 'object'].includes(typeof val);
      }
    },
    disabled: Boolean,
    internalActivator: Boolean,
    openOnClick: {
      type: Boolean,
      default: true
    },
    openOnHover: Boolean,
    openOnFocus: Boolean
  },
  data: () => ({
    // Do not use this directly, call getActivator() instead
    activatorElement: null,
    activatorNode: [],
    events: ['click', 'mouseenter', 'mouseleave', 'focus'],
    listeners: {}
  }),
  watch: {
    activator: 'resetActivator',
    openOnFocus: 'resetActivator',
    openOnHover: 'resetActivator'
  },

  mounted() {
    const slotType = getSlotType(this, 'activator', true);

    if (slotType && ['v-slot', 'normal'].includes(slotType)) {
      consoleError(`The activator slot must be bound, try '<template v-slot:activator="{ on }"><v-btn v-on="on">'`, this);
    }

    this.addActivatorEvents();
  },

  beforeDestroy() {
    this.removeActivatorEvents();
  },

  methods: {
    addActivatorEvents() {
      if (!this.activator || this.disabled || !this.getActivator()) return;
      this.listeners = this.genActivatorListeners();
      const keys = Object.keys(this.listeners);

      for (const key of keys) {
        this.getActivator().addEventListener(key, this.listeners[key]);
      }
    },

    genActivator() {
      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {
        on: this.genActivatorListeners(),
        attrs: this.genActivatorAttributes()
      })) || [];
      this.activatorNode = node;
      return node;
    },

    genActivatorAttributes() {
      return {
        role: this.openOnClick && !this.openOnHover ? 'button' : undefined,
        'aria-haspopup': true,
        'aria-expanded': String(this.isActive)
      };
    },

    genActivatorListeners() {
      if (this.disabled) return {};
      const listeners = {};

      if (this.openOnHover) {
        listeners.mouseenter = e => {
          this.getActivator(e);
          this.runDelay('open');
        };

        listeners.mouseleave = e => {
          this.getActivator(e);
          this.runDelay('close');
        };
      } else if (this.openOnClick) {
        listeners.click = e => {
          const activator = this.getActivator(e);
          if (activator) activator.focus();
          e.stopPropagation();
          this.isActive = !this.isActive;
        };
      }

      if (this.openOnFocus) {
        listeners.focus = e => {
          this.getActivator(e);
          e.stopPropagation();
          this.isActive = !this.isActive;
        };
      }

      return listeners;
    },

    getActivator(e) {
      // If we've already fetched the activator, re-use
      if (this.activatorElement) return this.activatorElement;
      let activator = null;

      if (this.activator) {
        const target = this.internalActivator ? this.$el : document;

        if (typeof this.activator === 'string') {
          // Selector
          activator = target.querySelector(this.activator);
        } else if (this.activator.$el) {
          // Component (ref)
          activator = this.activator.$el;
        } else {
          // HTMLElement | Element
          activator = this.activator;
        }
      } else if (this.activatorNode.length === 1 || this.activatorNode.length && !e) {
        // Use the contents of the activator slot
        // There's either only one element in it or we
        // don't have a click event to use as a last resort
        const vm = this.activatorNode[0].componentInstance;

        if (vm && vm.$options.mixins && //                         Activatable is indirectly used via Menuable
        vm.$options.mixins.some(m => m.options && ['activatable', 'menuable'].includes(m.options.name))) {
          // Activator is actually another activatible component, use its activator (#8846)
          activator = vm.getActivator();
        } else {
          activator = this.activatorNode[0].elm;
        }
      } else if (e) {
        // Activated by a click or focus event
        activator = e.currentTarget || e.target;
      } // The activator should only be a valid element (Ignore comments and text nodes)


      this.activatorElement = (activator === null || activator === void 0 ? void 0 : activator.nodeType) === Node.ELEMENT_NODE ? activator : null;
      return this.activatorElement;
    },

    getContentSlot() {
      return getSlot(this, 'default', this.getValueProxy(), true);
    },

    getValueProxy() {
      const self = this;
      return {
        get value() {
          return self.isActive;
        },

        set value(isActive) {
          self.isActive = isActive;
        }

      };
    },

    removeActivatorEvents() {
      if (!this.activator || !this.activatorElement) return;
      const keys = Object.keys(this.listeners);

      for (const key of keys) {
        this.activatorElement.removeEventListener(key, this.listeners[key]);
      }

      this.listeners = {};
    },

    resetActivator() {
      this.removeActivatorEvents();
      this.activatorElement = null;
      this.getActivator();
      this.addActivatorEvents();
    }

  }
});

function searchChildren(children) {
  const results = [];

  for (let index = 0; index < children.length; index++) {
    const child = children[index];

    if (child.isActive && child.isDependent) {
      results.push(child);
    } else {
      results.push(...searchChildren(child.$children));
    }
  }

  return results;
}
/* @vue/component */


var Dependent = mixins().extend({
  name: 'dependent',

  data() {
    return {
      closeDependents: true,
      isActive: false,
      isDependent: true
    };
  },

  watch: {
    isActive(val) {
      if (val) return;
      const openDependents = this.getOpenDependents();

      for (let index = 0; index < openDependents.length; index++) {
        openDependents[index].isActive = false;
      }
    }

  },
  methods: {
    getOpenDependents() {
      if (this.closeDependents) return searchChildren(this.$children);
      return [];
    },

    getOpenDependentElements() {
      const result = [];
      const openDependents = this.getOpenDependents();

      for (let index = 0; index < openDependents.length; index++) {
        result.push(...openDependents[index].getClickableDependentElements());
      }

      return result;
    },

    getClickableDependentElements() {
      const result = [this.$el];
      if (this.$refs.content) result.push(this.$refs.content);
      if (this.overlay) result.push(this.overlay.$el);
      result.push(...this.getOpenDependentElements());
      return result;
    }

  }
});

/* @vue/component */

var Stackable = Vue$1.extend().extend({
  name: 'stackable',

  data() {
    return {
      stackElement: null,
      stackExclude: null,
      stackMinZIndex: 0,
      isActive: false
    };
  },

  computed: {
    activeZIndex() {
      if (typeof window === 'undefined') return 0;
      const content = this.stackElement || this.$refs.content; // Return current zindex if not active

      const index = !this.isActive ? getZIndex(content) : this.getMaxZIndex(this.stackExclude || [content]) + 2;
      if (index == null) return index; // Return max current z-index (excluding self) + 2
      // (2 to leave room for an overlay below, if needed)

      return parseInt(index);
    }

  },
  methods: {
    getMaxZIndex(exclude = []) {
      const base = this.$el; // Start with lowest allowed z-index or z-index of
      // base component's element, whichever is greater

      const zis = [this.stackMinZIndex, getZIndex(base)]; // Convert the NodeList to an array to
      // prevent an Edge bug with Symbol.iterator
      // https://github.com/vuetifyjs/vuetify/issues/2146

      const activeElements = [...document.getElementsByClassName('v-menu__content--active'), ...document.getElementsByClassName('v-dialog__content--active')]; // Get z-index for all active dialogs

      for (let index = 0; index < activeElements.length; index++) {
        if (!exclude.includes(activeElements[index])) {
          zis.push(getZIndex(activeElements[index]));
        }
      }

      return Math.max(...zis);
    }

  }
});

// Utilities
/**
 * Bootable
 * @mixin
 *
 * Used to add lazy content functionality to components
 * Looks for change in "isActive" to automatically boot
 * Otherwise can be set manually
 */

/* @vue/component */

var Bootable = Vue$1.extend().extend({
  name: 'bootable',
  props: {
    eager: Boolean
  },
  data: () => ({
    isBooted: false
  }),
  computed: {
    hasContent() {
      return this.isBooted || this.eager || this.isActive;
    }

  },
  watch: {
    isActive() {
      this.isBooted = true;
    }

  },

  created() {
    /* istanbul ignore next */
    if ('lazy' in this.$attrs) {
      removed('lazy', this);
    }
  },

  methods: {
    showLazyContent(content) {
      return this.hasContent && content ? content() : [this.$createElement()];
    }

  }
});

// Mixins

function validateAttachTarget(val) {
  const type = typeof val;
  if (type === 'boolean' || type === 'string') return true;
  return val.nodeType === Node.ELEMENT_NODE;
}

function removeActivator(activator) {
  activator.forEach(node => {
    node.elm && node.elm.parentNode && node.elm.parentNode.removeChild(node.elm);
  });
}
/* @vue/component */


var Detachable = mixins(Bootable).extend({
  name: 'detachable',
  props: {
    attach: {
      default: false,
      validator: validateAttachTarget
    },
    contentClass: {
      type: String,
      default: ''
    }
  },
  data: () => ({
    activatorNode: null,
    hasDetached: false
  }),
  watch: {
    attach() {
      this.hasDetached = false;
      this.initDetach();
    },

    hasContent() {
      this.$nextTick(this.initDetach);
    }

  },

  beforeMount() {
    this.$nextTick(() => {
      if (this.activatorNode) {
        const activator = Array.isArray(this.activatorNode) ? this.activatorNode : [this.activatorNode];
        activator.forEach(node => {
          if (!node.elm) return;
          if (!this.$el.parentNode) return;
          const target = this.$el === this.$el.parentNode.firstChild ? this.$el : this.$el.nextSibling;
          this.$el.parentNode.insertBefore(node.elm, target);
        });
      }
    });
  },

  mounted() {
    this.hasContent && this.initDetach();
  },

  deactivated() {
    this.isActive = false;
  },

  beforeDestroy() {
    if (this.$refs.content && this.$refs.content.parentNode) {
      this.$refs.content.parentNode.removeChild(this.$refs.content);
    }
  },

  destroyed() {
    if (this.activatorNode) {
      const activator = Array.isArray(this.activatorNode) ? this.activatorNode : [this.activatorNode];

      if (this.$el.isConnected) {
        // Component has been destroyed but the element still exists, we must be in a transition
        // Wait for the transition to finish before cleaning up the detached activator
        const observer = new MutationObserver(list => {
          if (list.some(record => Array.from(record.removedNodes).includes(this.$el))) {
            observer.disconnect();
            removeActivator(activator);
          }
        });
        observer.observe(this.$el.parentNode, {
          subtree: false,
          childList: true
        });
      } else {
        removeActivator(activator);
      }
    }
  },

  methods: {
    getScopeIdAttrs() {
      const scopeId = getObjectValueByPath(this.$vnode, 'context.$options._scopeId');
      return scopeId && {
        [scopeId]: ''
      };
    },

    initDetach() {
      if (this._isDestroyed || !this.$refs.content || this.hasDetached || // Leave menu in place if attached
      // and dev has not changed target
      this.attach === '' || // If used as a boolean prop (<v-menu attach>)
      this.attach === true || // If bound to a boolean (<v-menu :attach="true">)
      this.attach === 'attach' // If bound as boolean prop in pug (v-menu(attach))
      ) return;
      let target;

      if (this.attach === false) {
        // Default, detach to app
        target = document.querySelector('[data-app]');
      } else if (typeof this.attach === 'string') {
        // CSS selector
        target = document.querySelector(this.attach);
      } else {
        // DOM Element
        target = this.attach;
      }

      if (!target) {
        consoleWarn(`Unable to locate target ${this.attach || '[data-app]'}`, this);
        return;
      }

      target.appendChild(this.$refs.content);
      this.hasDetached = true;
    }

  }
});

// Mixins
const baseMixins$n = mixins(Stackable, factory$3(['top', 'right', 'bottom', 'left', 'absolute']), Activatable, Detachable);
/* @vue/component */

var Menuable = baseMixins$n.extend().extend({
  name: 'menuable',
  props: {
    allowOverflow: Boolean,
    light: Boolean,
    dark: Boolean,
    maxWidth: {
      type: [Number, String],
      default: 'auto'
    },
    minWidth: [Number, String],
    nudgeBottom: {
      type: [Number, String],
      default: 0
    },
    nudgeLeft: {
      type: [Number, String],
      default: 0
    },
    nudgeRight: {
      type: [Number, String],
      default: 0
    },
    nudgeTop: {
      type: [Number, String],
      default: 0
    },
    nudgeWidth: {
      type: [Number, String],
      default: 0
    },
    offsetOverflow: Boolean,
    positionX: {
      type: Number,
      default: null
    },
    positionY: {
      type: Number,
      default: null
    },
    zIndex: {
      type: [Number, String],
      default: null
    }
  },
  data: () => ({
    activatorNode: [],
    absoluteX: 0,
    absoluteY: 0,
    activatedBy: null,
    activatorFixed: false,
    dimensions: {
      activator: {
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        width: 0,
        height: 0,
        offsetTop: 0,
        scrollHeight: 0,
        offsetLeft: 0
      },
      content: {
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        width: 0,
        height: 0,
        offsetTop: 0,
        scrollHeight: 0
      }
    },
    relativeYOffset: 0,
    hasJustFocused: false,
    hasWindow: false,
    inputActivator: false,
    isContentActive: false,
    pageWidth: 0,
    pageYOffset: 0,
    stackClass: 'v-menu__content--active',
    stackMinZIndex: 6
  }),
  computed: {
    computedLeft() {
      const a = this.dimensions.activator;
      const c = this.dimensions.content;
      const activatorLeft = (this.attach !== false ? a.offsetLeft : a.left) || 0;
      const minWidth = Math.max(a.width, c.width);
      let left = 0;
      left += activatorLeft;
      if (this.left || this.$vuetify.rtl && !this.right) left -= minWidth - a.width;

      if (this.offsetX) {
        const maxWidth = isNaN(Number(this.maxWidth)) ? a.width : Math.min(a.width, Number(this.maxWidth));
        left += this.left ? -maxWidth : a.width;
      }

      if (this.nudgeLeft) left -= parseInt(this.nudgeLeft);
      if (this.nudgeRight) left += parseInt(this.nudgeRight);
      return left;
    },

    computedTop() {
      const a = this.dimensions.activator;
      const c = this.dimensions.content;
      let top = 0;
      if (this.top) top += a.height - c.height;
      if (this.attach !== false) top += a.offsetTop;else top += a.top + this.pageYOffset;
      if (this.offsetY) top += this.top ? -a.height : a.height;
      if (this.nudgeTop) top -= parseInt(this.nudgeTop);
      if (this.nudgeBottom) top += parseInt(this.nudgeBottom);
      return top;
    },

    hasActivator() {
      return !!this.$slots.activator || !!this.$scopedSlots.activator || !!this.activator || !!this.inputActivator;
    },

    absoluteYOffset() {
      return this.pageYOffset - this.relativeYOffset;
    }

  },
  watch: {
    disabled(val) {
      val && this.callDeactivate();
    },

    isActive(val) {
      if (this.disabled) return;
      val ? this.callActivate() : this.callDeactivate();
    },

    positionX: 'updateDimensions',
    positionY: 'updateDimensions'
  },

  beforeMount() {
    this.hasWindow = typeof window !== 'undefined';

    if (this.hasWindow) {
      window.addEventListener('resize', this.updateDimensions, false);
    }
  },

  beforeDestroy() {
    if (this.hasWindow) {
      window.removeEventListener('resize', this.updateDimensions, false);
    }
  },

  methods: {
    absolutePosition() {
      return {
        offsetTop: this.positionY || this.absoluteY,
        offsetLeft: this.positionX || this.absoluteX,
        scrollHeight: 0,
        top: this.positionY || this.absoluteY,
        bottom: this.positionY || this.absoluteY,
        left: this.positionX || this.absoluteX,
        right: this.positionX || this.absoluteX,
        height: 0,
        width: 0
      };
    },

    activate() {},

    calcLeft(menuWidth) {
      return convertToUnit(this.attach !== false ? this.computedLeft : this.calcXOverflow(this.computedLeft, menuWidth));
    },

    calcTop() {
      return convertToUnit(this.attach !== false ? this.computedTop : this.calcYOverflow(this.computedTop));
    },

    calcXOverflow(left, menuWidth) {
      const xOverflow = left + menuWidth - this.pageWidth + 12;

      if ((!this.left || this.right) && xOverflow > 0) {
        left = Math.max(left - xOverflow, 0);
      } else {
        left = Math.max(left, 12);
      }

      return left + this.getOffsetLeft();
    },

    calcYOverflow(top) {
      const documentHeight = this.getInnerHeight();
      const toTop = this.absoluteYOffset + documentHeight;
      const activator = this.dimensions.activator;
      const contentHeight = this.dimensions.content.height;
      const totalHeight = top + contentHeight;
      const isOverflowing = toTop < totalHeight; // If overflowing bottom and offset
      // TODO: set 'bottom' position instead of 'top'

      if (isOverflowing && this.offsetOverflow && // If we don't have enough room to offset
      // the overflow, don't offset
      activator.top > contentHeight) {
        top = this.pageYOffset + (activator.top - contentHeight); // If overflowing bottom
      } else if (isOverflowing && !this.allowOverflow) {
        top = toTop - contentHeight - 12; // If overflowing top
      } else if (top < this.absoluteYOffset && !this.allowOverflow) {
        top = this.absoluteYOffset + 12;
      }

      return top < 12 ? 12 : top;
    },

    callActivate() {
      if (!this.hasWindow) return;
      this.activate();
    },

    callDeactivate() {
      this.isContentActive = false;
      this.deactivate();
    },

    checkForPageYOffset() {
      if (this.hasWindow) {
        this.pageYOffset = this.activatorFixed ? 0 : this.getOffsetTop();
      }
    },

    checkActivatorFixed() {
      if (this.attach !== false) {
        this.activatorFixed = false;
        return;
      }

      let el = this.getActivator();

      while (el) {
        if (window.getComputedStyle(el).position === 'fixed') {
          this.activatorFixed = true;
          return;
        }

        el = el.offsetParent;
      }

      this.activatorFixed = false;
    },

    deactivate() {},

    genActivatorListeners() {
      const listeners = Activatable.options.methods.genActivatorListeners.call(this);
      const onClick = listeners.click;

      if (onClick) {
        listeners.click = e => {
          if (this.openOnClick) {
            onClick && onClick(e);
          }

          this.absoluteX = e.clientX;
          this.absoluteY = e.clientY;
        };
      }

      return listeners;
    },

    getInnerHeight() {
      if (!this.hasWindow) return 0;
      return window.innerHeight || document.documentElement.clientHeight;
    },

    getOffsetLeft() {
      if (!this.hasWindow) return 0;
      return window.pageXOffset || document.documentElement.scrollLeft;
    },

    getOffsetTop() {
      if (!this.hasWindow) return 0;
      return window.pageYOffset || document.documentElement.scrollTop;
    },

    getRoundedBoundedClientRect(el) {
      const rect = el.getBoundingClientRect();
      return {
        top: Math.round(rect.top),
        left: Math.round(rect.left),
        bottom: Math.round(rect.bottom),
        right: Math.round(rect.right),
        width: Math.round(rect.width),
        height: Math.round(rect.height)
      };
    },

    measure(el) {
      if (!el || !this.hasWindow) return null;
      const rect = this.getRoundedBoundedClientRect(el); // Account for activator margin

      if (this.attach !== false) {
        const style = window.getComputedStyle(el);
        rect.left = parseInt(style.marginLeft);
        rect.top = parseInt(style.marginTop);
      }

      return rect;
    },

    sneakPeek(cb) {
      requestAnimationFrame(() => {
        const el = this.$refs.content;

        if (!el || el.style.display !== 'none') {
          cb();
          return;
        }

        el.style.display = 'inline-block';
        cb();
        el.style.display = 'none';
      });
    },

    startTransition() {
      return new Promise(resolve => requestAnimationFrame(() => {
        this.isContentActive = this.hasJustFocused = this.isActive;
        resolve();
      }));
    },

    updateDimensions() {
      this.hasWindow = typeof window !== 'undefined';
      this.checkActivatorFixed();
      this.checkForPageYOffset();
      this.pageWidth = document.documentElement.clientWidth;
      const dimensions = {
        activator: { ...this.dimensions.activator
        },
        content: { ...this.dimensions.content
        }
      }; // Activator should already be shown

      if (!this.hasActivator || this.absolute) {
        dimensions.activator = this.absolutePosition();
      } else {
        const activator = this.getActivator();
        if (!activator) return;
        dimensions.activator = this.measure(activator);
        dimensions.activator.offsetLeft = activator.offsetLeft;

        if (this.attach !== false) {
          // account for css padding causing things to not line up
          // this is mostly for v-autocomplete, hopefully it won't break anything
          dimensions.activator.offsetTop = activator.offsetTop;
        } else {
          dimensions.activator.offsetTop = 0;
        }
      } // Display and hide to get dimensions


      this.sneakPeek(() => {
        if (this.$refs.content) {
          if (this.$refs.content.offsetParent) {
            const offsetRect = this.getRoundedBoundedClientRect(this.$refs.content.offsetParent);
            this.relativeYOffset = window.pageYOffset + offsetRect.top;
            dimensions.activator.top -= this.relativeYOffset;
            dimensions.activator.left -= window.pageXOffset + offsetRect.left;
          }

          dimensions.content = this.measure(this.$refs.content);
        }

        this.dimensions = dimensions;
      });
    }

  }
});

/* @vue/component */

var Returnable = Vue$1.extend({
  name: 'returnable',
  props: {
    returnValue: null
  },
  data: () => ({
    isActive: false,
    originalValue: null
  }),
  watch: {
    isActive(val) {
      if (val) {
        this.originalValue = this.returnValue;
      } else {
        this.$emit('update:return-value', this.originalValue);
      }
    }

  },
  methods: {
    save(value) {
      this.originalValue = value;
      setTimeout(() => {
        this.isActive = false;
      });
    }

  }
});

// Styles
const baseMixins$m = mixins(Dependent, Delayable, Returnable, Roundable, Themeable$1, Menuable);
/* @vue/component */

var __unplugin_components_0$4 = baseMixins$m.extend({
  name: 'v-menu',
  directives: {
    ClickOutside: ClickOutside$1,
    Resize: Resize$1
  },

  provide() {
    return {
      isInMenu: true,
      // Pass theme through to default slot
      theme: this.theme
    };
  },

  props: {
    auto: Boolean,
    closeOnClick: {
      type: Boolean,
      default: true
    },
    closeOnContentClick: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
    disableKeys: Boolean,
    maxHeight: {
      type: [Number, String],
      default: 'auto'
    },
    offsetX: Boolean,
    offsetY: Boolean,
    openOnHover: Boolean,
    origin: {
      type: String,
      default: 'top left'
    },
    transition: {
      type: [Boolean, String],
      default: 'v-menu-transition'
    },
    contentProps: {
      type: Object,
      default: () => ({})
    }
  },

  data() {
    return {
      calculatedTopAuto: 0,
      defaultOffset: 8,
      hasJustFocused: false,
      listIndex: -1,
      resizeTimeout: 0,
      selectedIndex: null,
      tiles: []
    };
  },

  computed: {
    activeTile() {
      return this.tiles[this.listIndex];
    },

    calculatedLeft() {
      const menuWidth = Math.max(this.dimensions.content.width, parseFloat(this.calculatedMinWidth));
      if (!this.auto) return this.calcLeft(menuWidth) || '0';
      return convertToUnit(this.calcXOverflow(this.calcLeftAuto(), menuWidth)) || '0';
    },

    calculatedMaxHeight() {
      const height = this.auto ? '200px' : convertToUnit(this.maxHeight);
      return height || '0';
    },

    calculatedMaxWidth() {
      return convertToUnit(this.maxWidth) || '0';
    },

    calculatedMinWidth() {
      if (this.minWidth) {
        return convertToUnit(this.minWidth) || '0';
      }

      const minWidth = Math.min(this.dimensions.activator.width + Number(this.nudgeWidth) + (this.auto ? 16 : 0), Math.max(this.pageWidth - 24, 0));
      const calculatedMaxWidth = isNaN(parseInt(this.calculatedMaxWidth)) ? minWidth : parseInt(this.calculatedMaxWidth);
      return convertToUnit(Math.min(calculatedMaxWidth, minWidth)) || '0';
    },

    calculatedTop() {
      const top = !this.auto ? this.calcTop() : convertToUnit(this.calcYOverflow(this.calculatedTopAuto));
      return top || '0';
    },

    hasClickableTiles() {
      return Boolean(this.tiles.find(tile => tile.tabIndex > -1));
    },

    styles() {
      return {
        maxHeight: this.calculatedMaxHeight,
        minWidth: this.calculatedMinWidth,
        maxWidth: this.calculatedMaxWidth,
        top: this.calculatedTop,
        left: this.calculatedLeft,
        transformOrigin: this.origin,
        zIndex: this.zIndex || this.activeZIndex
      };
    }

  },
  watch: {
    isActive(val) {
      if (!val) this.listIndex = -1;
    },

    isContentActive(val) {
      this.hasJustFocused = val;
    },

    listIndex(next, prev) {
      if (next in this.tiles) {
        const tile = this.tiles[next];
        tile.classList.add('v-list-item--highlighted');
        const scrollTop = this.$refs.content.scrollTop;
        const contentHeight = this.$refs.content.clientHeight;

        if (scrollTop > tile.offsetTop - 8) {
          goTo(tile.offsetTop - tile.clientHeight, {
            appOffset: false,
            duration: 300,
            container: this.$refs.content
          });
        } else if (scrollTop + contentHeight < tile.offsetTop + tile.clientHeight + 8) {
          goTo(tile.offsetTop - contentHeight + tile.clientHeight * 2, {
            appOffset: false,
            duration: 300,
            container: this.$refs.content
          });
        }
      }

      prev in this.tiles && this.tiles[prev].classList.remove('v-list-item--highlighted');
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('full-width')) {
      removed('full-width', this);
    }
  },

  mounted() {
    this.isActive && this.callActivate();
  },

  methods: {
    activate() {
      // Update coordinates and dimensions of menu
      // and its activator
      this.updateDimensions(); // Start the transition

      requestAnimationFrame(() => {
        // Once transitioning, calculate scroll and top position
        this.startTransition().then(() => {
          if (this.$refs.content) {
            this.calculatedTopAuto = this.calcTopAuto();
            this.auto && (this.$refs.content.scrollTop = this.calcScrollPosition());
          }
        });
      });
    },

    calcScrollPosition() {
      const $el = this.$refs.content;
      const activeTile = $el.querySelector('.v-list-item--active');
      const maxScrollTop = $el.scrollHeight - $el.offsetHeight;
      return activeTile ? Math.min(maxScrollTop, Math.max(0, activeTile.offsetTop - $el.offsetHeight / 2 + activeTile.offsetHeight / 2)) : $el.scrollTop;
    },

    calcLeftAuto() {
      return parseInt(this.dimensions.activator.left - this.defaultOffset * 2);
    },

    calcTopAuto() {
      const $el = this.$refs.content;
      const activeTile = $el.querySelector('.v-list-item--active');

      if (!activeTile) {
        this.selectedIndex = null;
      }

      if (this.offsetY || !activeTile) {
        return this.computedTop;
      }

      this.selectedIndex = Array.from(this.tiles).indexOf(activeTile);
      const tileDistanceFromMenuTop = activeTile.offsetTop - this.calcScrollPosition();
      const firstTileOffsetTop = $el.querySelector('.v-list-item').offsetTop;
      return this.computedTop - tileDistanceFromMenuTop - firstTileOffsetTop - 1;
    },

    changeListIndex(e) {
      // For infinite scroll and autocomplete, re-evaluate children
      this.getTiles();

      if (!this.isActive || !this.hasClickableTiles) {
        return;
      } else if (e.keyCode === keyCodes.tab) {
        this.isActive = false;
        return;
      } else if (e.keyCode === keyCodes.down) {
        this.nextTile();
      } else if (e.keyCode === keyCodes.up) {
        this.prevTile();
      } else if (e.keyCode === keyCodes.end) {
        this.lastTile();
      } else if (e.keyCode === keyCodes.home) {
        this.firstTile();
      } else if (e.keyCode === keyCodes.enter && this.listIndex !== -1) {
        this.tiles[this.listIndex].click();
      } else {
        return;
      } // One of the conditions was met, prevent default action (#2988)


      e.preventDefault();
    },

    closeConditional(e) {
      const target = e.target;
      return this.isActive && !this._isDestroyed && this.closeOnClick && !this.$refs.content.contains(target);
    },

    genActivatorAttributes() {
      const attributes = Activatable.options.methods.genActivatorAttributes.call(this);

      if (this.activeTile && this.activeTile.id) {
        return { ...attributes,
          'aria-activedescendant': this.activeTile.id
        };
      }

      return attributes;
    },

    genActivatorListeners() {
      const listeners = Menuable.options.methods.genActivatorListeners.call(this);

      if (!this.disableKeys) {
        listeners.keydown = this.onKeyDown;
      }

      return listeners;
    },

    genTransition() {
      const content = this.genContent();
      if (!this.transition) return content;
      return this.$createElement('transition', {
        props: {
          name: this.transition
        }
      }, [content]);
    },

    genDirectives() {
      const directives = [{
        name: 'show',
        value: this.isContentActive
      }]; // Do not add click outside for hover menu

      if (!this.openOnHover && this.closeOnClick) {
        directives.push({
          name: 'click-outside',
          value: {
            handler: () => {
              this.isActive = false;
            },
            closeConditional: this.closeConditional,
            include: () => [this.$el, ...this.getOpenDependentElements()]
          }
        });
      }

      return directives;
    },

    genContent() {
      const options = {
        attrs: { ...this.getScopeIdAttrs(),
          ...this.contentProps,
          role: 'role' in this.$attrs ? this.$attrs.role : 'menu'
        },
        staticClass: 'v-menu__content',
        class: { ...this.rootThemeClasses,
          ...this.roundedClasses,
          'v-menu__content--auto': this.auto,
          'v-menu__content--fixed': this.activatorFixed,
          menuable__content__active: this.isActive,
          [this.contentClass.trim()]: true
        },
        style: this.styles,
        directives: this.genDirectives(),
        ref: 'content',
        on: {
          click: e => {
            const target = e.target;
            if (target.getAttribute('disabled')) return;
            if (this.closeOnContentClick) this.isActive = false;
          },
          keydown: this.onKeyDown
        }
      };

      if (this.$listeners.scroll) {
        options.on = options.on || {};
        options.on.scroll = this.$listeners.scroll;
      }

      if (!this.disabled && this.openOnHover) {
        options.on = options.on || {};
        options.on.mouseenter = this.mouseEnterHandler;
      }

      if (this.openOnHover) {
        options.on = options.on || {};
        options.on.mouseleave = this.mouseLeaveHandler;
      }

      return this.$createElement('div', options, this.getContentSlot());
    },

    getTiles() {
      if (!this.$refs.content) return;
      this.tiles = Array.from(this.$refs.content.querySelectorAll('.v-list-item, .v-divider, .v-subheader'));
    },

    mouseEnterHandler() {
      this.runDelay('open', () => {
        if (this.hasJustFocused) return;
        this.hasJustFocused = true;
      });
    },

    mouseLeaveHandler(e) {
      // Prevent accidental re-activation
      this.runDelay('close', () => {
        var _a;

        if ((_a = this.$refs.content) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;
        requestAnimationFrame(() => {
          this.isActive = false;
          this.callDeactivate();
        });
      });
    },

    nextTile() {
      const tile = this.tiles[this.listIndex + 1];

      if (!tile) {
        if (!this.tiles.length) return;
        this.listIndex = -1;
        this.nextTile();
        return;
      }

      this.listIndex++;
      if (tile.tabIndex === -1) this.nextTile();
    },

    prevTile() {
      const tile = this.tiles[this.listIndex - 1];

      if (!tile) {
        if (!this.tiles.length) return;
        this.listIndex = this.tiles.length;
        this.prevTile();
        return;
      }

      this.listIndex--;
      if (tile.tabIndex === -1) this.prevTile();
    },

    lastTile() {
      const tile = this.tiles[this.tiles.length - 1];
      if (!tile) return;
      this.listIndex = this.tiles.length - 1;
      if (tile.tabIndex === -1) this.prevTile();
    },

    firstTile() {
      const tile = this.tiles[0];
      if (!tile) return;
      this.listIndex = 0;
      if (tile.tabIndex === -1) this.nextTile();
    },

    onKeyDown(e) {
      if (this.disableKeys) return;

      if (e.keyCode === keyCodes.esc) {
        // Wait for dependent elements to close first
        setTimeout(() => {
          this.isActive = false;
        });
        const activator = this.getActivator();
        this.$nextTick(() => activator && activator.focus());
      } else if (!this.isActive && [keyCodes.up, keyCodes.down].includes(e.keyCode)) {
        this.isActive = true;
      } // Allow for isActive watcher to generate tile list


      this.$nextTick(() => this.changeListIndex(e));
    },

    onResize() {
      if (!this.isActive) return; // Account for screen resize
      // and orientation change
      // eslint-disable-next-line no-unused-expressions

      this.$refs.content.offsetWidth;
      this.updateDimensions(); // When resizing to a smaller width
      // content width is evaluated before
      // the new activator width has been
      // set, causing it to not size properly
      // hacky but will revisit in the future

      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = window.setTimeout(this.updateDimensions, 100);
    }

  },

  render(h) {
    const data = {
      staticClass: 'v-menu',
      class: {
        'v-menu--attached': this.attach === '' || this.attach === true || this.attach === 'attach'
      },
      directives: [{
        arg: '500',
        name: 'resize',
        value: this.onResize
      }]
    };
    return h('div', data, [!this.activator && this.genActivator(), this.showLazyContent(() => [this.$createElement(VThemeProvider, {
      props: {
        root: true,
        light: this.light,
        dark: this.dark
      }
    }, [this.genTransition()])])]);
  }

});

var VSimpleCheckbox$1 = '';

var VSimpleCheckbox = Vue$1.extend({
  name: 'v-simple-checkbox',
  functional: true,
  directives: {
    Ripple: Ripple$1
  },
  props: { ...Colorable.options.props,
    ...Themeable$1.options.props,
    disabled: Boolean,
    ripple: {
      type: Boolean,
      default: true
    },
    value: Boolean,
    indeterminate: Boolean,
    indeterminateIcon: {
      type: String,
      default: '$checkboxIndeterminate'
    },
    onIcon: {
      type: String,
      default: '$checkboxOn'
    },
    offIcon: {
      type: String,
      default: '$checkboxOff'
    }
  },

  render(h, {
    props,
    data,
    listeners
  }) {
    const children = [];
    let icon = props.offIcon;
    if (props.indeterminate) icon = props.indeterminateIcon;else if (props.value) icon = props.onIcon;
    children.push(h(__unplugin_components_95, Colorable.options.methods.setTextColor(props.value && props.color, {
      props: {
        disabled: props.disabled,
        dark: props.dark,
        light: props.light
      }
    }), icon));

    if (props.ripple && !props.disabled) {
      const ripple = h('div', Colorable.options.methods.setTextColor(props.color, {
        staticClass: 'v-input--selection-controls__ripple',
        directives: [{
          def: Ripple$1,
          name: 'ripple',
          value: {
            center: true
          }
        }]
      }));
      children.push(ripple);
    }

    return h('div', mergeData(data, {
      class: {
        'v-simple-checkbox': true,
        'v-simple-checkbox--disabled': props.disabled
      },
      on: {
        click: e => {
          e.stopPropagation();

          if (data.on && data.on.input && !props.disabled) {
            wrapInArray(data.on.input).forEach(f => f(!props.value));
          }
        }
      }
    }), [h('div', {
      staticClass: 'v-input--selection-controls__input'
    }, children)]);
  }

});

var VDivider = '';

// Styles
var __unplugin_components_5 = Themeable$1.extend({
  name: 'v-divider',
  props: {
    inset: Boolean,
    vertical: Boolean
  },

  render(h) {
    // WAI-ARIA attributes
    let orientation;

    if (!this.$attrs.role || this.$attrs.role === 'separator') {
      orientation = this.vertical ? 'vertical' : 'horizontal';
    }

    return h('hr', {
      class: {
        'v-divider': true,
        'v-divider--inset': this.inset,
        'v-divider--vertical': this.vertical,
        ...this.themeClasses
      },
      attrs: {
        role: 'separator',
        'aria-orientation': orientation,
        ...this.$attrs
      },
      on: this.$listeners
    });
  }

});

var VSubheader$1 = '';

// Styles
var VSubheader = mixins(Themeable$1
/* @vue/component */
).extend({
  name: 'v-subheader',
  props: {
    inset: Boolean
  },

  render(h) {
    return h('div', {
      staticClass: 'v-subheader',
      class: {
        'v-subheader--inset': this.inset,
        ...this.themeClasses
      },
      attrs: this.$attrs,
      on: this.$listeners
    }, this.$slots.default);
  }

});

var VList = '';

// Styles
/* @vue/component */

var __unplugin_components_4$1 = VSheet.extend().extend({
  name: 'v-list',

  provide() {
    return {
      isInList: true,
      list: this
    };
  },

  inject: {
    isInMenu: {
      default: false
    },
    isInNav: {
      default: false
    }
  },
  props: {
    dense: Boolean,
    disabled: Boolean,
    expand: Boolean,
    flat: Boolean,
    nav: Boolean,
    rounded: Boolean,
    subheader: Boolean,
    threeLine: Boolean,
    twoLine: Boolean
  },
  data: () => ({
    groups: []
  }),
  computed: {
    classes() {
      return { ...VSheet.options.computed.classes.call(this),
        'v-list--dense': this.dense,
        'v-list--disabled': this.disabled,
        'v-list--flat': this.flat,
        'v-list--nav': this.nav,
        'v-list--rounded': this.rounded,
        'v-list--subheader': this.subheader,
        'v-list--two-line': this.twoLine,
        'v-list--three-line': this.threeLine
      };
    }

  },
  methods: {
    register(content) {
      this.groups.push(content);
    },

    unregister(content) {
      const index = this.groups.findIndex(g => g._uid === content._uid);
      if (index > -1) this.groups.splice(index, 1);
    },

    listClick(uid) {
      if (this.expand) return;

      for (const group of this.groups) {
        group.toggle(uid);
      }
    }

  },

  render(h) {
    const data = {
      staticClass: 'v-list',
      class: this.classes,
      style: this.styles,
      attrs: {
        role: this.isInNav || this.isInMenu ? undefined : 'list',
        ...this.attrs$
      }
    };
    return h(this.tag, this.setBackgroundColor(this.color, data), [this.$slots.default]);
  }

});

var VListGroup = '';

var VListItem = '';

// Styles
const baseMixins$l = mixins(Colorable, Routable, Themeable$1, factory$1('listItemGroup'), factory$2('inputValue'));
/* @vue/component */

var __unplugin_components_9$2 = baseMixins$l.extend().extend({
  name: 'v-list-item',
  directives: {
    Ripple: Ripple$1
  },
  inject: {
    isInGroup: {
      default: false
    },
    isInList: {
      default: false
    },
    isInMenu: {
      default: false
    },
    isInNav: {
      default: false
    }
  },
  inheritAttrs: false,
  props: {
    activeClass: {
      type: String,

      default() {
        if (!this.listItemGroup) return '';
        return this.listItemGroup.activeClass;
      }

    },
    dense: Boolean,
    inactive: Boolean,
    link: Boolean,
    selectable: {
      type: Boolean
    },
    tag: {
      type: String,
      default: 'div'
    },
    threeLine: Boolean,
    twoLine: Boolean,
    value: null
  },
  data: () => ({
    proxyClass: 'v-list-item--active'
  }),
  computed: {
    classes() {
      return {
        'v-list-item': true,
        ...Routable.options.computed.classes.call(this),
        'v-list-item--dense': this.dense,
        'v-list-item--disabled': this.disabled,
        'v-list-item--link': this.isClickable && !this.inactive,
        'v-list-item--selectable': this.selectable,
        'v-list-item--three-line': this.threeLine,
        'v-list-item--two-line': this.twoLine,
        ...this.themeClasses
      };
    },

    isClickable() {
      return Boolean(Routable.options.computed.isClickable.call(this) || this.listItemGroup);
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('avatar')) {
      removed('avatar', this);
    }
  },

  methods: {
    click(e) {
      if (e.detail) this.$el.blur();
      this.$emit('click', e);
      this.to || this.toggle();
    },

    genAttrs() {
      const attrs = {
        'aria-disabled': this.disabled ? true : undefined,
        tabindex: this.isClickable && !this.disabled ? 0 : -1,
        ...this.$attrs
      };

      if (this.$attrs.hasOwnProperty('role')) ; else if (this.isInNav) ; else if (this.isInGroup) {
        attrs.role = 'option';
        attrs['aria-selected'] = String(this.isActive);
      } else if (this.isInMenu) {
        attrs.role = this.isClickable ? 'menuitem' : undefined;
        attrs.id = attrs.id || `list-item-${this._uid}`;
      } else if (this.isInList) {
        attrs.role = 'listitem';
      }

      return attrs;
    },

    toggle() {
      if (this.to && this.inputValue === undefined) {
        this.isActive = !this.isActive;
      }

      this.$emit('change');
    }

  },

  render(h) {
    let {
      tag,
      data
    } = this.generateRouteLink();
    data.attrs = { ...data.attrs,
      ...this.genAttrs()
    };
    data[this.to ? 'nativeOn' : 'on'] = { ...data[this.to ? 'nativeOn' : 'on'],
      keydown: e => {
        if (!this.disabled) {
          /* istanbul ignore else */
          if (e.keyCode === keyCodes.enter) this.click(e);
          this.$emit('keydown', e);
        }
      }
    };
    if (this.inactive) tag = 'div';

    if (this.inactive && this.to) {
      data.on = data.nativeOn;
      delete data.nativeOn;
    }

    const children = this.$scopedSlots.default ? this.$scopedSlots.default({
      active: this.isActive,
      toggle: this.toggle
    }) : this.$slots.default;
    return h(tag, this.isActive ? this.setTextColor(this.color, data) : data, children);
  }

});

// Types
/* @vue/component */

var __unplugin_components_32 = Vue$1.extend({
  name: 'v-list-item-icon',
  functional: true,

  render(h, {
    data,
    children
  }) {
    data.staticClass = `v-list-item__icon ${data.staticClass || ''}`.trim();
    return h('div', data, children);
  }

});

// Styles
const baseMixins$k = mixins(BindsAttrs, Bootable, Colorable, inject('list'), Toggleable$1);
var __unplugin_components_18$1 = baseMixins$k.extend().extend({
  name: 'v-list-group',
  directives: {
    ripple: Ripple$1
  },
  props: {
    activeClass: {
      type: String,
      default: ''
    },
    appendIcon: {
      type: String,
      default: '$expand'
    },
    color: {
      type: String,
      default: 'primary'
    },
    disabled: Boolean,
    group: [String, RegExp],
    noAction: Boolean,
    prependIcon: String,
    ripple: {
      type: [Boolean, Object],
      default: true
    },
    subGroup: Boolean
  },
  computed: {
    classes() {
      return {
        'v-list-group--active': this.isActive,
        'v-list-group--disabled': this.disabled,
        'v-list-group--no-action': this.noAction,
        'v-list-group--sub-group': this.subGroup
      };
    }

  },
  watch: {
    isActive(val) {
      /* istanbul ignore else */
      if (!this.subGroup && val) {
        this.list && this.list.listClick(this._uid);
      }
    },

    $route: 'onRouteChange'
  },

  created() {
    this.list && this.list.register(this);

    if (this.group && this.$route && this.value == null) {
      this.isActive = this.matchRoute(this.$route.path);
    }
  },

  beforeDestroy() {
    this.list && this.list.unregister(this);
  },

  methods: {
    click(e) {
      if (this.disabled) return;
      this.isBooted = true;
      this.$emit('click', e);
      this.$nextTick(() => this.isActive = !this.isActive);
    },

    genIcon(icon) {
      return this.$createElement(__unplugin_components_95, icon);
    },

    genAppendIcon() {
      const icon = !this.subGroup ? this.appendIcon : false;
      if (!icon && !this.$slots.appendIcon) return null;
      return this.$createElement(__unplugin_components_32, {
        staticClass: 'v-list-group__header__append-icon'
      }, [this.$slots.appendIcon || this.genIcon(icon)]);
    },

    genHeader() {
      return this.$createElement(__unplugin_components_9$2, {
        staticClass: 'v-list-group__header',
        attrs: {
          'aria-expanded': String(this.isActive),
          role: 'button'
        },
        class: {
          [this.activeClass]: this.isActive
        },
        props: {
          inputValue: this.isActive
        },
        directives: [{
          name: 'ripple',
          value: this.ripple
        }],
        on: { ...this.listeners$,
          click: this.click
        }
      }, [this.genPrependIcon(), this.$slots.activator, this.genAppendIcon()]);
    },

    genItems() {
      return this.showLazyContent(() => [this.$createElement('div', {
        staticClass: 'v-list-group__items',
        directives: [{
          name: 'show',
          value: this.isActive
        }]
      }, getSlot(this))]);
    },

    genPrependIcon() {
      const icon = this.subGroup && this.prependIcon == null ? '$subgroup' : this.prependIcon;
      if (!icon && !this.$slots.prependIcon) return null;
      return this.$createElement(__unplugin_components_32, {
        staticClass: 'v-list-group__header__prepend-icon'
      }, [this.$slots.prependIcon || this.genIcon(icon)]);
    },

    onRouteChange(to) {
      /* istanbul ignore if */
      if (!this.group) return;
      const isActive = this.matchRoute(to.path);
      /* istanbul ignore else */

      if (isActive && this.isActive !== isActive) {
        this.list && this.list.listClick(this._uid);
      }

      this.isActive = isActive;
    },

    toggle(uid) {
      const isActive = this._uid === uid;
      if (isActive) this.isBooted = true;
      this.$nextTick(() => this.isActive = isActive);
    },

    matchRoute(to) {
      return to.match(this.group) !== null;
    }

  },

  render(h) {
    return h('div', this.setTextColor(this.isActive && this.color, {
      staticClass: 'v-list-group',
      class: this.classes
    }), [this.genHeader(), h(VExpandTransition, this.genItems())]);
  }

});

var VListItemGroup = '';

var VItemGroup = '';

var Comparable = Vue$1.extend({
  name: 'comparable',
  props: {
    valueComparator: {
      type: Function,
      default: deepEqual
    }
  }
});

function factory(prop = 'value', event = 'change') {
  return Vue$1.extend({
    name: 'proxyable',
    model: {
      prop,
      event
    },
    props: {
      [prop]: {
        required: false
      }
    },

    data() {
      return {
        internalLazyValue: this[prop]
      };
    },

    computed: {
      internalValue: {
        get() {
          return this.internalLazyValue;
        },

        set(val) {
          if (val === this.internalLazyValue) return;
          this.internalLazyValue = val;
          this.$emit(event, val);
        }

      }
    },
    watch: {
      [prop](val) {
        this.internalLazyValue = val;
      }

    }
  });
}
/* eslint-disable-next-line @typescript-eslint/no-redeclare */

const Proxyable = factory();
var Proxyable$1 = Proxyable;

// Styles
const BaseItemGroup = mixins(Comparable, Proxyable$1, Themeable$1).extend({
  name: 'base-item-group',
  props: {
    activeClass: {
      type: String,
      default: 'v-item--active'
    },
    mandatory: Boolean,
    max: {
      type: [Number, String],
      default: null
    },
    multiple: Boolean,
    tag: {
      type: String,
      default: 'div'
    }
  },

  data() {
    return {
      // As long as a value is defined, show it
      // Otherwise, check if multiple
      // to determine which default to provide
      internalLazyValue: this.value !== undefined ? this.value : this.multiple ? [] : undefined,
      items: []
    };
  },

  computed: {
    classes() {
      return {
        'v-item-group': true,
        ...this.themeClasses
      };
    },

    selectedIndex() {
      return this.selectedItem && this.items.indexOf(this.selectedItem) || -1;
    },

    selectedItem() {
      if (this.multiple) return undefined;
      return this.selectedItems[0];
    },

    selectedItems() {
      return this.items.filter((item, index) => {
        return this.toggleMethod(this.getValue(item, index));
      });
    },

    selectedValues() {
      if (this.internalValue == null) return [];
      return Array.isArray(this.internalValue) ? this.internalValue : [this.internalValue];
    },

    toggleMethod() {
      if (!this.multiple) {
        return v => this.valueComparator(this.internalValue, v);
      }

      const internalValue = this.internalValue;

      if (Array.isArray(internalValue)) {
        return v => internalValue.some(intern => this.valueComparator(intern, v));
      }

      return () => false;
    }

  },
  watch: {
    internalValue: 'updateItemsState',
    items: 'updateItemsState'
  },

  created() {
    if (this.multiple && !Array.isArray(this.internalValue)) {
      consoleWarn('Model must be bound to an array if the multiple property is true.', this);
    }
  },

  methods: {
    genData() {
      return {
        class: this.classes
      };
    },

    getValue(item, i) {
      return item.value === undefined ? i : item.value;
    },

    onClick(item) {
      this.updateInternalValue(this.getValue(item, this.items.indexOf(item)));
    },

    register(item) {
      const index = this.items.push(item) - 1;
      item.$on('change', () => this.onClick(item)); // If no value provided and mandatory,
      // assign first registered item

      if (this.mandatory && !this.selectedValues.length) {
        this.updateMandatory();
      }

      this.updateItem(item, index);
    },

    unregister(item) {
      if (this._isDestroyed) return;
      const index = this.items.indexOf(item);
      const value = this.getValue(item, index);
      this.items.splice(index, 1);
      const valueIndex = this.selectedValues.indexOf(value); // Items is not selected, do nothing

      if (valueIndex < 0) return; // If not mandatory, use regular update process

      if (!this.mandatory) {
        return this.updateInternalValue(value);
      } // Remove the value


      if (this.multiple && Array.isArray(this.internalValue)) {
        this.internalValue = this.internalValue.filter(v => v !== value);
      } else {
        this.internalValue = undefined;
      } // If mandatory and we have no selection
      // add the last item as value

      /* istanbul ignore else */


      if (!this.selectedItems.length) {
        this.updateMandatory(true);
      }
    },

    updateItem(item, index) {
      const value = this.getValue(item, index);
      item.isActive = this.toggleMethod(value);
    },

    // https://github.com/vuetifyjs/vuetify/issues/5352
    updateItemsState() {
      this.$nextTick(() => {
        if (this.mandatory && !this.selectedItems.length) {
          return this.updateMandatory();
        } // TODO: Make this smarter so it
        // doesn't have to iterate every
        // child in an update


        this.items.forEach(this.updateItem);
      });
    },

    updateInternalValue(value) {
      this.multiple ? this.updateMultiple(value) : this.updateSingle(value);
    },

    updateMandatory(last) {
      if (!this.items.length) return;
      const items = this.items.slice();
      if (last) items.reverse();
      const item = items.find(item => !item.disabled); // If no tabs are available
      // aborts mandatory value

      if (!item) return;
      const index = this.items.indexOf(item);
      this.updateInternalValue(this.getValue(item, index));
    },

    updateMultiple(value) {
      const defaultValue = Array.isArray(this.internalValue) ? this.internalValue : [];
      const internalValue = defaultValue.slice();
      const index = internalValue.findIndex(val => this.valueComparator(val, value));
      if (this.mandatory && // Item already exists
      index > -1 && // value would be reduced below min
      internalValue.length - 1 < 1) return;
      if ( // Max is set
      this.max != null && // Item doesn't exist
      index < 0 && // value would be increased above max
      internalValue.length + 1 > this.max) return;
      index > -1 ? internalValue.splice(index, 1) : internalValue.push(value);
      this.internalValue = internalValue;
    },

    updateSingle(value) {
      const isSame = this.valueComparator(this.internalValue, value);
      if (this.mandatory && isSame) return;
      this.internalValue = isSame ? undefined : value;
    }

  },

  render(h) {
    return h(this.tag, this.genData(), this.$slots.default);
  }

});
BaseItemGroup.extend({
  name: 'v-item-group',

  provide() {
    return {
      itemGroup: this
    };
  }

});

// Styles
var __unplugin_components_8 = mixins(BaseItemGroup, Colorable).extend({
  name: 'v-list-item-group',

  provide() {
    return {
      isInGroup: true,
      listItemGroup: this
    };
  },

  computed: {
    classes() {
      return { ...BaseItemGroup.options.computed.classes.call(this),
        'v-list-item-group': true
      };
    }

  },
  methods: {
    genData() {
      return this.setTextColor(this.color, { ...BaseItemGroup.options.methods.genData.call(this),
        attrs: {
          role: 'listbox'
        }
      });
    }

  }
});

// Types
/* @vue/component */

var __unplugin_components_10$2 = Vue$1.extend({
  name: 'v-list-item-action',
  functional: true,

  render(h, {
    data,
    children = []
  }) {
    data.staticClass = data.staticClass ? `v-list-item__action ${data.staticClass}` : 'v-list-item__action';
    const filteredChild = children.filter(VNode => {
      return VNode.isComment === false && VNode.text !== ' ';
    });
    if (filteredChild.length > 1) data.staticClass += ' v-list-item__action--stack';
    return h('div', data, children);
  }

});

var VAvatar$1 = '';

var VAvatar = mixins(Colorable, Measurable, Roundable).extend({
  name: 'v-avatar',
  props: {
    left: Boolean,
    right: Boolean,
    size: {
      type: [Number, String],
      default: 48
    }
  },
  computed: {
    classes() {
      return {
        'v-avatar--left': this.left,
        'v-avatar--right': this.right,
        ...this.roundedClasses
      };
    },

    styles() {
      return {
        height: convertToUnit(this.size),
        minWidth: convertToUnit(this.size),
        width: convertToUnit(this.size),
        ...this.measurableStyles
      };
    }

  },

  render(h) {
    const data = {
      staticClass: 'v-avatar',
      class: this.classes,
      style: this.styles,
      on: this.$listeners
    };
    return h('div', this.setBackgroundColor(this.color, data), this.$slots.default);
  }

});

// Components
/* @vue/component */

var __unplugin_components_4 = VAvatar.extend({
  name: 'v-list-item-avatar',
  props: {
    horizontal: Boolean,
    size: {
      type: [Number, String],
      default: 40
    }
  },
  computed: {
    classes() {
      return {
        'v-list-item__avatar--horizontal': this.horizontal,
        ...VAvatar.options.computed.classes.call(this),
        'v-avatar--tile': this.tile || this.horizontal
      };
    }

  },

  render(h) {
    const render = VAvatar.options.render.call(this, h);
    render.data = render.data || {};
    render.data.staticClass += ' v-list-item__avatar';
    return render;
  }

});

createSimpleFunctional('v-list-item__action-text', 'span');
const VListItemContent = createSimpleFunctional('v-list-item__content', 'div');
const VListItemTitle = createSimpleFunctional('v-list-item__title', 'div');
const VListItemSubtitle = createSimpleFunctional('v-list-item__subtitle', 'div');

// Components
/* @vue/component */

var VSelectList = mixins(Colorable, Themeable$1).extend({
  name: 'v-select-list',
  // https://github.com/vuejs/vue/issues/6872
  directives: {
    ripple: Ripple$1
  },
  props: {
    action: Boolean,
    dense: Boolean,
    hideSelected: Boolean,
    items: {
      type: Array,
      default: () => []
    },
    itemDisabled: {
      type: [String, Array, Function],
      default: 'disabled'
    },
    itemText: {
      type: [String, Array, Function],
      default: 'text'
    },
    itemValue: {
      type: [String, Array, Function],
      default: 'value'
    },
    noDataText: String,
    noFilter: Boolean,
    searchInput: null,
    selectedItems: {
      type: Array,
      default: () => []
    }
  },
  computed: {
    parsedItems() {
      return this.selectedItems.map(item => this.getValue(item));
    },

    tileActiveClass() {
      return Object.keys(this.setTextColor(this.color).class || {}).join(' ');
    },

    staticNoDataTile() {
      const tile = {
        attrs: {
          role: undefined
        },
        on: {
          mousedown: e => e.preventDefault() // Prevent onBlur from being called

        }
      };
      return this.$createElement(__unplugin_components_9$2, tile, [this.genTileContent(this.noDataText)]);
    }

  },
  methods: {
    genAction(item, inputValue) {
      return this.$createElement(__unplugin_components_10$2, [this.$createElement(VSimpleCheckbox, {
        props: {
          color: this.color,
          value: inputValue,
          ripple: false
        },
        on: {
          input: () => this.$emit('select', item)
        }
      })]);
    },

    genDivider(props) {
      return this.$createElement(__unplugin_components_5, {
        props
      });
    },

    genFilteredText(text) {
      text = text || '';
      if (!this.searchInput || this.noFilter) return text;
      const {
        start,
        middle,
        end
      } = this.getMaskedCharacters(text);
      return [start, this.genHighlight(middle), end];
    },

    genHeader(props) {
      return this.$createElement(VSubheader, {
        props
      }, props.header);
    },

    genHighlight(text) {
      return this.$createElement('span', {
        staticClass: 'v-list-item__mask'
      }, text);
    },

    getMaskedCharacters(text) {
      const searchInput = (this.searchInput || '').toString().toLocaleLowerCase();
      const index = text.toLocaleLowerCase().indexOf(searchInput);
      if (index < 0) return {
        start: text,
        middle: '',
        end: ''
      };
      const start = text.slice(0, index);
      const middle = text.slice(index, index + searchInput.length);
      const end = text.slice(index + searchInput.length);
      return {
        start,
        middle,
        end
      };
    },

    genTile({
      item,
      index,
      disabled = null,
      value = false
    }) {
      if (!value) value = this.hasItem(item);

      if (item === Object(item)) {
        disabled = disabled !== null ? disabled : this.getDisabled(item);
      }

      const tile = {
        attrs: {
          // Default behavior in list does not
          // contain aria-selected by default
          'aria-selected': String(value),
          id: `list-item-${this._uid}-${index}`,
          role: 'option'
        },
        on: {
          mousedown: e => {
            // Prevent onBlur from being called
            e.preventDefault();
          },
          click: () => disabled || this.$emit('select', item)
        },
        props: {
          activeClass: this.tileActiveClass,
          disabled,
          ripple: true,
          inputValue: value
        }
      };

      if (!this.$scopedSlots.item) {
        return this.$createElement(__unplugin_components_9$2, tile, [this.action && !this.hideSelected && this.items.length > 0 ? this.genAction(item, value) : null, this.genTileContent(item, index)]);
      }

      const parent = this;
      const scopedSlot = this.$scopedSlots.item({
        parent,
        item,
        attrs: { ...tile.attrs,
          ...tile.props
        },
        on: tile.on
      });
      return this.needsTile(scopedSlot) ? this.$createElement(__unplugin_components_9$2, tile, scopedSlot) : scopedSlot;
    },

    genTileContent(item, index = 0) {
      return this.$createElement(VListItemContent, [this.$createElement(VListItemTitle, [this.genFilteredText(this.getText(item))])]);
    },

    hasItem(item) {
      return this.parsedItems.indexOf(this.getValue(item)) > -1;
    },

    needsTile(slot) {
      return slot.length !== 1 || slot[0].componentOptions == null || slot[0].componentOptions.Ctor.options.name !== 'v-list-item';
    },

    getDisabled(item) {
      return Boolean(getPropertyFromItem(item, this.itemDisabled, false));
    },

    getText(item) {
      return String(getPropertyFromItem(item, this.itemText, item));
    },

    getValue(item) {
      return getPropertyFromItem(item, this.itemValue, this.getText(item));
    }

  },

  render() {
    const children = [];
    const itemsLength = this.items.length;

    for (let index = 0; index < itemsLength; index++) {
      const item = this.items[index];
      if (this.hideSelected && this.hasItem(item)) continue;
      if (item == null) children.push(this.genTile({
        item,
        index
      }));else if (item.header) children.push(this.genHeader(item));else if (item.divider) children.push(this.genDivider(item));else children.push(this.genTile({
        item,
        index
      }));
    }

    children.length || children.push(this.$slots['no-data'] || this.staticNoDataTile);
    this.$slots['prepend-item'] && children.unshift(this.$slots['prepend-item']);
    this.$slots['append-item'] && children.push(this.$slots['append-item']);
    return this.$createElement(__unplugin_components_4$1, {
      staticClass: 'v-select-list',
      class: this.themeClasses,
      attrs: {
        role: 'listbox',
        tabindex: -1
      },
      props: {
        dense: this.dense
      }
    }, children);
  }

});

var VInput$1 = '';

var VLabel$1 = '';

// Styles
/* @vue/component */

var VLabel = mixins(Themeable$1).extend({
  name: 'v-label',
  functional: true,
  props: {
    absolute: Boolean,
    color: {
      type: String,
      default: 'primary'
    },
    disabled: Boolean,
    focused: Boolean,
    for: String,
    left: {
      type: [Number, String],
      default: 0
    },
    right: {
      type: [Number, String],
      default: 'auto'
    },
    value: Boolean
  },

  render(h, ctx) {
    const {
      children,
      listeners,
      props,
      data
    } = ctx;
    const newData = mergeData({
      staticClass: 'v-label',
      class: {
        'v-label--active': props.value,
        'v-label--is-disabled': props.disabled,
        ...functionalThemeClasses(ctx)
      },
      attrs: {
        for: props.for,
        'aria-hidden': !props.for
      },
      on: listeners,
      style: {
        left: convertToUnit(props.left),
        right: convertToUnit(props.right),
        position: props.absolute ? 'absolute' : 'relative'
      },
      ref: 'label'
    }, data);
    return h('label', Colorable.options.methods.setTextColor(props.focused && props.color, newData), children);
  }

});

var VMessages$1 = '';

// Styles
/* @vue/component */

var VMessages = mixins(Colorable, Themeable$1).extend({
  name: 'v-messages',
  props: {
    value: {
      type: Array,
      default: () => []
    }
  },
  methods: {
    genChildren() {
      return this.$createElement('transition-group', {
        staticClass: 'v-messages__wrapper',
        attrs: {
          name: 'message-transition',
          tag: 'div'
        }
      }, this.value.map(this.genMessage));
    },

    genMessage(message, key) {
      return this.$createElement('div', {
        staticClass: 'v-messages__message',
        key
      }, getSlot(this, 'default', {
        message,
        key
      }) || [message]);
    }

  },

  render(h) {
    return h('div', this.setTextColor(this.color, {
      staticClass: 'v-messages',
      class: this.themeClasses
    }), [this.genChildren()]);
  }

});

// Mixins
const baseMixins$j = mixins(Colorable, inject('form'), Themeable$1);
/* @vue/component */

var Validatable = baseMixins$j.extend({
  name: 'validatable',
  props: {
    disabled: {
      type: Boolean,
      default: null
    },
    error: Boolean,
    errorCount: {
      type: [Number, String],
      default: 1
    },
    errorMessages: {
      type: [String, Array],
      default: () => []
    },
    messages: {
      type: [String, Array],
      default: () => []
    },
    readonly: {
      type: Boolean,
      default: null
    },
    rules: {
      type: Array,
      default: () => []
    },
    success: Boolean,
    successMessages: {
      type: [String, Array],
      default: () => []
    },
    validateOnBlur: Boolean,
    value: {
      required: false
    }
  },

  data() {
    return {
      errorBucket: [],
      hasColor: false,
      hasFocused: false,
      hasInput: false,
      isFocused: false,
      isResetting: false,
      lazyValue: this.value,
      valid: false
    };
  },

  computed: {
    computedColor() {
      if (this.isDisabled) return undefined;
      if (this.color) return this.color; // It's assumed that if the input is on a
      // dark background, the user will want to
      // have a white color. If the entire app
      // is setup to be dark, then they will
      // like want to use their primary color

      if (this.isDark && !this.appIsDark) return 'white';else return 'primary';
    },

    hasError() {
      return this.internalErrorMessages.length > 0 || this.errorBucket.length > 0 || this.error;
    },

    // TODO: Add logic that allows the user to enable based
    // upon a good validation
    hasSuccess() {
      return this.internalSuccessMessages.length > 0 || this.success;
    },

    externalError() {
      return this.internalErrorMessages.length > 0 || this.error;
    },

    hasMessages() {
      return this.validationTarget.length > 0;
    },

    hasState() {
      if (this.isDisabled) return false;
      return this.hasSuccess || this.shouldValidate && this.hasError;
    },

    internalErrorMessages() {
      return this.genInternalMessages(this.errorMessages);
    },

    internalMessages() {
      return this.genInternalMessages(this.messages);
    },

    internalSuccessMessages() {
      return this.genInternalMessages(this.successMessages);
    },

    internalValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        this.lazyValue = val;
        this.$emit('input', val);
      }

    },

    isDisabled() {
      var _a;

      return (_a = this.disabled) !== null && _a !== void 0 ? _a : !!this.form && this.form.disabled;
    },

    isInteractive() {
      return !this.isDisabled && !this.isReadonly;
    },

    isReadonly() {
      var _a;

      return (_a = this.readonly) !== null && _a !== void 0 ? _a : !!this.form && this.form.readonly;
    },

    shouldValidate() {
      if (this.externalError) return true;
      if (this.isResetting) return false;
      return this.validateOnBlur ? this.hasFocused && !this.isFocused : this.hasInput || this.hasFocused;
    },

    validations() {
      return this.validationTarget.slice(0, Number(this.errorCount));
    },

    validationState() {
      if (this.isDisabled) return undefined;
      if (this.hasError && this.shouldValidate) return 'error';
      if (this.hasSuccess) return 'success';
      if (this.hasColor) return this.computedColor;
      return undefined;
    },

    validationTarget() {
      if (this.internalErrorMessages.length > 0) {
        return this.internalErrorMessages;
      } else if (this.successMessages && this.successMessages.length > 0) {
        return this.internalSuccessMessages;
      } else if (this.messages && this.messages.length > 0) {
        return this.internalMessages;
      } else if (this.shouldValidate) {
        return this.errorBucket;
      } else return [];
    }

  },
  watch: {
    rules: {
      handler(newVal, oldVal) {
        if (deepEqual(newVal, oldVal)) return;
        this.validate();
      },

      deep: true
    },

    internalValue() {
      // If it's the first time we're setting input,
      // mark it with hasInput
      this.hasInput = true;
      this.validateOnBlur || this.$nextTick(this.validate);
    },

    isFocused(val) {
      // Should not check validation
      // if disabled
      if (!val && !this.isDisabled) {
        this.hasFocused = true;
        this.validateOnBlur && this.$nextTick(this.validate);
      }
    },

    isResetting() {
      setTimeout(() => {
        this.hasInput = false;
        this.hasFocused = false;
        this.isResetting = false;
        this.validate();
      }, 0);
    },

    hasError(val) {
      if (this.shouldValidate) {
        this.$emit('update:error', val);
      }
    },

    value(val) {
      this.lazyValue = val;
    }

  },

  beforeMount() {
    this.validate();
  },

  created() {
    this.form && this.form.register(this);
  },

  beforeDestroy() {
    this.form && this.form.unregister(this);
  },

  methods: {
    genInternalMessages(messages) {
      if (!messages) return [];else if (Array.isArray(messages)) return messages;else return [messages];
    },

    /** @public */
    reset() {
      this.isResetting = true;
      this.internalValue = Array.isArray(this.internalValue) ? [] : null;
    },

    /** @public */
    resetValidation() {
      this.isResetting = true;
    },

    /** @public */
    validate(force = false, value) {
      const errorBucket = [];
      value = value || this.internalValue;
      if (force) this.hasInput = this.hasFocused = true;

      for (let index = 0; index < this.rules.length; index++) {
        const rule = this.rules[index];
        const valid = typeof rule === 'function' ? rule(value) : rule;

        if (valid === false || typeof valid === 'string') {
          errorBucket.push(valid || '');
        } else if (typeof valid !== 'boolean') {
          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this);
        }
      }

      this.errorBucket = errorBucket;
      this.valid = errorBucket.length === 0;
      return this.valid;
    }

  }
});

// Styles
const baseMixins$i = mixins(BindsAttrs, Validatable);
/* @vue/component */

var VInput = baseMixins$i.extend().extend({
  name: 'v-input',
  inheritAttrs: false,
  props: {
    appendIcon: String,
    backgroundColor: {
      type: String,
      default: ''
    },
    dense: Boolean,
    height: [Number, String],
    hideDetails: [Boolean, String],
    hideSpinButtons: Boolean,
    hint: String,
    id: String,
    label: String,
    loading: Boolean,
    persistentHint: Boolean,
    prependIcon: String,
    value: null
  },

  data() {
    return {
      lazyValue: this.value,
      hasMouseDown: false
    };
  },

  computed: {
    classes() {
      return {
        'v-input--has-state': this.hasState,
        'v-input--hide-details': !this.showDetails,
        'v-input--is-label-active': this.isLabelActive,
        'v-input--is-dirty': this.isDirty,
        'v-input--is-disabled': this.isDisabled,
        'v-input--is-focused': this.isFocused,
        // <v-switch loading>.loading === '' so we can't just cast to boolean
        'v-input--is-loading': this.loading !== false && this.loading != null,
        'v-input--is-readonly': this.isReadonly,
        'v-input--dense': this.dense,
        'v-input--hide-spin-buttons': this.hideSpinButtons,
        ...this.themeClasses
      };
    },

    computedId() {
      return this.id || `input-${this._uid}`;
    },

    hasDetails() {
      return this.messagesToDisplay.length > 0;
    },

    hasHint() {
      return !this.hasMessages && !!this.hint && (this.persistentHint || this.isFocused);
    },

    hasLabel() {
      return !!(this.$slots.label || this.label);
    },

    // Proxy for `lazyValue`
    // This allows an input
    // to function without
    // a provided model
    internalValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        this.lazyValue = val;
        this.$emit(this.$_modelEvent, val);
      }

    },

    isDirty() {
      return !!this.lazyValue;
    },

    isLabelActive() {
      return this.isDirty;
    },

    messagesToDisplay() {
      if (this.hasHint) return [this.hint];
      if (!this.hasMessages) return [];
      return this.validations.map(validation => {
        if (typeof validation === 'string') return validation;
        const validationResult = validation(this.internalValue);
        return typeof validationResult === 'string' ? validationResult : '';
      }).filter(message => message !== '');
    },

    showDetails() {
      return this.hideDetails === false || this.hideDetails === 'auto' && this.hasDetails;
    }

  },
  watch: {
    value(val) {
      this.lazyValue = val;
    }

  },

  beforeCreate() {
    // v-radio-group needs to emit a different event
    // https://github.com/vuetifyjs/vuetify/issues/4752
    this.$_modelEvent = this.$options.model && this.$options.model.event || 'input';
  },

  methods: {
    genContent() {
      return [this.genPrependSlot(), this.genControl(), this.genAppendSlot()];
    },

    genControl() {
      return this.$createElement('div', {
        staticClass: 'v-input__control',
        attrs: {
          title: this.attrs$.title
        }
      }, [this.genInputSlot(), this.genMessages()]);
    },

    genDefaultSlot() {
      return [this.genLabel(), this.$slots.default];
    },

    genIcon(type, cb, extraData = {}) {
      var _a;

      const icon = this[`${type}Icon`];
      const eventName = `click:${kebabCase(type)}`;
      const hasListener = !!(this.listeners$[eventName] || cb);
      const localeKey = {
        prepend: 'prependAction',
        prependInner: 'prependAction',
        append: 'appendAction',
        appendOuter: 'appendAction',
        clear: 'clear'
      }[type];
      const label = hasListener && localeKey ? this.$vuetify.lang.t(`$vuetify.input.${localeKey}`, (_a = this.label) !== null && _a !== void 0 ? _a : '') : undefined;
      const data = mergeData({
        attrs: {
          'aria-label': label,
          color: this.validationState,
          dark: this.dark,
          disabled: this.isDisabled,
          light: this.light,
          tabindex: type === 'clear' ? -1 : undefined
        },
        on: !hasListener ? undefined : {
          click: e => {
            e.preventDefault();
            e.stopPropagation();
            this.$emit(eventName, e);
            cb && cb(e);
          },
          // Container has g event that will
          // trigger menu open if enclosed
          mouseup: e => {
            e.preventDefault();
            e.stopPropagation();
          }
        }
      }, extraData);
      return this.$createElement('div', {
        staticClass: `v-input__icon`,
        class: type ? `v-input__icon--${kebabCase(type)}` : undefined
      }, [this.$createElement(__unplugin_components_95, data, icon)]);
    },

    genInputSlot() {
      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {
        staticClass: 'v-input__slot',
        style: {
          height: convertToUnit(this.height)
        },
        on: {
          click: this.onClick,
          mousedown: this.onMouseDown,
          mouseup: this.onMouseUp
        },
        ref: 'input-slot'
      }), [this.genDefaultSlot()]);
    },

    genLabel() {
      if (!this.hasLabel) return null;
      return this.$createElement(VLabel, {
        props: {
          color: this.validationState,
          dark: this.dark,
          disabled: this.isDisabled,
          focused: this.hasState,
          for: this.computedId,
          light: this.light
        }
      }, this.$slots.label || this.label);
    },

    genMessages() {
      if (!this.showDetails) return null;
      return this.$createElement(VMessages, {
        props: {
          color: this.hasHint ? '' : this.validationState,
          dark: this.dark,
          light: this.light,
          value: this.messagesToDisplay
        },
        attrs: {
          role: this.hasMessages ? 'alert' : null
        },
        scopedSlots: {
          default: props => getSlot(this, 'message', props)
        }
      });
    },

    genSlot(type, location, slot) {
      if (!slot.length) return null;
      const ref = `${type}-${location}`;
      return this.$createElement('div', {
        staticClass: `v-input__${ref}`,
        ref
      }, slot);
    },

    genPrependSlot() {
      const slot = [];

      if (this.$slots.prepend) {
        slot.push(this.$slots.prepend);
      } else if (this.prependIcon) {
        slot.push(this.genIcon('prepend'));
      }

      return this.genSlot('prepend', 'outer', slot);
    },

    genAppendSlot() {
      const slot = []; // Append icon for text field was really
      // an appended inner icon, v-text-field
      // will overwrite this method in order to obtain
      // backwards compat

      if (this.$slots.append) {
        slot.push(this.$slots.append);
      } else if (this.appendIcon) {
        slot.push(this.genIcon('append'));
      }

      return this.genSlot('append', 'outer', slot);
    },

    onClick(e) {
      this.$emit('click', e);
    },

    onMouseDown(e) {
      this.hasMouseDown = true;
      this.$emit('mousedown', e);
    },

    onMouseUp(e) {
      this.hasMouseDown = false;
      this.$emit('mouseup', e);
    }

  },

  render(h) {
    return h('div', this.setTextColor(this.validationState, {
      staticClass: 'v-input',
      class: this.classes
    }), this.genContent());
  }

});

var VCounter$1 = '';

// Styles
/* @vue/component */

var VCounter = mixins(Themeable$1).extend({
  name: 'v-counter',
  functional: true,
  props: {
    value: {
      type: [Number, String],
      default: ''
    },
    max: [Number, String]
  },

  render(h, ctx) {
    const {
      props
    } = ctx;
    const max = parseInt(props.max, 10);
    const value = parseInt(props.value, 10);
    const content = max ? `${value} / ${max}` : String(props.value);
    const isGreater = max && value > max;
    return h('div', {
      staticClass: 'v-counter',
      class: {
        'error--text': isGreater,
        ...functionalThemeClasses(ctx)
      }
    }, content);
  }

});

// Directives
function intersectable(options) {
  return Vue$1.extend({
    name: 'intersectable',
    data: () => ({
      isIntersecting: false
    }),

    mounted() {
      intersect.inserted(this.$el, {
        name: 'intersect',
        value: this.onObserve
      }, this.$vnode);
    },

    destroyed() {
      intersect.unbind(this.$el, {
        name: 'intersect',
        value: this.onObserve
      }, this.$vnode);
    },

    methods: {
      onObserve(entries, observer, isIntersecting) {
        this.isIntersecting = isIntersecting;
        if (!isIntersecting) return;

        for (let i = 0, length = options.onVisible.length; i < length; i++) {
          const callback = this[options.onVisible[i]];

          if (typeof callback === 'function') {
            callback();
            continue;
          }

          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options');
        }
      }

    }
  });
}

var VProgressLinear = '';

const baseMixins$h = mixins(Colorable, factory$3(['absolute', 'fixed', 'top', 'bottom']), Proxyable$1, Themeable$1);
/* @vue/component */

var __unplugin_components_12$2 = baseMixins$h.extend({
  name: 'v-progress-linear',
  directives: {
    intersect
  },
  props: {
    active: {
      type: Boolean,
      default: true
    },
    backgroundColor: {
      type: String,
      default: null
    },
    backgroundOpacity: {
      type: [Number, String],
      default: null
    },
    bufferValue: {
      type: [Number, String],
      default: 100
    },
    color: {
      type: String,
      default: 'primary'
    },
    height: {
      type: [Number, String],
      default: 4
    },
    indeterminate: Boolean,
    query: Boolean,
    reverse: Boolean,
    rounded: Boolean,
    stream: Boolean,
    striped: Boolean,
    value: {
      type: [Number, String],
      default: 0
    }
  },

  data() {
    return {
      internalLazyValue: this.value || 0,
      isVisible: true
    };
  },

  computed: {
    __cachedBackground() {
      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor || this.color, {
        staticClass: 'v-progress-linear__background',
        style: this.backgroundStyle
      }));
    },

    __cachedBar() {
      return this.$createElement(this.computedTransition, [this.__cachedBarType]);
    },

    __cachedBarType() {
      return this.indeterminate ? this.__cachedIndeterminate : this.__cachedDeterminate;
    },

    __cachedBuffer() {
      return this.$createElement('div', {
        staticClass: 'v-progress-linear__buffer',
        style: this.styles
      });
    },

    __cachedDeterminate() {
      return this.$createElement('div', this.setBackgroundColor(this.color, {
        staticClass: `v-progress-linear__determinate`,
        style: {
          width: convertToUnit(this.normalizedValue, '%')
        }
      }));
    },

    __cachedIndeterminate() {
      return this.$createElement('div', {
        staticClass: 'v-progress-linear__indeterminate',
        class: {
          'v-progress-linear__indeterminate--active': this.active
        }
      }, [this.genProgressBar('long'), this.genProgressBar('short')]);
    },

    __cachedStream() {
      if (!this.stream) return null;
      return this.$createElement('div', this.setTextColor(this.color, {
        staticClass: 'v-progress-linear__stream',
        style: {
          width: convertToUnit(100 - this.normalizedBuffer, '%')
        }
      }));
    },

    backgroundStyle() {
      const backgroundOpacity = this.backgroundOpacity == null ? this.backgroundColor ? 1 : 0.3 : parseFloat(this.backgroundOpacity);
      return {
        opacity: backgroundOpacity,
        [this.isReversed ? 'right' : 'left']: convertToUnit(this.normalizedValue, '%'),
        width: convertToUnit(Math.max(0, this.normalizedBuffer - this.normalizedValue), '%')
      };
    },

    classes() {
      return {
        'v-progress-linear--absolute': this.absolute,
        'v-progress-linear--fixed': this.fixed,
        'v-progress-linear--query': this.query,
        'v-progress-linear--reactive': this.reactive,
        'v-progress-linear--reverse': this.isReversed,
        'v-progress-linear--rounded': this.rounded,
        'v-progress-linear--striped': this.striped,
        'v-progress-linear--visible': this.isVisible,
        ...this.themeClasses
      };
    },

    computedTransition() {
      return this.indeterminate ? VFadeTransition : VSlideXTransition;
    },

    isReversed() {
      return this.$vuetify.rtl !== this.reverse;
    },

    normalizedBuffer() {
      return this.normalize(this.bufferValue);
    },

    normalizedValue() {
      return this.normalize(this.internalLazyValue);
    },

    reactive() {
      return Boolean(this.$listeners.change);
    },

    styles() {
      const styles = {};

      if (!this.active) {
        styles.height = 0;
      }

      if (!this.indeterminate && parseFloat(this.normalizedBuffer) !== 100) {
        styles.width = convertToUnit(this.normalizedBuffer, '%');
      }

      return styles;
    }

  },
  methods: {
    genContent() {
      const slot = getSlot(this, 'default', {
        value: this.internalLazyValue
      });
      if (!slot) return null;
      return this.$createElement('div', {
        staticClass: 'v-progress-linear__content'
      }, slot);
    },

    genListeners() {
      const listeners = this.$listeners;

      if (this.reactive) {
        listeners.click = this.onClick;
      }

      return listeners;
    },

    genProgressBar(name) {
      return this.$createElement('div', this.setBackgroundColor(this.color, {
        staticClass: 'v-progress-linear__indeterminate',
        class: {
          [name]: true
        }
      }));
    },

    onClick(e) {
      if (!this.reactive) return;
      const {
        width
      } = this.$el.getBoundingClientRect();
      this.internalValue = e.offsetX / width * 100;
    },

    onObserve(entries, observer, isIntersecting) {
      this.isVisible = isIntersecting;
    },

    normalize(value) {
      if (value < 0) return 0;
      if (value > 100) return 100;
      return parseFloat(value);
    }

  },

  render(h) {
    const data = {
      staticClass: 'v-progress-linear',
      attrs: {
        role: 'progressbar',
        'aria-valuemin': 0,
        'aria-valuemax': this.normalizedBuffer,
        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue
      },
      class: this.classes,
      directives: [{
        name: 'intersect',
        value: this.onObserve
      }],
      style: {
        bottom: this.bottom ? 0 : undefined,
        height: this.active ? convertToUnit(this.height) : 0,
        top: this.top ? 0 : undefined
      },
      on: this.genListeners()
    };
    return h('div', data, [this.__cachedStream, this.__cachedBackground, this.__cachedBuffer, this.__cachedBar, this.genContent()]);
  }

});

/**
 * Loadable
 *
 * @mixin
 *
 * Used to add linear progress bar to components
 * Can use a default bar with a specific color
 * or designate a custom progress linear bar
 */

/* @vue/component */

var Loadable = Vue$1.extend().extend({
  name: 'loadable',
  props: {
    loading: {
      type: [Boolean, String],
      default: false
    },
    loaderHeight: {
      type: [Number, String],
      default: 2
    }
  },
  methods: {
    genProgress() {
      if (this.loading === false) return null;
      return this.$slots.progress || this.$createElement(__unplugin_components_12$2, {
        props: {
          absolute: true,
          color: this.loading === true || this.loading === '' ? this.color || 'primary' : this.loading,
          height: this.loaderHeight,
          indeterminate: true
        }
      });
    }

  }
});

// Styles
const baseMixins$g = mixins(VInput, intersectable({
  onVisible: ['onResize', 'tryAutofocus']
}), Loadable);
const dirtyTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];
/* @vue/component */

var __unplugin_components_89 = baseMixins$g.extend().extend({
  name: 'v-text-field',
  directives: {
    resize: Resize$1,
    ripple: Ripple$1
  },
  inheritAttrs: false,
  props: {
    appendOuterIcon: String,
    autofocus: Boolean,
    clearable: Boolean,
    clearIcon: {
      type: String,
      default: '$clear'
    },
    counter: [Boolean, Number, String],
    counterValue: Function,
    filled: Boolean,
    flat: Boolean,
    fullWidth: Boolean,
    label: String,
    outlined: Boolean,
    placeholder: String,
    prefix: String,
    prependInnerIcon: String,
    persistentPlaceholder: Boolean,
    reverse: Boolean,
    rounded: Boolean,
    shaped: Boolean,
    singleLine: Boolean,
    solo: Boolean,
    soloInverted: Boolean,
    suffix: String,
    type: {
      type: String,
      default: 'text'
    }
  },
  data: () => ({
    badInput: false,
    labelWidth: 0,
    prefixWidth: 0,
    prependWidth: 0,
    initialValue: null,
    isBooted: false,
    isClearing: false
  }),
  computed: {
    classes() {
      return { ...VInput.options.computed.classes.call(this),
        'v-text-field': true,
        'v-text-field--full-width': this.fullWidth,
        'v-text-field--prefix': this.prefix,
        'v-text-field--single-line': this.isSingle,
        'v-text-field--solo': this.isSolo,
        'v-text-field--solo-inverted': this.soloInverted,
        'v-text-field--solo-flat': this.flat,
        'v-text-field--filled': this.filled,
        'v-text-field--is-booted': this.isBooted,
        'v-text-field--enclosed': this.isEnclosed,
        'v-text-field--reverse': this.reverse,
        'v-text-field--outlined': this.outlined,
        'v-text-field--placeholder': this.placeholder,
        'v-text-field--rounded': this.rounded,
        'v-text-field--shaped': this.shaped
      };
    },

    computedColor() {
      const computedColor = Validatable.options.computed.computedColor.call(this);
      if (!this.soloInverted || !this.isFocused) return computedColor;
      return this.color || 'primary';
    },

    computedCounterValue() {
      if (typeof this.counterValue === 'function') {
        return this.counterValue(this.internalValue);
      }

      return [...(this.internalValue || '').toString()].length;
    },

    hasCounter() {
      return this.counter !== false && this.counter != null;
    },

    hasDetails() {
      return VInput.options.computed.hasDetails.call(this) || this.hasCounter;
    },

    internalValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        this.lazyValue = val;
        this.$emit('input', this.lazyValue);
      }

    },

    isDirty() {
      var _a;

      return ((_a = this.lazyValue) === null || _a === void 0 ? void 0 : _a.toString().length) > 0 || this.badInput;
    },

    isEnclosed() {
      return this.filled || this.isSolo || this.outlined;
    },

    isLabelActive() {
      return this.isDirty || dirtyTypes.includes(this.type);
    },

    isSingle() {
      return this.isSolo || this.singleLine || this.fullWidth || // https://material.io/components/text-fields/#filled-text-field
      this.filled && !this.hasLabel;
    },

    isSolo() {
      return this.solo || this.soloInverted;
    },

    labelPosition() {
      let offset = this.prefix && !this.labelValue ? this.prefixWidth : 0;
      if (this.labelValue && this.prependWidth) offset -= this.prependWidth;
      return this.$vuetify.rtl === this.reverse ? {
        left: offset,
        right: 'auto'
      } : {
        left: 'auto',
        right: offset
      };
    },

    showLabel() {
      return this.hasLabel && !(this.isSingle && this.labelValue);
    },

    labelValue() {
      return this.isFocused || this.isLabelActive || this.persistentPlaceholder;
    }

  },
  watch: {
    // labelValue: 'setLabelWidth', // moved to mounted, see #11533
    outlined: 'setLabelWidth',

    label() {
      this.$nextTick(this.setLabelWidth);
    },

    prefix() {
      this.$nextTick(this.setPrefixWidth);
    },

    isFocused: 'updateValue',

    value(val) {
      this.lazyValue = val;
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('box')) {
      breaking('box', 'filled', this);
    }
    /* istanbul ignore next */


    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {
      breaking('browser-autocomplete', 'autocomplete', this);
    }
    /* istanbul ignore if */


    if (this.shaped && !(this.filled || this.outlined || this.isSolo)) {
      consoleWarn('shaped should be used with either filled or outlined', this);
    }
  },

  mounted() {
    // #11533
    this.$watch(() => this.labelValue, this.setLabelWidth);
    this.autofocus && this.tryAutofocus();
    requestAnimationFrame(() => {
      this.isBooted = true;
      requestAnimationFrame(() => {
        if (!this.isIntersecting) {
          this.onResize();
        }
      });
    });
  },

  methods: {
    /** @public */
    focus() {
      this.onFocus();
    },

    /** @public */
    blur(e) {
      // https://github.com/vuetifyjs/vuetify/issues/5913
      // Safari tab order gets broken if called synchronous
      window.requestAnimationFrame(() => {
        this.$refs.input && this.$refs.input.blur();
      });
    },

    clearableCallback() {
      this.$refs.input && this.$refs.input.focus();
      this.$nextTick(() => this.internalValue = null);
    },

    genAppendSlot() {
      const slot = [];

      if (this.$slots['append-outer']) {
        slot.push(this.$slots['append-outer']);
      } else if (this.appendOuterIcon) {
        slot.push(this.genIcon('appendOuter'));
      }

      return this.genSlot('append', 'outer', slot);
    },

    genPrependInnerSlot() {
      const slot = [];

      if (this.$slots['prepend-inner']) {
        slot.push(this.$slots['prepend-inner']);
      } else if (this.prependInnerIcon) {
        slot.push(this.genIcon('prependInner'));
      }

      return this.genSlot('prepend', 'inner', slot);
    },

    genIconSlot() {
      const slot = [];

      if (this.$slots.append) {
        slot.push(this.$slots.append);
      } else if (this.appendIcon) {
        slot.push(this.genIcon('append'));
      }

      return this.genSlot('append', 'inner', slot);
    },

    genInputSlot() {
      const input = VInput.options.methods.genInputSlot.call(this);
      const prepend = this.genPrependInnerSlot();

      if (prepend) {
        input.children = input.children || [];
        input.children.unshift(prepend);
      }

      return input;
    },

    genClearIcon() {
      if (!this.clearable) return null; // if the text field has no content then don't display the clear icon.
      // We add an empty div because other controls depend on a ref to append inner

      if (!this.isDirty) {
        return this.genSlot('append', 'inner', [this.$createElement('div')]);
      }

      return this.genSlot('append', 'inner', [this.genIcon('clear', this.clearableCallback)]);
    },

    genCounter() {
      var _a, _b, _c;

      if (!this.hasCounter) return null;
      const max = this.counter === true ? this.attrs$.maxlength : this.counter;
      const props = {
        dark: this.dark,
        light: this.light,
        max,
        value: this.computedCounterValue
      };
      return (_c = (_b = (_a = this.$scopedSlots).counter) === null || _b === void 0 ? void 0 : _b.call(_a, {
        props
      })) !== null && _c !== void 0 ? _c : this.$createElement(VCounter, {
        props
      });
    },

    genControl() {
      return VInput.options.methods.genControl.call(this);
    },

    genDefaultSlot() {
      return [this.genFieldset(), this.genTextFieldSlot(), this.genClearIcon(), this.genIconSlot(), this.genProgress()];
    },

    genFieldset() {
      if (!this.outlined) return null;
      return this.$createElement('fieldset', {
        attrs: {
          'aria-hidden': true
        }
      }, [this.genLegend()]);
    },

    genLabel() {
      if (!this.showLabel) return null;
      const data = {
        props: {
          absolute: true,
          color: this.validationState,
          dark: this.dark,
          disabled: this.isDisabled,
          focused: !this.isSingle && (this.isFocused || !!this.validationState),
          for: this.computedId,
          left: this.labelPosition.left,
          light: this.light,
          right: this.labelPosition.right,
          value: this.labelValue
        }
      };
      return this.$createElement(VLabel, data, this.$slots.label || this.label);
    },

    genLegend() {
      const width = !this.singleLine && (this.labelValue || this.isDirty) ? this.labelWidth : 0;
      const span = this.$createElement('span', {
        domProps: {
          innerHTML: '&#8203;'
        },
        staticClass: 'notranslate'
      });
      return this.$createElement('legend', {
        style: {
          width: !this.isSingle ? convertToUnit(width) : undefined
        }
      }, [span]);
    },

    genInput() {
      const listeners = Object.assign({}, this.listeners$);
      delete listeners.change; // Change should not be bound externally

      const {
        title,
        ...inputAttrs
      } = this.attrs$;
      return this.$createElement('input', {
        style: {},
        domProps: {
          value: this.type === 'number' && Object.is(this.lazyValue, -0) ? '-0' : this.lazyValue
        },
        attrs: { ...inputAttrs,
          autofocus: this.autofocus,
          disabled: this.isDisabled,
          id: this.computedId,
          placeholder: this.persistentPlaceholder || this.isFocused || !this.hasLabel ? this.placeholder : undefined,
          readonly: this.isReadonly,
          type: this.type
        },
        on: Object.assign(listeners, {
          blur: this.onBlur,
          input: this.onInput,
          focus: this.onFocus,
          keydown: this.onKeyDown
        }),
        ref: 'input',
        directives: [{
          name: 'resize',
          modifiers: {
            quiet: true
          },
          value: this.onResize
        }]
      });
    },

    genMessages() {
      if (!this.showDetails) return null;
      const messagesNode = VInput.options.methods.genMessages.call(this);
      const counterNode = this.genCounter();
      return this.$createElement('div', {
        staticClass: 'v-text-field__details'
      }, [messagesNode, counterNode]);
    },

    genTextFieldSlot() {
      return this.$createElement('div', {
        staticClass: 'v-text-field__slot'
      }, [this.genLabel(), this.prefix ? this.genAffix('prefix') : null, this.genInput(), this.suffix ? this.genAffix('suffix') : null]);
    },

    genAffix(type) {
      return this.$createElement('div', {
        class: `v-text-field__${type}`,
        ref: type
      }, this[type]);
    },

    onBlur(e) {
      this.isFocused = false;
      e && this.$nextTick(() => this.$emit('blur', e));
    },

    onClick() {
      if (this.isFocused || this.isDisabled || !this.$refs.input) return;
      this.$refs.input.focus();
    },

    onFocus(e) {
      if (!this.$refs.input) return;
      const root = attachedRoot(this.$el);
      if (!root) return;

      if (root.activeElement !== this.$refs.input) {
        return this.$refs.input.focus();
      }

      if (!this.isFocused) {
        this.isFocused = true;
        e && this.$emit('focus', e);
      }
    },

    onInput(e) {
      const target = e.target;
      this.internalValue = target.value;
      this.badInput = target.validity && target.validity.badInput;
    },

    onKeyDown(e) {
      if (e.keyCode === keyCodes.enter && this.lazyValue !== this.initialValue) {
        this.initialValue = this.lazyValue;
        this.$emit('change', this.initialValue);
      }

      this.$emit('keydown', e);
    },

    onMouseDown(e) {
      // Prevent input from being blurred
      if (e.target !== this.$refs.input) {
        e.preventDefault();
        e.stopPropagation();
      }

      VInput.options.methods.onMouseDown.call(this, e);
    },

    onMouseUp(e) {
      if (this.hasMouseDown) this.focus();
      VInput.options.methods.onMouseUp.call(this, e);
    },

    setLabelWidth() {
      if (!this.outlined) return;
      this.labelWidth = this.$refs.label ? Math.min(this.$refs.label.scrollWidth * 0.75 + 6, this.$el.offsetWidth - 24) : 0;
    },

    setPrefixWidth() {
      if (!this.$refs.prefix) return;
      this.prefixWidth = this.$refs.prefix.offsetWidth;
    },

    setPrependWidth() {
      if (!this.outlined || !this.$refs['prepend-inner']) return;
      this.prependWidth = this.$refs['prepend-inner'].offsetWidth;
    },

    tryAutofocus() {
      if (!this.autofocus || typeof document === 'undefined' || !this.$refs.input) return false;
      const root = attachedRoot(this.$el);
      if (!root || root.activeElement === this.$refs.input) return false;
      this.$refs.input.focus();
      return true;
    },

    updateValue(val) {
      // Sets validationState from validatable
      this.hasColor = val;

      if (val) {
        this.initialValue = this.lazyValue;
      } else if (this.initialValue !== this.lazyValue) {
        this.$emit('change', this.lazyValue);
      }
    },

    onResize() {
      this.setLabelWidth();
      this.setPrefixWidth();
      this.setPrependWidth();
    }

  }
});

/* @vue/component */

var Filterable = Vue$1.extend({
  name: 'filterable',
  props: {
    noDataText: {
      type: String,
      default: '$vuetify.noDataText'
    }
  }
});

// Styles
const defaultMenuProps$1 = {
  closeOnClick: false,
  closeOnContentClick: false,
  disableKeys: true,
  openOnClick: false,
  maxHeight: 304
}; // Types

const baseMixins$f = mixins(__unplugin_components_89, Comparable, Dependent, Filterable);
/* @vue/component */

var __unplugin_components_0$3 = baseMixins$f.extend().extend({
  name: 'v-select',
  directives: {
    ClickOutside: ClickOutside$1
  },
  props: {
    appendIcon: {
      type: String,
      default: '$dropdown'
    },
    attach: {
      type: null,
      default: false
    },
    cacheItems: Boolean,
    chips: Boolean,
    clearable: Boolean,
    deletableChips: Boolean,
    disableLookup: Boolean,
    eager: Boolean,
    hideSelected: Boolean,
    items: {
      type: Array,
      default: () => []
    },
    itemColor: {
      type: String,
      default: 'primary'
    },
    itemDisabled: {
      type: [String, Array, Function],
      default: 'disabled'
    },
    itemText: {
      type: [String, Array, Function],
      default: 'text'
    },
    itemValue: {
      type: [String, Array, Function],
      default: 'value'
    },
    menuProps: {
      type: [String, Array, Object],
      default: () => defaultMenuProps$1
    },
    multiple: Boolean,
    openOnClear: Boolean,
    returnObject: Boolean,
    smallChips: Boolean
  },

  data() {
    return {
      cachedItems: this.cacheItems ? this.items : [],
      menuIsBooted: false,
      isMenuActive: false,
      lastItem: 20,
      // As long as a value is defined, show it
      // Otherwise, check if multiple
      // to determine which default to provide
      lazyValue: this.value !== undefined ? this.value : this.multiple ? [] : undefined,
      selectedIndex: -1,
      selectedItems: [],
      keyboardLookupPrefix: '',
      keyboardLookupLastTime: 0
    };
  },

  computed: {
    /* All items that the select has */
    allItems() {
      return this.filterDuplicates(this.cachedItems.concat(this.items));
    },

    classes() {
      return { ...__unplugin_components_89.options.computed.classes.call(this),
        'v-select': true,
        'v-select--chips': this.hasChips,
        'v-select--chips--small': this.smallChips,
        'v-select--is-menu-active': this.isMenuActive,
        'v-select--is-multi': this.multiple
      };
    },

    /* Used by other components to overwrite */
    computedItems() {
      return this.allItems;
    },

    computedOwns() {
      return `list-${this._uid}`;
    },

    computedCounterValue() {
      var _a;

      const value = this.multiple ? this.selectedItems : ((_a = this.getText(this.selectedItems[0])) !== null && _a !== void 0 ? _a : '').toString();

      if (typeof this.counterValue === 'function') {
        return this.counterValue(value);
      }

      return value.length;
    },

    directives() {
      return this.isFocused ? [{
        name: 'click-outside',
        value: {
          handler: this.blur,
          closeConditional: this.closeConditional,
          include: () => this.getOpenDependentElements()
        }
      }] : undefined;
    },

    dynamicHeight() {
      return 'auto';
    },

    hasChips() {
      return this.chips || this.smallChips;
    },

    hasSlot() {
      return Boolean(this.hasChips || this.$scopedSlots.selection);
    },

    isDirty() {
      return this.selectedItems.length > 0;
    },

    listData() {
      const scopeId = this.$vnode && this.$vnode.context.$options._scopeId;
      const attrs = scopeId ? {
        [scopeId]: true
      } : {};
      return {
        attrs: { ...attrs,
          id: this.computedOwns
        },
        props: {
          action: this.multiple,
          color: this.itemColor,
          dense: this.dense,
          hideSelected: this.hideSelected,
          items: this.virtualizedItems,
          itemDisabled: this.itemDisabled,
          itemText: this.itemText,
          itemValue: this.itemValue,
          noDataText: this.$vuetify.lang.t(this.noDataText),
          selectedItems: this.selectedItems
        },
        on: {
          select: this.selectItem
        },
        scopedSlots: {
          item: this.$scopedSlots.item
        }
      };
    },

    staticList() {
      if (this.$slots['no-data'] || this.$slots['prepend-item'] || this.$slots['append-item']) {
        consoleError('assert: staticList should not be called if slots are used');
      }

      return this.$createElement(VSelectList, this.listData);
    },

    virtualizedItems() {
      return this.$_menuProps.auto ? this.computedItems : this.computedItems.slice(0, this.lastItem);
    },

    menuCanShow: () => true,

    $_menuProps() {
      let normalisedProps = typeof this.menuProps === 'string' ? this.menuProps.split(',') : this.menuProps;

      if (Array.isArray(normalisedProps)) {
        normalisedProps = normalisedProps.reduce((acc, p) => {
          acc[p.trim()] = true;
          return acc;
        }, {});
      }

      return { ...defaultMenuProps$1,
        eager: this.eager,
        value: this.menuCanShow && this.isMenuActive,
        nudgeBottom: normalisedProps.offsetY ? 1 : 0,
        ...normalisedProps
      };
    }

  },
  watch: {
    internalValue(val) {
      this.initialValue = val;
      this.setSelectedItems();

      if (this.multiple) {
        this.$nextTick(() => {
          var _a;

          (_a = this.$refs.menu) === null || _a === void 0 ? void 0 : _a.updateDimensions();
        });
      }

      if (this.hideSelected) {
        this.$nextTick(() => {
          this.onScroll();
        });
      }
    },

    isMenuActive(val) {
      window.setTimeout(() => this.onMenuActiveChange(val));
    },

    items: {
      immediate: true,

      handler(val) {
        if (this.cacheItems) {
          // Breaks vue-test-utils if
          // this isn't calculated
          // on the next tick
          this.$nextTick(() => {
            this.cachedItems = this.filterDuplicates(this.cachedItems.concat(val));
          });
        }

        this.setSelectedItems();
      }

    }
  },
  methods: {
    /** @public */
    blur(e) {
      __unplugin_components_89.options.methods.blur.call(this, e);
      this.isMenuActive = false;
      this.isFocused = false;
      this.selectedIndex = -1;
      this.setMenuIndex(-1);
    },

    /** @public */
    activateMenu() {
      if (!this.isInteractive || this.isMenuActive) return;
      this.isMenuActive = true;
    },

    clearableCallback() {
      this.setValue(this.multiple ? [] : null);
      this.setMenuIndex(-1);
      this.$nextTick(() => this.$refs.input && this.$refs.input.focus());
      if (this.openOnClear) this.isMenuActive = true;
    },

    closeConditional(e) {
      if (!this.isMenuActive) return true;
      return !this._isDestroyed && ( // Click originates from outside the menu content
      // Multiple selects don't close when an item is clicked
      !this.getContent() || !this.getContent().contains(e.target)) && // Click originates from outside the element
      this.$el && !this.$el.contains(e.target) && e.target !== this.$el;
    },

    filterDuplicates(arr) {
      const uniqueValues = new Map();

      for (let index = 0; index < arr.length; ++index) {
        const item = arr[index]; // Do not return null values if existant (#14421)

        if (item == null) {
          continue;
        } // Do not deduplicate headers or dividers (#12517)


        if (item.header || item.divider) {
          uniqueValues.set(item, item);
          continue;
        }

        const val = this.getValue(item); // TODO: comparator

        !uniqueValues.has(val) && uniqueValues.set(val, item);
      }

      return Array.from(uniqueValues.values());
    },

    findExistingIndex(item) {
      const itemValue = this.getValue(item);
      return (this.internalValue || []).findIndex(i => this.valueComparator(this.getValue(i), itemValue));
    },

    getContent() {
      return this.$refs.menu && this.$refs.menu.$refs.content;
    },

    genChipSelection(item, index) {
      const isDisabled = this.isDisabled || this.getDisabled(item);
      const isInteractive = !isDisabled && this.isInteractive;
      return this.$createElement(__unplugin_components_40, {
        staticClass: 'v-chip--select',
        attrs: {
          tabindex: -1
        },
        props: {
          close: this.deletableChips && isInteractive,
          disabled: isDisabled,
          inputValue: index === this.selectedIndex,
          small: this.smallChips
        },
        on: {
          click: e => {
            if (!isInteractive) return;
            e.stopPropagation();
            this.selectedIndex = index;
          },
          'click:close': () => this.onChipInput(item)
        },
        key: JSON.stringify(this.getValue(item))
      }, this.getText(item));
    },

    genCommaSelection(item, index, last) {
      const color = index === this.selectedIndex && this.computedColor;
      const isDisabled = this.isDisabled || this.getDisabled(item);
      return this.$createElement('div', this.setTextColor(color, {
        staticClass: 'v-select__selection v-select__selection--comma',
        class: {
          'v-select__selection--disabled': isDisabled
        },
        key: JSON.stringify(this.getValue(item))
      }), `${this.getText(item)}${last ? '' : ', '}`);
    },

    genDefaultSlot() {
      const selections = this.genSelections();
      const input = this.genInput(); // If the return is an empty array
      // push the input

      if (Array.isArray(selections)) {
        selections.push(input); // Otherwise push it into children
      } else {
        selections.children = selections.children || [];
        selections.children.push(input);
      }

      return [this.genFieldset(), this.$createElement('div', {
        staticClass: 'v-select__slot',
        directives: this.directives
      }, [this.genLabel(), this.prefix ? this.genAffix('prefix') : null, selections, this.suffix ? this.genAffix('suffix') : null, this.genClearIcon(), this.genIconSlot(), this.genHiddenInput()]), this.genMenu(), this.genProgress()];
    },

    genIcon(type, cb, extraData) {
      const icon = VInput.options.methods.genIcon.call(this, type, cb, extraData);

      if (type === 'append') {
        // Don't allow the dropdown icon to be focused
        icon.children[0].data = mergeData(icon.children[0].data, {
          attrs: {
            tabindex: icon.children[0].componentOptions.listeners && '-1',
            'aria-hidden': 'true',
            'aria-label': undefined
          }
        });
      }

      return icon;
    },

    genInput() {
      const input = __unplugin_components_89.options.methods.genInput.call(this);
      delete input.data.attrs.name;
      input.data = mergeData(input.data, {
        domProps: {
          value: null
        },
        attrs: {
          readonly: true,
          type: 'text',
          'aria-readonly': String(this.isReadonly),
          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),
          autocomplete: getObjectValueByPath(input.data, 'attrs.autocomplete', 'off'),
          placeholder: !this.isDirty && (this.persistentPlaceholder || this.isFocused || !this.hasLabel) ? this.placeholder : undefined
        },
        on: {
          keypress: this.onKeyPress
        }
      });
      return input;
    },

    genHiddenInput() {
      return this.$createElement('input', {
        domProps: {
          value: this.lazyValue
        },
        attrs: {
          type: 'hidden',
          name: this.attrs$.name
        }
      });
    },

    genInputSlot() {
      const render = __unplugin_components_89.options.methods.genInputSlot.call(this);
      render.data.attrs = { ...render.data.attrs,
        role: 'button',
        'aria-haspopup': 'listbox',
        'aria-expanded': String(this.isMenuActive),
        'aria-owns': this.computedOwns
      };
      return render;
    },

    genList() {
      // If there's no slots, we can use a cached VNode to improve performance
      if (this.$slots['no-data'] || this.$slots['prepend-item'] || this.$slots['append-item']) {
        return this.genListWithSlot();
      } else {
        return this.staticList;
      }
    },

    genListWithSlot() {
      const slots = ['prepend-item', 'no-data', 'append-item'].filter(slotName => this.$slots[slotName]).map(slotName => this.$createElement('template', {
        slot: slotName
      }, this.$slots[slotName])); // Requires destructuring due to Vue
      // modifying the `on` property when passed
      // as a referenced object

      return this.$createElement(VSelectList, { ...this.listData
      }, slots);
    },

    genMenu() {
      const props = this.$_menuProps;
      props.activator = this.$refs['input-slot'];
      if ('attach' in props) ;else if ( // TODO: make this a computed property or helper or something
      this.attach === '' || // If used as a boolean prop (<v-menu attach>)
      this.attach === true || // If bound to a boolean (<v-menu :attach="true">)
      this.attach === 'attach' // If bound as boolean prop in pug (v-menu(attach))
      ) {
        // Attach to root el so that
        // menu covers prepend/append icons
        props.attach = this.$el;
      } else {
        props.attach = this.attach;
      }
      return this.$createElement(__unplugin_components_0$4, {
        attrs: {
          role: undefined
        },
        props,
        on: {
          input: val => {
            this.isMenuActive = val;
            this.isFocused = val;
          },
          scroll: this.onScroll
        },
        ref: 'menu'
      }, [this.genList()]);
    },

    genSelections() {
      let length = this.selectedItems.length;
      const children = new Array(length);
      let genSelection;

      if (this.$scopedSlots.selection) {
        genSelection = this.genSlotSelection;
      } else if (this.hasChips) {
        genSelection = this.genChipSelection;
      } else {
        genSelection = this.genCommaSelection;
      }

      while (length--) {
        children[length] = genSelection(this.selectedItems[length], length, length === children.length - 1);
      }

      return this.$createElement('div', {
        staticClass: 'v-select__selections'
      }, children);
    },

    genSlotSelection(item, index) {
      return this.$scopedSlots.selection({
        attrs: {
          class: 'v-chip--select'
        },
        parent: this,
        item,
        index,
        select: e => {
          e.stopPropagation();
          this.selectedIndex = index;
        },
        selected: index === this.selectedIndex,
        disabled: !this.isInteractive
      });
    },

    getMenuIndex() {
      return this.$refs.menu ? this.$refs.menu.listIndex : -1;
    },

    getDisabled(item) {
      return getPropertyFromItem(item, this.itemDisabled, false);
    },

    getText(item) {
      return getPropertyFromItem(item, this.itemText, item);
    },

    getValue(item) {
      return getPropertyFromItem(item, this.itemValue, this.getText(item));
    },

    onBlur(e) {
      e && this.$emit('blur', e);
    },

    onChipInput(item) {
      if (this.multiple) this.selectItem(item);else this.setValue(null); // If all items have been deleted,
      // open `v-menu`

      if (this.selectedItems.length === 0) {
        this.isMenuActive = true;
      } else {
        this.isMenuActive = false;
      }

      this.selectedIndex = -1;
    },

    onClick(e) {
      if (!this.isInteractive) return;

      if (!this.isAppendInner(e.target)) {
        this.isMenuActive = true;
      }

      if (!this.isFocused) {
        this.isFocused = true;
        this.$emit('focus');
      }

      this.$emit('click', e);
    },

    onEscDown(e) {
      e.preventDefault();

      if (this.isMenuActive) {
        e.stopPropagation();
        this.isMenuActive = false;
      }
    },

    onKeyPress(e) {
      if (this.multiple || !this.isInteractive || this.disableLookup || e.key.length > 1 || e.ctrlKey || e.metaKey || e.altKey) return;
      const KEYBOARD_LOOKUP_THRESHOLD = 1000; // milliseconds

      const now = performance.now();

      if (now - this.keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {
        this.keyboardLookupPrefix = '';
      }

      this.keyboardLookupPrefix += e.key.toLowerCase();
      this.keyboardLookupLastTime = now;
      const index = this.allItems.findIndex(item => {
        var _a;

        const text = ((_a = this.getText(item)) !== null && _a !== void 0 ? _a : '').toString();
        return text.toLowerCase().startsWith(this.keyboardLookupPrefix);
      });
      const item = this.allItems[index];

      if (index !== -1) {
        this.lastItem = Math.max(this.lastItem, index + 5);
        this.setValue(this.returnObject ? item : this.getValue(item));
        this.$nextTick(() => this.$refs.menu.getTiles());
        setTimeout(() => this.setMenuIndex(index));
      }
    },

    onKeyDown(e) {
      if (this.isReadonly && e.keyCode !== keyCodes.tab) return;
      const keyCode = e.keyCode;
      const menu = this.$refs.menu;
      this.$emit('keydown', e);
      if (!menu) return; // If menu is active, allow default
      // listIndex change from menu

      if (this.isMenuActive && [keyCodes.up, keyCodes.down, keyCodes.home, keyCodes.end, keyCodes.enter].includes(keyCode)) {
        this.$nextTick(() => {
          menu.changeListIndex(e);
          this.$emit('update:list-index', menu.listIndex);
        });
      } // If enter, space, open menu


      if ([keyCodes.enter, keyCodes.space].includes(keyCode)) this.activateMenu(); // If menu is not active, up/down/home/end can do
      // one of 2 things. If multiple, opens the
      // menu, if not, will cycle through all
      // available options

      if (!this.isMenuActive && [keyCodes.up, keyCodes.down, keyCodes.home, keyCodes.end].includes(keyCode)) return this.onUpDown(e); // If escape deactivate the menu

      if (keyCode === keyCodes.esc) return this.onEscDown(e); // If tab - select item or close menu

      if (keyCode === keyCodes.tab) return this.onTabDown(e); // If space preventDefault

      if (keyCode === keyCodes.space) return this.onSpaceDown(e);
    },

    onMenuActiveChange(val) {
      // If menu is closing and mulitple
      // or menuIndex is already set
      // skip menu index recalculation
      if (this.multiple && !val || this.getMenuIndex() > -1) return;
      const menu = this.$refs.menu;
      if (!menu || !this.isDirty) return; // When menu opens, set index of first active item

      this.$refs.menu.getTiles();

      for (let i = 0; i < menu.tiles.length; i++) {
        if (menu.tiles[i].getAttribute('aria-selected') === 'true') {
          this.setMenuIndex(i);
          break;
        }
      }
    },

    onMouseUp(e) {
      // eslint-disable-next-line sonarjs/no-collapsible-if
      if (this.hasMouseDown && e.which !== 3 && this.isInteractive) {
        // If append inner is present
        // and the target is itself
        // or inside, toggle menu
        if (this.isAppendInner(e.target)) {
          this.$nextTick(() => this.isMenuActive = !this.isMenuActive);
        }
      }

      __unplugin_components_89.options.methods.onMouseUp.call(this, e);
    },

    onScroll() {
      if (!this.isMenuActive) {
        requestAnimationFrame(() => {
          const content = this.getContent();
          if (content) content.scrollTop = 0;
        });
      } else {
        if (this.lastItem > this.computedItems.length) return;
        const showMoreItems = this.getContent().scrollHeight - (this.getContent().scrollTop + this.getContent().clientHeight) < 200;

        if (showMoreItems) {
          this.lastItem += 20;
        }
      }
    },

    onSpaceDown(e) {
      e.preventDefault();
    },

    onTabDown(e) {
      const menu = this.$refs.menu;
      if (!menu) return;
      const activeTile = menu.activeTile; // An item that is selected by
      // menu-index should toggled

      if (!this.multiple && activeTile && this.isMenuActive) {
        e.preventDefault();
        e.stopPropagation();
        activeTile.click();
      } else {
        // If we make it here,
        // the user has no selected indexes
        // and is probably tabbing out
        this.blur(e);
      }
    },

    onUpDown(e) {
      const menu = this.$refs.menu;
      if (!menu) return;
      e.preventDefault(); // Multiple selects do not cycle their value
      // when pressing up or down, instead activate
      // the menu

      if (this.multiple) return this.activateMenu();
      const keyCode = e.keyCode; // Cycle through available values to achieve
      // select native behavior

      menu.isBooted = true;
      window.requestAnimationFrame(() => {
        menu.getTiles();
        if (!menu.hasClickableTiles) return this.activateMenu();

        switch (keyCode) {
          case keyCodes.up:
            menu.prevTile();
            break;

          case keyCodes.down:
            menu.nextTile();
            break;

          case keyCodes.home:
            menu.firstTile();
            break;

          case keyCodes.end:
            menu.lastTile();
            break;
        }

        this.selectItem(this.allItems[this.getMenuIndex()]);
      });
    },

    selectItem(item) {
      if (!this.multiple) {
        this.setValue(this.returnObject ? item : this.getValue(item));
        this.isMenuActive = false;
      } else {
        const internalValue = (this.internalValue || []).slice();
        const i = this.findExistingIndex(item);
        i !== -1 ? internalValue.splice(i, 1) : internalValue.push(item);
        this.setValue(internalValue.map(i => {
          return this.returnObject ? i : this.getValue(i);
        })); // There is no item to re-highlight
        // when selections are hidden

        if (this.hideSelected) {
          this.setMenuIndex(-1);
        } else {
          const index = this.allItems.indexOf(item);

          if (~index) {
            this.$nextTick(() => this.$refs.menu.getTiles());
            setTimeout(() => this.setMenuIndex(index));
          }
        }
      }
    },

    setMenuIndex(index) {
      this.$refs.menu && (this.$refs.menu.listIndex = index);
    },

    setSelectedItems() {
      const selectedItems = [];
      const values = !this.multiple || !Array.isArray(this.internalValue) ? [this.internalValue] : this.internalValue;

      for (const value of values) {
        const index = this.allItems.findIndex(v => this.valueComparator(this.getValue(v), this.getValue(value)));

        if (index > -1) {
          selectedItems.push(this.allItems[index]);
        }
      }

      this.selectedItems = selectedItems;
    },

    setValue(value) {
      if (!this.valueComparator(value, this.internalValue)) {
        this.internalValue = value;
        this.$emit('change', value);
      }
    },

    isAppendInner(target) {
      // return true if append inner is present
      // and the target is itself or inside
      const appendInner = this.$refs['append-inner'];
      return appendInner && (appendInner === target || appendInner.contains(target));
    }

  }
});

// Styles
const defaultMenuProps = { ...defaultMenuProps$1,
  offsetY: true,
  offsetOverflow: true,
  transition: false
};
/* @vue/component */

var __unplugin_components_53 = __unplugin_components_0$3.extend({
  name: 'v-autocomplete',
  props: {
    autoSelectFirst: {
      type: Boolean,
      default: false
    },
    filter: {
      type: Function,
      default: (item, queryText, itemText) => {
        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;
      }
    },
    hideNoData: Boolean,
    menuProps: {
      type: __unplugin_components_0$3.options.props.menuProps.type,
      default: () => defaultMenuProps
    },
    noFilter: Boolean,
    searchInput: {
      type: String
    }
  },

  data() {
    return {
      lazySearch: this.searchInput
    };
  },

  computed: {
    classes() {
      return { ...__unplugin_components_0$3.options.computed.classes.call(this),
        'v-autocomplete': true,
        'v-autocomplete--is-selecting-index': this.selectedIndex > -1
      };
    },

    computedItems() {
      return this.filteredItems;
    },

    selectedValues() {
      return this.selectedItems.map(item => this.getValue(item));
    },

    hasDisplayedItems() {
      return this.hideSelected ? this.filteredItems.some(item => !this.hasItem(item)) : this.filteredItems.length > 0;
    },

    currentRange() {
      if (this.selectedItem == null) return 0;
      return String(this.getText(this.selectedItem)).length;
    },

    filteredItems() {
      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems;
      return this.allItems.filter(item => {
        const value = getPropertyFromItem(item, this.itemText);
        const text = value != null ? String(value) : '';
        return this.filter(item, String(this.internalSearch), text);
      });
    },

    internalSearch: {
      get() {
        return this.lazySearch;
      },

      set(val) {
        // emit update event only when the new
        // search value is different from previous
        if (this.lazySearch !== val) {
          this.lazySearch = val;
          this.$emit('update:search-input', val);
        }
      }

    },

    isAnyValueAllowed() {
      return false;
    },

    isDirty() {
      return this.searchIsDirty || this.selectedItems.length > 0;
    },

    isSearching() {
      return this.multiple && this.searchIsDirty || this.searchIsDirty && this.internalSearch !== this.getText(this.selectedItem);
    },

    menuCanShow() {
      if (!this.isFocused) return false;
      return this.hasDisplayedItems || !this.hideNoData;
    },

    $_menuProps() {
      const props = __unplugin_components_0$3.options.computed.$_menuProps.call(this);
      props.contentClass = `v-autocomplete__content ${props.contentClass || ''}`.trim();
      return { ...defaultMenuProps,
        ...props
      };
    },

    searchIsDirty() {
      return this.internalSearch != null && this.internalSearch !== '';
    },

    selectedItem() {
      if (this.multiple) return null;
      return this.selectedItems.find(i => {
        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue));
      });
    },

    listData() {
      const data = __unplugin_components_0$3.options.computed.listData.call(this);
      data.props = { ...data.props,
        items: this.virtualizedItems,
        noFilter: this.noFilter || !this.isSearching || !this.filteredItems.length,
        searchInput: this.internalSearch
      };
      return data;
    }

  },
  watch: {
    filteredItems: 'onFilteredItemsChanged',
    internalValue: 'setSearch',

    isFocused(val) {
      if (val) {
        document.addEventListener('copy', this.onCopy);
        this.$refs.input && this.$refs.input.select();
      } else {
        document.removeEventListener('copy', this.onCopy);
        this.blur();
        this.updateSelf();
      }
    },

    isMenuActive(val) {
      if (val || !this.hasSlot) return;
      this.lazySearch = null;
    },

    items(val, oldVal) {
      // If we are focused, the menu
      // is not active, hide no data is enabled,
      // and items change
      // User is probably async loading
      // items, try to activate the menu
      if (!(oldVal && oldVal.length) && this.hideNoData && this.isFocused && !this.isMenuActive && val.length) this.activateMenu();
    },

    searchInput(val) {
      this.lazySearch = val;
    },

    internalSearch: 'onInternalSearchChanged',
    itemText: 'updateSelf'
  },

  created() {
    this.setSearch();
  },

  destroyed() {
    document.removeEventListener('copy', this.onCopy);
  },

  methods: {
    onFilteredItemsChanged(val, oldVal) {
      // TODO: How is the watcher triggered
      // for duplicate items? no idea
      if (val === oldVal) return;

      if (!this.autoSelectFirst) {
        const preSelectedItem = oldVal[this.$refs.menu.listIndex];

        if (preSelectedItem) {
          this.setMenuIndex(val.findIndex(i => i === preSelectedItem));
        } else {
          this.setMenuIndex(-1);
        }

        this.$emit('update:list-index', this.$refs.menu.listIndex);
      }

      this.$nextTick(() => {
        if (!this.internalSearch || val.length !== 1 && !this.autoSelectFirst) return;
        this.$refs.menu.getTiles();

        if (this.autoSelectFirst && val.length) {
          this.setMenuIndex(0);
          this.$emit('update:list-index', this.$refs.menu.listIndex);
        }
      });
    },

    onInternalSearchChanged() {
      this.updateMenuDimensions();
    },

    updateMenuDimensions() {
      // Type from menuable is not making it through
      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions();
    },

    changeSelectedIndex(keyCode) {
      // Do not allow changing of selectedIndex
      // when search is dirty
      if (this.searchIsDirty) return;

      if (this.multiple && keyCode === keyCodes.left) {
        if (this.selectedIndex === -1) {
          this.selectedIndex = this.selectedItems.length - 1;
        } else {
          this.selectedIndex--;
        }
      } else if (this.multiple && keyCode === keyCodes.right) {
        if (this.selectedIndex >= this.selectedItems.length - 1) {
          this.selectedIndex = -1;
        } else {
          this.selectedIndex++;
        }
      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {
        this.deleteCurrentItem();
      }
    },

    deleteCurrentItem() {
      const curIndex = this.selectedIndex;
      const curItem = this.selectedItems[curIndex]; // Do nothing if input or item is disabled

      if (!this.isInteractive || this.getDisabled(curItem)) return;
      const lastIndex = this.selectedItems.length - 1; // Select the last item if
      // there is no selection

      if (this.selectedIndex === -1 && lastIndex !== 0) {
        this.selectedIndex = lastIndex;
        return;
      }

      const length = this.selectedItems.length;
      const nextIndex = curIndex !== length - 1 ? curIndex : curIndex - 1;
      const nextItem = this.selectedItems[nextIndex];

      if (!nextItem) {
        this.setValue(this.multiple ? [] : null);
      } else {
        this.selectItem(curItem);
      }

      this.selectedIndex = nextIndex;
    },

    clearableCallback() {
      this.internalSearch = null;
      __unplugin_components_0$3.options.methods.clearableCallback.call(this);
    },

    genInput() {
      const input = __unplugin_components_89.options.methods.genInput.call(this);
      input.data = mergeData(input.data, {
        attrs: {
          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),
          autocomplete: getObjectValueByPath(input.data, 'attrs.autocomplete', 'off')
        },
        domProps: {
          value: this.internalSearch
        }
      });
      return input;
    },

    genInputSlot() {
      const slot = __unplugin_components_0$3.options.methods.genInputSlot.call(this);
      slot.data.attrs.role = 'combobox';
      return slot;
    },

    genSelections() {
      return this.hasSlot || this.multiple ? __unplugin_components_0$3.options.methods.genSelections.call(this) : [];
    },

    onClick(e) {
      if (!this.isInteractive) return;
      this.selectedIndex > -1 ? this.selectedIndex = -1 : this.onFocus();
      if (!this.isAppendInner(e.target)) this.activateMenu();
    },

    onInput(e) {
      if (this.selectedIndex > -1 || !e.target) return;
      const target = e.target;
      const value = target.value; // If typing and menu is not currently active

      if (target.value) this.activateMenu();
      if (!this.multiple && value === '') this.deleteCurrentItem();
      this.internalSearch = value;
      this.badInput = target.validity && target.validity.badInput;
    },

    onKeyDown(e) {
      const keyCode = e.keyCode;

      if (e.ctrlKey || ![keyCodes.home, keyCodes.end].includes(keyCode)) {
        __unplugin_components_0$3.options.methods.onKeyDown.call(this, e);
      } // The ordering is important here
      // allows new value to be updated
      // and then moves the index to the
      // proper location


      this.changeSelectedIndex(keyCode);
    },

    onSpaceDown(e) {},

    onTabDown(e) {
      __unplugin_components_0$3.options.methods.onTabDown.call(this, e);
      this.updateSelf();
    },

    onUpDown(e) {
      // Prevent screen from scrolling
      e.preventDefault(); // For autocomplete / combobox, cycling
      // interfers with native up/down behavior
      // instead activate the menu

      this.activateMenu();
    },

    selectItem(item) {
      __unplugin_components_0$3.options.methods.selectItem.call(this, item);
      this.setSearch();
    },

    setSelectedItems() {
      __unplugin_components_0$3.options.methods.setSelectedItems.call(this); // #4273 Don't replace if searching
      // #4403 Don't replace if focused

      if (!this.isFocused) this.setSearch();
    },

    setSearch() {
      // Wait for nextTick so selectedItem
      // has had time to update
      this.$nextTick(() => {
        if (!this.multiple || !this.internalSearch || !this.isMenuActive) {
          this.internalSearch = !this.selectedItems.length || this.multiple || this.hasSlot ? null : this.getText(this.selectedItem);
        }
      });
    },

    updateSelf() {
      if (!this.searchIsDirty && !this.internalValue) return;

      if (!this.multiple && !this.valueComparator(this.internalSearch, this.getValue(this.internalValue))) {
        this.setSearch();
      }
    },

    hasItem(item) {
      return this.selectedValues.indexOf(this.getValue(item)) > -1;
    },

    onCopy(event) {
      var _a, _b;

      if (this.selectedIndex === -1) return;
      const currentItem = this.selectedItems[this.selectedIndex];
      const currentItemText = this.getText(currentItem);
      (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', currentItemText);
      (_b = event.clipboardData) === null || _b === void 0 ? void 0 : _b.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText);
      event.preventDefault();
    }

  }
});

/* @vue/component */

var Mobile = Vue$1.extend({
  name: 'mobile',
  props: {
    mobileBreakpoint: {
      type: [Number, String],

      default() {
        // Avoid destroying unit
        // tests for users
        return this.$vuetify ? this.$vuetify.breakpoint.mobileBreakpoint : undefined;
      },

      validator: v => !isNaN(Number(v)) || ['xs', 'sm', 'md', 'lg', 'xl'].includes(String(v))
    }
  },
  computed: {
    isMobile() {
      const {
        mobile,
        width,
        name,
        mobileBreakpoint
      } = this.$vuetify.breakpoint; // Check if local mobileBreakpoint matches
      // the application's mobileBreakpoint

      if (mobileBreakpoint === this.mobileBreakpoint) return mobile;
      const mobileWidth = parseInt(this.mobileBreakpoint, 10);
      const isNumber = !isNaN(mobileWidth);
      return isNumber ? width < mobileWidth : name === this.mobileBreakpoint;
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('mobile-break-point')) {
      deprecate('mobile-break-point', 'mobile-breakpoint', this);
    }
  }

});

var VDialog = '';

var VOverlay$1 = '';

// Styles
/* @vue/component */

var VOverlay = mixins(Colorable, Themeable$1, Toggleable$1).extend({
  name: 'v-overlay',
  props: {
    absolute: Boolean,
    color: {
      type: String,
      default: '#212121'
    },
    dark: {
      type: Boolean,
      default: true
    },
    opacity: {
      type: [Number, String],
      default: 0.46
    },
    value: {
      default: true
    },
    zIndex: {
      type: [Number, String],
      default: 5
    }
  },
  computed: {
    __scrim() {
      const data = this.setBackgroundColor(this.color, {
        staticClass: 'v-overlay__scrim',
        style: {
          opacity: this.computedOpacity
        }
      });
      return this.$createElement('div', data);
    },

    classes() {
      return {
        'v-overlay--absolute': this.absolute,
        'v-overlay--active': this.isActive,
        ...this.themeClasses
      };
    },

    computedOpacity() {
      return Number(this.isActive ? this.opacity : 0);
    },

    styles() {
      return {
        zIndex: this.zIndex
      };
    }

  },
  methods: {
    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-overlay__content'
      }, this.$slots.default);
    }

  },

  render(h) {
    const children = [this.__scrim];
    if (this.isActive) children.push(this.genContent());
    return h('div', {
      staticClass: 'v-overlay',
      on: this.$listeners,
      class: this.classes,
      style: this.styles
    }, children);
  }

});

// Components
/* @vue/component */

var Overlayable = Vue$1.extend().extend({
  name: 'overlayable',
  props: {
    hideOverlay: Boolean,
    overlayColor: String,
    overlayOpacity: [Number, String]
  },

  data() {
    return {
      animationFrame: 0,
      overlay: null
    };
  },

  watch: {
    hideOverlay(value) {
      if (!this.isActive) return;
      if (value) this.removeOverlay();else this.genOverlay();
    }

  },

  beforeDestroy() {
    this.removeOverlay();
  },

  methods: {
    createOverlay() {
      const overlay = new VOverlay({
        propsData: {
          absolute: this.absolute,
          value: false,
          color: this.overlayColor,
          opacity: this.overlayOpacity
        }
      });
      overlay.$mount();
      const parent = this.absolute ? this.$el.parentNode : document.querySelector('[data-app]');
      parent && parent.insertBefore(overlay.$el, parent.firstChild);
      this.overlay = overlay;
    },

    genOverlay() {
      this.hideScroll();
      if (this.hideOverlay) return;
      if (!this.overlay) this.createOverlay();
      this.animationFrame = requestAnimationFrame(() => {
        if (!this.overlay) return;

        if (this.activeZIndex !== undefined) {
          this.overlay.zIndex = String(this.activeZIndex - 1);
        } else if (this.$el) {
          this.overlay.zIndex = getZIndex(this.$el);
        }

        this.overlay.value = true;
      });
      return true;
    },

    /** removeOverlay(false) will not restore the scollbar afterwards */
    removeOverlay(showScroll = true) {
      if (this.overlay) {
        addOnceEventListener(this.overlay.$el, 'transitionend', () => {
          if (!this.overlay || !this.overlay.$el || !this.overlay.$el.parentNode || this.overlay.value || this.isActive) return;
          this.overlay.$el.parentNode.removeChild(this.overlay.$el);
          this.overlay.$destroy();
          this.overlay = null;
        }); // Cancel animation frame in case
        // overlay is removed before it
        // has finished its animation

        cancelAnimationFrame(this.animationFrame);
        this.overlay.value = false;
      }

      showScroll && this.showScroll();
    },

    scrollListener(e) {
      if ('key' in e) {
        if (['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName) || // https://github.com/vuetifyjs/vuetify/issues/4715
        e.target.isContentEditable) return;
        const up = [keyCodes.up, keyCodes.pageup];
        const down = [keyCodes.down, keyCodes.pagedown];

        if (up.includes(e.keyCode)) {
          e.deltaY = -1;
        } else if (down.includes(e.keyCode)) {
          e.deltaY = 1;
        } else {
          return;
        }
      }

      if (e.target === this.overlay || e.type !== 'keydown' && e.target === document.body || this.checkPath(e)) e.preventDefault();
    },

    hasScrollbar(el) {
      if (!el || el.nodeType !== Node.ELEMENT_NODE) return false;
      const style = window.getComputedStyle(el);
      return (['auto', 'scroll'].includes(style.overflowY) || el.tagName === 'SELECT') && el.scrollHeight > el.clientHeight || ['auto', 'scroll'].includes(style.overflowX) && el.scrollWidth > el.clientWidth;
    },

    shouldScroll(el, e) {
      if (el.hasAttribute('data-app')) return false;
      const dir = e.shiftKey || e.deltaX ? 'x' : 'y';
      const delta = dir === 'y' ? e.deltaY : e.deltaX || e.deltaY;
      let alreadyAtStart;
      let alreadyAtEnd;

      if (dir === 'y') {
        alreadyAtStart = el.scrollTop === 0;
        alreadyAtEnd = el.scrollTop + el.clientHeight === el.scrollHeight;
      } else {
        alreadyAtStart = el.scrollLeft === 0;
        alreadyAtEnd = el.scrollLeft + el.clientWidth === el.scrollWidth;
      }

      const scrollingUp = delta < 0;
      const scrollingDown = delta > 0;
      if (!alreadyAtStart && scrollingUp) return true;
      if (!alreadyAtEnd && scrollingDown) return true;

      if ((alreadyAtStart || alreadyAtEnd) && el.parentNode) {
        return this.shouldScroll(el.parentNode, e);
      }

      return false;
    },

    isInside(el, parent) {
      if (el === parent) {
        return true;
      } else if (el === null || el === document.body) {
        return false;
      } else {
        return this.isInside(el.parentNode, parent);
      }
    },

    checkPath(e) {
      const path = composedPath(e);

      if (e.type === 'keydown' && path[0] === document.body) {
        const dialog = this.$refs.dialog; // getSelection returns null in firefox in some edge cases, can be ignored

        const selected = window.getSelection().anchorNode;

        if (dialog && this.hasScrollbar(dialog) && this.isInside(selected, dialog)) {
          return !this.shouldScroll(dialog, e);
        }

        return true;
      }

      for (let index = 0; index < path.length; index++) {
        const el = path[index];
        if (el === document) return true;
        if (el === document.documentElement) return true;
        if (el === this.$refs.content) return true;
        if (this.hasScrollbar(el)) return !this.shouldScroll(el, e);
      }

      return true;
    },

    hideScroll() {
      if (this.$vuetify.breakpoint.smAndDown) {
        document.documentElement.classList.add('overflow-y-hidden');
      } else {
        addPassiveEventListener(window, 'wheel', this.scrollListener, {
          passive: false
        });
        window.addEventListener('keydown', this.scrollListener);
      }
    },

    showScroll() {
      document.documentElement.classList.remove('overflow-y-hidden');
      window.removeEventListener('wheel', this.scrollListener);
      window.removeEventListener('keydown', this.scrollListener);
    }

  }
});

// Styles
const baseMixins$e = mixins(Dependent, Detachable, Overlayable, Returnable, Stackable, Activatable);
/* @vue/component */

var __unplugin_components_104 = baseMixins$e.extend({
  name: 'v-dialog',
  directives: {
    ClickOutside: ClickOutside$1
  },
  props: {
    dark: Boolean,
    disabled: Boolean,
    fullscreen: Boolean,
    light: Boolean,
    maxWidth: [String, Number],
    noClickAnimation: Boolean,
    origin: {
      type: String,
      default: 'center center'
    },
    persistent: Boolean,
    retainFocus: {
      type: Boolean,
      default: true
    },
    scrollable: Boolean,
    transition: {
      type: [String, Boolean],
      default: 'dialog-transition'
    },
    width: [String, Number]
  },

  data() {
    return {
      activatedBy: null,
      animate: false,
      animateTimeout: -1,
      stackMinZIndex: 200,
      previousActiveElement: null
    };
  },

  computed: {
    classes() {
      return {
        [`v-dialog ${this.contentClass}`.trim()]: true,
        'v-dialog--active': this.isActive,
        'v-dialog--persistent': this.persistent,
        'v-dialog--fullscreen': this.fullscreen,
        'v-dialog--scrollable': this.scrollable,
        'v-dialog--animated': this.animate
      };
    },

    contentClasses() {
      return {
        'v-dialog__content': true,
        'v-dialog__content--active': this.isActive
      };
    },

    hasActivator() {
      return Boolean(!!this.$slots.activator || !!this.$scopedSlots.activator);
    }

  },
  watch: {
    isActive(val) {
      var _a;

      if (val) {
        this.show();
        this.hideScroll();
      } else {
        this.removeOverlay();
        this.unbind();
        (_a = this.previousActiveElement) === null || _a === void 0 ? void 0 : _a.focus();
      }
    },

    fullscreen(val) {
      if (!this.isActive) return;

      if (val) {
        this.hideScroll();
        this.removeOverlay(false);
      } else {
        this.showScroll();
        this.genOverlay();
      }
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('full-width')) {
      removed('full-width', this);
    }
  },

  beforeMount() {
    this.$nextTick(() => {
      this.isBooted = this.isActive;
      this.isActive && this.show();
    });
  },

  beforeDestroy() {
    if (typeof window !== 'undefined') this.unbind();
  },

  methods: {
    animateClick() {
      this.animate = false; // Needed for when clicking very fast
      // outside of the dialog

      this.$nextTick(() => {
        this.animate = true;
        window.clearTimeout(this.animateTimeout);
        this.animateTimeout = window.setTimeout(() => this.animate = false, 150);
      });
    },

    closeConditional(e) {
      const target = e.target; // Ignore the click if the dialog is closed or destroyed,
      // if it was on an element inside the content,
      // if it was dragged onto the overlay (#6969),
      // or if this isn't the topmost dialog (#9907)

      return !(this._isDestroyed || !this.isActive || this.$refs.content.contains(target) || this.overlay && target && !this.overlay.$el.contains(target)) && this.activeZIndex >= this.getMaxZIndex();
    },

    hideScroll() {
      if (this.fullscreen) {
        document.documentElement.classList.add('overflow-y-hidden');
      } else {
        Overlayable.options.methods.hideScroll.call(this);
      }
    },

    show() {
      !this.fullscreen && !this.hideOverlay && this.genOverlay(); // Double nextTick to wait for lazy content to be generated

      this.$nextTick(() => {
        this.$nextTick(() => {
          var _a, _b;

          if (!((_a = this.$refs.dialog) === null || _a === void 0 ? void 0 : _a.contains(document.activeElement))) {
            this.previousActiveElement = document.activeElement;
            (_b = this.$refs.dialog) === null || _b === void 0 ? void 0 : _b.focus();
          }

          this.bind();
        });
      });
    },

    bind() {
      window.addEventListener('focusin', this.onFocusin);
    },

    unbind() {
      window.removeEventListener('focusin', this.onFocusin);
    },

    onClickOutside(e) {
      this.$emit('click:outside', e);

      if (this.persistent) {
        this.noClickAnimation || this.animateClick();
      } else {
        this.isActive = false;
      }
    },

    onKeydown(e) {
      if (e.keyCode === keyCodes.esc && !this.getOpenDependents().length) {
        if (!this.persistent) {
          this.isActive = false;
          const activator = this.getActivator();
          this.$nextTick(() => activator && activator.focus());
        } else if (!this.noClickAnimation) {
          this.animateClick();
        }
      }

      this.$emit('keydown', e);
    },

    // On focus change, wrap focus to stay inside the dialog
    // https://github.com/vuetifyjs/vuetify/issues/6892
    onFocusin(e) {
      if (!e || !this.retainFocus) return;
      const target = e.target;

      if (!!target && this.$refs.dialog && // It isn't the document or the dialog body
      ![document, this.$refs.dialog].includes(target) && // It isn't inside the dialog body
      !this.$refs.dialog.contains(target) && // We're the topmost dialog
      this.activeZIndex >= this.getMaxZIndex() && // It isn't inside a dependent element (like a menu)
      !this.getOpenDependentElements().some(el => el.contains(target)) // So we must have focused something outside the dialog and its children
      ) {
        // Find and focus the first available element inside the dialog
        const focusable = this.$refs.dialog.querySelectorAll('button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])');
        const el = [...focusable].find(el => !el.hasAttribute('disabled') && !el.matches('[tabindex="-1"]'));
        el && el.focus();
      }
    },

    genContent() {
      return this.showLazyContent(() => [this.$createElement(VThemeProvider, {
        props: {
          root: true,
          light: this.light,
          dark: this.dark
        }
      }, [this.$createElement('div', {
        class: this.contentClasses,
        attrs: {
          role: 'dialog',
          'aria-modal': this.hideOverlay ? undefined : 'true',
          ...this.getScopeIdAttrs()
        },
        on: {
          keydown: this.onKeydown
        },
        style: {
          zIndex: this.activeZIndex
        },
        ref: 'content'
      }, [this.genTransition()])])]);
    },

    genTransition() {
      const content = this.genInnerContent();
      if (!this.transition) return content;
      return this.$createElement('transition', {
        props: {
          name: this.transition,
          origin: this.origin,
          appear: true
        }
      }, [content]);
    },

    genInnerContent() {
      const data = {
        class: this.classes,
        attrs: {
          tabindex: this.isActive ? 0 : undefined
        },
        ref: 'dialog',
        directives: [{
          name: 'click-outside',
          value: {
            handler: this.onClickOutside,
            closeConditional: this.closeConditional,
            include: this.getOpenDependentElements
          }
        }, {
          name: 'show',
          value: this.isActive
        }],
        style: {
          transformOrigin: this.origin
        }
      };

      if (!this.fullscreen) {
        data.style = { ...data.style,
          maxWidth: convertToUnit(this.maxWidth),
          width: convertToUnit(this.width)
        };
      }

      return this.$createElement('div', data, this.getContentSlot());
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'v-dialog__container',
      class: {
        'v-dialog__container--attached': this.attach === '' || this.attach === true || this.attach === 'attach'
      }
    }, [this.genActivator(), this.genContent()]);
  }

});

var Mouse = Vue$1.extend({
  name: 'mouse',
  methods: {
    getDefaultMouseEventHandlers(suffix, getData, eventFirst = false) {
      const listeners = Object.keys(this.$listeners).filter(key => key.endsWith(suffix)).reduce((acc, key) => {
        acc[key] = {
          event: key.slice(0, -suffix.length)
        };
        return acc;
      }, {});
      return this.getMouseEventHandlers({ ...listeners,
        ['contextmenu' + suffix]: {
          event: 'contextmenu',
          prevent: true,
          result: false
        }
      }, getData, eventFirst);
    },

    getMouseEventHandlers(events, getData, eventFirst = false) {
      const on = {};

      for (const event in events) {
        const eventOptions = events[event];
        if (!this.$listeners[event]) continue; // TODO somehow pull in modifiers

        const prefix = eventOptions.passive ? '&' : (eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : '');
        const key = prefix + eventOptions.event;

        const handler = e => {
          var _a, _b;

          const mouseEvent = e;

          if (eventOptions.button === undefined || mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button) {
            if (eventOptions.prevent) {
              e.preventDefault();
            }

            if (eventOptions.stop) {
              e.stopPropagation();
            } // Due to TouchEvent target always returns the element that is first placed
            // Even if touch point has since moved outside the interactive area of that element
            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target
            // This block of code aims to make sure touchEvent is always dispatched from the element that is being pointed at


            if (e && 'touches' in e) {
              const classSeparator = ' ';
              const eventTargetClasses = (_a = e.currentTarget) === null || _a === void 0 ? void 0 : _a.className.split(classSeparator);
              const currentTargets = document.elementsFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY); // Get "the same kind" current hovering target by checking
              // If element has the same class of initial touch start element (which has touch event listener registered)

              const currentTarget = currentTargets.find(t => t.className.split(classSeparator).some(c => eventTargetClasses.includes(c)));

              if (currentTarget && !((_b = e.target) === null || _b === void 0 ? void 0 : _b.isSameNode(currentTarget))) {
                currentTarget.dispatchEvent(new TouchEvent(e.type, {
                  changedTouches: e.changedTouches,
                  targetTouches: e.targetTouches,
                  touches: e.touches
                }));
                return;
              }
            } // TODO: VCalendar emits the calendar event as the first argument,
            // but it really should be the native event instead so modifiers can be used


            if (eventFirst) {
              this.$emit(event, e, getData(e));
            } else {
              this.$emit(event, getData(e), e);
            }
          }

          return eventOptions.result;
        };

        if (key in on) {
          /* istanbul ignore next */
          if (Array.isArray(on[key])) {
            on[key].push(handler);
          } else {
            on[key] = [on[key], handler];
          }
        } else {
          on[key] = handler;
        }
      }

      return on;
    }

  }
});

var VCard = '';

// Styles
/* @vue/component */

var __unplugin_components_76 = mixins(Loadable, Routable, VSheet).extend({
  name: 'v-card',
  props: {
    flat: Boolean,
    hover: Boolean,
    img: String,
    link: Boolean,
    loaderHeight: {
      type: [Number, String],
      default: 4
    },
    raised: Boolean
  },
  computed: {
    classes() {
      return {
        'v-card': true,
        ...Routable.options.computed.classes.call(this),
        'v-card--flat': this.flat,
        'v-card--hover': this.hover,
        'v-card--link': this.isClickable,
        'v-card--loading': this.loading,
        'v-card--disabled': this.disabled,
        'v-card--raised': this.raised,
        ...VSheet.options.computed.classes.call(this)
      };
    },

    styles() {
      const style = { ...VSheet.options.computed.styles.call(this)
      };

      if (this.img) {
        style.background = `url("${this.img}") center center / cover no-repeat`;
      }

      return style;
    }

  },
  methods: {
    genProgress() {
      const render = Loadable.options.methods.genProgress.call(this);
      if (!render) return null;
      return this.$createElement('div', {
        staticClass: 'v-card__progress',
        key: 'progress'
      }, [render]);
    }

  },

  render(h) {
    const {
      tag,
      data
    } = this.generateRouteLink();
    data.style = this.styles;

    if (this.isClickable) {
      data.attrs = data.attrs || {};
      data.attrs.tabindex = 0;
    }

    return h(tag, this.setBackgroundColor(this.color, data), [this.genProgress(), this.$slots.default]);
  }

});

const VCardActions = createSimpleFunctional('v-card__actions');
createSimpleFunctional('v-card__subtitle');
const VCardText = createSimpleFunctional('v-card__text');
const VCardTitle = createSimpleFunctional('v-card__title');

var VWindow$1 = '';

// Styles
/* @vue/component */

var VWindow = BaseItemGroup.extend({
  name: 'v-window',
  directives: {
    Touch: Touch$1
  },

  provide() {
    return {
      windowGroup: this
    };
  },

  props: {
    activeClass: {
      type: String,
      default: 'v-window-item--active'
    },
    continuous: Boolean,
    mandatory: {
      type: Boolean,
      default: true
    },
    nextIcon: {
      type: [Boolean, String],
      default: '$next'
    },
    prevIcon: {
      type: [Boolean, String],
      default: '$prev'
    },
    reverse: Boolean,
    showArrows: Boolean,
    showArrowsOnHover: Boolean,
    touch: Object,
    touchless: Boolean,
    value: {
      required: false
    },
    vertical: Boolean
  },

  data() {
    return {
      changedByDelimiters: false,
      internalHeight: undefined,
      transitionHeight: undefined,
      transitionCount: 0,
      isBooted: false,
      isReverse: false
    };
  },

  computed: {
    isActive() {
      return this.transitionCount > 0;
    },

    classes() {
      return { ...BaseItemGroup.options.computed.classes.call(this),
        'v-window--show-arrows-on-hover': this.showArrowsOnHover
      };
    },

    computedTransition() {
      if (!this.isBooted) return '';
      const axis = this.vertical ? 'y' : 'x';
      const reverse = this.internalReverse ? !this.isReverse : this.isReverse;
      const direction = reverse ? '-reverse' : '';
      return `v-window-${axis}${direction}-transition`;
    },

    hasActiveItems() {
      return Boolean(this.items.find(item => !item.disabled));
    },

    hasNext() {
      return this.continuous || this.internalIndex < this.items.length - 1;
    },

    hasPrev() {
      return this.continuous || this.internalIndex > 0;
    },

    internalIndex() {
      return this.items.findIndex((item, i) => {
        return this.internalValue === this.getValue(item, i);
      });
    },

    internalReverse() {
      return this.$vuetify.rtl ? !this.reverse : this.reverse;
    }

  },
  watch: {
    internalIndex(val, oldVal) {
      this.isReverse = this.updateReverse(val, oldVal);
    }

  },

  mounted() {
    window.requestAnimationFrame(() => this.isBooted = true);
  },

  methods: {
    genDefaultSlot() {
      return this.$slots.default;
    },

    genContainer() {
      const children = [this.genDefaultSlot()];

      if (this.showArrows) {
        children.push(this.genControlIcons());
      }

      return this.$createElement('div', {
        staticClass: 'v-window__container',
        class: {
          'v-window__container--is-active': this.isActive
        },
        style: {
          height: this.internalHeight || this.transitionHeight
        }
      }, children);
    },

    genIcon(direction, icon, click) {
      var _a, _b, _c;

      const on = {
        click: e => {
          e.stopPropagation();
          this.changedByDelimiters = true;
          click();
        }
      };
      const attrs = {
        'aria-label': this.$vuetify.lang.t(`$vuetify.carousel.${direction}`)
      };
      const children = (_c = (_b = (_a = this.$scopedSlots)[direction]) === null || _b === void 0 ? void 0 : _b.call(_a, {
        on,
        attrs
      })) !== null && _c !== void 0 ? _c : [this.$createElement(__unplugin_components_94, {
        props: {
          icon: true
        },
        attrs,
        on
      }, [this.$createElement(__unplugin_components_95, {
        props: {
          large: true
        }
      }, icon)])];
      return this.$createElement('div', {
        staticClass: `v-window__${direction}`
      }, children);
    },

    genControlIcons() {
      const icons = [];
      const prevIcon = this.$vuetify.rtl ? this.nextIcon : this.prevIcon;
      /* istanbul ignore else */

      if (this.hasPrev && prevIcon && typeof prevIcon === 'string') {
        const icon = this.genIcon('prev', prevIcon, this.prev);
        icon && icons.push(icon);
      }

      const nextIcon = this.$vuetify.rtl ? this.prevIcon : this.nextIcon;
      /* istanbul ignore else */

      if (this.hasNext && nextIcon && typeof nextIcon === 'string') {
        const icon = this.genIcon('next', nextIcon, this.next);
        icon && icons.push(icon);
      }

      return icons;
    },

    getNextIndex(index) {
      const nextIndex = (index + 1) % this.items.length;
      const item = this.items[nextIndex];
      if (item.disabled) return this.getNextIndex(nextIndex);
      return nextIndex;
    },

    getPrevIndex(index) {
      const prevIndex = (index + this.items.length - 1) % this.items.length;
      const item = this.items[prevIndex];
      if (item.disabled) return this.getPrevIndex(prevIndex);
      return prevIndex;
    },

    next() {
      /* istanbul ignore if */
      if (!this.hasActiveItems || !this.hasNext) return;
      const nextIndex = this.getNextIndex(this.internalIndex);
      const item = this.items[nextIndex];
      this.internalValue = this.getValue(item, nextIndex);
    },

    prev() {
      /* istanbul ignore if */
      if (!this.hasActiveItems || !this.hasPrev) return;
      const lastIndex = this.getPrevIndex(this.internalIndex);
      const item = this.items[lastIndex];
      this.internalValue = this.getValue(item, lastIndex);
    },

    updateReverse(val, oldVal) {
      const itemsLength = this.items.length;
      const lastIndex = itemsLength - 1;
      if (itemsLength <= 2) return val < oldVal;

      if (val === lastIndex && oldVal === 0) {
        return true;
      } else if (val === 0 && oldVal === lastIndex) {
        return false;
      } else {
        return val < oldVal;
      }
    }

  },

  render(h) {
    const data = {
      staticClass: 'v-window',
      class: this.classes,
      directives: []
    };

    if (!this.touchless) {
      const value = this.touch || {
        left: () => {
          this.$vuetify.rtl ? this.prev() : this.next();
        },
        right: () => {
          this.$vuetify.rtl ? this.next() : this.prev();
        },
        end: e => {
          e.stopPropagation();
        },
        start: e => {
          e.stopPropagation();
        }
      };
      data.directives.push({
        name: 'touch',
        value
      });
    }

    return h('div', data, [this.genContainer()]);
  }

});

// Mixins
const baseMixins$d = mixins(Bootable, factory$1('windowGroup', 'v-window-item', 'v-window'));
var VWindowItem = baseMixins$d.extend().extend().extend({
  name: 'v-window-item',
  directives: {
    Touch: Touch$1
  },
  props: {
    disabled: Boolean,
    reverseTransition: {
      type: [Boolean, String],
      default: undefined
    },
    transition: {
      type: [Boolean, String],
      default: undefined
    },
    value: {
      required: false
    }
  },

  data() {
    return {
      isActive: false,
      inTransition: false
    };
  },

  computed: {
    classes() {
      return this.groupClasses;
    },

    computedTransition() {
      if (!this.windowGroup.internalReverse) {
        return typeof this.transition !== 'undefined' ? this.transition || '' : this.windowGroup.computedTransition;
      }

      return typeof this.reverseTransition !== 'undefined' ? this.reverseTransition || '' : this.windowGroup.computedTransition;
    }

  },
  methods: {
    genDefaultSlot() {
      return this.$slots.default;
    },

    genWindowItem() {
      return this.$createElement('div', {
        staticClass: 'v-window-item',
        class: this.classes,
        directives: [{
          name: 'show',
          value: this.isActive
        }],
        on: this.$listeners
      }, this.genDefaultSlot());
    },

    onAfterTransition() {
      if (!this.inTransition) {
        return;
      } // Finalize transition state.


      this.inTransition = false;

      if (this.windowGroup.transitionCount > 0) {
        this.windowGroup.transitionCount--; // Remove container height if we are out of transition.

        if (this.windowGroup.transitionCount === 0) {
          this.windowGroup.transitionHeight = undefined;
        }
      }
    },

    onBeforeTransition() {
      if (this.inTransition) {
        return;
      } // Initialize transition state here.


      this.inTransition = true;

      if (this.windowGroup.transitionCount === 0) {
        // Set initial height for height transition.
        this.windowGroup.transitionHeight = convertToUnit(this.windowGroup.$el.clientHeight);
      }

      this.windowGroup.transitionCount++;
    },

    onTransitionCancelled() {
      this.onAfterTransition(); // This should have the same path as normal transition end.
    },

    onEnter(el) {
      if (!this.inTransition) {
        return;
      }

      this.$nextTick(() => {
        // Do not set height if no transition or cancelled.
        if (!this.computedTransition || !this.inTransition) {
          return;
        } // Set transition target height.


        this.windowGroup.transitionHeight = convertToUnit(el.clientHeight);
      });
    }

  },

  render(h) {
    return h('transition', {
      props: {
        name: this.computedTransition
      },
      on: {
        // Handlers for enter windows.
        beforeEnter: this.onBeforeTransition,
        afterEnter: this.onAfterTransition,
        enterCancelled: this.onTransitionCancelled,
        // Handlers for leave windows.
        beforeLeave: this.onBeforeTransition,
        afterLeave: this.onAfterTransition,
        leaveCancelled: this.onTransitionCancelled,
        // Enter handler for height transition.
        enter: this.onEnter
      }
    }, this.showLazyContent(() => [this.genWindowItem()]));
  }

});

var VCheckbox = '';

var _selectionControls = '';

// Directives
var Rippleable = Vue$1.extend({
  name: 'rippleable',
  directives: {
    ripple: Ripple$1
  },
  props: {
    ripple: {
      type: [Boolean, Object],
      default: true
    }
  },
  methods: {
    genRipple(data = {}) {
      if (!this.ripple) return null;
      data.staticClass = 'v-input--selection-controls__ripple';
      data.directives = data.directives || [];
      data.directives.push({
        name: 'ripple',
        value: {
          center: true
        }
      });
      return this.$createElement('div', data);
    }

  }
});

// Components
function prevent(e) {
  e.preventDefault();
}
/* @vue/component */

var Selectable = mixins(VInput, Rippleable, Comparable).extend({
  name: 'selectable',
  model: {
    prop: 'inputValue',
    event: 'change'
  },
  props: {
    id: String,
    inputValue: null,
    falseValue: null,
    trueValue: null,
    multiple: {
      type: Boolean,
      default: null
    },
    label: String
  },

  data() {
    return {
      hasColor: this.inputValue,
      lazyValue: this.inputValue
    };
  },

  computed: {
    computedColor() {
      if (!this.isActive) return undefined;
      if (this.color) return this.color;
      if (this.isDark && !this.appIsDark) return 'white';
      return 'primary';
    },

    isMultiple() {
      return this.multiple === true || this.multiple === null && Array.isArray(this.internalValue);
    },

    isActive() {
      const value = this.value;
      const input = this.internalValue;

      if (this.isMultiple) {
        if (!Array.isArray(input)) return false;
        return input.some(item => this.valueComparator(item, value));
      }

      if (this.trueValue === undefined || this.falseValue === undefined) {
        return value ? this.valueComparator(value, input) : Boolean(input);
      }

      return this.valueComparator(input, this.trueValue);
    },

    isDirty() {
      return this.isActive;
    },

    rippleState() {
      return !this.isDisabled && !this.validationState ? undefined : this.validationState;
    }

  },
  watch: {
    inputValue(val) {
      this.lazyValue = val;
      this.hasColor = val;
    }

  },
  methods: {
    genLabel() {
      const label = VInput.options.methods.genLabel.call(this);
      if (!label) return label;
      label.data.on = {
        // Label shouldn't cause the input to focus
        click: prevent
      };
      return label;
    },

    genInput(type, attrs) {
      return this.$createElement('input', {
        attrs: Object.assign({
          'aria-checked': this.isActive.toString(),
          disabled: this.isDisabled,
          id: this.computedId,
          role: type,
          type
        }, attrs),
        domProps: {
          value: this.value,
          checked: this.isActive
        },
        on: {
          blur: this.onBlur,
          change: this.onChange,
          focus: this.onFocus,
          keydown: this.onKeydown,
          click: prevent
        },
        ref: 'input'
      });
    },

    onClick(e) {
      this.onChange();
      this.$emit('click', e);
    },

    onChange() {
      if (!this.isInteractive) return;
      const value = this.value;
      let input = this.internalValue;

      if (this.isMultiple) {
        if (!Array.isArray(input)) {
          input = [];
        }

        const length = input.length;
        input = input.filter(item => !this.valueComparator(item, value));

        if (input.length === length) {
          input.push(value);
        }
      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {
        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue;
      } else if (value) {
        input = this.valueComparator(input, value) ? null : value;
      } else {
        input = !input;
      }

      this.validate(true, input);
      this.internalValue = input;
      this.hasColor = input;
    },

    onFocus(e) {
      this.isFocused = true;
      this.$emit('focus', e);
    },

    onBlur(e) {
      this.isFocused = false;
      this.$emit('blur', e);
    },

    /** @abstract */
    onKeydown(e) {}

  }
});

// Styles
/* @vue/component */

var __unplugin_components_28 = Selectable.extend({
  name: 'v-checkbox',
  props: {
    indeterminate: Boolean,
    indeterminateIcon: {
      type: String,
      default: '$checkboxIndeterminate'
    },
    offIcon: {
      type: String,
      default: '$checkboxOff'
    },
    onIcon: {
      type: String,
      default: '$checkboxOn'
    }
  },

  data() {
    return {
      inputIndeterminate: this.indeterminate
    };
  },

  computed: {
    classes() {
      return { ...VInput.options.computed.classes.call(this),
        'v-input--selection-controls': true,
        'v-input--checkbox': true,
        'v-input--indeterminate': this.inputIndeterminate
      };
    },

    computedIcon() {
      if (this.inputIndeterminate) {
        return this.indeterminateIcon;
      } else if (this.isActive) {
        return this.onIcon;
      } else {
        return this.offIcon;
      }
    },

    // Do not return undefined if disabled,
    // according to spec, should still show
    // a color when disabled and active
    validationState() {
      if (this.isDisabled && !this.inputIndeterminate) return undefined;
      if (this.hasError && this.shouldValidate) return 'error';
      if (this.hasSuccess) return 'success';
      if (this.hasColor !== null) return this.computedColor;
      return undefined;
    }

  },
  watch: {
    indeterminate(val) {
      // https://github.com/vuetifyjs/vuetify/issues/8270
      this.$nextTick(() => this.inputIndeterminate = val);
    },

    inputIndeterminate(val) {
      this.$emit('update:indeterminate', val);
    },

    isActive() {
      if (!this.indeterminate) return;
      this.inputIndeterminate = false;
    }

  },
  methods: {
    genCheckbox() {
      const {
        title,
        ...checkboxAttrs
      } = this.attrs$;
      return this.$createElement('div', {
        staticClass: 'v-input--selection-controls__input'
      }, [this.$createElement(__unplugin_components_95, this.setTextColor(this.validationState, {
        props: {
          dense: this.dense,
          dark: this.dark,
          light: this.light
        }
      }), this.computedIcon), this.genInput('checkbox', { ...checkboxAttrs,
        'aria-checked': this.inputIndeterminate ? 'mixed' : this.isActive.toString()
      }), this.genRipple(this.setTextColor(this.rippleState))]);
    },

    genDefaultSlot() {
      return [this.genCheckbox(), this.genLabel()];
    }

  }
});

var VSlideGroup = '';

// Styles

function bias(val) {
  const c = 0.501;
  const x = Math.abs(val);
  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1));
}

function calculateUpdatedOffset(selectedElement, widths, rtl, currentScrollOffset) {
  const clientWidth = selectedElement.clientWidth;
  const offsetLeft = rtl ? widths.content - selectedElement.offsetLeft - clientWidth : selectedElement.offsetLeft;

  if (rtl) {
    currentScrollOffset = -currentScrollOffset;
  }

  const totalWidth = widths.wrapper + currentScrollOffset;
  const itemOffset = clientWidth + offsetLeft;
  const additionalOffset = clientWidth * 0.4;

  if (offsetLeft <= currentScrollOffset) {
    currentScrollOffset = Math.max(offsetLeft - additionalOffset, 0);
  } else if (totalWidth <= itemOffset) {
    currentScrollOffset = Math.min(currentScrollOffset - (totalWidth - itemOffset - additionalOffset), widths.content - widths.wrapper);
  }

  return rtl ? -currentScrollOffset : currentScrollOffset;
}
function calculateCenteredOffset(selectedElement, widths, rtl) {
  const {
    offsetLeft,
    clientWidth
  } = selectedElement;

  if (rtl) {
    const offsetCentered = widths.content - offsetLeft - clientWidth / 2 - widths.wrapper / 2;
    return -Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered));
  } else {
    const offsetCentered = offsetLeft + clientWidth / 2 - widths.wrapper / 2;
    return Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered));
  }
}
const BaseSlideGroup = mixins(BaseItemGroup, Mobile).extend({
  name: 'base-slide-group',
  directives: {
    Resize: Resize$1,
    Touch: Touch$1
  },
  props: {
    activeClass: {
      type: String,
      default: 'v-slide-item--active'
    },
    centerActive: Boolean,
    nextIcon: {
      type: String,
      default: '$next'
    },
    prevIcon: {
      type: String,
      default: '$prev'
    },
    showArrows: {
      type: [Boolean, String],
      validator: v => typeof v === 'boolean' || ['always', 'never', 'desktop', 'mobile'].includes(v)
    }
  },
  data: () => ({
    isOverflowing: false,
    resizeTimeout: 0,
    startX: 0,
    isSwipingHorizontal: false,
    isSwiping: false,
    scrollOffset: 0,
    widths: {
      content: 0,
      wrapper: 0
    }
  }),
  computed: {
    canTouch() {
      return typeof window !== 'undefined';
    },

    __cachedNext() {
      return this.genTransition('next');
    },

    __cachedPrev() {
      return this.genTransition('prev');
    },

    classes() {
      return { ...BaseItemGroup.options.computed.classes.call(this),
        'v-slide-group': true,
        'v-slide-group--has-affixes': this.hasAffixes,
        'v-slide-group--is-overflowing': this.isOverflowing
      };
    },

    hasAffixes() {
      switch (this.showArrows) {
        // Always show arrows on desktop & mobile
        case 'always':
          return true;
        // Always show arrows on desktop

        case 'desktop':
          return !this.isMobile;
        // Show arrows on mobile when overflowing.
        // This matches the default 2.2 behavior

        case true:
          return this.isOverflowing || Math.abs(this.scrollOffset) > 0;
        // Always show on mobile

        case 'mobile':
          return this.isMobile || this.isOverflowing || Math.abs(this.scrollOffset) > 0;
        // Always hide arrows

        case 'never':
          return false;
        // https://material.io/components/tabs#scrollable-tabs
        // Always show arrows when
        // overflowed on desktop

        default:
          return !this.isMobile && (this.isOverflowing || Math.abs(this.scrollOffset) > 0);
      }
    },

    hasNext() {
      if (!this.hasAffixes) return false;
      const {
        content,
        wrapper
      } = this.widths; // Check one scroll ahead to know the width of right-most item

      return content > Math.abs(this.scrollOffset) + wrapper;
    },

    hasPrev() {
      return this.hasAffixes && this.scrollOffset !== 0;
    }

  },
  watch: {
    internalValue: 'setWidths',
    // When overflow changes, the arrows alter
    // the widths of the content and wrapper
    // and need to be recalculated
    isOverflowing: 'setWidths',

    scrollOffset(val) {
      if (this.$vuetify.rtl) val = -val;
      let scroll = val <= 0 ? bias(-val) : val > this.widths.content - this.widths.wrapper ? -(this.widths.content - this.widths.wrapper) + bias(this.widths.content - this.widths.wrapper - val) : -val;
      if (this.$vuetify.rtl) scroll = -scroll;
      this.$refs.content.style.transform = `translateX(${scroll}px)`;
    }

  },

  mounted() {
    if (typeof ResizeObserver !== 'undefined') {
      const obs = new ResizeObserver(() => {
        this.onResize();
      });
      obs.observe(this.$el);
      obs.observe(this.$refs.content);
      this.$on('hook:destroyed', () => {
        obs.disconnect();
      });
    } else {
      let itemsLength = 0;
      this.$on('hook:beforeUpdate', () => {
        var _a;

        itemsLength = (((_a = this.$refs.content) === null || _a === void 0 ? void 0 : _a.children) || []).length;
      });
      this.$on('hook:updated', () => {
        var _a;

        if (itemsLength === (((_a = this.$refs.content) === null || _a === void 0 ? void 0 : _a.children) || []).length) return;
        this.setWidths();
      });
    }
  },

  methods: {
    onScroll() {
      this.$refs.wrapper.scrollLeft = 0;
    },

    onFocusin(e) {
      if (!this.isOverflowing) return; // Focused element is likely to be the root of an item, so a
      // breadth-first search will probably find it in the first iteration

      for (const el of composedPath(e)) {
        for (const vm of this.items) {
          if (vm.$el === el) {
            this.scrollOffset = calculateUpdatedOffset(vm.$el, this.widths, this.$vuetify.rtl, this.scrollOffset);
            return;
          }
        }
      }
    },

    // Always generate next for scrollable hint
    genNext() {
      const slot = this.$scopedSlots.next ? this.$scopedSlots.next({}) : this.$slots.next || this.__cachedNext;
      return this.$createElement('div', {
        staticClass: 'v-slide-group__next',
        class: {
          'v-slide-group__next--disabled': !this.hasNext
        },
        on: {
          click: () => this.onAffixClick('next')
        },
        key: 'next'
      }, [slot]);
    },

    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-slide-group__content',
        ref: 'content',
        on: {
          focusin: this.onFocusin
        }
      }, this.$slots.default);
    },

    genData() {
      return {
        class: this.classes,
        directives: [{
          name: 'resize',
          value: this.onResize
        }]
      };
    },

    genIcon(location) {
      let icon = location;

      if (this.$vuetify.rtl && location === 'prev') {
        icon = 'next';
      } else if (this.$vuetify.rtl && location === 'next') {
        icon = 'prev';
      }

      const upperLocation = `${location[0].toUpperCase()}${location.slice(1)}`;
      const hasAffix = this[`has${upperLocation}`];
      if (!this.showArrows && !hasAffix) return null;
      return this.$createElement(__unplugin_components_95, {
        props: {
          disabled: !hasAffix
        }
      }, this[`${icon}Icon`]);
    },

    // Always generate prev for scrollable hint
    genPrev() {
      const slot = this.$scopedSlots.prev ? this.$scopedSlots.prev({}) : this.$slots.prev || this.__cachedPrev;
      return this.$createElement('div', {
        staticClass: 'v-slide-group__prev',
        class: {
          'v-slide-group__prev--disabled': !this.hasPrev
        },
        on: {
          click: () => this.onAffixClick('prev')
        },
        key: 'prev'
      }, [slot]);
    },

    genTransition(location) {
      return this.$createElement(VFadeTransition, [this.genIcon(location)]);
    },

    genWrapper() {
      return this.$createElement('div', {
        staticClass: 'v-slide-group__wrapper',
        directives: [{
          name: 'touch',
          value: {
            start: e => this.overflowCheck(e, this.onTouchStart),
            move: e => this.overflowCheck(e, this.onTouchMove),
            end: e => this.overflowCheck(e, this.onTouchEnd)
          }
        }],
        ref: 'wrapper',
        on: {
          scroll: this.onScroll
        }
      }, [this.genContent()]);
    },

    calculateNewOffset(direction, widths, rtl, currentScrollOffset) {
      const sign = rtl ? -1 : 1;
      const newAbosluteOffset = sign * currentScrollOffset + (direction === 'prev' ? -1 : 1) * widths.wrapper;
      return sign * Math.max(Math.min(newAbosluteOffset, widths.content - widths.wrapper), 0);
    },

    onAffixClick(location) {
      this.$emit(`click:${location}`);
      this.scrollTo(location);
    },

    onResize() {
      /* istanbul ignore next */
      if (this._isDestroyed) return;
      this.setWidths();
    },

    onTouchStart(e) {
      const {
        content
      } = this.$refs;
      this.startX = this.scrollOffset + e.touchstartX;
      content.style.setProperty('transition', 'none');
      content.style.setProperty('willChange', 'transform');
    },

    onTouchMove(e) {
      if (!this.canTouch) return;

      if (!this.isSwiping) {
        // only calculate disableSwipeHorizontal during the first onTouchMove invoke
        // in order to ensure disableSwipeHorizontal value is consistent between onTouchStart and onTouchEnd
        const diffX = e.touchmoveX - e.touchstartX;
        const diffY = e.touchmoveY - e.touchstartY;
        this.isSwipingHorizontal = Math.abs(diffX) > Math.abs(diffY);
        this.isSwiping = true;
      }

      if (this.isSwipingHorizontal) {
        // sliding horizontally
        this.scrollOffset = this.startX - e.touchmoveX; // temporarily disable window vertical scrolling

        document.documentElement.style.overflowY = 'hidden';
      }
    },

    onTouchEnd() {
      if (!this.canTouch) return;
      const {
        content,
        wrapper
      } = this.$refs;
      const maxScrollOffset = content.clientWidth - wrapper.clientWidth;
      content.style.setProperty('transition', null);
      content.style.setProperty('willChange', null);

      if (this.$vuetify.rtl) {
        /* istanbul ignore else */
        if (this.scrollOffset > 0 || !this.isOverflowing) {
          this.scrollOffset = 0;
        } else if (this.scrollOffset <= -maxScrollOffset) {
          this.scrollOffset = -maxScrollOffset;
        }
      } else {
        /* istanbul ignore else */
        if (this.scrollOffset < 0 || !this.isOverflowing) {
          this.scrollOffset = 0;
        } else if (this.scrollOffset >= maxScrollOffset) {
          this.scrollOffset = maxScrollOffset;
        }
      }

      this.isSwiping = false; // rollback whole page scrolling to default

      document.documentElement.style.removeProperty('overflow-y');
    },

    overflowCheck(e, fn) {
      e.stopPropagation();
      this.isOverflowing && fn(e);
    },

    scrollIntoView
    /* istanbul ignore next */
    () {
      if (!this.selectedItem && this.items.length) {
        const lastItemPosition = this.items[this.items.length - 1].$el.getBoundingClientRect();
        const wrapperPosition = this.$refs.wrapper.getBoundingClientRect();

        if (this.$vuetify.rtl && wrapperPosition.right < lastItemPosition.right || !this.$vuetify.rtl && wrapperPosition.left > lastItemPosition.left) {
          this.scrollTo('prev');
        }
      }

      if (!this.selectedItem) {
        return;
      }

      if (this.selectedIndex === 0 || !this.centerActive && !this.isOverflowing) {
        this.scrollOffset = 0;
      } else if (this.centerActive) {
        this.scrollOffset = calculateCenteredOffset(this.selectedItem.$el, this.widths, this.$vuetify.rtl);
      } else if (this.isOverflowing) {
        this.scrollOffset = calculateUpdatedOffset(this.selectedItem.$el, this.widths, this.$vuetify.rtl, this.scrollOffset);
      }
    },

    scrollTo
    /* istanbul ignore next */
    (location) {
      this.scrollOffset = this.calculateNewOffset(location, {
        // Force reflow
        content: this.$refs.content ? this.$refs.content.clientWidth : 0,
        wrapper: this.$refs.wrapper ? this.$refs.wrapper.clientWidth : 0
      }, this.$vuetify.rtl, this.scrollOffset);
    },

    setWidths() {
      window.requestAnimationFrame(() => {
        if (this._isDestroyed) return;
        const {
          content,
          wrapper
        } = this.$refs;
        this.widths = {
          content: content ? content.clientWidth : 0,
          wrapper: wrapper ? wrapper.clientWidth : 0
        }; // https://github.com/vuetifyjs/vuetify/issues/13212
        // We add +1 to the wrappers width to prevent an issue where the `clientWidth`
        // gets calculated wrongly by the browser if using a different zoom-level.

        this.isOverflowing = this.widths.wrapper + 1 < this.widths.content;
        this.scrollIntoView();
      });
    }

  },

  render(h) {
    return h('div', this.genData(), [this.genPrev(), this.genWrapper(), this.genNext()]);
  }

});
BaseSlideGroup.extend({
  name: 'v-slide-group',

  provide() {
    return {
      slideGroup: this
    };
  }

});

var VSlider$1 = '';

var VSlider = mixins(VInput, Loadable
/* @vue/component */
).extend({
  name: 'v-slider',
  directives: {
    ClickOutside: ClickOutside$1
  },
  mixins: [Loadable],
  props: {
    disabled: Boolean,
    inverseLabel: Boolean,
    max: {
      type: [Number, String],
      default: 100
    },
    min: {
      type: [Number, String],
      default: 0
    },
    step: {
      type: [Number, String],
      default: 1
    },
    thumbColor: String,
    thumbLabel: {
      type: [Boolean, String],
      default: undefined,
      validator: v => typeof v === 'boolean' || v === 'always'
    },
    thumbSize: {
      type: [Number, String],
      default: 32
    },
    tickLabels: {
      type: Array,
      default: () => []
    },
    ticks: {
      type: [Boolean, String],
      default: false,
      validator: v => typeof v === 'boolean' || v === 'always'
    },
    tickSize: {
      type: [Number, String],
      default: 2
    },
    trackColor: String,
    trackFillColor: String,
    value: [Number, String],
    vertical: Boolean
  },
  data: () => ({
    app: null,
    oldValue: null,
    thumbPressed: false,
    mouseTimeout: -1,
    isFocused: false,
    isActive: false,
    noClick: false,
    startOffset: 0
  }),
  computed: {
    classes() {
      return { ...VInput.options.computed.classes.call(this),
        'v-input__slider': true,
        'v-input__slider--vertical': this.vertical,
        'v-input__slider--inverse-label': this.inverseLabel
      };
    },

    internalValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        val = isNaN(val) ? this.minValue : val; // Round value to ensure the
        // entire slider range can
        // be selected with step

        const value = this.roundValue(Math.min(Math.max(val, this.minValue), this.maxValue));
        if (value === this.lazyValue) return;
        this.lazyValue = value;
        this.$emit('input', value);
      }

    },

    trackTransition() {
      return this.thumbPressed ? this.showTicks || this.stepNumeric ? '0.1s cubic-bezier(0.25, 0.8, 0.5, 1)' : 'none' : '';
    },

    minValue() {
      return parseFloat(this.min);
    },

    maxValue() {
      return parseFloat(this.max);
    },

    stepNumeric() {
      return this.step > 0 ? parseFloat(this.step) : 0;
    },

    inputWidth() {
      const inputWidth = (this.roundValue(this.internalValue) - this.minValue) / (this.maxValue - this.minValue) * 100;
      return isNaN(inputWidth) ? 0 : inputWidth;
    },

    trackFillStyles() {
      const startDir = this.vertical ? 'bottom' : 'left';
      const endDir = this.vertical ? 'top' : 'right';
      const valueDir = this.vertical ? 'height' : 'width';
      const start = this.$vuetify.rtl ? 'auto' : '0';
      const end = this.$vuetify.rtl ? '0' : 'auto';
      const value = this.isDisabled ? `calc(${this.inputWidth}% - 10px)` : `${this.inputWidth}%`;
      return {
        transition: this.trackTransition,
        [startDir]: start,
        [endDir]: end,
        [valueDir]: value
      };
    },

    trackStyles() {
      const startDir = this.vertical ? this.$vuetify.rtl ? 'bottom' : 'top' : this.$vuetify.rtl ? 'left' : 'right';
      const endDir = this.vertical ? 'height' : 'width';
      const start = '0px';
      const end = this.isDisabled ? `calc(${100 - this.inputWidth}% - 10px)` : `calc(${100 - this.inputWidth}%)`;
      return {
        transition: this.trackTransition,
        [startDir]: start,
        [endDir]: end
      };
    },

    showTicks() {
      return this.tickLabels.length > 0 || !!(!this.isDisabled && this.stepNumeric && this.ticks);
    },

    numTicks() {
      return Math.ceil((this.maxValue - this.minValue) / this.stepNumeric);
    },

    showThumbLabel() {
      return !this.isDisabled && !!(this.thumbLabel || this.$scopedSlots['thumb-label']);
    },

    computedTrackColor() {
      if (this.isDisabled) return undefined;
      if (this.trackColor) return this.trackColor;
      if (this.isDark) return this.validationState;
      return this.validationState || 'primary lighten-3';
    },

    computedTrackFillColor() {
      if (this.isDisabled) return undefined;
      if (this.trackFillColor) return this.trackFillColor;
      return this.validationState || this.computedColor;
    },

    computedThumbColor() {
      if (this.thumbColor) return this.thumbColor;
      return this.validationState || this.computedColor;
    }

  },
  watch: {
    min(val) {
      const parsed = parseFloat(val);
      parsed > this.internalValue && this.$emit('input', parsed);
    },

    max(val) {
      const parsed = parseFloat(val);
      parsed < this.internalValue && this.$emit('input', parsed);
    },

    value: {
      handler(v) {
        this.internalValue = v;
      },

      immediate: true
    }
  },

  mounted() {
    // Without a v-app, iOS does not work with body selectors
    this.app = document.querySelector('[data-app]') || consoleWarn('Missing v-app or a non-body wrapping element with the [data-app] attribute', this);
  },

  methods: {
    genDefaultSlot() {
      const children = [this.genLabel()];
      const slider = this.genSlider();
      this.inverseLabel ? children.unshift(slider) : children.push(slider);
      children.push(this.genProgress());
      return children;
    },

    genSlider() {
      return this.$createElement('div', {
        class: {
          'v-slider': true,
          'v-slider--horizontal': !this.vertical,
          'v-slider--vertical': this.vertical,
          'v-slider--focused': this.isFocused,
          'v-slider--active': this.isActive,
          'v-slider--disabled': this.isDisabled,
          'v-slider--readonly': this.isReadonly,
          ...this.themeClasses
        },
        directives: [{
          name: 'click-outside',
          value: this.onBlur
        }],
        on: {
          click: this.onSliderClick,
          mousedown: this.onSliderMouseDown,
          touchstart: this.onSliderMouseDown
        }
      }, this.genChildren());
    },

    genChildren() {
      return [this.genInput(), this.genTrackContainer(), this.genSteps(), this.genThumbContainer(this.internalValue, this.inputWidth, this.isActive, this.isFocused, this.onFocus, this.onBlur)];
    },

    genInput() {
      return this.$createElement('input', {
        attrs: {
          value: this.internalValue,
          id: this.computedId,
          disabled: true,
          readonly: true,
          tabindex: -1,
          ...this.$attrs
        } // on: this.genListeners(), // TODO: do we need to attach the listeners to input?

      });
    },

    genTrackContainer() {
      const children = [this.$createElement('div', this.setBackgroundColor(this.computedTrackColor, {
        staticClass: 'v-slider__track-background',
        style: this.trackStyles
      })), this.$createElement('div', this.setBackgroundColor(this.computedTrackFillColor, {
        staticClass: 'v-slider__track-fill',
        style: this.trackFillStyles
      }))];
      return this.$createElement('div', {
        staticClass: 'v-slider__track-container',
        ref: 'track'
      }, children);
    },

    genSteps() {
      if (!this.step || !this.showTicks) return null;
      const tickSize = parseFloat(this.tickSize);
      const range = createRange(this.numTicks + 1);
      const direction = this.vertical ? 'bottom' : this.$vuetify.rtl ? 'right' : 'left';
      const offsetDirection = this.vertical ? this.$vuetify.rtl ? 'left' : 'right' : 'top';
      if (this.vertical) range.reverse();
      const ticks = range.map(index => {
        const children = [];

        if (this.tickLabels[index]) {
          children.push(this.$createElement('div', {
            staticClass: 'v-slider__tick-label'
          }, this.tickLabels[index]));
        }

        const width = index * (100 / this.numTicks);
        const filled = this.$vuetify.rtl ? 100 - this.inputWidth < width : width < this.inputWidth;
        return this.$createElement('span', {
          key: index,
          staticClass: 'v-slider__tick',
          class: {
            'v-slider__tick--filled': filled
          },
          style: {
            width: `${tickSize}px`,
            height: `${tickSize}px`,
            [direction]: `calc(${width}% - ${tickSize / 2}px)`,
            [offsetDirection]: `calc(50% - ${tickSize / 2}px)`
          }
        }, children);
      });
      return this.$createElement('div', {
        staticClass: 'v-slider__ticks-container',
        class: {
          'v-slider__ticks-container--always-show': this.ticks === 'always' || this.tickLabels.length > 0
        }
      }, ticks);
    },

    genThumbContainer(value, valueWidth, isActive, isFocused, onFocus, onBlur, ref = 'thumb') {
      const children = [this.genThumb()];
      const thumbLabelContent = this.genThumbLabelContent(value);
      this.showThumbLabel && children.push(this.genThumbLabel(thumbLabelContent));
      return this.$createElement('div', this.setTextColor(this.computedThumbColor, {
        ref,
        key: ref,
        staticClass: 'v-slider__thumb-container',
        class: {
          'v-slider__thumb-container--active': isActive,
          'v-slider__thumb-container--focused': isFocused,
          'v-slider__thumb-container--show-label': this.showThumbLabel
        },
        style: this.getThumbContainerStyles(valueWidth),
        attrs: {
          role: 'slider',
          tabindex: this.isDisabled ? -1 : this.$attrs.tabindex ? this.$attrs.tabindex : 0,
          'aria-label': this.$attrs['aria-label'] || this.label,
          'aria-valuemin': this.min,
          'aria-valuemax': this.max,
          'aria-valuenow': this.internalValue,
          'aria-readonly': String(this.isReadonly),
          'aria-orientation': this.vertical ? 'vertical' : 'horizontal'
        },
        on: {
          focus: onFocus,
          blur: onBlur,
          keydown: this.onKeyDown
        }
      }), children);
    },

    genThumbLabelContent(value) {
      return this.$scopedSlots['thumb-label'] ? this.$scopedSlots['thumb-label']({
        value
      }) : [this.$createElement('span', [String(value)])];
    },

    genThumbLabel(content) {
      const size = convertToUnit(this.thumbSize);
      const transform = this.vertical ? `translateY(20%) translateY(${Number(this.thumbSize) / 3 - 1}px) translateX(55%) rotate(135deg)` : `translateY(-20%) translateY(-12px) translateX(-50%) rotate(45deg)`;
      return this.$createElement(VScaleTransition, {
        props: {
          origin: 'bottom center'
        }
      }, [this.$createElement('div', {
        staticClass: 'v-slider__thumb-label-container',
        directives: [{
          name: 'show',
          value: this.isFocused || this.isActive || this.thumbLabel === 'always'
        }]
      }, [this.$createElement('div', this.setBackgroundColor(this.computedThumbColor, {
        staticClass: 'v-slider__thumb-label',
        style: {
          height: size,
          width: size,
          transform
        }
      }), [this.$createElement('div', content)])])]);
    },

    genThumb() {
      return this.$createElement('div', this.setBackgroundColor(this.computedThumbColor, {
        staticClass: 'v-slider__thumb'
      }));
    },

    getThumbContainerStyles(width) {
      const direction = this.vertical ? 'top' : 'left';
      let value = this.$vuetify.rtl ? 100 - width : width;
      value = this.vertical ? 100 - value : value;
      return {
        transition: this.trackTransition,
        [direction]: `${value}%`
      };
    },

    onSliderMouseDown(e) {
      var _a;

      e.preventDefault();
      this.oldValue = this.internalValue;
      this.isActive = true;

      if ((_a = e.target) === null || _a === void 0 ? void 0 : _a.matches('.v-slider__thumb-container, .v-slider__thumb-container *')) {
        this.thumbPressed = true;
        const domRect = e.target.getBoundingClientRect();
        const touch = 'touches' in e ? e.touches[0] : e;
        this.startOffset = this.vertical ? touch.clientY - (domRect.top + domRect.height / 2) : touch.clientX - (domRect.left + domRect.width / 2);
      } else {
        this.startOffset = 0;
        window.clearTimeout(this.mouseTimeout);
        this.mouseTimeout = window.setTimeout(() => {
          this.thumbPressed = true;
        }, 300);
      }

      const mouseUpOptions = passiveSupported ? {
        passive: true,
        capture: true
      } : true;
      const mouseMoveOptions = passiveSupported ? {
        passive: true
      } : false;
      const isTouchEvent = ('touches' in e);
      this.onMouseMove(e);
      this.app.addEventListener(isTouchEvent ? 'touchmove' : 'mousemove', this.onMouseMove, mouseMoveOptions);
      addOnceEventListener(this.app, isTouchEvent ? 'touchend' : 'mouseup', this.onSliderMouseUp, mouseUpOptions);
      this.$emit('start', this.internalValue);
    },

    onSliderMouseUp(e) {
      e.stopPropagation();
      window.clearTimeout(this.mouseTimeout);
      this.thumbPressed = false;
      const mouseMoveOptions = passiveSupported ? {
        passive: true
      } : false;
      this.app.removeEventListener('touchmove', this.onMouseMove, mouseMoveOptions);
      this.app.removeEventListener('mousemove', this.onMouseMove, mouseMoveOptions);
      this.$emit('mouseup', e);
      this.$emit('end', this.internalValue);

      if (!deepEqual(this.oldValue, this.internalValue)) {
        this.$emit('change', this.internalValue);
        this.noClick = true;
      }

      this.isActive = false;
    },

    onMouseMove(e) {
      if (e.type === 'mousemove') {
        this.thumbPressed = true;
      }

      this.internalValue = this.parseMouseMove(e);
    },

    onKeyDown(e) {
      if (!this.isInteractive) return;
      const value = this.parseKeyDown(e, this.internalValue);
      if (value == null || value < this.minValue || value > this.maxValue) return;
      this.internalValue = value;
      this.$emit('change', value);
    },

    onSliderClick(e) {
      if (this.noClick) {
        this.noClick = false;
        return;
      }

      const thumb = this.$refs.thumb;
      thumb.focus();
      this.onMouseMove(e);
      this.$emit('change', this.internalValue);
    },

    onBlur(e) {
      this.isFocused = false;
      this.$emit('blur', e);
    },

    onFocus(e) {
      this.isFocused = true;
      this.$emit('focus', e);
    },

    parseMouseMove(e) {
      const start = this.vertical ? 'top' : 'left';
      const length = this.vertical ? 'height' : 'width';
      const click = this.vertical ? 'clientY' : 'clientX';
      const {
        [start]: trackStart,
        [length]: trackLength
      } = this.$refs.track.getBoundingClientRect();
      const clickOffset = 'touches' in e ? e.touches[0][click] : e[click]; // It is possible for left to be NaN, force to number

      let clickPos = Math.min(Math.max((clickOffset - trackStart - this.startOffset) / trackLength, 0), 1) || 0;
      if (this.vertical) clickPos = 1 - clickPos;
      if (this.$vuetify.rtl) clickPos = 1 - clickPos;
      return parseFloat(this.min) + clickPos * (this.maxValue - this.minValue);
    },

    parseKeyDown(e, value) {
      if (!this.isInteractive) return;
      const {
        pageup,
        pagedown,
        end,
        home,
        left,
        right,
        down,
        up
      } = keyCodes;
      if (![pageup, pagedown, end, home, left, right, down, up].includes(e.keyCode)) return;
      e.preventDefault();
      const step = this.stepNumeric || 1;
      const steps = (this.maxValue - this.minValue) / step;

      if ([left, right, down, up].includes(e.keyCode)) {
        const increase = this.$vuetify.rtl ? [left, up] : [right, up];
        const direction = increase.includes(e.keyCode) ? 1 : -1;
        const multiplier = e.shiftKey ? 3 : e.ctrlKey ? 2 : 1;
        value = value + direction * step * multiplier;
      } else if (e.keyCode === home) {
        value = this.minValue;
      } else if (e.keyCode === end) {
        value = this.maxValue;
      } else {
        const direction = e.keyCode === pagedown ? 1 : -1;
        value = value - direction * step * (steps > 100 ? steps / 10 : 10);
      }

      return value;
    },

    roundValue(value) {
      if (!this.stepNumeric) return value; // Format input value using the same number
      // of decimals places as in the step prop

      const trimmedStep = this.step.toString().trim();
      const decimals = trimmedStep.indexOf('.') > -1 ? trimmedStep.length - trimmedStep.indexOf('.') - 1 : 0;
      const offset = this.minValue % this.stepNumeric;
      const newValue = Math.round((value - offset) / this.stepNumeric) * this.stepNumeric + offset;
      return parseFloat(Math.min(newValue, this.maxValue).toFixed(decimals));
    }

  }
});

// Styles
/* @vue/component */

var __unplugin_components_21 = __unplugin_components_53.extend({
  name: 'v-combobox',
  props: {
    delimiters: {
      type: Array,
      default: () => []
    },
    returnObject: {
      type: Boolean,
      default: true
    }
  },
  data: () => ({
    editingIndex: -1
  }),
  computed: {
    computedCounterValue() {
      return this.multiple ? this.selectedItems.length : (this.internalSearch || '').toString().length;
    },

    hasSlot() {
      return __unplugin_components_0$3.options.computed.hasSlot.call(this) || this.multiple;
    },

    isAnyValueAllowed() {
      return true;
    },

    menuCanShow() {
      if (!this.isFocused) return false;
      return this.hasDisplayedItems || !!this.$slots['no-data'] && !this.hideNoData;
    },

    searchIsDirty() {
      return this.internalSearch != null;
    }

  },
  methods: {
    onInternalSearchChanged(val) {
      if (val && this.multiple && this.delimiters.length) {
        const delimiter = this.delimiters.find(d => val.endsWith(d));

        if (delimiter != null) {
          this.internalSearch = val.slice(0, val.length - delimiter.length);
          this.updateTags();
        }
      }

      this.updateMenuDimensions();
    },

    genInput() {
      const input = __unplugin_components_53.options.methods.genInput.call(this);
      delete input.data.attrs.name;
      input.data.on.paste = this.onPaste;
      return input;
    },

    genChipSelection(item, index) {
      const chip = __unplugin_components_0$3.options.methods.genChipSelection.call(this, item, index); // Allow user to update an existing value

      if (this.multiple) {
        chip.componentOptions.listeners = { ...chip.componentOptions.listeners,
          dblclick: () => {
            this.editingIndex = index;
            this.internalSearch = this.getText(item);
            this.selectedIndex = -1;
          }
        };
      }

      return chip;
    },

    onChipInput(item) {
      __unplugin_components_0$3.options.methods.onChipInput.call(this, item);
      this.editingIndex = -1;
    },

    // Requires a manual definition
    // to overwrite removal in v-autocomplete
    onEnterDown(e) {
      e.preventDefault(); // If has menu index, let v-select-list handle

      if (this.getMenuIndex() > -1) return;
      this.$nextTick(this.updateSelf);
    },

    onKeyDown(e) {
      const keyCode = e.keyCode;

      if (e.ctrlKey || ![keyCodes.home, keyCodes.end].includes(keyCode)) {
        __unplugin_components_0$3.options.methods.onKeyDown.call(this, e);
      } // If user is at selection index of 0
      // create a new tag


      if (this.multiple && keyCode === keyCodes.left && this.$refs.input.selectionStart === 0) {
        this.updateSelf();
      } else if (keyCode === keyCodes.enter) {
        this.onEnterDown(e);
      } // The ordering is important here
      // allows new value to be updated
      // and then moves the index to the
      // proper location


      this.changeSelectedIndex(keyCode);
    },

    onTabDown(e) {
      // When adding tags, if searching and
      // there is not a filtered options,
      // add the value to the tags list
      if (this.multiple && this.internalSearch && this.getMenuIndex() === -1) {
        e.preventDefault();
        e.stopPropagation();
        return this.updateTags();
      }

      __unplugin_components_53.options.methods.onTabDown.call(this, e);
    },

    selectItem(item) {
      // Currently only supports items:<string[]>
      if (this.editingIndex > -1) {
        this.updateEditing();
      } else {
        __unplugin_components_53.options.methods.selectItem.call(this, item); // if selected item contains search value,
        // remove the search string

        if (this.internalSearch && this.multiple && this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())) {
          this.internalSearch = null;
        }
      }
    },

    setSelectedItems() {
      if (this.internalValue == null || this.internalValue === '') {
        this.selectedItems = [];
      } else {
        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue];
      }
    },

    setValue(value) {
      __unplugin_components_0$3.options.methods.setValue.call(this, value === undefined ? this.internalSearch : value);
    },

    updateEditing() {
      const value = this.internalValue.slice();
      const index = this.selectedItems.findIndex(item => this.getText(item) === this.internalSearch); // If user enters a duplicate text on chip edit,
      // don't add it, move it to the end of the list

      if (index > -1) {
        const item = typeof value[index] === 'object' ? Object.assign({}, value[index]) : value[index];
        value.splice(index, 1);
        value.push(item);
      } else {
        value[this.editingIndex] = this.internalSearch;
      }

      this.setValue(value);
      this.editingIndex = -1;
      this.internalSearch = null;
    },

    updateCombobox() {
      // If search is not dirty, do nothing
      if (!this.searchIsDirty) return; // The internal search is not matching
      // the internal value, update the input

      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue(); // Reset search if using slot to avoid a double input

      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips;
      if (isUsingSlot) this.internalSearch = null;
    },

    updateSelf() {
      this.multiple ? this.updateTags() : this.updateCombobox();
    },

    updateTags() {
      const menuIndex = this.getMenuIndex(); // If the user is not searching
      // and no menu item is selected
      // or if the search is empty
      // do nothing

      if (menuIndex < 0 && !this.searchIsDirty || !this.internalSearch) return;

      if (this.editingIndex > -1) {
        return this.updateEditing();
      }

      const index = this.selectedItems.findIndex(item => this.internalSearch === this.getText(item)); // If the duplicate item is an object,
      // copy it, so that it can be added again later

      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object' ? Object.assign({}, this.selectedItems[index]) : this.internalSearch; // If it already exists, do nothing
      // this might need to change to bring
      // the duplicated item to the last entered

      if (index > -1) {
        const internalValue = this.internalValue.slice();
        internalValue.splice(index, 1);
        this.setValue(internalValue);
      } // If menu index is greater than 1
      // the selection is handled elsewhere
      // TODO: find out where


      if (menuIndex > -1) return this.internalSearch = null;
      this.selectItem(itemToSelect);
      this.internalSearch = null;
    },

    onPaste(event) {
      var _a;

      this.$emit('paste', event);
      if (!this.multiple || this.searchIsDirty) return;
      const pastedItemText = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/vnd.vuetify.autocomplete.item+plain');

      if (pastedItemText && this.findExistingIndex(pastedItemText) === -1) {
        event.preventDefault();
        __unplugin_components_0$3.options.methods.selectItem.call(this, pastedItemText);
      }
    },

    clearableCallback() {
      this.editingIndex = -1;
      __unplugin_components_53.options.methods.clearableCallback.call(this);
    }

  }
});

// Helpers
var VData = Vue$1.extend({
  name: 'v-data',
  inheritAttrs: false,
  props: {
    items: {
      type: Array,
      default: () => []
    },
    options: {
      type: Object,
      default: () => ({})
    },
    sortBy: {
      type: [String, Array]
    },
    sortDesc: {
      type: [Boolean, Array]
    },
    customSort: {
      type: Function,
      default: sortItems
    },
    mustSort: Boolean,
    multiSort: Boolean,
    page: {
      type: Number,
      default: 1
    },
    itemsPerPage: {
      type: Number,
      default: 10
    },
    groupBy: {
      type: [String, Array],
      default: () => []
    },
    groupDesc: {
      type: [Boolean, Array],
      default: () => []
    },
    customGroup: {
      type: Function,
      default: groupItems
    },
    locale: {
      type: String,
      default: 'en-US'
    },
    disableSort: Boolean,
    disablePagination: Boolean,
    disableFiltering: Boolean,
    search: String,
    customFilter: {
      type: Function,
      default: searchItems
    },
    serverItemsLength: {
      type: Number,
      default: -1
    }
  },

  data() {
    let internalOptions = {
      page: this.page,
      itemsPerPage: this.itemsPerPage,
      sortBy: wrapInArray(this.sortBy),
      sortDesc: wrapInArray(this.sortDesc),
      groupBy: wrapInArray(this.groupBy),
      groupDesc: wrapInArray(this.groupDesc),
      mustSort: this.mustSort,
      multiSort: this.multiSort
    };

    if (this.options) {
      internalOptions = Object.assign(internalOptions, this.options);
    }

    const {
      sortBy,
      sortDesc,
      groupBy,
      groupDesc
    } = internalOptions;
    const sortDiff = sortBy.length - sortDesc.length;
    const groupDiff = groupBy.length - groupDesc.length;

    if (sortDiff > 0) {
      internalOptions.sortDesc.push(...fillArray(sortDiff, false));
    }

    if (groupDiff > 0) {
      internalOptions.groupDesc.push(...fillArray(groupDiff, false));
    }

    return {
      internalOptions
    };
  },

  computed: {
    itemsLength() {
      return this.serverItemsLength >= 0 ? this.serverItemsLength : this.filteredItems.length;
    },

    pageCount() {
      return this.internalOptions.itemsPerPage <= 0 ? 1 : Math.ceil(this.itemsLength / this.internalOptions.itemsPerPage);
    },

    pageStart() {
      if (this.internalOptions.itemsPerPage === -1 || !this.items.length) return 0;
      return (this.internalOptions.page - 1) * this.internalOptions.itemsPerPage;
    },

    pageStop() {
      if (this.internalOptions.itemsPerPage === -1) return this.itemsLength;
      if (!this.items.length) return 0;
      return Math.min(this.itemsLength, this.internalOptions.page * this.internalOptions.itemsPerPage);
    },

    isGrouped() {
      return !!this.internalOptions.groupBy.length;
    },

    pagination() {
      return {
        page: this.internalOptions.page,
        itemsPerPage: this.internalOptions.itemsPerPage,
        pageStart: this.pageStart,
        pageStop: this.pageStop,
        pageCount: this.pageCount,
        itemsLength: this.itemsLength
      };
    },

    filteredItems() {
      let items = this.items.slice();

      if (!this.disableFiltering && this.serverItemsLength <= 0) {
        items = this.customFilter(items, this.search);
      }

      return items;
    },

    computedItems() {
      let items = this.filteredItems.slice();

      if ((!this.disableSort || this.internalOptions.groupBy.length) && this.serverItemsLength <= 0) {
        items = this.sortItems(items);
      }

      if (!this.disablePagination && this.serverItemsLength <= 0) {
        items = this.paginateItems(items);
      }

      return items;
    },

    groupedItems() {
      return this.isGrouped ? this.groupItems(this.computedItems) : null;
    },

    scopedProps() {
      return {
        sort: this.sort,
        sortArray: this.sortArray,
        group: this.group,
        items: this.computedItems,
        options: this.internalOptions,
        updateOptions: this.updateOptions,
        pagination: this.pagination,
        groupedItems: this.groupedItems,
        originalItemsLength: this.items.length
      };
    },

    computedOptions() {
      return { ...this.options
      };
    }

  },
  watch: {
    computedOptions: {
      handler(options, old) {
        if (deepEqual(options, old)) return;
        this.updateOptions(options);
      },

      deep: true,
      immediate: true
    },
    internalOptions: {
      handler(options, old) {
        if (deepEqual(options, old)) return;
        this.$emit('update:options', options);
      },

      deep: true,
      immediate: true
    },

    page(page) {
      this.updateOptions({
        page
      });
    },

    'internalOptions.page'(page) {
      this.$emit('update:page', page);
    },

    itemsPerPage(itemsPerPage) {
      this.updateOptions({
        itemsPerPage
      });
    },

    'internalOptions.itemsPerPage'(itemsPerPage) {
      this.$emit('update:items-per-page', itemsPerPage);
    },

    sortBy(sortBy) {
      this.updateOptions({
        sortBy: wrapInArray(sortBy)
      });
    },

    'internalOptions.sortBy'(sortBy, old) {
      !deepEqual(sortBy, old) && this.$emit('update:sort-by', Array.isArray(this.sortBy) ? sortBy : sortBy[0]);
    },

    sortDesc(sortDesc) {
      this.updateOptions({
        sortDesc: wrapInArray(sortDesc)
      });
    },

    'internalOptions.sortDesc'(sortDesc, old) {
      !deepEqual(sortDesc, old) && this.$emit('update:sort-desc', Array.isArray(this.sortDesc) ? sortDesc : sortDesc[0]);
    },

    groupBy(groupBy) {
      this.updateOptions({
        groupBy: wrapInArray(groupBy)
      });
    },

    'internalOptions.groupBy'(groupBy, old) {
      !deepEqual(groupBy, old) && this.$emit('update:group-by', Array.isArray(this.groupBy) ? groupBy : groupBy[0]);
    },

    groupDesc(groupDesc) {
      this.updateOptions({
        groupDesc: wrapInArray(groupDesc)
      });
    },

    'internalOptions.groupDesc'(groupDesc, old) {
      !deepEqual(groupDesc, old) && this.$emit('update:group-desc', Array.isArray(this.groupDesc) ? groupDesc : groupDesc[0]);
    },

    multiSort(multiSort) {
      this.updateOptions({
        multiSort
      });
    },

    'internalOptions.multiSort'(multiSort) {
      this.$emit('update:multi-sort', multiSort);
    },

    mustSort(mustSort) {
      this.updateOptions({
        mustSort
      });
    },

    'internalOptions.mustSort'(mustSort) {
      this.$emit('update:must-sort', mustSort);
    },

    pageCount: {
      handler(pageCount) {
        this.$emit('page-count', pageCount);
      },

      immediate: true
    },
    computedItems: {
      handler(computedItems) {
        this.$emit('current-items', computedItems);
      },

      immediate: true
    },
    pagination: {
      handler(pagination, old) {
        if (deepEqual(pagination, old)) return;
        this.$emit('pagination', this.pagination);
      },

      immediate: true
    }
  },
  methods: {
    toggle(key, oldBy, oldDesc, page, mustSort, multiSort) {
      let by = oldBy.slice();
      let desc = oldDesc.slice();
      const byIndex = by.findIndex(k => k === key);

      if (byIndex < 0) {
        if (!multiSort) {
          by = [];
          desc = [];
        }

        by.push(key);
        desc.push(false);
      } else if (byIndex >= 0 && !desc[byIndex]) {
        desc[byIndex] = true;
      } else if (!mustSort) {
        by.splice(byIndex, 1);
        desc.splice(byIndex, 1);
      } else {
        desc[byIndex] = false;
      } // Reset page to 1 if sortBy or sortDesc have changed


      if (!deepEqual(by, oldBy) || !deepEqual(desc, oldDesc)) {
        page = 1;
      }

      return {
        by,
        desc,
        page
      };
    },

    group(key) {
      const {
        by: groupBy,
        desc: groupDesc,
        page
      } = this.toggle(key, this.internalOptions.groupBy, this.internalOptions.groupDesc, this.internalOptions.page, true, false);
      this.updateOptions({
        groupBy,
        groupDesc,
        page
      });
    },

    sort(key) {
      if (Array.isArray(key)) return this.sortArray(key);
      const {
        by: sortBy,
        desc: sortDesc,
        page
      } = this.toggle(key, this.internalOptions.sortBy, this.internalOptions.sortDesc, this.internalOptions.page, this.internalOptions.mustSort, this.internalOptions.multiSort);
      this.updateOptions({
        sortBy,
        sortDesc,
        page
      });
    },

    sortArray(sortBy) {
      const sortDesc = sortBy.map(s => {
        const i = this.internalOptions.sortBy.findIndex(k => k === s);
        return i > -1 ? this.internalOptions.sortDesc[i] : false;
      });
      this.updateOptions({
        sortBy,
        sortDesc
      });
    },

    updateOptions(options) {
      this.internalOptions = { ...this.internalOptions,
        ...options,
        page: this.serverItemsLength < 0 ? Math.max(1, Math.min(options.page || this.internalOptions.page, this.pageCount)) : options.page || this.internalOptions.page
      };
    },

    sortItems(items) {
      let sortBy = [];
      let sortDesc = [];

      if (!this.disableSort) {
        sortBy = this.internalOptions.sortBy;
        sortDesc = this.internalOptions.sortDesc;
      }

      if (this.internalOptions.groupBy.length) {
        sortBy = [...this.internalOptions.groupBy, ...sortBy];
        sortDesc = [...this.internalOptions.groupDesc, ...sortDesc];
      }

      return this.customSort(items, sortBy, sortDesc, this.locale);
    },

    groupItems(items) {
      return this.customGroup(items, this.internalOptions.groupBy, this.internalOptions.groupDesc);
    },

    paginateItems(items) {
      // Make sure we don't try to display non-existant page if items suddenly change
      // TODO: Could possibly move this to pageStart/pageStop?
      if (this.serverItemsLength === -1 && items.length <= this.pageStart) {
        this.internalOptions.page = Math.max(1, Math.ceil(items.length / this.internalOptions.itemsPerPage)) || 1; // Prevent NaN
      }

      return items.slice(this.pageStart, this.pageStop);
    }

  },

  render() {
    return this.$scopedSlots.default && this.$scopedSlots.default(this.scopedProps);
  }

});

var VDataFooter$1 = '';

var VDataFooter = Vue$1.extend({
  name: 'v-data-footer',
  props: {
    options: {
      type: Object,
      required: true
    },
    pagination: {
      type: Object,
      required: true
    },
    itemsPerPageOptions: {
      type: Array,
      default: () => [5, 10, 15, -1]
    },
    prevIcon: {
      type: String,
      default: '$prev'
    },
    nextIcon: {
      type: String,
      default: '$next'
    },
    firstIcon: {
      type: String,
      default: '$first'
    },
    lastIcon: {
      type: String,
      default: '$last'
    },
    itemsPerPageText: {
      type: String,
      default: '$vuetify.dataFooter.itemsPerPageText'
    },
    itemsPerPageAllText: {
      type: String,
      default: '$vuetify.dataFooter.itemsPerPageAll'
    },
    showFirstLastPage: Boolean,
    showCurrentPage: Boolean,
    disablePagination: Boolean,
    disableItemsPerPage: Boolean,
    pageText: {
      type: String,
      default: '$vuetify.dataFooter.pageText'
    }
  },
  computed: {
    disableNextPageIcon() {
      return this.options.itemsPerPage <= 0 || this.options.page * this.options.itemsPerPage >= this.pagination.itemsLength || this.pagination.pageStop < 0;
    },

    computedDataItemsPerPageOptions() {
      return this.itemsPerPageOptions.map(option => {
        if (typeof option === 'object') return option;else return this.genDataItemsPerPageOption(option);
      });
    }

  },
  methods: {
    updateOptions(obj) {
      this.$emit('update:options', Object.assign({}, this.options, obj));
    },

    onFirstPage() {
      this.updateOptions({
        page: 1
      });
    },

    onPreviousPage() {
      this.updateOptions({
        page: this.options.page - 1
      });
    },

    onNextPage() {
      this.updateOptions({
        page: this.options.page + 1
      });
    },

    onLastPage() {
      this.updateOptions({
        page: this.pagination.pageCount
      });
    },

    onChangeItemsPerPage(itemsPerPage) {
      this.updateOptions({
        itemsPerPage,
        page: 1
      });
    },

    genDataItemsPerPageOption(option) {
      return {
        text: option === -1 ? this.$vuetify.lang.t(this.itemsPerPageAllText) : String(option),
        value: option
      };
    },

    genItemsPerPageSelect() {
      let value = this.options.itemsPerPage;
      const computedIPPO = this.computedDataItemsPerPageOptions;
      if (computedIPPO.length <= 1) return null;
      if (!computedIPPO.find(ippo => ippo.value === value)) value = computedIPPO[0];
      return this.$createElement('div', {
        staticClass: 'v-data-footer__select'
      }, [this.$vuetify.lang.t(this.itemsPerPageText), this.$createElement(__unplugin_components_0$3, {
        attrs: {
          'aria-label': this.$vuetify.lang.t(this.itemsPerPageText)
        },
        props: {
          disabled: this.disableItemsPerPage,
          items: computedIPPO,
          value,
          hideDetails: true,
          auto: true,
          minWidth: '75px'
        },
        on: {
          input: this.onChangeItemsPerPage
        }
      })]);
    },

    genPaginationInfo() {
      let children = ['–'];
      const itemsLength = this.pagination.itemsLength;
      let pageStart = this.pagination.pageStart;
      let pageStop = this.pagination.pageStop;

      if (this.pagination.itemsLength && this.pagination.itemsPerPage) {
        pageStart = this.pagination.pageStart + 1;
        pageStop = itemsLength < this.pagination.pageStop || this.pagination.pageStop < 0 ? itemsLength : this.pagination.pageStop;
        children = this.$scopedSlots['page-text'] ? [this.$scopedSlots['page-text']({
          pageStart,
          pageStop,
          itemsLength
        })] : [this.$vuetify.lang.t(this.pageText, pageStart, pageStop, itemsLength)];
      } else if (this.$scopedSlots['page-text']) {
        children = [this.$scopedSlots['page-text']({
          pageStart,
          pageStop,
          itemsLength
        })];
      }

      return this.$createElement('div', {
        class: 'v-data-footer__pagination'
      }, children);
    },

    genIcon(click, disabled, label, icon) {
      return this.$createElement(__unplugin_components_94, {
        props: {
          disabled: disabled || this.disablePagination,
          icon: true,
          text: true // dark: this.dark, // TODO: add mixin
          // light: this.light // TODO: add mixin

        },
        on: {
          click
        },
        attrs: {
          'aria-label': label // TODO: Localization

        }
      }, [this.$createElement(__unplugin_components_95, icon)]);
    },

    genIcons() {
      const before = [];
      const after = [];
      before.push(this.genIcon(this.onPreviousPage, this.options.page === 1, this.$vuetify.lang.t('$vuetify.dataFooter.prevPage'), this.$vuetify.rtl ? this.nextIcon : this.prevIcon));
      after.push(this.genIcon(this.onNextPage, this.disableNextPageIcon, this.$vuetify.lang.t('$vuetify.dataFooter.nextPage'), this.$vuetify.rtl ? this.prevIcon : this.nextIcon));

      if (this.showFirstLastPage) {
        before.unshift(this.genIcon(this.onFirstPage, this.options.page === 1, this.$vuetify.lang.t('$vuetify.dataFooter.firstPage'), this.$vuetify.rtl ? this.lastIcon : this.firstIcon));
        after.push(this.genIcon(this.onLastPage, this.options.page >= this.pagination.pageCount || this.options.itemsPerPage === -1, this.$vuetify.lang.t('$vuetify.dataFooter.lastPage'), this.$vuetify.rtl ? this.firstIcon : this.lastIcon));
      }

      return [this.$createElement('div', {
        staticClass: 'v-data-footer__icons-before'
      }, before), this.showCurrentPage && this.$createElement('span', [this.options.page.toString()]), this.$createElement('div', {
        staticClass: 'v-data-footer__icons-after'
      }, after)];
    }

  },

  render() {
    return this.$createElement('div', {
      staticClass: 'v-data-footer'
    }, [getSlot(this, 'prepend'), this.genItemsPerPageSelect(), this.genPaginationInfo(), this.genIcons()]);
  }

});

// Components
/* @vue/component */

var VDataIterator = mixins(Mobile, Themeable$1).extend({
  name: 'v-data-iterator',
  props: { ...VData.options.props,
    itemKey: {
      type: String,
      default: 'id'
    },
    value: {
      type: Array,
      default: () => []
    },
    singleSelect: Boolean,
    expanded: {
      type: Array,
      default: () => []
    },
    mobileBreakpoint: { ...Mobile.options.props.mobileBreakpoint,
      default: 600
    },
    singleExpand: Boolean,
    loading: [Boolean, String],
    noResultsText: {
      type: String,
      default: '$vuetify.dataIterator.noResultsText'
    },
    noDataText: {
      type: String,
      default: '$vuetify.noDataText'
    },
    loadingText: {
      type: String,
      default: '$vuetify.dataIterator.loadingText'
    },
    hideDefaultFooter: Boolean,
    footerProps: Object,
    selectableKey: {
      type: String,
      default: 'isSelectable'
    }
  },
  data: () => ({
    selection: {},
    expansion: {},
    internalCurrentItems: [],
    shiftKeyDown: false,
    lastEntry: -1
  }),
  computed: {
    everyItem() {
      return !!this.selectableItems.length && this.selectableItems.every(i => this.isSelected(i));
    },

    someItems() {
      return this.selectableItems.some(i => this.isSelected(i));
    },

    sanitizedFooterProps() {
      return camelizeObjectKeys(this.footerProps);
    },

    selectableItems() {
      return this.internalCurrentItems.filter(item => this.isSelectable(item));
    }

  },
  watch: {
    value: {
      handler(value) {
        this.selection = value.reduce((selection, item) => {
          selection[getObjectValueByPath(item, this.itemKey)] = item;
          return selection;
        }, {});
      },

      immediate: true
    },

    selection(value, old) {
      if (deepEqual(Object.keys(value), Object.keys(old))) return;
      this.$emit('input', Object.values(value));
    },

    expanded: {
      handler(value) {
        this.expansion = value.reduce((expansion, item) => {
          expansion[getObjectValueByPath(item, this.itemKey)] = true;
          return expansion;
        }, {});
      },

      immediate: true
    },

    expansion(value, old) {
      if (deepEqual(value, old)) return;
      const keys = Object.keys(value).filter(k => value[k]);
      const expanded = !keys.length ? [] : this.items.filter(i => keys.includes(String(getObjectValueByPath(i, this.itemKey))));
      this.$emit('update:expanded', expanded);
    }

  },

  created() {
    const breakingProps = [['disable-initial-sort', 'sort-by'], ['filter', 'custom-filter'], ['pagination', 'options'], ['total-items', 'server-items-length'], ['hide-actions', 'hide-default-footer'], ['rows-per-page-items', 'footer-props.items-per-page-options'], ['rows-per-page-text', 'footer-props.items-per-page-text'], ['prev-icon', 'footer-props.prev-icon'], ['next-icon', 'footer-props.next-icon']];
    /* istanbul ignore next */

    breakingProps.forEach(([original, replacement]) => {
      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);
    });
    const removedProps = ['expand', 'content-class', 'content-props', 'content-tag'];
    /* istanbul ignore next */

    removedProps.forEach(prop => {
      if (this.$attrs.hasOwnProperty(prop)) removed(prop);
    });
  },

  mounted() {
    window.addEventListener('keydown', this.onKeyDown);
    window.addEventListener('keyup', this.onKeyUp);
  },

  beforeDestroy() {
    window.removeEventListener('keydown', this.onKeyDown);
    window.removeEventListener('keyup', this.onKeyUp);
  },

  methods: {
    onKeyDown(e) {
      this.shiftKeyDown = e.keyCode === keyCodes.shift || e.shiftKey;
    },

    onKeyUp(e) {
      if (e.keyCode === keyCodes.shift || !e.shiftKey) {
        this.shiftKeyDown = false;
      }
    },

    toggleSelectAll(value) {
      const selection = Object.assign({}, this.selection);

      for (let i = 0; i < this.selectableItems.length; i++) {
        const item = this.selectableItems[i];
        if (!this.isSelectable(item)) continue;
        const key = getObjectValueByPath(item, this.itemKey);
        if (value) selection[key] = item;else delete selection[key];
      }

      this.selection = selection;
      this.$emit('toggle-select-all', {
        items: this.internalCurrentItems,
        value
      });
    },

    isSelectable(item) {
      return getObjectValueByPath(item, this.selectableKey) !== false;
    },

    isSelected(item) {
      return !!this.selection[getObjectValueByPath(item, this.itemKey)] || false;
    },

    select(item, value = true, emit = true) {
      if (!this.isSelectable(item)) return;
      const selection = this.singleSelect ? {} : Object.assign({}, this.selection);
      const key = getObjectValueByPath(item, this.itemKey);
      if (value) selection[key] = item;else delete selection[key];
      const index = this.selectableItems.findIndex(x => getObjectValueByPath(x, this.itemKey) === key);
      if (this.lastEntry === -1) this.lastEntry = index;else if (this.shiftKeyDown && !this.singleSelect && emit) {
        const lastEntryKey = getObjectValueByPath(this.selectableItems[this.lastEntry], this.itemKey);
        const lastEntryKeySelected = Object.keys(this.selection).includes(String(lastEntryKey));
        this.multipleSelect(lastEntryKeySelected, emit, selection, index);
      }
      this.lastEntry = index;

      if (this.singleSelect && emit) {
        const keys = Object.keys(this.selection);
        const old = keys.length && getObjectValueByPath(this.selection[keys[0]], this.itemKey);
        old && old !== key && this.$emit('item-selected', {
          item: this.selection[old],
          value: false
        });
      }

      this.selection = selection;
      emit && this.$emit('item-selected', {
        item,
        value
      });
    },

    multipleSelect(value = true, emit = true, selection, index) {
      const start = index < this.lastEntry ? index : this.lastEntry;
      const end = index < this.lastEntry ? this.lastEntry : index;

      for (let i = start; i <= end; i++) {
        const currentItem = this.selectableItems[i];
        const key = getObjectValueByPath(currentItem, this.itemKey);
        if (value) selection[key] = currentItem;else delete selection[key];
        emit && this.$emit('item-selected', {
          currentItem,
          value
        });
      }
    },

    isExpanded(item) {
      return this.expansion[getObjectValueByPath(item, this.itemKey)] || false;
    },

    expand(item, value = true) {
      const expansion = this.singleExpand ? {} : Object.assign({}, this.expansion);
      const key = getObjectValueByPath(item, this.itemKey);
      if (value) expansion[key] = true;else delete expansion[key];
      this.expansion = expansion;
      this.$emit('item-expanded', {
        item,
        value
      });
    },

    createItemProps(item, index) {
      return {
        item,
        index,
        select: v => this.select(item, v),
        isSelected: this.isSelected(item),
        expand: v => this.expand(item, v),
        isExpanded: this.isExpanded(item),
        isMobile: this.isMobile
      };
    },

    genEmptyWrapper(content) {
      return this.$createElement('div', content);
    },

    genEmpty(originalItemsLength, filteredItemsLength) {
      if (originalItemsLength === 0 && this.loading) {
        const loading = this.$slots.loading || this.$vuetify.lang.t(this.loadingText);
        return this.genEmptyWrapper(loading);
      } else if (originalItemsLength === 0) {
        const noData = this.$slots['no-data'] || this.$vuetify.lang.t(this.noDataText);
        return this.genEmptyWrapper(noData);
      } else if (filteredItemsLength === 0) {
        const noResults = this.$slots['no-results'] || this.$vuetify.lang.t(this.noResultsText);
        return this.genEmptyWrapper(noResults);
      }

      return null;
    },

    genItems(props) {
      const empty = this.genEmpty(props.originalItemsLength, props.pagination.itemsLength);
      if (empty) return [empty];

      if (this.$scopedSlots.default) {
        return this.$scopedSlots.default({ ...props,
          isSelected: this.isSelected,
          select: this.select,
          isExpanded: this.isExpanded,
          isMobile: this.isMobile,
          expand: this.expand
        });
      }

      if (this.$scopedSlots.item) {
        return props.items.map((item, index) => this.$scopedSlots.item(this.createItemProps(item, index)));
      }

      return [];
    },

    genFooter(props) {
      if (this.hideDefaultFooter) return null;
      const data = {
        props: { ...this.sanitizedFooterProps,
          options: props.options,
          pagination: props.pagination
        },
        on: {
          'update:options': value => props.updateOptions(value)
        }
      };
      const scopedSlots = getPrefixedScopedSlots('footer.', this.$scopedSlots);
      return this.$createElement(VDataFooter, {
        scopedSlots,
        ...data
      });
    },

    genDefaultScopedSlot(props) {
      const outerProps = { ...props,
        someItems: this.someItems,
        everyItem: this.everyItem,
        toggleSelectAll: this.toggleSelectAll
      };
      return this.$createElement('div', {
        staticClass: 'v-data-iterator'
      }, [getSlot(this, 'header', outerProps, true), this.genItems(props), this.genFooter(props), getSlot(this, 'footer', outerProps, true)]);
    }

  },

  render() {
    return this.$createElement(VData, {
      props: this.$props,
      on: {
        'update:options': (v, old) => !deepEqual(v, old) && this.$emit('update:options', v),
        'update:page': v => this.$emit('update:page', v),
        'update:items-per-page': v => this.$emit('update:items-per-page', v),
        'update:sort-by': v => this.$emit('update:sort-by', v),
        'update:sort-desc': v => this.$emit('update:sort-desc', v),
        'update:group-by': v => this.$emit('update:group-by', v),
        'update:group-desc': v => this.$emit('update:group-desc', v),
        pagination: (v, old) => !deepEqual(v, old) && this.$emit('pagination', v),
        'current-items': v => {
          this.internalCurrentItems = v;
          this.$emit('current-items', v);
        },
        'page-count': v => this.$emit('page-count', v)
      },
      scopedSlots: {
        default: this.genDefaultScopedSlot
      }
    });
  }

});

var VDataTable = '';

var VDataTableHeader$1 = '';

var header = mixins().extend({
  // https://github.com/vuejs/vue/issues/6872
  directives: {
    ripple: Ripple$1
  },
  props: {
    headers: {
      type: Array,
      default: () => []
    },
    options: {
      type: Object,
      default: () => ({
        page: 1,
        itemsPerPage: 10,
        sortBy: [],
        sortDesc: [],
        groupBy: [],
        groupDesc: [],
        multiSort: false,
        mustSort: false
      })
    },
    checkboxColor: String,
    sortIcon: {
      type: String,
      default: '$sort'
    },
    everyItem: Boolean,
    someItems: Boolean,
    showGroupBy: Boolean,
    singleSelect: Boolean,
    disableSort: Boolean
  },
  methods: {
    genSelectAll() {
      var _a;

      const data = {
        props: {
          value: this.everyItem,
          indeterminate: !this.everyItem && this.someItems,
          color: (_a = this.checkboxColor) !== null && _a !== void 0 ? _a : ''
        },
        on: {
          input: v => this.$emit('toggle-select-all', v)
        }
      };

      if (this.$scopedSlots['data-table-select']) {
        return this.$scopedSlots['data-table-select'](data);
      }

      return this.$createElement(VSimpleCheckbox, {
        staticClass: 'v-data-table__checkbox',
        ...data
      });
    },

    genSortIcon() {
      return this.$createElement(__unplugin_components_95, {
        staticClass: 'v-data-table-header__icon',
        props: {
          size: 18
        }
      }, [this.sortIcon]);
    }

  }
});

var VDataTableHeaderMobile = mixins(header).extend({
  name: 'v-data-table-header-mobile',
  props: {
    sortByText: {
      type: String,
      default: '$vuetify.dataTable.sortBy'
    }
  },
  methods: {
    genSortChip(props) {
      const children = [props.item.text];
      const sortIndex = this.options.sortBy.findIndex(k => k === props.item.value);
      const beingSorted = sortIndex >= 0;
      const isDesc = this.options.sortDesc[sortIndex];
      children.push(this.$createElement('div', {
        staticClass: 'v-chip__close',
        class: {
          sortable: true,
          active: beingSorted,
          asc: beingSorted && !isDesc,
          desc: beingSorted && isDesc
        }
      }, [this.genSortIcon()]));
      return this.$createElement(__unplugin_components_40, {
        staticClass: 'sortable',
        on: {
          click: e => {
            e.stopPropagation();
            this.$emit('sort', props.item.value);
          }
        }
      }, children);
    },

    genSortSelect(items) {
      return this.$createElement(__unplugin_components_0$3, {
        props: {
          label: this.$vuetify.lang.t(this.sortByText),
          items,
          hideDetails: true,
          multiple: this.options.multiSort,
          value: this.options.multiSort ? this.options.sortBy : this.options.sortBy[0],
          menuProps: {
            closeOnContentClick: true
          }
        },
        on: {
          change: v => this.$emit('sort', v)
        },
        scopedSlots: {
          selection: props => this.genSortChip(props)
        }
      });
    }

  },

  render(h) {
    const children = [];
    const header = this.headers.find(h => h.value === 'data-table-select');

    if (header && !this.singleSelect) {
      children.push(this.$createElement('div', {
        class: ['v-data-table-header-mobile__select', ...wrapInArray(header.class)],
        attrs: {
          width: header.width
        }
      }, [this.genSelectAll()]));
    }

    const sortHeaders = this.headers.filter(h => h.sortable !== false && h.value !== 'data-table-select').map(h => ({
      text: h.text,
      value: h.value
    }));

    if (!this.disableSort && sortHeaders.length) {
      children.push(this.genSortSelect(sortHeaders));
    }

    const th = children.length ? h('th', [h('div', {
      staticClass: 'v-data-table-header-mobile__wrapper'
    }, children)]) : undefined;
    const tr = h('tr', [th]);
    return h('thead', {
      staticClass: 'v-data-table-header v-data-table-header-mobile'
    }, [tr]);
  }

});

var VDataTableHeaderDesktop = mixins(header).extend({
  name: 'v-data-table-header-desktop',
  methods: {
    genGroupByToggle(header) {
      return this.$createElement('span', {
        on: {
          click: e => {
            e.stopPropagation();
            this.$emit('group', header.value);
          }
        }
      }, ['group']);
    },

    getAria(beingSorted, isDesc) {
      const $t = key => this.$vuetify.lang.t(`$vuetify.dataTable.ariaLabel.${key}`);

      let ariaSort = 'none';
      let ariaLabel = [$t('sortNone'), $t('activateAscending')];

      if (!beingSorted) {
        return {
          ariaSort,
          ariaLabel: ariaLabel.join(' ')
        };
      }

      if (isDesc) {
        ariaSort = 'descending';
        ariaLabel = [$t('sortDescending'), $t(this.options.mustSort ? 'activateAscending' : 'activateNone')];
      } else {
        ariaSort = 'ascending';
        ariaLabel = [$t('sortAscending'), $t('activateDescending')];
      }

      return {
        ariaSort,
        ariaLabel: ariaLabel.join(' ')
      };
    },

    genHeader(header) {
      const data = {
        attrs: {
          role: 'columnheader',
          scope: 'col',
          'aria-label': header.text || ''
        },
        style: {
          width: convertToUnit(header.width),
          minWidth: convertToUnit(header.width)
        },
        class: [`text-${header.align || 'start'}`, ...wrapInArray(header.class), header.divider && 'v-data-table__divider'],
        on: {}
      };
      const children = [];

      if (header.value === 'data-table-select' && !this.singleSelect) {
        return this.$createElement('th', data, [this.genSelectAll()]);
      }

      children.push(this.$scopedSlots.hasOwnProperty(header.value) ? this.$scopedSlots[header.value]({
        header
      }) : this.$createElement('span', [header.text]));

      if (!this.disableSort && (header.sortable || !header.hasOwnProperty('sortable'))) {
        data.on.click = () => this.$emit('sort', header.value);

        const sortIndex = this.options.sortBy.findIndex(k => k === header.value);
        const beingSorted = sortIndex >= 0;
        const isDesc = this.options.sortDesc[sortIndex];
        data.class.push('sortable');
        const {
          ariaLabel,
          ariaSort
        } = this.getAria(beingSorted, isDesc);
        data.attrs['aria-label'] += `${header.text ? ': ' : ''}${ariaLabel}`;
        data.attrs['aria-sort'] = ariaSort;

        if (beingSorted) {
          data.class.push('active');
          data.class.push(isDesc ? 'desc' : 'asc');
        }

        if (header.align === 'end') children.unshift(this.genSortIcon());else children.push(this.genSortIcon());

        if (this.options.multiSort && beingSorted) {
          children.push(this.$createElement('span', {
            class: 'v-data-table-header__sort-badge'
          }, [String(sortIndex + 1)]));
        }
      }

      if (this.showGroupBy && header.groupable !== false) children.push(this.genGroupByToggle(header));
      return this.$createElement('th', data, children);
    }

  },

  render() {
    return this.$createElement('thead', {
      staticClass: 'v-data-table-header'
    }, [this.$createElement('tr', this.headers.map(header => this.genHeader(header)))]);
  }

});

/**
 * Removes duplicate `@input` listeners when
 * using v-model with functional components
 *
 * @see https://github.com/vuetifyjs/vuetify/issues/4460
 */
function dedupeModelListeners(data) {
  if (data.model && data.on && data.on.input) {
    if (Array.isArray(data.on.input)) {
      const i = data.on.input.indexOf(data.model.callback);
      if (i > -1) data.on.input.splice(i, 1);
    } else {
      delete data.on.input;
    }
  }
}

function rebuildFunctionalSlots(slots, h) {
  const children = [];

  for (const slot in slots) {
    if (slots.hasOwnProperty(slot)) {
      children.push(h('template', {
        slot
      }, slots[slot]));
    }
  }

  return children;
}

// Styles
/* @vue/component */

var VDataTableHeader = Vue$1.extend({
  name: 'v-data-table-header',
  functional: true,
  props: { ...header.options.props,
    mobile: Boolean
  },

  render(h, {
    props,
    data,
    slots
  }) {
    dedupeModelListeners(data);
    const children = rebuildFunctionalSlots(slots(), h);
    data = mergeData(data, {
      props
    });

    if (props.mobile) {
      return h(VDataTableHeaderMobile, data, children);
    } else {
      return h(VDataTableHeaderDesktop, data, children);
    }
  }

});

// Types

function needsTd(slot) {
  var _a;

  return slot.length !== 1 || !['td', 'th'].includes((_a = slot[0]) === null || _a === void 0 ? void 0 : _a.tag);
}

var Row = Vue$1.extend({
  name: 'row',
  functional: true,
  props: {
    headers: Array,
    index: Number,
    item: Object,
    rtl: Boolean
  },

  render(h, {
    props,
    slots,
    data
  }) {
    const computedSlots = slots();
    const columns = props.headers.map(header => {
      const children = [];
      const value = getObjectValueByPath(props.item, header.value);
      const slotName = header.value;
      const scopedSlot = data.scopedSlots && data.scopedSlots.hasOwnProperty(slotName) && data.scopedSlots[slotName];
      const regularSlot = computedSlots.hasOwnProperty(slotName) && computedSlots[slotName];

      if (scopedSlot) {
        children.push(...wrapInArray(scopedSlot({
          item: props.item,
          isMobile: false,
          header,
          index: props.index,
          value
        })));
      } else if (regularSlot) {
        children.push(...wrapInArray(regularSlot));
      } else {
        children.push(value == null ? value : String(value));
      }

      const textAlign = `text-${header.align || 'start'}`;
      return needsTd(children) ? h('td', {
        class: [textAlign, header.cellClass, {
          'v-data-table__divider': header.divider
        }]
      }, children) : children;
    });
    return h('tr', data, columns);
  }

});

var RowGroup = Vue$1.extend({
  name: 'row-group',
  functional: true,
  props: {
    value: {
      type: Boolean,
      default: true
    },
    headerClass: {
      type: String,
      default: 'v-row-group__header'
    },
    contentClass: String,
    summaryClass: {
      type: String,
      default: 'v-row-group__summary'
    }
  },

  render(h, {
    slots,
    props
  }) {
    const computedSlots = slots();
    const children = [];

    if (computedSlots['column.header']) {
      children.push(h('tr', {
        staticClass: props.headerClass
      }, computedSlots['column.header']));
    } else if (computedSlots['row.header']) {
      children.push(...computedSlots['row.header']);
    }

    if (computedSlots['row.content'] && props.value) children.push(...computedSlots['row.content']);

    if (computedSlots['column.summary']) {
      children.push(h('tr', {
        staticClass: props.summaryClass
      }, computedSlots['column.summary']));
    } else if (computedSlots['row.summary']) {
      children.push(...computedSlots['row.summary']);
    }

    return children;
  }

});

var VSimpleTable$1 = '';

var VSimpleTable = mixins(Themeable$1).extend({
  name: 'v-simple-table',
  props: {
    dense: Boolean,
    fixedHeader: Boolean,
    height: [Number, String]
  },
  computed: {
    classes() {
      return {
        'v-data-table--dense': this.dense,
        'v-data-table--fixed-height': !!this.height && !this.fixedHeader,
        'v-data-table--fixed-header': this.fixedHeader,
        'v-data-table--has-top': !!this.$slots.top,
        'v-data-table--has-bottom': !!this.$slots.bottom,
        ...this.themeClasses
      };
    }

  },
  methods: {
    genWrapper() {
      return this.$slots.wrapper || this.$createElement('div', {
        staticClass: 'v-data-table__wrapper',
        style: {
          height: convertToUnit(this.height)
        }
      }, [this.$createElement('table', this.$slots.default)]);
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'v-data-table',
      class: this.classes
    }, [this.$slots.top, this.genWrapper(), this.$slots.bottom]);
  }

});

var MobileRow = Vue$1.extend({
  name: 'row',
  functional: true,
  props: {
    headers: Array,
    hideDefaultHeader: Boolean,
    index: Number,
    item: Object,
    rtl: Boolean
  },

  render(h, {
    props,
    slots,
    data
  }) {
    const computedSlots = slots();
    const columns = props.headers.map(header => {
      const classes = {
        'v-data-table__mobile-row': true
      };
      const children = [];
      const value = getObjectValueByPath(props.item, header.value);
      const slotName = header.value;
      const scopedSlot = data.scopedSlots && data.scopedSlots.hasOwnProperty(slotName) && data.scopedSlots[slotName];
      const regularSlot = computedSlots.hasOwnProperty(slotName) && computedSlots[slotName];

      if (scopedSlot) {
        children.push(scopedSlot({
          item: props.item,
          isMobile: true,
          header,
          index: props.index,
          value
        }));
      } else if (regularSlot) {
        children.push(regularSlot);
      } else {
        children.push(value == null ? value : String(value));
      }

      const mobileRowChildren = [h('div', {
        staticClass: 'v-data-table__mobile-row__cell'
      }, children)];

      if (header.value !== 'dataTableSelect' && !props.hideDefaultHeader) {
        mobileRowChildren.unshift(h('div', {
          staticClass: 'v-data-table__mobile-row__header'
        }, [header.text]));
      }

      return h('td', {
        class: classes
      }, mobileRowChildren);
    });
    return h('tr', { ...data,
      staticClass: 'v-data-table__mobile-table-row'
    }, columns);
  }

});

function filterFn(item, search, filter) {
  return header => {
    const value = getObjectValueByPath(item, header.value);
    return header.filter ? header.filter(value, search, item) : filter(value, search, item);
  };
}

function searchTableItems(items, search, headersWithCustomFilters, headersWithoutCustomFilters, customFilter, filterMode) {
  search = typeof search === 'string' ? search.trim() : null;

  if (filterMode === 'union') {
    // If the `search` property is empty and there are no custom filters in use, there is nothing to do.
    if (!(search && headersWithoutCustomFilters.length) && !headersWithCustomFilters.length) return items;
    return items.filter(item => {
      // Headers with custom filters are evaluated whether or not a search term has been provided.
      if (headersWithCustomFilters.length && headersWithCustomFilters.every(filterFn(item, search, defaultFilter$2))) {
        return true;
      } // Otherwise, the `search` property is used to filter columns without a custom filter.


      return search && headersWithoutCustomFilters.some(filterFn(item, search, customFilter));
    });
  } else if (filterMode === 'intersection') {
    return items.filter(item => {
      // Headers with custom filters are evaluated whether or not a search term has been provided.
      // We need to match every filter to be included in the results.
      const matchesColumnFilters = headersWithCustomFilters.every(filterFn(item, search, defaultFilter$2)); // Headers without custom filters are only filtered by the `search` property if it is defined.
      // We only need a single column to match the search term to be included in the results.

      const matchesSearchTerm = !search || headersWithoutCustomFilters.some(filterFn(item, search, customFilter));
      return matchesColumnFilters && matchesSearchTerm;
    });
  } else {
    return items;
  }
}
/* @vue/component */


var __unplugin_components_0$2 = mixins(VDataIterator, Loadable, Mouse).extend({
  name: 'v-data-table',
  // https://github.com/vuejs/vue/issues/6872
  directives: {
    ripple: Ripple$1
  },
  props: {
    headers: {
      type: Array,
      default: () => []
    },
    showSelect: Boolean,
    checkboxColor: String,
    showExpand: Boolean,
    showGroupBy: Boolean,
    // TODO: Fix
    // virtualRows: Boolean,
    height: [Number, String],
    hideDefaultHeader: Boolean,
    caption: String,
    dense: Boolean,
    headerProps: Object,
    calculateWidths: Boolean,
    fixedHeader: Boolean,
    headersLength: Number,
    expandIcon: {
      type: String,
      default: '$expand'
    },
    customFilter: {
      type: Function,
      default: defaultFilter$2
    },
    filterMode: {
      type: String,
      default: 'intersection'
    },
    itemClass: {
      type: [String, Function],
      default: () => ''
    },
    itemStyle: {
      type: [String, Function],
      default: () => ''
    },
    loaderHeight: {
      type: [Number, String],
      default: 4
    }
  },

  data() {
    return {
      internalGroupBy: [],
      openCache: {},
      widths: []
    };
  },

  computed: {
    computedHeaders() {
      if (!this.headers) return [];
      const headers = this.headers.filter(h => h.value === undefined || !this.internalGroupBy.find(v => v === h.value));
      const defaultHeader = {
        text: '',
        sortable: false,
        width: '1px'
      };

      if (this.showSelect) {
        const index = headers.findIndex(h => h.value === 'data-table-select');
        if (index < 0) headers.unshift({ ...defaultHeader,
          value: 'data-table-select'
        });else headers.splice(index, 1, { ...defaultHeader,
          ...headers[index]
        });
      }

      if (this.showExpand) {
        const index = headers.findIndex(h => h.value === 'data-table-expand');
        if (index < 0) headers.unshift({ ...defaultHeader,
          value: 'data-table-expand'
        });else headers.splice(index, 1, { ...defaultHeader,
          ...headers[index]
        });
      }

      return headers;
    },

    colspanAttrs() {
      return this.isMobile ? undefined : {
        colspan: this.headersLength || this.computedHeaders.length
      };
    },

    columnSorters() {
      return this.computedHeaders.reduce((acc, header) => {
        if (header.sort) acc[header.value] = header.sort;
        return acc;
      }, {});
    },

    headersWithCustomFilters() {
      return this.headers.filter(header => header.filter && (!header.hasOwnProperty('filterable') || header.filterable === true));
    },

    headersWithoutCustomFilters() {
      return this.headers.filter(header => !header.filter && (!header.hasOwnProperty('filterable') || header.filterable === true));
    },

    sanitizedHeaderProps() {
      return camelizeObjectKeys(this.headerProps);
    },

    computedItemsPerPage() {
      const itemsPerPage = this.options && this.options.itemsPerPage ? this.options.itemsPerPage : this.itemsPerPage;
      const itemsPerPageOptions = this.sanitizedFooterProps.itemsPerPageOptions;

      if (itemsPerPageOptions && !itemsPerPageOptions.find(item => typeof item === 'number' ? item === itemsPerPage : item.value === itemsPerPage)) {
        const firstOption = itemsPerPageOptions[0];
        return typeof firstOption === 'object' ? firstOption.value : firstOption;
      }

      return itemsPerPage;
    },

    groupByText() {
      var _a, _b, _c;

      return (_c = (_b = (_a = this.headers) === null || _a === void 0 ? void 0 : _a.find(header => {
        var _a;

        return header.value === ((_a = this.internalGroupBy) === null || _a === void 0 ? void 0 : _a[0]);
      })) === null || _b === void 0 ? void 0 : _b.text) !== null && _c !== void 0 ? _c : '';
    }

  },

  created() {
    const breakingProps = [['sort-icon', 'header-props.sort-icon'], ['hide-headers', 'hide-default-header'], ['select-all', 'show-select']];
    /* istanbul ignore next */

    breakingProps.forEach(([original, replacement]) => {
      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);
    });
  },

  mounted() {
    // if ((!this.sortBy || !this.sortBy.length) && (!this.options.sortBy || !this.options.sortBy.length)) {
    //   const firstSortable = this.headers.find(h => !('sortable' in h) || !!h.sortable)
    //   if (firstSortable) this.updateOptions({ sortBy: [firstSortable.value], sortDesc: [false] })
    // }
    if (this.calculateWidths) {
      window.addEventListener('resize', this.calcWidths);
      this.calcWidths();
    }
  },

  beforeDestroy() {
    if (this.calculateWidths) {
      window.removeEventListener('resize', this.calcWidths);
    }
  },

  methods: {
    calcWidths() {
      this.widths = Array.from(this.$el.querySelectorAll('th')).map(e => e.clientWidth);
    },

    customFilterWithColumns(items, search) {
      return searchTableItems(items, search, this.headersWithCustomFilters, this.headersWithoutCustomFilters, this.customFilter, this.filterMode);
    },

    customSortWithHeaders(items, sortBy, sortDesc, locale) {
      return this.customSort(items, sortBy, sortDesc, locale, this.columnSorters);
    },

    createItemProps(item, index) {
      const data = { ...VDataIterator.options.methods.createItemProps.call(this, item, index),
        headers: this.computedHeaders
      };
      return { ...data,
        attrs: {
          class: {
            'v-data-table__selected': data.isSelected
          }
        },
        on: { ...this.getDefaultMouseEventHandlers(':row', () => data, true),
          // TODO: the first argument should be the event, and the second argument should be data,
          // but this is a breaking change so it's for v3
          click: event => this.$emit('click:row', item, data, event)
        }
      };
    },

    genCaption(props) {
      if (this.caption) return [this.$createElement('caption', [this.caption])];
      return getSlot(this, 'caption', props, true);
    },

    genColgroup(props) {
      return this.$createElement('colgroup', this.computedHeaders.map(header => {
        return this.$createElement('col', {
          class: {
            divider: header.divider
          }
        });
      }));
    },

    genLoading() {
      const th = this.$createElement('th', {
        staticClass: 'column',
        attrs: this.colspanAttrs
      }, [this.genProgress()]);
      const tr = this.$createElement('tr', {
        staticClass: 'v-data-table__progress'
      }, [th]);
      return this.$createElement('thead', [tr]);
    },

    genHeaders(props) {
      const data = {
        props: { ...this.sanitizedHeaderProps,
          headers: this.computedHeaders,
          options: props.options,
          mobile: this.isMobile,
          showGroupBy: this.showGroupBy,
          checkboxColor: this.checkboxColor,
          someItems: this.someItems,
          everyItem: this.everyItem,
          singleSelect: this.singleSelect,
          disableSort: this.disableSort
        },
        on: {
          sort: props.sort,
          group: props.group,
          'toggle-select-all': this.toggleSelectAll
        }
      }; // TODO: rename to 'head'? (thead, tbody, tfoot)

      const children = [getSlot(this, 'header', { ...data,
        isMobile: this.isMobile
      })];

      if (!this.hideDefaultHeader) {
        const scopedSlots = getPrefixedScopedSlots('header.', this.$scopedSlots);
        children.push(this.$createElement(VDataTableHeader, { ...data,
          scopedSlots
        }));
      }

      if (this.loading) children.push(this.genLoading());
      return children;
    },

    genEmptyWrapper(content) {
      return this.$createElement('tr', {
        staticClass: 'v-data-table__empty-wrapper'
      }, [this.$createElement('td', {
        attrs: this.colspanAttrs
      }, content)]);
    },

    genItems(items, props) {
      const empty = this.genEmpty(props.originalItemsLength, props.pagination.itemsLength);
      if (empty) return [empty];
      return props.groupedItems ? this.genGroupedRows(props.groupedItems, props) : this.genRows(items, props);
    },

    genGroupedRows(groupedItems, props) {
      return groupedItems.map(group => {
        if (!this.openCache.hasOwnProperty(group.name)) this.$set(this.openCache, group.name, true);

        if (this.$scopedSlots.group) {
          return this.$scopedSlots.group({
            group: group.name,
            options: props.options,
            isMobile: this.isMobile,
            items: group.items,
            headers: this.computedHeaders
          });
        } else {
          return this.genDefaultGroupedRow(group.name, group.items, props);
        }
      });
    },

    genDefaultGroupedRow(group, items, props) {
      const isOpen = !!this.openCache[group];
      const children = [this.$createElement('template', {
        slot: 'row.content'
      }, this.genRows(items, props))];

      const toggleFn = () => this.$set(this.openCache, group, !this.openCache[group]);

      const removeFn = () => props.updateOptions({
        groupBy: [],
        groupDesc: []
      });

      if (this.$scopedSlots['group.header']) {
        children.unshift(this.$createElement('template', {
          slot: 'column.header'
        }, [this.$scopedSlots['group.header']({
          group,
          groupBy: props.options.groupBy,
          isMobile: this.isMobile,
          items,
          headers: this.computedHeaders,
          isOpen,
          toggle: toggleFn,
          remove: removeFn
        })]));
      } else {
        const toggle = this.$createElement(__unplugin_components_94, {
          staticClass: 'ma-0',
          props: {
            icon: true,
            small: true
          },
          on: {
            click: toggleFn
          }
        }, [this.$createElement(__unplugin_components_95, [isOpen ? '$minus' : '$plus'])]);
        const remove = this.$createElement(__unplugin_components_94, {
          staticClass: 'ma-0',
          props: {
            icon: true,
            small: true
          },
          on: {
            click: removeFn
          }
        }, [this.$createElement(__unplugin_components_95, ['$close'])]);
        const column = this.$createElement('td', {
          staticClass: 'text-start',
          attrs: this.colspanAttrs
        }, [toggle, `${this.groupByText}: ${group}`, remove]);
        children.unshift(this.$createElement('template', {
          slot: 'column.header'
        }, [column]));
      }

      if (this.$scopedSlots['group.summary']) {
        children.push(this.$createElement('template', {
          slot: 'column.summary'
        }, [this.$scopedSlots['group.summary']({
          group,
          groupBy: props.options.groupBy,
          isMobile: this.isMobile,
          items,
          headers: this.computedHeaders,
          isOpen,
          toggle: toggleFn
        })]));
      }

      return this.$createElement(RowGroup, {
        key: group,
        props: {
          value: isOpen
        }
      }, children);
    },

    genRows(items, props) {
      return this.$scopedSlots.item ? this.genScopedRows(items, props) : this.genDefaultRows(items, props);
    },

    genScopedRows(items, props) {
      const rows = [];

      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        rows.push(this.$scopedSlots.item({ ...this.createItemProps(item, i),
          isMobile: this.isMobile
        }));

        if (this.isExpanded(item)) {
          rows.push(this.$scopedSlots['expanded-item']({
            headers: this.computedHeaders,
            isMobile: this.isMobile,
            index: i,
            item
          }));
        }
      }

      return rows;
    },

    genDefaultRows(items, props) {
      return this.$scopedSlots['expanded-item'] ? items.map((item, index) => this.genDefaultExpandedRow(item, index)) : items.map((item, index) => this.genDefaultSimpleRow(item, index));
    },

    genDefaultExpandedRow(item, index) {
      const isExpanded = this.isExpanded(item);
      const classes = {
        'v-data-table__expanded v-data-table__expanded__row': isExpanded
      };
      const headerRow = this.genDefaultSimpleRow(item, index, classes);
      const expandedRow = this.$createElement('tr', {
        staticClass: 'v-data-table__expanded v-data-table__expanded__content'
      }, [this.$scopedSlots['expanded-item']({
        headers: this.computedHeaders,
        isMobile: this.isMobile,
        item
      })]);
      return this.$createElement(RowGroup, {
        props: {
          value: isExpanded
        }
      }, [this.$createElement('template', {
        slot: 'row.header'
      }, [headerRow]), this.$createElement('template', {
        slot: 'row.content'
      }, [expandedRow])]);
    },

    genDefaultSimpleRow(item, index, classes = {}) {
      const scopedSlots = getPrefixedScopedSlots('item.', this.$scopedSlots);
      const data = this.createItemProps(item, index);

      if (this.showSelect) {
        const slot = scopedSlots['data-table-select'];
        scopedSlots['data-table-select'] = slot ? () => slot({ ...data,
          isMobile: this.isMobile
        }) : () => {
          var _a;

          return this.$createElement(VSimpleCheckbox, {
            staticClass: 'v-data-table__checkbox',
            props: {
              value: data.isSelected,
              disabled: !this.isSelectable(item),
              color: (_a = this.checkboxColor) !== null && _a !== void 0 ? _a : ''
            },
            on: {
              input: val => data.select(val)
            }
          });
        };
      }

      if (this.showExpand) {
        const slot = scopedSlots['data-table-expand'];
        scopedSlots['data-table-expand'] = slot ? () => slot(data) : () => this.$createElement(__unplugin_components_95, {
          staticClass: 'v-data-table__expand-icon',
          class: {
            'v-data-table__expand-icon--active': data.isExpanded
          },
          on: {
            click: e => {
              e.stopPropagation();
              data.expand(!data.isExpanded);
            }
          }
        }, [this.expandIcon]);
      }

      return this.$createElement(this.isMobile ? MobileRow : Row, {
        key: getObjectValueByPath(item, this.itemKey),
        class: mergeClasses({ ...classes,
          'v-data-table__selected': data.isSelected
        }, getPropertyFromItem(item, this.itemClass)),
        style: mergeStyles({}, getPropertyFromItem(item, this.itemStyle)),
        props: {
          headers: this.computedHeaders,
          hideDefaultHeader: this.hideDefaultHeader,
          index,
          item,
          rtl: this.$vuetify.rtl
        },
        scopedSlots,
        on: data.on
      });
    },

    genBody(props) {
      const data = { ...props,
        expand: this.expand,
        headers: this.computedHeaders,
        isExpanded: this.isExpanded,
        isMobile: this.isMobile,
        isSelected: this.isSelected,
        select: this.select
      };

      if (this.$scopedSlots.body) {
        return this.$scopedSlots.body(data);
      }

      return this.$createElement('tbody', [getSlot(this, 'body.prepend', data, true), this.genItems(props.items, props), getSlot(this, 'body.append', data, true)]);
    },

    genFoot(props) {
      var _a, _b;

      return (_b = (_a = this.$scopedSlots).foot) === null || _b === void 0 ? void 0 : _b.call(_a, props);
    },

    genFooters(props) {
      const data = {
        props: {
          options: props.options,
          pagination: props.pagination,
          itemsPerPageText: '$vuetify.dataTable.itemsPerPageText',
          ...this.sanitizedFooterProps
        },
        on: {
          'update:options': value => props.updateOptions(value)
        },
        widths: this.widths,
        headers: this.computedHeaders
      };
      const children = [getSlot(this, 'footer', data, true)];

      if (!this.hideDefaultFooter) {
        children.push(this.$createElement(VDataFooter, { ...data,
          scopedSlots: getPrefixedScopedSlots('footer.', this.$scopedSlots)
        }));
      }

      return children;
    },

    genDefaultScopedSlot(props) {
      const simpleProps = {
        height: this.height,
        fixedHeader: this.fixedHeader,
        dense: this.dense
      }; // if (this.virtualRows) {
      //   return this.$createElement(VVirtualTable, {
      //     props: Object.assign(simpleProps, {
      //       items: props.items,
      //       height: this.height,
      //       rowHeight: this.dense ? 24 : 48,
      //       headerHeight: this.dense ? 32 : 48,
      //       // TODO: expose rest of props from virtual table?
      //     }),
      //     scopedSlots: {
      //       items: ({ items }) => this.genItems(items, props) as any,
      //     },
      //   }, [
      //     this.proxySlot('body.before', [this.genCaption(props), this.genHeaders(props)]),
      //     this.proxySlot('bottom', this.genFooters(props)),
      //   ])
      // }

      return this.$createElement(VSimpleTable, {
        props: simpleProps,
        class: {
          'v-data-table--mobile': this.isMobile,
          'v-data-table--selectable': this.showSelect
        }
      }, [this.proxySlot('top', getSlot(this, 'top', { ...props,
        isMobile: this.isMobile
      }, true)), this.genCaption(props), this.genColgroup(props), this.genHeaders(props), this.genBody(props), this.genFoot(props), this.proxySlot('bottom', this.genFooters(props))]);
    },

    proxySlot(slot, content) {
      return this.$createElement('template', {
        slot
      }, content);
    }

  },

  render() {
    return this.$createElement(VData, {
      props: { ...this.$props,
        customFilter: this.customFilterWithColumns,
        customSort: this.customSortWithHeaders,
        itemsPerPage: this.computedItemsPerPage
      },
      on: {
        'update:options': (v, old) => {
          this.internalGroupBy = v.groupBy || [];
          !deepEqual(v, old) && this.$emit('update:options', v);
        },
        'update:page': v => this.$emit('update:page', v),
        'update:items-per-page': v => this.$emit('update:items-per-page', v),
        'update:sort-by': v => this.$emit('update:sort-by', v),
        'update:sort-desc': v => this.$emit('update:sort-desc', v),
        'update:group-by': v => this.$emit('update:group-by', v),
        'update:group-desc': v => this.$emit('update:group-desc', v),
        pagination: (v, old) => !deepEqual(v, old) && this.$emit('pagination', v),
        'current-items': v => {
          this.internalCurrentItems = v;
          this.$emit('current-items', v);
        },
        'page-count': v => this.$emit('page-count', v)
      },
      scopedSlots: {
        default: this.genDefaultScopedSlot
      }
    });
  }

});

createSimpleFunctional('v-table__overflow');

var VExpansionPanel = '';

// Styles
/* @vue/component */

var __unplugin_components_55 = BaseItemGroup.extend({
  name: 'v-expansion-panels',

  provide() {
    return {
      expansionPanels: this
    };
  },

  props: {
    accordion: Boolean,
    disabled: Boolean,
    flat: Boolean,
    hover: Boolean,
    focusable: Boolean,
    inset: Boolean,
    popout: Boolean,
    readonly: Boolean,
    tile: Boolean
  },
  computed: {
    classes() {
      return { ...BaseItemGroup.options.computed.classes.call(this),
        'v-expansion-panels': true,
        'v-expansion-panels--accordion': this.accordion,
        'v-expansion-panels--flat': this.flat,
        'v-expansion-panels--hover': this.hover,
        'v-expansion-panels--focusable': this.focusable,
        'v-expansion-panels--inset': this.inset,
        'v-expansion-panels--popout': this.popout,
        'v-expansion-panels--tile': this.tile
      };
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('expand')) {
      breaking('expand', 'multiple', this);
    }
    /* istanbul ignore next */


    if (Array.isArray(this.value) && this.value.length > 0 && typeof this.value[0] === 'boolean') {
      breaking(':value="[true, false, true]"', ':value="[0, 2]"', this);
    }
  },

  methods: {
    updateItem(item, index) {
      const value = this.getValue(item, index);
      const nextValue = this.getValue(item, index + 1);
      item.isActive = this.toggleMethod(value);
      item.nextIsActive = this.toggleMethod(nextValue);
    }

  }
});

// Mixins
var __unplugin_components_56 = mixins(factory$1('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'), provide('expansionPanel', true)
/* @vue/component */
).extend({
  name: 'v-expansion-panel',
  props: {
    disabled: Boolean,
    readonly: Boolean
  },

  data() {
    return {
      content: null,
      header: null,
      nextIsActive: false
    };
  },

  computed: {
    classes() {
      return {
        'v-expansion-panel--active': this.isActive,
        'v-expansion-panel--next-active': this.nextIsActive,
        'v-expansion-panel--disabled': this.isDisabled,
        ...this.groupClasses
      };
    },

    isDisabled() {
      return this.expansionPanels.disabled || this.disabled;
    },

    isReadonly() {
      return this.expansionPanels.readonly || this.readonly;
    }

  },
  methods: {
    registerContent(vm) {
      this.content = vm;
    },

    unregisterContent() {
      this.content = null;
    },

    registerHeader(vm) {
      this.header = vm;
      vm.$on('click', this.onClick);
    },

    unregisterHeader() {
      this.header = null;
    },

    onClick(e) {
      if (e.detail) this.header.$el.blur();
      this.$emit('click', e);
      this.isReadonly || this.isDisabled || this.toggle();
    },

    toggle() {
      this.$nextTick(() => this.$emit('change'));
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'v-expansion-panel',
      class: this.classes,
      attrs: {
        'aria-expanded': String(this.isActive)
      }
    }, getSlot(this));
  }

});

const baseMixins$c = mixins(Bootable, Colorable, inject('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel'));
/* @vue/component */

var __unplugin_components_58 = baseMixins$c.extend().extend({
  name: 'v-expansion-panel-content',
  data: () => ({
    isActive: false
  }),
  computed: {
    parentIsActive() {
      return this.expansionPanel.isActive;
    }

  },
  watch: {
    parentIsActive: {
      immediate: true,

      handler(val, oldVal) {
        if (val) this.isBooted = true;
        if (oldVal == null) this.isActive = val;else this.$nextTick(() => this.isActive = val);
      }

    }
  },

  created() {
    this.expansionPanel.registerContent(this);
  },

  beforeDestroy() {
    this.expansionPanel.unregisterContent();
  },

  render(h) {
    return h(VExpandTransition, this.showLazyContent(() => [h('div', this.setBackgroundColor(this.color, {
      staticClass: 'v-expansion-panel-content',
      directives: [{
        name: 'show',
        value: this.isActive
      }]
    }), [h('div', {
      class: 'v-expansion-panel-content__wrap'
    }, getSlot(this, 'default', {
      open: this.isActive
    }))])]));
  }

});

// Components
const baseMixins$b = mixins(Colorable, inject('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel'));
var __unplugin_components_57 = baseMixins$b.extend().extend({
  name: 'v-expansion-panel-header',
  directives: {
    ripple: Ripple$1
  },
  props: {
    disableIconRotate: Boolean,
    expandIcon: {
      type: String,
      default: '$expand'
    },
    hideActions: Boolean,
    ripple: {
      type: [Boolean, Object],
      default: false
    }
  },
  data: () => ({
    hasMousedown: false
  }),
  computed: {
    classes() {
      return {
        'v-expansion-panel-header--active': this.isActive,
        'v-expansion-panel-header--mousedown': this.hasMousedown
      };
    },

    isActive() {
      return this.expansionPanel.isActive;
    },

    isDisabled() {
      return this.expansionPanel.isDisabled;
    },

    isReadonly() {
      return this.expansionPanel.isReadonly;
    }

  },

  created() {
    this.expansionPanel.registerHeader(this);
  },

  beforeDestroy() {
    this.expansionPanel.unregisterHeader();
  },

  methods: {
    onClick(e) {
      this.$emit('click', e);
    },

    genIcon() {
      const icon = getSlot(this, 'actions', {
        open: this.isActive
      }) || [this.$createElement(__unplugin_components_95, this.expandIcon)];
      return this.$createElement(VFadeTransition, [this.$createElement('div', {
        staticClass: 'v-expansion-panel-header__icon',
        class: {
          'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate
        },
        directives: [{
          name: 'show',
          value: !this.isDisabled
        }]
      }, icon)]);
    }

  },

  render(h) {
    return h('button', this.setBackgroundColor(this.color, {
      staticClass: 'v-expansion-panel-header',
      class: this.classes,
      attrs: {
        tabindex: this.isDisabled ? -1 : null,
        type: 'button',
        'aria-expanded': this.isActive
      },
      directives: [{
        name: 'ripple',
        value: this.ripple
      }],
      on: { ...this.$listeners,
        click: this.onClick,
        mousedown: () => this.hasMousedown = true,
        mouseup: () => this.hasMousedown = false
      }
    }), [getSlot(this, 'default', {
      open: this.isActive
    }, true), this.hideActions || this.genIcon()]);
  }

});

var VFileInput = '';

// Styles
var __unplugin_components_52 = __unplugin_components_89.extend({
  name: 'v-file-input',
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    chips: Boolean,
    clearable: {
      type: Boolean,
      default: true
    },
    counterSizeString: {
      type: String,
      default: '$vuetify.fileInput.counterSize'
    },
    counterString: {
      type: String,
      default: '$vuetify.fileInput.counter'
    },
    hideInput: Boolean,
    multiple: Boolean,
    placeholder: String,
    prependIcon: {
      type: String,
      default: '$file'
    },
    readonly: {
      type: Boolean,
      default: false
    },
    showSize: {
      type: [Boolean, Number],
      default: false,
      validator: v => {
        return typeof v === 'boolean' || [1000, 1024].includes(v);
      }
    },
    smallChips: Boolean,
    truncateLength: {
      type: [Number, String],
      default: 22
    },
    type: {
      type: String,
      default: 'file'
    },
    value: {
      default: undefined,
      validator: val => {
        return wrapInArray(val).every(v => v != null && typeof v === 'object');
      }
    }
  },
  computed: {
    classes() {
      return { ...__unplugin_components_89.options.computed.classes.call(this),
        'v-file-input': true
      };
    },

    computedCounterValue() {
      const fileCount = this.multiple && this.lazyValue ? this.lazyValue.length : this.lazyValue instanceof File ? 1 : 0;
      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount);
      const bytes = this.internalArrayValue.reduce((bytes, {
        size = 0
      }) => {
        return bytes + size;
      }, 0);
      return this.$vuetify.lang.t(this.counterSizeString, fileCount, humanReadableFileSize(bytes, this.base === 1024));
    },

    internalArrayValue() {
      return wrapInArray(this.internalValue);
    },

    internalValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        this.lazyValue = val;
        this.$emit('change', this.lazyValue);
      }

    },

    isDirty() {
      return this.internalArrayValue.length > 0;
    },

    isLabelActive() {
      return this.isDirty;
    },

    text() {
      if (!this.isDirty && (this.persistentPlaceholder || this.isFocused || !this.hasLabel)) return [this.placeholder];
      return this.internalArrayValue.map(file => {
        const {
          name = '',
          size = 0
        } = file;
        const truncatedText = this.truncateText(name);
        return !this.showSize ? truncatedText : `${truncatedText} (${humanReadableFileSize(size, this.base === 1024)})`;
      });
    },

    base() {
      return typeof this.showSize !== 'boolean' ? this.showSize : undefined;
    },

    hasChips() {
      return this.chips || this.smallChips;
    }

  },
  watch: {
    readonly: {
      handler(v) {
        if (v === true) consoleError('readonly is not supported on <v-file-input>', this);
      },

      immediate: true
    },

    value(v) {
      const value = this.multiple ? v : v ? [v] : [];

      if (!deepEqual(value, this.$refs.input.files)) {
        // When the input value is changed programatically, clear the
        // internal input's value so that the `onInput` handler
        // can be triggered again if the user re-selects the exact
        // same file(s). Ideally, `input.files` should be
        // manipulated directly but that property is readonly.
        this.$refs.input.value = '';
      }
    }

  },
  methods: {
    clearableCallback() {
      this.internalValue = this.multiple ? [] : null;
      this.$refs.input.value = '';
    },

    genChips() {
      if (!this.isDirty) return [];
      return this.text.map((text, index) => this.$createElement(__unplugin_components_40, {
        props: {
          small: this.smallChips
        },
        on: {
          'click:close': () => {
            const internalValue = this.internalValue;
            internalValue.splice(index, 1);
            this.internalValue = internalValue; // Trigger the watcher
          }
        }
      }, [text]));
    },

    genControl() {
      const render = __unplugin_components_89.options.methods.genControl.call(this);

      if (this.hideInput) {
        render.data.style = mergeStyles(render.data.style, {
          display: 'none'
        });
      }

      return render;
    },

    genInput() {
      const input = __unplugin_components_89.options.methods.genInput.call(this);
      input.data.attrs.multiple = this.multiple; // We should not be setting value
      // programmatically on the input
      // when it is using type="file"

      delete input.data.domProps.value; // This solves an issue in Safari where
      // nothing happens when adding a file
      // due to the input event not firing
      // https://github.com/vuetifyjs/vuetify/issues/7941

      delete input.data.on.input;
      input.data.on.change = this.onInput;
      return [this.genSelections(), input];
    },

    genPrependSlot() {
      if (!this.prependIcon) return null;
      const icon = this.genIcon('prepend', () => {
        this.$refs.input.click();
      });
      return this.genSlot('prepend', 'outer', [icon]);
    },

    genSelectionText() {
      const length = this.text.length;
      if (length < 2) return this.text;
      if (this.showSize && !this.counter) return [this.computedCounterValue];
      return [this.$vuetify.lang.t(this.counterString, length)];
    },

    genSelections() {
      const children = [];

      if (this.isDirty && this.$scopedSlots.selection) {
        this.internalArrayValue.forEach((file, index) => {
          if (!this.$scopedSlots.selection) return;
          children.push(this.$scopedSlots.selection({
            text: this.text[index],
            file,
            index
          }));
        });
      } else {
        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText());
      }

      return this.$createElement('div', {
        staticClass: 'v-file-input__text',
        class: {
          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,
          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection
        }
      }, children);
    },

    genTextFieldSlot() {
      const node = __unplugin_components_89.options.methods.genTextFieldSlot.call(this);
      node.data.on = { ...(node.data.on || {}),
        click: e => {
          // Clicking the label already delegates to input element, so we shouldn't click it twice
          if (e.target && e.target.nodeName === 'LABEL') return;
          this.$refs.input.click();
        }
      };
      return node;
    },

    onInput(e) {
      const files = [...(e.target.files || [])];
      this.internalValue = this.multiple ? files : files[0]; // Set initialValue here otherwise isFocused
      // watcher in VTextField will emit a change
      // event whenever the component is blurred

      this.initialValue = this.internalValue;
    },

    onKeyDown(e) {
      this.$emit('keydown', e);
    },

    truncateText(str) {
      if (str.length < Number(this.truncateLength)) return str;
      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2);
      return `${str.slice(0, charsKeepOneSide)}…${str.slice(str.length - charsKeepOneSide)}`;
    }

  }
});

var VFooter = '';

// Styles
/* @vue/component */

var __unplugin_components_37 = mixins(VSheet, applicationable('footer', ['height', 'inset']), SSRBootable).extend({
  name: 'v-footer',
  props: {
    height: {
      default: 'auto',
      type: [Number, String]
    },
    inset: Boolean,
    padless: Boolean,
    tag: {
      type: String,
      default: 'footer'
    }
  },
  computed: {
    applicationProperty() {
      return this.inset ? 'insetFooter' : 'footer';
    },

    classes() {
      return { ...VSheet.options.computed.classes.call(this),
        'v-footer--absolute': this.absolute,
        'v-footer--fixed': !this.absolute && (this.app || this.fixed),
        'v-footer--padless': this.padless,
        'v-footer--inset': this.inset
      };
    },

    computedBottom() {
      if (!this.isPositioned) return undefined;
      return this.app ? this.$vuetify.application.bottom : 0;
    },

    computedLeft() {
      if (!this.isPositioned) return undefined;
      return this.app && this.inset ? this.$vuetify.application.left : 0;
    },

    computedRight() {
      if (!this.isPositioned) return undefined;
      return this.app && this.inset ? this.$vuetify.application.right : 0;
    },

    isPositioned() {
      return Boolean(this.absolute || this.fixed || this.app);
    },

    styles() {
      const height = parseInt(this.height);
      return { ...VSheet.options.computed.styles.call(this),
        height: isNaN(height) ? height : convertToUnit(height),
        left: convertToUnit(this.computedLeft),
        right: convertToUnit(this.computedRight),
        bottom: convertToUnit(this.computedBottom)
      };
    }

  },
  methods: {
    updateApplication() {
      const height = parseInt(this.height);
      return isNaN(height) ? this.$el ? this.$el.clientHeight : 0 : height;
    }

  },

  render(h) {
    const data = this.setBackgroundColor(this.color, {
      staticClass: 'v-footer',
      class: this.classes,
      style: this.styles
    });
    return h(this.tag, data, this.$slots.default);
  }

});

// Mixins
/* @vue/component */

var __unplugin_components_18 = mixins(BindsAttrs, provide('form')
/* @vue/component */
).extend({
  name: 'v-form',

  provide() {
    return {
      form: this
    };
  },

  inheritAttrs: false,
  props: {
    disabled: Boolean,
    lazyValidation: Boolean,
    readonly: Boolean,
    value: Boolean
  },
  data: () => ({
    inputs: [],
    watchers: [],
    errorBag: {}
  }),
  watch: {
    errorBag: {
      handler(val) {
        const errors = Object.values(val).includes(true);
        this.$emit('input', !errors);
      },

      deep: true,
      immediate: true
    }
  },
  methods: {
    watchInput(input) {
      const watcher = input => {
        return input.$watch('hasError', val => {
          this.$set(this.errorBag, input._uid, val);
        }, {
          immediate: true
        });
      };

      const watchers = {
        _uid: input._uid,
        valid: () => {},
        shouldValidate: () => {}
      };

      if (this.lazyValidation) {
        // Only start watching inputs if we need to
        watchers.shouldValidate = input.$watch('shouldValidate', val => {
          if (!val) return; // Only watch if we're not already doing it

          if (this.errorBag.hasOwnProperty(input._uid)) return;
          watchers.valid = watcher(input);
        });
      } else {
        watchers.valid = watcher(input);
      }

      return watchers;
    },

    /** @public */
    validate() {
      return this.inputs.filter(input => !input.validate(true)).length === 0;
    },

    /** @public */
    reset() {
      this.inputs.forEach(input => input.reset());
      this.resetErrorBag();
    },

    resetErrorBag() {
      if (this.lazyValidation) {
        // Account for timeout in validatable
        setTimeout(() => {
          this.errorBag = {};
        }, 0);
      }
    },

    /** @public */
    resetValidation() {
      this.inputs.forEach(input => input.resetValidation());
      this.resetErrorBag();
    },

    register(input) {
      this.inputs.push(input);
      this.watchers.push(this.watchInput(input));
    },

    unregister(input) {
      const found = this.inputs.find(i => i._uid === input._uid);
      if (!found) return;
      const unwatch = this.watchers.find(i => i._uid === found._uid);

      if (unwatch) {
        unwatch.valid();
        unwatch.shouldValidate();
      }

      this.watchers = this.watchers.filter(i => i._uid !== found._uid);
      this.inputs = this.inputs.filter(i => i._uid !== found._uid);
      this.$delete(this.errorBag, found._uid);
    }

  },

  render(h) {
    return h('form', {
      staticClass: 'v-form',
      attrs: {
        novalidate: true,
        ...this.attrs$
      },
      on: {
        submit: e => this.$emit('submit', e)
      }
    }, this.$slots.default);
  }

});

var _grid = '';

var VGrid$1 = '';

// Types
function VGrid(name) {
  /* @vue/component */
  return Vue$1.extend({
    name: `v-${name}`,
    functional: true,
    props: {
      id: String,
      tag: {
        type: String,
        default: 'div'
      }
    },

    render(h, {
      props,
      data,
      children
    }) {
      data.staticClass = `${name} ${data.staticClass || ''}`.trim();
      const {
        attrs
      } = data;

      if (attrs) {
        // reset attrs to extract utility clases like pa-3
        data.attrs = {};
        const classes = Object.keys(attrs).filter(key => {
          // TODO: Remove once resolved
          // https://github.com/vuejs/vue/issues/7841
          if (key === 'slot') return false;
          const value = attrs[key]; // add back data attributes like data-test="foo" but do not
          // add them as classes

          if (key.startsWith('data-')) {
            data.attrs[key] = value;
            return false;
          }

          return value || typeof value === 'string';
        });
        if (classes.length) data.staticClass += ` ${classes.join(' ')}`;
      }

      if (props.id) {
        data.domProps = data.domProps || {};
        data.domProps.id = props.id;
      }

      return h(props.tag, data, children);
    }

  });
}

/* @vue/component */

var __unplugin_components_10$1 = VGrid('container').extend({
  name: 'v-container',
  functional: true,
  props: {
    id: String,
    tag: {
      type: String,
      default: 'div'
    },
    fluid: {
      type: Boolean,
      default: false
    }
  },

  render(h, {
    props,
    data,
    children
  }) {
    let classes;
    const {
      attrs
    } = data;

    if (attrs) {
      // reset attrs to extract utility clases like pa-3
      data.attrs = {};
      classes = Object.keys(attrs).filter(key => {
        // TODO: Remove once resolved
        // https://github.com/vuejs/vue/issues/7841
        if (key === 'slot') return false;
        const value = attrs[key]; // add back data attributes like data-test="foo" but do not
        // add them as classes

        if (key.startsWith('data-')) {
          data.attrs[key] = value;
          return false;
        }

        return value || typeof value === 'string';
      });
    }

    if (props.id) {
      data.domProps = data.domProps || {};
      data.domProps.id = props.id;
    }

    return h(props.tag, mergeData(data, {
      staticClass: 'container',
      class: Array({
        'container--fluid': props.fluid
      }).concat(classes || [])
    }), children);
  }

});

const breakpoints$1 = ['sm', 'md', 'lg', 'xl'];

const breakpointProps = (() => {
  return breakpoints$1.reduce((props, val) => {
    props[val] = {
      type: [Boolean, String, Number],
      default: false
    };
    return props;
  }, {});
})();

const offsetProps = (() => {
  return breakpoints$1.reduce((props, val) => {
    props['offset' + upperFirst(val)] = {
      type: [String, Number],
      default: null
    };
    return props;
  }, {});
})();

const orderProps = (() => {
  return breakpoints$1.reduce((props, val) => {
    props['order' + upperFirst(val)] = {
      type: [String, Number],
      default: null
    };
    return props;
  }, {});
})();

const propMap$1 = {
  col: Object.keys(breakpointProps),
  offset: Object.keys(offsetProps),
  order: Object.keys(orderProps)
};

function breakpointClass$1(type, prop, val) {
  let className = type;

  if (val == null || val === false) {
    return undefined;
  }

  if (prop) {
    const breakpoint = prop.replace(type, '');
    className += `-${breakpoint}`;
  } // Handling the boolean style prop when accepting [Boolean, String, Number]
  // means Vue will not convert <v-col sm></v-col> to sm: true for us.
  // Since the default is false, an empty string indicates the prop's presence.


  if (type === 'col' && (val === '' || val === true)) {
    // .col-md
    return className.toLowerCase();
  } // .order-md-6


  className += `-${val}`;
  return className.toLowerCase();
}

const cache$1 = new Map();
var __unplugin_components_88 = Vue$1.extend({
  name: 'v-col',
  functional: true,
  props: {
    cols: {
      type: [Boolean, String, Number],
      default: false
    },
    ...breakpointProps,
    offset: {
      type: [String, Number],
      default: null
    },
    ...offsetProps,
    order: {
      type: [String, Number],
      default: null
    },
    ...orderProps,
    alignSelf: {
      type: String,
      default: null,
      validator: str => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str)
    },
    tag: {
      type: String,
      default: 'div'
    }
  },

  render(h, {
    props,
    data,
    children,
    parent
  }) {
    // Super-fast memoization based on props, 5x faster than JSON.stringify
    let cacheKey = '';

    for (const prop in props) {
      cacheKey += String(props[prop]);
    }

    let classList = cache$1.get(cacheKey);

    if (!classList) {
      classList = []; // Loop through `col`, `offset`, `order` breakpoint props

      let type;

      for (type in propMap$1) {
        propMap$1[type].forEach(prop => {
          const value = props[prop];
          const className = breakpointClass$1(type, prop, value);
          if (className) classList.push(className);
        });
      }

      const hasColClasses = classList.some(className => className.startsWith('col-'));
      classList.push({
        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.
        col: !hasColClasses || !props.cols,
        [`col-${props.cols}`]: props.cols,
        [`offset-${props.offset}`]: props.offset,
        [`order-${props.order}`]: props.order,
        [`align-self-${props.alignSelf}`]: props.alignSelf
      });
      cache$1.set(cacheKey, classList);
    }

    return h(props.tag, mergeData(data, {
      class: classList
    }), children);
  }

});

const breakpoints = ['sm', 'md', 'lg', 'xl'];
const ALIGNMENT = ['start', 'end', 'center'];

function makeProps(prefix, def) {
  return breakpoints.reduce((props, val) => {
    props[prefix + upperFirst(val)] = def();
    return props;
  }, {});
}

const alignValidator = str => [...ALIGNMENT, 'baseline', 'stretch'].includes(str);

const alignProps = makeProps('align', () => ({
  type: String,
  default: null,
  validator: alignValidator
}));

const justifyValidator = str => [...ALIGNMENT, 'space-between', 'space-around'].includes(str);

const justifyProps = makeProps('justify', () => ({
  type: String,
  default: null,
  validator: justifyValidator
}));

const alignContentValidator = str => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str);

const alignContentProps = makeProps('alignContent', () => ({
  type: String,
  default: null,
  validator: alignContentValidator
}));
const propMap = {
  align: Object.keys(alignProps),
  justify: Object.keys(justifyProps),
  alignContent: Object.keys(alignContentProps)
};
const classMap = {
  align: 'align',
  justify: 'justify',
  alignContent: 'align-content'
};

function breakpointClass(type, prop, val) {
  let className = classMap[type];

  if (val == null) {
    return undefined;
  }

  if (prop) {
    // alignSm -> Sm
    const breakpoint = prop.replace(type, '');
    className += `-${breakpoint}`;
  } // .align-items-sm-center


  className += `-${val}`;
  return className.toLowerCase();
}

const cache = new Map();
var __unplugin_components_91 = Vue$1.extend({
  name: 'v-row',
  functional: true,
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    dense: Boolean,
    noGutters: Boolean,
    align: {
      type: String,
      default: null,
      validator: alignValidator
    },
    ...alignProps,
    justify: {
      type: String,
      default: null,
      validator: justifyValidator
    },
    ...justifyProps,
    alignContent: {
      type: String,
      default: null,
      validator: alignContentValidator
    },
    ...alignContentProps
  },

  render(h, {
    props,
    data,
    children
  }) {
    // Super-fast memoization based on props, 5x faster than JSON.stringify
    let cacheKey = '';

    for (const prop in props) {
      cacheKey += String(props[prop]);
    }

    let classList = cache.get(cacheKey);

    if (!classList) {
      classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props

      let type;

      for (type in propMap) {
        propMap[type].forEach(prop => {
          const value = props[prop];
          const className = breakpointClass(type, prop, value);
          if (className) classList.push(className);
        });
      }

      classList.push({
        'no-gutters': props.noGutters,
        'row--dense': props.dense,
        [`align-${props.align}`]: props.align,
        [`justify-${props.justify}`]: props.justify,
        [`align-content-${props.alignContent}`]: props.alignContent
      });
      cache.set(cacheKey, classList);
    }

    return h(props.tag, mergeData(data, {
      staticClass: 'row',
      class: classList
    }), children);
  }

});

var VNavigationDrawer = '';

// Styles
const baseMixins$a = mixins(applicationable('left', ['isActive', 'isMobile', 'miniVariant', 'expandOnHover', 'permanent', 'right', 'temporary', 'width']), Colorable, Dependent, Mobile, Overlayable, SSRBootable, Themeable$1);
/* @vue/component */

var __unplugin_components_0$1 = baseMixins$a.extend({
  name: 'v-navigation-drawer',
  directives: {
    ClickOutside: ClickOutside$1,
    Resize: Resize$1,
    Touch: Touch$1
  },

  provide() {
    return {
      isInNav: this.tag === 'nav'
    };
  },

  props: {
    bottom: Boolean,
    clipped: Boolean,
    disableResizeWatcher: Boolean,
    disableRouteWatcher: Boolean,
    expandOnHover: Boolean,
    floating: Boolean,
    height: {
      type: [Number, String],

      default() {
        return this.app ? '100vh' : '100%';
      }

    },
    miniVariant: Boolean,
    miniVariantWidth: {
      type: [Number, String],
      default: 56
    },
    permanent: Boolean,
    right: Boolean,
    src: {
      type: [String, Object],
      default: ''
    },
    stateless: Boolean,
    tag: {
      type: String,

      default() {
        return this.app ? 'nav' : 'aside';
      }

    },
    temporary: Boolean,
    touchless: Boolean,
    width: {
      type: [Number, String],
      default: 256
    },
    value: null
  },
  data: () => ({
    isMouseover: false,
    touchArea: {
      left: 0,
      right: 0
    },
    stackMinZIndex: 6
  }),
  computed: {
    /**
     * Used for setting an app value from a dynamic
     * property. Called from applicationable.js
     */
    applicationProperty() {
      return this.right ? 'right' : 'left';
    },

    classes() {
      return {
        'v-navigation-drawer': true,
        'v-navigation-drawer--absolute': this.absolute,
        'v-navigation-drawer--bottom': this.bottom,
        'v-navigation-drawer--clipped': this.clipped,
        'v-navigation-drawer--close': !this.isActive,
        'v-navigation-drawer--fixed': !this.absolute && (this.app || this.fixed),
        'v-navigation-drawer--floating': this.floating,
        'v-navigation-drawer--is-mobile': this.isMobile,
        'v-navigation-drawer--is-mouseover': this.isMouseover,
        'v-navigation-drawer--mini-variant': this.isMiniVariant,
        'v-navigation-drawer--custom-mini-variant': Number(this.miniVariantWidth) !== 56,
        'v-navigation-drawer--open': this.isActive,
        'v-navigation-drawer--open-on-hover': this.expandOnHover,
        'v-navigation-drawer--right': this.right,
        'v-navigation-drawer--temporary': this.temporary,
        ...this.themeClasses
      };
    },

    computedMaxHeight() {
      if (!this.hasApp) return null;
      const computedMaxHeight = this.$vuetify.application.bottom + this.$vuetify.application.footer + this.$vuetify.application.bar;
      if (!this.clipped) return computedMaxHeight;
      return computedMaxHeight + this.$vuetify.application.top;
    },

    computedTop() {
      if (!this.hasApp) return 0;
      let computedTop = this.$vuetify.application.bar;
      computedTop += this.clipped ? this.$vuetify.application.top : 0;
      return computedTop;
    },

    computedTransform() {
      if (this.isActive) return 0;
      if (this.isBottom) return 100;
      return this.right ? 100 : -100;
    },

    computedWidth() {
      return this.isMiniVariant ? this.miniVariantWidth : this.width;
    },

    hasApp() {
      return this.app && !this.isMobile && !this.temporary;
    },

    isBottom() {
      return this.bottom && this.isMobile;
    },

    isMiniVariant() {
      return !this.expandOnHover && this.miniVariant || this.expandOnHover && !this.isMouseover;
    },

    isMobile() {
      return !this.stateless && !this.permanent && Mobile.options.computed.isMobile.call(this);
    },

    reactsToClick() {
      return !this.stateless && !this.permanent && (this.isMobile || this.temporary);
    },

    reactsToMobile() {
      return this.app && !this.disableResizeWatcher && !this.permanent && !this.stateless && !this.temporary;
    },

    reactsToResize() {
      return !this.disableResizeWatcher && !this.stateless;
    },

    reactsToRoute() {
      return !this.disableRouteWatcher && !this.stateless && (this.temporary || this.isMobile);
    },

    showOverlay() {
      return !this.hideOverlay && this.isActive && (this.isMobile || this.temporary);
    },

    styles() {
      const translate = this.isBottom ? 'translateY' : 'translateX';
      return {
        height: convertToUnit(this.height),
        top: !this.isBottom ? convertToUnit(this.computedTop) : 'auto',
        maxHeight: this.computedMaxHeight != null ? `calc(100% - ${convertToUnit(this.computedMaxHeight)})` : undefined,
        transform: `${translate}(${convertToUnit(this.computedTransform, '%')})`,
        width: convertToUnit(this.computedWidth)
      };
    }

  },
  watch: {
    $route: 'onRouteChange',

    isActive(val) {
      this.$emit('input', val);
    },

    /**
     * When mobile changes, adjust the active state
     * only when there has been a previous value
     */
    isMobile(val, prev) {
      !val && this.isActive && !this.temporary && this.removeOverlay();
      if (prev == null || !this.reactsToResize || !this.reactsToMobile) return;
      this.isActive = !val;
    },

    permanent(val) {
      // If enabling prop enable the drawer
      if (val) this.isActive = true;
    },

    showOverlay(val) {
      if (val) this.genOverlay();else this.removeOverlay();
    },

    value(val) {
      if (this.permanent) return;

      if (val == null) {
        this.init();
        return;
      }

      if (val !== this.isActive) this.isActive = val;
    },

    expandOnHover: 'updateMiniVariant',

    isMouseover(val) {
      this.updateMiniVariant(!val);
    }

  },

  beforeMount() {
    this.init();
  },

  methods: {
    calculateTouchArea() {
      const parent = this.$el.parentNode;
      if (!parent) return;
      const parentRect = parent.getBoundingClientRect();
      this.touchArea = {
        left: parentRect.left + 50,
        right: parentRect.right - 50
      };
    },

    closeConditional() {
      return this.isActive && !this._isDestroyed && this.reactsToClick;
    },

    genAppend() {
      return this.genPosition('append');
    },

    genBackground() {
      const props = {
        height: '100%',
        width: '100%',
        src: this.src
      };
      const image = this.$scopedSlots.img ? this.$scopedSlots.img(props) : this.$createElement(__unplugin_components_1, {
        props
      });
      return this.$createElement('div', {
        staticClass: 'v-navigation-drawer__image'
      }, [image]);
    },

    genDirectives() {
      const directives = [{
        name: 'click-outside',
        value: {
          handler: () => {
            this.isActive = false;
          },
          closeConditional: this.closeConditional,
          include: this.getOpenDependentElements
        }
      }];

      if (!this.touchless && !this.stateless) {
        directives.push({
          name: 'touch',
          value: {
            parent: true,
            left: this.swipeLeft,
            right: this.swipeRight
          }
        });
      }

      return directives;
    },

    genListeners() {
      const on = {
        mouseenter: () => this.isMouseover = true,
        mouseleave: () => this.isMouseover = false,
        transitionend: e => {
          if (e.target !== e.currentTarget) return;
          this.$emit('transitionend', e); // IE11 does not support new Event('resize')

          const resizeEvent = document.createEvent('UIEvents');
          resizeEvent.initUIEvent('resize', true, false, window, 0);
          window.dispatchEvent(resizeEvent);
        }
      };

      if (this.miniVariant) {
        on.click = () => this.$emit('update:mini-variant', false);
      }

      return on;
    },

    genPosition(name) {
      const slot = getSlot(this, name);
      if (!slot) return slot;
      return this.$createElement('div', {
        staticClass: `v-navigation-drawer__${name}`
      }, slot);
    },

    genPrepend() {
      return this.genPosition('prepend');
    },

    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-navigation-drawer__content'
      }, this.$slots.default);
    },

    genBorder() {
      return this.$createElement('div', {
        staticClass: 'v-navigation-drawer__border'
      });
    },

    init() {
      if (this.permanent) {
        this.isActive = true;
      } else if (this.stateless || this.value != null) {
        this.isActive = this.value;
      } else if (!this.temporary) {
        this.isActive = !this.isMobile;
      }
    },

    onRouteChange() {
      if (this.reactsToRoute && this.closeConditional()) {
        this.isActive = false;
      }
    },

    swipeLeft(e) {
      if (this.isActive && this.right) return;
      this.calculateTouchArea();
      if (Math.abs(e.touchendX - e.touchstartX) < 100) return;
      if (this.right && e.touchstartX >= this.touchArea.right) this.isActive = true;else if (!this.right && this.isActive) this.isActive = false;
    },

    swipeRight(e) {
      if (this.isActive && !this.right) return;
      this.calculateTouchArea();
      if (Math.abs(e.touchendX - e.touchstartX) < 100) return;
      if (!this.right && e.touchstartX <= this.touchArea.left) this.isActive = true;else if (this.right && this.isActive) this.isActive = false;
    },

    /**
     * Update the application layout
     */
    updateApplication() {
      if (!this.isActive || this.isMobile || this.temporary || !this.$el) return 0;
      const width = Number(this.miniVariant ? this.miniVariantWidth : this.width);
      return isNaN(width) ? this.$el.clientWidth : width;
    },

    updateMiniVariant(val) {
      if (this.expandOnHover && this.miniVariant !== val) this.$emit('update:mini-variant', val);
    }

  },

  render(h) {
    const children = [this.genPrepend(), this.genContent(), this.genAppend(), this.genBorder()];
    if (this.src || getSlot(this, 'img')) children.unshift(this.genBackground());
    return h(this.tag, this.setBackgroundColor(this.color, {
      class: this.classes,
      style: this.styles,
      directives: this.genDirectives(),
      on: this.genListeners()
    }), children);
  }

});

var VOtpInput = '';

// Styles
const baseMixins$9 = mixins(VInput);
/* @vue/component */

var __unplugin_components_25$1 = baseMixins$9.extend().extend({
  name: 'v-otp-input',
  directives: {
    ripple: Ripple$1
  },
  inheritAttrs: false,
  props: {
    length: {
      type: [Number, String],
      default: 6
    },
    type: {
      type: String,
      default: 'text'
    },
    plain: Boolean
  },
  data: () => ({
    initialValue: null,
    isBooted: false,
    otp: []
  }),
  computed: {
    outlined() {
      return !this.plain;
    },

    classes() {
      return { ...VInput.options.computed.classes.call(this),
        ...__unplugin_components_89.options.computed.classes.call(this),
        'v-otp-input--plain': this.plain
      };
    }

  },
  watch: {
    isFocused: 'updateValue',

    value(val) {
      this.lazyValue = val;
      this.otp = (val === null || val === void 0 ? void 0 : val.split('')) || [];
    }

  },

  created() {
    var _a;
    /* istanbul ignore next */


    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {
      breaking('browser-autocomplete', 'autocomplete', this);
    }

    this.otp = ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.split('')) || [];
  },

  mounted() {
    requestAnimationFrame(() => this.isBooted = true);
  },

  methods: {
    /** @public */
    focus(e, otpIdx) {
      this.onFocus(e, otpIdx || 0);
    },

    genInputSlot(otpIdx) {
      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {
        staticClass: 'v-input__slot',
        style: {
          height: convertToUnit(this.height)
        },
        on: {
          click: () => this.onClick(otpIdx),
          mousedown: e => this.onMouseDown(e, otpIdx),
          mouseup: e => this.onMouseUp(e, otpIdx)
        }
      }), [this.genDefaultSlot(otpIdx)]);
    },

    genControl(otpIdx) {
      return this.$createElement('div', {
        staticClass: 'v-input__control'
      }, [this.genInputSlot(otpIdx)]);
    },

    genDefaultSlot(otpIdx) {
      return [this.genFieldset(), this.genTextFieldSlot(otpIdx)];
    },

    genContent() {
      return Array.from({
        length: +this.length
      }, (_, i) => {
        return this.$createElement('div', this.setTextColor(this.validationState, {
          staticClass: 'v-input',
          class: this.classes
        }), [this.genControl(i)]);
      });
    },

    genFieldset() {
      return this.$createElement('fieldset', {
        attrs: {
          'aria-hidden': true
        }
      }, [this.genLegend()]);
    },

    genLegend() {
      const span = this.$createElement('span', {
        domProps: {
          innerHTML: '&#8203;'
        }
      });
      return this.$createElement('legend', {
        style: {
          width: '0px'
        }
      }, [span]);
    },

    genInput(otpIdx) {
      const listeners = Object.assign({}, this.listeners$);
      delete listeners.change; // Change should not be bound externally

      return this.$createElement('input', {
        style: {},
        domProps: {
          value: this.otp[otpIdx],
          min: this.type === 'number' ? 0 : null
        },
        attrs: { ...this.attrs$,
          autocomplete: 'one-time-code',
          disabled: this.isDisabled,
          readonly: this.isReadonly,
          type: this.type,
          id: `${this.computedId}--${otpIdx}`,
          class: `otp-field-box--${otpIdx}`
        },
        on: Object.assign(listeners, {
          blur: this.onBlur,
          input: e => this.onInput(e, otpIdx),
          focus: e => this.onFocus(e, otpIdx),
          keydown: this.onKeyDown,
          keyup: e => this.onKeyUp(e, otpIdx)
        }),
        ref: 'input',
        refInFor: true
      });
    },

    genTextFieldSlot(otpIdx) {
      return this.$createElement('div', {
        staticClass: 'v-text-field__slot'
      }, [this.genInput(otpIdx)]);
    },

    onBlur(e) {
      this.isFocused = false;
      e && this.$nextTick(() => this.$emit('blur', e));
    },

    onClick(otpIdx) {
      if (this.isFocused || this.isDisabled || !this.$refs.input[otpIdx]) return;
      this.onFocus(undefined, otpIdx);
    },

    onFocus(e, otpIdx) {
      e === null || e === void 0 ? void 0 : e.preventDefault();
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      const elements = this.$refs.input;
      const ref = this.$refs.input && elements[otpIdx || 0];
      if (!ref) return;

      if (document.activeElement !== ref) {
        ref.focus();
        return ref.select();
      }

      if (!this.isFocused) {
        this.isFocused = true;
        ref.select();
        e && this.$emit('focus', e);
      }
    },

    onInput(e, index) {
      const maxCursor = +this.length - 1;
      const target = e.target;
      const value = target.value;
      const inputDataArray = (value === null || value === void 0 ? void 0 : value.split('')) || [];
      const newOtp = [...this.otp];

      for (let i = 0; i < inputDataArray.length; i++) {
        const appIdx = index + i;
        if (appIdx > maxCursor) break;
        newOtp[appIdx] = inputDataArray[i].toString();
      }

      if (!inputDataArray.length) {
        newOtp.splice(index, 1);
      }

      this.otp = newOtp;
      this.internalValue = this.otp.join('');

      if (index + inputDataArray.length >= +this.length) {
        this.onCompleted();
        this.clearFocus(index);
      } else if (inputDataArray.length) {
        this.changeFocus(index + inputDataArray.length);
      }
    },

    clearFocus(index) {
      const input = this.$refs.input[index];
      input.blur();
    },

    onKeyDown(e) {
      if (e.keyCode === keyCodes.enter) {
        this.$emit('change', this.internalValue);
      }

      this.$emit('keydown', e);
    },

    onMouseDown(e, otpIdx) {
      // Prevent input from being blurred
      if (e.target !== this.$refs.input[otpIdx]) {
        e.preventDefault();
        e.stopPropagation();
      }

      VInput.options.methods.onMouseDown.call(this, e);
    },

    onMouseUp(e, otpIdx) {
      if (this.hasMouseDown) this.focus(e, otpIdx);
      VInput.options.methods.onMouseUp.call(this, e);
    },

    changeFocus(index) {
      this.onFocus(undefined, index || 0);
    },

    updateValue(val) {
      // Sets validationState from validatable
      this.hasColor = val;

      if (val) {
        this.initialValue = this.lazyValue;
      } else if (this.initialValue !== this.lazyValue) {
        this.$emit('change', this.lazyValue);
      }
    },

    onKeyUp(event, index) {
      event.preventDefault();
      const eventKey = event.key;

      if (['Tab', 'Shift', 'Meta', 'Control', 'Alt'].includes(eventKey)) {
        return;
      }

      if (['Delete'].includes(eventKey)) {
        return;
      }

      if (eventKey === 'ArrowLeft' || eventKey === 'Backspace' && !this.otp[index]) {
        return index > 0 && this.changeFocus(index - 1);
      }

      if (eventKey === 'ArrowRight') {
        return index + 1 < +this.length && this.changeFocus(index + 1);
      }
    },

    onCompleted() {
      const rsp = this.otp.join('');

      if (rsp.length === +this.length) {
        this.$emit('finish', rsp);
      }
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'v-otp-input',
      class: this.themeClasses
    }, this.genContent());
  }

});

var VRadioGroup = '';

// Styles
const baseMixins$8 = mixins(BaseItemGroup, VInput);
/* @vue/component */

var __unplugin_components_10 = baseMixins$8.extend({
  name: 'v-radio-group',

  provide() {
    return {
      radioGroup: this
    };
  },

  props: {
    column: {
      type: Boolean,
      default: true
    },
    height: {
      type: [Number, String],
      default: 'auto'
    },
    name: String,
    row: Boolean,
    // If no value set on VRadio
    // will match valueComparator
    // force default to null
    value: null
  },
  computed: {
    classes() {
      return { ...VInput.options.computed.classes.call(this),
        'v-input--selection-controls v-input--radio-group': true,
        'v-input--radio-group--column': this.column && !this.row,
        'v-input--radio-group--row': this.row
      };
    }

  },
  methods: {
    genDefaultSlot() {
      return this.$createElement('div', {
        staticClass: 'v-input--radio-group__input',
        attrs: {
          id: this.id,
          role: 'radiogroup',
          'aria-labelledby': this.computedId
        }
      }, VInput.options.methods.genDefaultSlot.call(this));
    },

    genInputSlot() {
      const render = VInput.options.methods.genInputSlot.call(this);
      delete render.data.on.click;
      return render;
    },

    genLabel() {
      const label = VInput.options.methods.genLabel.call(this);
      if (!label) return null;
      label.data.attrs.id = this.computedId; // WAI considers this an orphaned label

      delete label.data.attrs.for;
      label.tag = 'legend';
      return label;
    },

    onClick: BaseItemGroup.options.methods.onClick
  },

  render(h) {
    const vnode = VInput.options.render.call(this, h);

    this._b(vnode.data, 'div', this.attrs$);

    return vnode;
  }

});

var VRadio = '';

// Styles
const baseMixins$7 = mixins(BindsAttrs, Colorable, Rippleable, factory$1('radioGroup'), Themeable$1);
/* @vue/component */

var __unplugin_components_12$1 = baseMixins$7.extend().extend({
  name: 'v-radio',
  inheritAttrs: false,
  props: {
    disabled: {
      type: Boolean,
      default: null
    },
    id: String,
    label: String,
    name: String,
    offIcon: {
      type: String,
      default: '$radioOff'
    },
    onIcon: {
      type: String,
      default: '$radioOn'
    },
    readonly: {
      type: Boolean,
      default: null
    },
    value: {
      default: null
    }
  },
  data: () => ({
    isFocused: false
  }),
  computed: {
    classes() {
      return {
        'v-radio--is-disabled': this.isDisabled,
        'v-radio--is-focused': this.isFocused,
        ...this.themeClasses,
        ...this.groupClasses
      };
    },

    computedColor() {
      if (this.isDisabled) return undefined;
      return Selectable.options.computed.computedColor.call(this);
    },

    computedIcon() {
      return this.isActive ? this.onIcon : this.offIcon;
    },

    computedId() {
      return VInput.options.computed.computedId.call(this);
    },

    hasLabel: VInput.options.computed.hasLabel,

    hasState() {
      return (this.radioGroup || {}).hasState;
    },

    isDisabled() {
      var _a;

      return (_a = this.disabled) !== null && _a !== void 0 ? _a : !!this.radioGroup && this.radioGroup.isDisabled;
    },

    isReadonly() {
      var _a;

      return (_a = this.readonly) !== null && _a !== void 0 ? _a : !!this.radioGroup && this.radioGroup.isReadonly;
    },

    computedName() {
      if (this.name || !this.radioGroup) {
        return this.name;
      }

      return this.radioGroup.name || `radio-${this.radioGroup._uid}`;
    },

    rippleState() {
      return Selectable.options.computed.rippleState.call(this);
    },

    validationState() {
      return (this.radioGroup || {}).validationState || this.computedColor;
    }

  },
  methods: {
    genInput(args) {
      // We can't actually use the mixin directly because
      // it's made for standalone components, but its
      // genInput method is exactly what we need
      return Selectable.options.methods.genInput.call(this, 'radio', args);
    },

    genLabel() {
      if (!this.hasLabel) return null;
      return this.$createElement(VLabel, {
        on: {
          // Label shouldn't cause the input to focus
          click: prevent
        },
        attrs: {
          for: this.computedId
        },
        props: {
          color: this.validationState,
          focused: this.hasState
        }
      }, getSlot(this, 'label') || this.label);
    },

    genRadio() {
      const {
        title,
        ...radioAttrs
      } = this.attrs$;
      return this.$createElement('div', {
        staticClass: 'v-input--selection-controls__input'
      }, [this.$createElement(__unplugin_components_95, this.setTextColor(this.validationState, {
        props: {
          dense: this.radioGroup && this.radioGroup.dense
        }
      }), this.computedIcon), this.genInput({
        name: this.computedName,
        value: this.value,
        ...radioAttrs
      }), this.genRipple(this.setTextColor(this.rippleState))]);
    },

    onFocus(e) {
      this.isFocused = true;
      this.$emit('focus', e);
    },

    onBlur(e) {
      this.isFocused = false;
      this.$emit('blur', e);
    },

    onChange() {
      if (this.isDisabled || this.isReadonly || this.isActive) return;
      this.toggle();
    },

    onKeydown: () => {} // Override default with noop

  },

  render(h) {
    const data = {
      staticClass: 'v-radio',
      class: this.classes,
      on: mergeListeners({
        click: this.onChange
      }, this.listeners$),
      attrs: {
        title: this.attrs$.title
      }
    };
    return h('div', data, [this.genRadio(), this.genLabel()]);
  }

});

var VRangeSlider = '';

// Styles
/* @vue/component */

var __unplugin_components_9$1 = VSlider.extend({
  name: 'v-range-slider',
  props: {
    value: {
      type: Array,
      default: () => [0, 0]
    }
  },

  data() {
    return {
      activeThumb: null,
      lazyValue: this.value
    };
  },

  computed: {
    classes() {
      return { ...VSlider.options.computed.classes.call(this),
        'v-input--range-slider': true
      };
    },

    internalValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        // Round value to ensure the
        // entire slider range can
        // be selected with step
        let value = val.map((v = 0) => this.roundValue(Math.min(Math.max(v, this.minValue), this.maxValue))); // Switch values if range and wrong order

        if (value[0] > value[1] || value[1] < value[0]) {
          if (this.activeThumb !== null) {
            const toFocus = this.activeThumb === 1 ? 0 : 1;
            const el = this.$refs[`thumb_${toFocus}`];
            el.focus();
          }

          value = [value[1], value[0]];
        }

        this.lazyValue = value;
        if (!deepEqual(value, this.value)) this.$emit('input', value);
        this.validate();
      }

    },

    inputWidth() {
      return this.internalValue.map(v => (this.roundValue(v) - this.minValue) / (this.maxValue - this.minValue) * 100);
    }

  },
  methods: {
    getTrackStyle(startLength, endLength, startPadding = 0, endPadding = 0) {
      const startDir = this.vertical ? this.$vuetify.rtl ? 'top' : 'bottom' : this.$vuetify.rtl ? 'right' : 'left';
      const endDir = this.vertical ? 'height' : 'width';
      const start = `calc(${startLength}% + ${startPadding}px)`;
      const end = `calc(${endLength}% + ${endPadding}px)`;
      return {
        transition: this.trackTransition,
        [startDir]: start,
        [endDir]: end
      };
    },

    getIndexOfClosestValue(arr, v) {
      if (Math.abs(arr[0] - v) < Math.abs(arr[1] - v)) return 0;else return 1;
    },

    genInput() {
      return createRange(2).map(i => {
        const input = VSlider.options.methods.genInput.call(this);
        input.data = input.data || {};
        input.data.attrs = input.data.attrs || {};
        input.data.attrs.value = this.internalValue[i];
        input.data.attrs.id = `input-${i ? 'max' : 'min'}-${this._uid}`;
        return input;
      });
    },

    genTrackContainer() {
      const children = [];
      const padding = this.isDisabled ? 10 : 0;
      const sections = [{
        class: 'v-slider__track-background',
        color: this.computedTrackColor,
        styles: [0, this.inputWidth[0], 0, -padding]
      }, {
        class: this.isDisabled ? 'v-slider__track-background' : 'v-slider__track-fill',
        color: this.isDisabled ? this.computedTrackColor : this.computedTrackFillColor,
        styles: [this.inputWidth[0], Math.abs(this.inputWidth[1] - this.inputWidth[0]), padding, padding * -2]
      }, {
        class: 'v-slider__track-background',
        color: this.computedTrackColor,
        styles: [this.inputWidth[1], Math.abs(100 - this.inputWidth[1]), padding, -padding]
      }];
      if (this.$vuetify.rtl) sections.reverse();
      children.push(...sections.map(section => this.$createElement('div', this.setBackgroundColor(section.color, {
        staticClass: section.class,
        style: this.getTrackStyle(...section.styles)
      }))));
      return this.$createElement('div', {
        staticClass: 'v-slider__track-container',
        ref: 'track'
      }, children);
    },

    genChildren() {
      return [this.genInput(), this.genTrackContainer(), this.genSteps(), createRange(2).map(index => {
        const value = this.internalValue[index];

        const onFocus = e => {
          this.isFocused = true;
          this.activeThumb = index;
          this.$emit('focus', e);
        };

        const onBlur = e => {
          this.isFocused = false;
          this.activeThumb = null;
          this.$emit('blur', e);
        };

        const valueWidth = this.inputWidth[index];
        const isActive = this.isActive && this.activeThumb === index;
        const isFocused = this.isFocused && this.activeThumb === index;
        return this.genThumbContainer(value, valueWidth, isActive, isFocused, onFocus, onBlur, `thumb_${index}`);
      })];
    },

    reevaluateSelected(value) {
      this.activeThumb = this.getIndexOfClosestValue(this.internalValue, value);
      const refName = `thumb_${this.activeThumb}`;
      const thumbRef = this.$refs[refName];
      thumbRef.focus();
    },

    onSliderMouseDown(e) {
      var _a;

      const value = this.parseMouseMove(e);
      this.reevaluateSelected(value);
      this.oldValue = this.internalValue;
      this.isActive = true;

      if ((_a = e.target) === null || _a === void 0 ? void 0 : _a.matches('.v-slider__thumb-container, .v-slider__thumb-container *')) {
        this.thumbPressed = true;
        const domRect = e.target.getBoundingClientRect();
        const touch = 'touches' in e ? e.touches[0] : e;
        this.startOffset = this.vertical ? touch.clientY - (domRect.top + domRect.height / 2) : touch.clientX - (domRect.left + domRect.width / 2);
      } else {
        this.startOffset = 0;
        window.clearTimeout(this.mouseTimeout);
        this.mouseTimeout = window.setTimeout(() => {
          this.thumbPressed = true;
        }, 300);
      }

      const mouseUpOptions = passiveSupported ? {
        passive: true,
        capture: true
      } : true;
      const mouseMoveOptions = passiveSupported ? {
        passive: true
      } : false;
      const isTouchEvent = ('touches' in e);
      this.onMouseMove(e);
      this.app.addEventListener(isTouchEvent ? 'touchmove' : 'mousemove', this.onMouseMove, mouseMoveOptions);
      addOnceEventListener(this.app, isTouchEvent ? 'touchend' : 'mouseup', this.onSliderMouseUp, mouseUpOptions);
      this.$emit('start', this.internalValue);
    },

    onSliderClick(e) {
      if (!this.isActive) {
        if (this.noClick) {
          this.noClick = false;
          return;
        }

        const value = this.parseMouseMove(e);
        this.reevaluateSelected(value);
        this.setInternalValue(value);
        this.$emit('change', this.internalValue);
      }
    },

    onMouseMove(e) {
      const value = this.parseMouseMove(e);

      if (e.type === 'mousemove') {
        this.thumbPressed = true;
      }

      if (this.activeThumb === null) {
        this.activeThumb = this.getIndexOfClosestValue(this.internalValue, value);
      }

      this.setInternalValue(value);
    },

    onKeyDown(e) {
      if (this.activeThumb === null) return;
      const value = this.parseKeyDown(e, this.internalValue[this.activeThumb]);
      if (value == null) return;
      this.setInternalValue(value);
      this.$emit('change', this.internalValue);
    },

    setInternalValue(value) {
      this.internalValue = this.internalValue.map((v, i) => {
        if (i === this.activeThumb) return value;else return Number(v);
      });
    }

  }
});

var VSnackbar = '';

// Styles
var __unplugin_components_46$1 = mixins(VSheet, Colorable, Toggleable$1, factory$3(['absolute', 'bottom', 'left', 'right', 'top'])
/* @vue/component */
).extend({
  name: 'v-snackbar',
  props: {
    app: Boolean,
    centered: Boolean,
    contentClass: {
      type: String,
      default: ''
    },
    multiLine: Boolean,
    text: Boolean,
    timeout: {
      type: [Number, String],
      default: 5000
    },
    transition: {
      type: [Boolean, String],
      default: 'v-snack-transition',
      validator: v => typeof v === 'string' || v === false
    },
    vertical: Boolean
  },
  data: () => ({
    activeTimeout: -1
  }),
  computed: {
    classes() {
      return {
        'v-snack--absolute': this.absolute,
        'v-snack--active': this.isActive,
        'v-snack--bottom': this.bottom || !this.top,
        'v-snack--centered': this.centered,
        'v-snack--has-background': this.hasBackground,
        'v-snack--left': this.left,
        'v-snack--multi-line': this.multiLine && !this.vertical,
        'v-snack--right': this.right,
        'v-snack--text': this.text,
        'v-snack--top': this.top,
        'v-snack--vertical': this.vertical
      };
    },

    // Text and outlined styles both
    // use transparent backgrounds
    hasBackground() {
      return !this.text && !this.outlined;
    },

    // Snackbar is dark by default
    // override themeable logic.
    isDark() {
      return this.hasBackground ? !this.light : Themeable$1.options.computed.isDark.call(this);
    },

    styles() {
      if (this.absolute || !this.app) return {};
      const {
        bar,
        bottom,
        footer,
        insetFooter,
        left,
        right,
        top
      } = this.$vuetify.application;
      return {
        paddingBottom: convertToUnit(bottom + footer + insetFooter),
        paddingLeft: convertToUnit(left),
        paddingRight: convertToUnit(right),
        paddingTop: convertToUnit(bar + top)
      };
    }

  },
  watch: {
    isActive: 'setTimeout',
    timeout: 'setTimeout'
  },

  mounted() {
    if (this.isActive) this.setTimeout();
  },

  created() {
    /* istanbul ignore next */
    if (this.$attrs.hasOwnProperty('auto-height')) {
      removed('auto-height', this);
    }
    /* istanbul ignore next */
    // eslint-disable-next-line eqeqeq


    if (this.timeout == 0) {
      deprecate('timeout="0"', '-1', this);
    }
  },

  methods: {
    genActions() {
      return this.$createElement('div', {
        staticClass: 'v-snack__action '
      }, [getSlot(this, 'action', {
        attrs: {
          class: 'v-snack__btn'
        }
      })]);
    },

    genContent() {
      return this.$createElement('div', {
        staticClass: 'v-snack__content',
        class: {
          [this.contentClass]: true
        },
        attrs: {
          role: 'status',
          'aria-live': 'polite'
        }
      }, [getSlot(this)]);
    },

    genWrapper() {
      const setColor = this.hasBackground ? this.setBackgroundColor : this.setTextColor;
      const data = setColor(this.color, {
        staticClass: 'v-snack__wrapper',
        class: VSheet.options.computed.classes.call(this),
        style: VSheet.options.computed.styles.call(this),
        directives: [{
          name: 'show',
          value: this.isActive
        }],
        on: {
          pointerenter: () => window.clearTimeout(this.activeTimeout),
          pointerleave: this.setTimeout
        }
      });
      return this.$createElement('div', data, [this.genContent(), this.genActions()]);
    },

    genTransition() {
      return this.$createElement('transition', {
        props: {
          name: this.transition
        }
      }, [this.genWrapper()]);
    },

    setTimeout() {
      window.clearTimeout(this.activeTimeout);
      const timeout = Number(this.timeout);

      if (!this.isActive || // TODO: remove 0 in v3
      [0, -1].includes(timeout)) {
        return;
      }

      this.activeTimeout = window.setTimeout(() => {
        this.isActive = false;
      }, timeout);
    }

  },

  render(h) {
    return h('div', {
      staticClass: 'v-snack',
      class: this.classes,
      style: this.styles
    }, [this.transition !== false ? this.genTransition() : this.genWrapper()]);
  }

});

var VStepper = '';

// Styles
const baseMixins$6 = mixins(VSheet, provide('stepper'), Proxyable$1);
/* @vue/component */

var __unplugin_components_7 = baseMixins$6.extend({
  name: 'v-stepper',

  provide() {
    return {
      stepClick: this.stepClick,
      isVertical: this.vertical
    };
  },

  props: {
    altLabels: Boolean,
    nonLinear: Boolean,
    flat: Boolean,
    vertical: Boolean
  },

  data() {
    const data = {
      isBooted: false,
      steps: [],
      content: [],
      isReverse: false
    };
    data.internalLazyValue = this.value != null ? this.value : (data[0] || {}).step || 1;
    return data;
  },

  computed: {
    classes() {
      return {
        'v-stepper--flat': this.flat,
        'v-stepper--is-booted': this.isBooted,
        'v-stepper--vertical': this.vertical,
        'v-stepper--alt-labels': this.altLabels,
        'v-stepper--non-linear': this.nonLinear,
        ...VSheet.options.computed.classes.call(this)
      };
    },

    styles() {
      return { ...VSheet.options.computed.styles.call(this)
      };
    }

  },
  watch: {
    internalValue(val, oldVal) {
      this.isReverse = Number(val) < Number(oldVal);
      oldVal && (this.isBooted = true);
      this.updateView();
    }

  },

  created() {
    /* istanbul ignore next */
    if (this.$listeners.input) {
      breaking('@input', '@change', this);
    }
  },

  mounted() {
    this.updateView();
  },

  methods: {
    register(item) {
      if (item.$options.name === 'v-stepper-step') {
        this.steps.push(item);
      } else if (item.$options.name === 'v-stepper-content') {
        item.isVertical = this.vertical;
        this.content.push(item);
      }
    },

    unregister(item) {
      if (item.$options.name === 'v-stepper-step') {
        this.steps = this.steps.filter(i => i !== item);
      } else if (item.$options.name === 'v-stepper-content') {
        item.isVertical = this.vertical;
        this.content = this.content.filter(i => i !== item);
      }
    },

    stepClick(step) {
      this.$nextTick(() => this.internalValue = step);
    },

    updateView() {
      for (let index = this.steps.length; --index >= 0;) {
        this.steps[index].toggle(this.internalValue);
      }

      for (let index = this.content.length; --index >= 0;) {
        this.content[index].toggle(this.internalValue, this.isReverse);
      }
    }

  },

  render(h) {
    return h(this.tag, {
      staticClass: 'v-stepper',
      class: this.classes,
      style: this.styles
    }, this.$slots.default);
  }

});

// Components
const baseMixins$5 = mixins(Colorable, inject('stepper', 'v-stepper-step', 'v-stepper'));
/* @vue/component */

var __unplugin_components_11 = baseMixins$5.extend().extend({
  name: 'v-stepper-step',
  directives: {
    ripple: Ripple$1
  },
  inject: ['stepClick'],
  props: {
    color: {
      type: String,
      default: 'primary'
    },
    complete: Boolean,
    completeIcon: {
      type: String,
      default: '$complete'
    },
    editable: Boolean,
    editIcon: {
      type: String,
      default: '$edit'
    },
    errorIcon: {
      type: String,
      default: '$error'
    },
    rules: {
      type: Array,
      default: () => []
    },
    step: [Number, String]
  },

  data() {
    return {
      isActive: false,
      isInactive: true
    };
  },

  computed: {
    classes() {
      return {
        'v-stepper__step--active': this.isActive,
        'v-stepper__step--editable': this.editable,
        'v-stepper__step--inactive': this.isInactive,
        'v-stepper__step--error error--text': this.hasError,
        'v-stepper__step--complete': this.complete
      };
    },

    hasError() {
      return this.rules.some(validate => validate() !== true);
    }

  },

  mounted() {
    this.stepper && this.stepper.register(this);
  },

  beforeDestroy() {
    this.stepper && this.stepper.unregister(this);
  },

  methods: {
    click(e) {
      e.stopPropagation();
      this.$emit('click', e);

      if (this.editable) {
        this.stepClick(this.step);
      }
    },

    genIcon(icon) {
      return this.$createElement(__unplugin_components_95, icon);
    },

    genLabel() {
      return this.$createElement('div', {
        staticClass: 'v-stepper__label'
      }, this.$slots.default);
    },

    genStep() {
      const color = !this.hasError && (this.complete || this.isActive) ? this.color : false;
      return this.$createElement('span', this.setBackgroundColor(color, {
        staticClass: 'v-stepper__step__step'
      }), this.genStepContent());
    },

    genStepContent() {
      const children = [];

      if (this.hasError) {
        children.push(this.genIcon(this.errorIcon));
      } else if (this.complete) {
        if (this.editable) {
          children.push(this.genIcon(this.editIcon));
        } else {
          children.push(this.genIcon(this.completeIcon));
        }
      } else {
        children.push(String(this.step));
      }

      return children;
    },

    keyboardClick(e) {
      if (e.keyCode === keyCodes.space) {
        this.click(e);
      }
    },

    toggle(step) {
      this.isActive = step.toString() === this.step.toString();
      this.isInactive = Number(step) < Number(this.step);
    }

  },

  render(h) {
    return h('div', {
      attrs: {
        tabindex: this.editable ? 0 : -1
      },
      staticClass: 'v-stepper__step',
      class: this.classes,
      directives: [{
        name: 'ripple',
        value: this.editable
      }],
      on: {
        click: this.click,
        keydown: this.keyboardClick
      }
    }, [this.genStep(), this.genLabel()]);
  }

});

// Components
const baseMixins$4 = mixins(inject('stepper', 'v-stepper-content', 'v-stepper'));
/* @vue/component */

var __unplugin_components_31 = baseMixins$4.extend().extend({
  name: 'v-stepper-content',
  inject: {
    isVerticalProvided: {
      from: 'isVertical'
    }
  },
  props: {
    step: {
      type: [Number, String],
      required: true
    }
  },

  data() {
    return {
      height: 0,
      // Must be null to allow
      // previous comparison
      isActive: null,
      isReverse: false,
      isVertical: this.isVerticalProvided
    };
  },

  computed: {
    computedTransition() {
      // Fix for #8978
      const reverse = this.$vuetify.rtl ? !this.isReverse : this.isReverse;
      return reverse ? VTabReverseTransition : VTabTransition;
    },

    styles() {
      if (!this.isVertical) return {};
      return {
        height: convertToUnit(this.height)
      };
    }

  },
  watch: {
    isActive(current, previous) {
      // If active and the previous state
      // was null, is just booting up
      if (current && previous == null) {
        this.height = 'auto';
        return;
      }

      if (!this.isVertical) return;
      if (this.isActive) this.enter();else this.leave();
    }

  },

  mounted() {
    this.$refs.wrapper.addEventListener('transitionend', this.onTransition, false);
    this.stepper && this.stepper.register(this);
  },

  beforeDestroy() {
    this.$refs.wrapper.removeEventListener('transitionend', this.onTransition, false);
    this.stepper && this.stepper.unregister(this);
  },

  methods: {
    onTransition(e) {
      if (!this.isActive || e.propertyName !== 'height') return;
      this.height = 'auto';
    },

    enter() {
      let scrollHeight = 0; // Render bug with height

      requestAnimationFrame(() => {
        scrollHeight = this.$refs.wrapper.scrollHeight;
      });
      this.height = 0; // Give the collapsing element time to collapse

      setTimeout(() => this.isActive && (this.height = scrollHeight || 'auto'), 450);
    },

    leave() {
      this.height = this.$refs.wrapper.clientHeight;
      setTimeout(() => this.height = 0, 10);
    },

    toggle(step, reverse) {
      this.isActive = step.toString() === this.step.toString();
      this.isReverse = reverse;
    }

  },

  render(h) {
    const contentData = {
      staticClass: 'v-stepper__content'
    };
    const wrapperData = {
      staticClass: 'v-stepper__wrapper',
      style: this.styles,
      ref: 'wrapper'
    };

    if (!this.isVertical) {
      contentData.directives = [{
        name: 'show',
        value: this.isActive
      }];
    }

    const wrapper = h('div', wrapperData, [this.$slots.default]);
    const content = h('div', contentData, [wrapper]);
    return h(this.computedTransition, {
      on: this.$listeners
    }, [content]);
  }

});

const VStepperHeader = createSimpleFunctional('v-stepper__header');
const VStepperItems = createSimpleFunctional('v-stepper__items');

var VSwitch = '';

// Styles
/* @vue/component */

var __unplugin_components_2 = Selectable.extend({
  name: 'v-switch',
  directives: {
    Touch: Touch$1
  },
  props: {
    inset: Boolean,
    loading: {
      type: [Boolean, String],
      default: false
    },
    flat: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    classes() {
      return { ...VInput.options.computed.classes.call(this),
        'v-input--selection-controls v-input--switch': true,
        'v-input--switch--flat': this.flat,
        'v-input--switch--inset': this.inset
      };
    },

    attrs() {
      return {
        'aria-checked': String(this.isActive),
        'aria-disabled': String(this.isDisabled),
        role: 'switch'
      };
    },

    // Do not return undefined if disabled,
    // according to spec, should still show
    // a color when disabled and active
    validationState() {
      if (this.hasError && this.shouldValidate) return 'error';
      if (this.hasSuccess) return 'success';
      if (this.hasColor !== null) return this.computedColor;
      return undefined;
    },

    switchData() {
      return this.setTextColor(this.loading ? undefined : this.validationState, {
        class: this.themeClasses
      });
    }

  },
  methods: {
    genDefaultSlot() {
      return [this.genSwitch(), this.genLabel()];
    },

    genSwitch() {
      const {
        title,
        ...switchAttrs
      } = this.attrs$;
      return this.$createElement('div', {
        staticClass: 'v-input--selection-controls__input'
      }, [this.genInput('checkbox', { ...this.attrs,
        ...switchAttrs
      }), this.genRipple(this.setTextColor(this.validationState, {
        directives: [{
          name: 'touch',
          value: {
            left: this.onSwipeLeft,
            right: this.onSwipeRight
          }
        }]
      })), this.$createElement('div', {
        staticClass: 'v-input--switch__track',
        ...this.switchData
      }), this.$createElement('div', {
        staticClass: 'v-input--switch__thumb',
        ...this.switchData
      }, [this.genProgress()])]);
    },

    genProgress() {
      return this.$createElement(VFabTransition, {}, [this.loading === false ? null : this.$slots.progress || this.$createElement(__unplugin_components_7$1, {
        props: {
          color: this.loading === true || this.loading === '' ? this.color || 'primary' : this.loading,
          size: 16,
          width: 2,
          indeterminate: true
        }
      })]);
    },

    onSwipeLeft() {
      if (this.isActive) this.onChange();
    },

    onSwipeRight() {
      if (!this.isActive) this.onChange();
    },

    onKeydown(e) {
      if (e.keyCode === keyCodes.left && this.isActive || e.keyCode === keyCodes.right && !this.isActive) this.onChange();
    }

  }
});

var VSystemBar = '';

// Styles
var __unplugin_components_0 = mixins(applicationable('bar', ['height', 'window']), Colorable, Themeable$1
/* @vue/component */
).extend({
  name: 'v-system-bar',
  props: {
    height: [Number, String],
    lightsOut: Boolean,
    window: Boolean
  },
  computed: {
    classes() {
      return {
        'v-system-bar--lights-out': this.lightsOut,
        'v-system-bar--absolute': this.absolute,
        'v-system-bar--fixed': !this.absolute && (this.app || this.fixed),
        'v-system-bar--window': this.window,
        ...this.themeClasses
      };
    },

    computedHeight() {
      if (this.height) {
        return isNaN(parseInt(this.height)) ? this.height : parseInt(this.height);
      }

      return this.window ? 32 : 24;
    },

    styles() {
      return {
        height: convertToUnit(this.computedHeight)
      };
    }

  },
  methods: {
    updateApplication() {
      return this.$el ? this.$el.clientHeight : this.computedHeight;
    }

  },

  render(h) {
    const data = {
      staticClass: 'v-system-bar',
      class: this.classes,
      style: this.styles,
      on: this.$listeners
    };
    return h('div', this.setBackgroundColor(this.color, data), getSlot(this));
  }

});

var VTabs = '';

// Extensions
var VTabsBar = mixins(BaseSlideGroup, SSRBootable, Themeable$1
/* @vue/component */
).extend({
  name: 'v-tabs-bar',

  provide() {
    return {
      tabsBar: this
    };
  },

  computed: {
    classes() {
      return { ...BaseSlideGroup.options.computed.classes.call(this),
        'v-tabs-bar': true,
        'v-tabs-bar--is-mobile': this.isMobile,
        // TODO: Remove this and move to v-slide-group
        'v-tabs-bar--show-arrows': this.showArrows,
        ...this.themeClasses
      };
    }

  },
  watch: {
    items: 'callSlider',
    internalValue: 'callSlider',
    $route: 'onRouteChange'
  },
  methods: {
    callSlider() {
      if (!this.isBooted) return;
      this.$emit('call:slider');
    },

    genContent() {
      const render = BaseSlideGroup.options.methods.genContent.call(this);
      render.data = render.data || {};
      render.data.staticClass += ' v-tabs-bar__content';
      return render;
    },

    onRouteChange(val, oldVal) {
      /* istanbul ignore next */
      if (this.mandatory) return;
      const items = this.items;
      const newPath = val.path;
      const oldPath = oldVal.path;
      let hasNew = false;
      let hasOld = false;

      for (const item of items) {
        if (item.to === oldPath) hasOld = true;else if (item.to === newPath) hasNew = true;
        if (hasNew && hasOld) break;
      } // If we have an old item and not a new one
      // it's assumed that the user navigated to
      // a path that is not present in the items


      if (!hasNew && hasOld) this.internalValue = undefined;
    }

  },

  render(h) {
    const render = BaseSlideGroup.options.render.call(this, h);
    render.data.attrs = {
      role: 'tablist'
    };
    return render;
  }

});

// Extensions
/* @vue/component */

var __unplugin_components_25 = VWindow.extend({
  name: 'v-tabs-items',
  props: {
    mandatory: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    classes() {
      return { ...VWindow.options.computed.classes.call(this),
        'v-tabs-items': true
      };
    },

    isDark() {
      return this.rootIsDark;
    }

  },
  methods: {
    getValue(item, i) {
      return item.id || BaseItemGroup.options.methods.getValue.call(this, item, i);
    }

  }
});

// Mixins
/* @vue/component */

var __unplugin_components_9 = mixins(Colorable).extend({
  name: 'v-tabs-slider',

  render(h) {
    return h('div', this.setBackgroundColor(this.color, {
      staticClass: 'v-tabs-slider'
    }));
  }

});

// Styles
const baseMixins$3 = mixins(Colorable, Proxyable$1, Themeable$1);
var __unplugin_components_26$1 = baseMixins$3.extend().extend({
  name: 'v-tabs',
  directives: {
    Resize: Resize$1
  },
  props: {
    activeClass: {
      type: String,
      default: ''
    },
    alignWithTitle: Boolean,
    backgroundColor: String,
    centerActive: Boolean,
    centered: Boolean,
    fixedTabs: Boolean,
    grow: Boolean,
    height: {
      type: [Number, String],
      default: undefined
    },
    hideSlider: Boolean,
    iconsAndText: Boolean,
    mobileBreakpoint: [String, Number],
    nextIcon: {
      type: String,
      default: '$next'
    },
    optional: Boolean,
    prevIcon: {
      type: String,
      default: '$prev'
    },
    right: Boolean,
    showArrows: [Boolean, String],
    sliderColor: String,
    sliderSize: {
      type: [Number, String],
      default: 2
    },
    vertical: Boolean
  },

  data() {
    return {
      resizeTimeout: 0,
      slider: {
        height: null,
        left: null,
        right: null,
        top: null,
        width: null
      },
      transitionTime: 300
    };
  },

  computed: {
    classes() {
      return {
        'v-tabs--align-with-title': this.alignWithTitle,
        'v-tabs--centered': this.centered,
        'v-tabs--fixed-tabs': this.fixedTabs,
        'v-tabs--grow': this.grow,
        'v-tabs--icons-and-text': this.iconsAndText,
        'v-tabs--right': this.right,
        'v-tabs--vertical': this.vertical,
        ...this.themeClasses
      };
    },

    isReversed() {
      return this.$vuetify.rtl && this.vertical;
    },

    sliderStyles() {
      return {
        height: convertToUnit(this.slider.height),
        left: this.isReversed ? undefined : convertToUnit(this.slider.left),
        right: this.isReversed ? convertToUnit(this.slider.right) : undefined,
        top: this.vertical ? convertToUnit(this.slider.top) : undefined,
        transition: this.slider.left != null ? null : 'none',
        width: convertToUnit(this.slider.width)
      };
    },

    computedColor() {
      if (this.color) return this.color;else if (this.isDark && !this.appIsDark) return 'white';else return 'primary';
    }

  },
  watch: {
    alignWithTitle: 'callSlider',
    centered: 'callSlider',
    centerActive: 'callSlider',
    fixedTabs: 'callSlider',
    grow: 'callSlider',
    iconsAndText: 'callSlider',
    right: 'callSlider',
    showArrows: 'callSlider',
    vertical: 'callSlider',
    '$vuetify.application.left': 'onResize',
    '$vuetify.application.right': 'onResize',
    '$vuetify.rtl': 'onResize'
  },

  mounted() {
    if (typeof ResizeObserver !== 'undefined') {
      const obs = new ResizeObserver(() => {
        this.onResize();
      });
      obs.observe(this.$el);
      this.$on('hook:destroyed', () => {
        obs.disconnect();
      });
    }

    this.$nextTick(() => {
      window.setTimeout(this.callSlider, 30);
    });
  },

  methods: {
    callSlider() {
      if (this.hideSlider || !this.$refs.items || !this.$refs.items.selectedItems.length) {
        this.slider.width = 0;
        return false;
      }

      this.$nextTick(() => {
        // Give screen time to paint
        const activeTab = this.$refs.items.selectedItems[0];
        /* istanbul ignore if */

        if (!activeTab || !activeTab.$el) {
          this.slider.width = 0;
          this.slider.left = 0;
          return;
        }

        const el = activeTab.$el;
        this.slider = {
          height: !this.vertical ? Number(this.sliderSize) : el.scrollHeight,
          left: this.vertical ? 0 : el.offsetLeft,
          right: this.vertical ? 0 : el.offsetLeft + el.offsetWidth,
          top: el.offsetTop,
          width: this.vertical ? Number(this.sliderSize) : el.scrollWidth
        };
      });
      return true;
    },

    genBar(items, slider) {
      const data = {
        style: {
          height: convertToUnit(this.height)
        },
        props: {
          activeClass: this.activeClass,
          centerActive: this.centerActive,
          dark: this.dark,
          light: this.light,
          mandatory: !this.optional,
          mobileBreakpoint: this.mobileBreakpoint,
          nextIcon: this.nextIcon,
          prevIcon: this.prevIcon,
          showArrows: this.showArrows,
          value: this.internalValue
        },
        on: {
          'call:slider': this.callSlider,
          change: val => {
            this.internalValue = val;
          }
        },
        ref: 'items'
      };
      this.setTextColor(this.computedColor, data);
      this.setBackgroundColor(this.backgroundColor, data);
      return this.$createElement(VTabsBar, data, [this.genSlider(slider), items]);
    },

    genItems(items, item) {
      // If user provides items
      // opt to use theirs
      if (items) return items; // If no tabs are provided
      // render nothing

      if (!item.length) return null;
      return this.$createElement(__unplugin_components_25, {
        props: {
          value: this.internalValue
        },
        on: {
          change: val => {
            this.internalValue = val;
          }
        }
      }, item);
    },

    genSlider(slider) {
      if (this.hideSlider) return null;

      if (!slider) {
        slider = this.$createElement(__unplugin_components_9, {
          props: {
            color: this.sliderColor
          }
        });
      }

      return this.$createElement('div', {
        staticClass: 'v-tabs-slider-wrapper',
        style: this.sliderStyles
      }, [slider]);
    },

    onResize() {
      if (this._isDestroyed) return;
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = window.setTimeout(this.callSlider, 0);
    },

    parseNodes() {
      let items = null;
      let slider = null;
      const item = [];
      const tab = [];
      const slot = this.$slots.default || [];
      const length = slot.length;

      for (let i = 0; i < length; i++) {
        const vnode = slot[i];

        if (vnode.componentOptions) {
          switch (vnode.componentOptions.Ctor.options.name) {
            case 'v-tabs-slider':
              slider = vnode;
              break;

            case 'v-tabs-items':
              items = vnode;
              break;

            case 'v-tab-item':
              item.push(vnode);
              break;
            // case 'v-tab' - intentionally omitted

            default:
              tab.push(vnode);
          }
        } else {
          tab.push(vnode);
        }
      }
      /**
       * tab: array of `v-tab`
       * slider: single `v-tabs-slider`
       * items: single `v-tabs-items`
       * item: array of `v-tab-item`
       */


      return {
        tab,
        slider,
        items,
        item
      };
    }

  },

  render(h) {
    const {
      tab,
      slider,
      items,
      item
    } = this.parseNodes();
    return h('div', {
      staticClass: 'v-tabs',
      class: this.classes,
      directives: [{
        name: 'resize',
        modifiers: {
          quiet: true
        },
        value: this.onResize
      }]
    }, [this.genBar(tab, slider), this.genItems(items, item)]);
  }

});

// Mixins
const baseMixins$2 = mixins(Routable, // Must be after routable
// to overwrite activeClass
factory$1('tabsBar'), Themeable$1);
var __unplugin_components_12 = baseMixins$2.extend().extend().extend({
  name: 'v-tab',
  props: {
    ripple: {
      type: [Boolean, Object],
      default: true
    },
    tabValue: {
      required: false
    }
  },
  data: () => ({
    proxyClass: 'v-tab--active'
  }),
  computed: {
    classes() {
      return {
        'v-tab': true,
        ...Routable.options.computed.classes.call(this),
        'v-tab--disabled': this.disabled,
        ...this.groupClasses
      };
    },

    value() {
      if (this.tabValue != null) return this.tabValue;
      let to = this.to || this.href;
      if (to == null) return to;

      if (this.$router && this.to === Object(this.to)) {
        const resolve = this.$router.resolve(this.to, this.$route, this.append);
        to = resolve.href;
      }

      return to.replace('#', '');
    }

  },
  methods: {
    click(e) {
      // Prevent keyboard actions
      // from children elements
      // within disabled tabs
      if (this.disabled) {
        e.preventDefault();
        return;
      } // If user provides an
      // actual link, do not
      // prevent default


      if (this.href && this.href.indexOf('#') > -1) e.preventDefault();
      if (e.detail) this.$el.blur();
      this.$emit('click', e);
      this.to || this.toggle();
    },

    toggle() {
      // VItemGroup treats a change event as a click
      if (!this.isActive || !this.tabsBar.mandatory && !this.to) {
        this.$emit('change');
      }
    }

  },

  render(h) {
    const {
      tag,
      data
    } = this.generateRouteLink();
    data.attrs = { ...data.attrs,
      'aria-selected': String(this.isActive),
      role: 'tab',
      tabindex: this.disabled ? -1 : 0
    };
    data.on = { ...data.on,
      keydown: e => {
        if (e.keyCode === keyCodes.enter) this.click(e);
        this.$emit('keydown', e);
      }
    };
    return h(tag, data, this.$slots.default);
  }

});

// Extensions
/* @vue/component */

var __unplugin_components_26 = VWindowItem.extend({
  name: 'v-tab-item',
  props: {
    id: String
  },
  methods: {
    genWindowItem() {
      const item = VWindowItem.options.methods.genWindowItem.call(this);
      item.data.domProps = item.data.domProps || {};
      item.data.domProps.id = this.id || this.value;
      return item;
    }

  }
});

var VTextarea = '';

// Styles
const baseMixins$1 = mixins(__unplugin_components_89);
/* @vue/component */

var __unplugin_components_42$1 = baseMixins$1.extend({
  name: 'v-textarea',
  props: {
    autoGrow: Boolean,
    noResize: Boolean,
    rowHeight: {
      type: [Number, String],
      default: 24,
      validator: v => !isNaN(parseFloat(v))
    },
    rows: {
      type: [Number, String],
      default: 5,
      validator: v => !isNaN(parseInt(v, 10))
    }
  },
  computed: {
    classes() {
      return {
        'v-textarea': true,
        'v-textarea--auto-grow': this.autoGrow,
        'v-textarea--no-resize': this.noResizeHandle,
        ...__unplugin_components_89.options.computed.classes.call(this)
      };
    },

    noResizeHandle() {
      return this.noResize || this.autoGrow;
    }

  },
  watch: {
    autoGrow(val) {
      this.$nextTick(() => {
        var _a;

        val ? this.calculateInputHeight() : (_a = this.$refs.input) === null || _a === void 0 ? void 0 : _a.style.removeProperty('height');
      });
    },

    lazyValue() {
      this.autoGrow && this.$nextTick(this.calculateInputHeight);
    },

    rowHeight() {
      this.autoGrow && this.$nextTick(this.calculateInputHeight);
    }

  },

  mounted() {
    setTimeout(() => {
      this.autoGrow && this.calculateInputHeight();
    }, 0);
  },

  methods: {
    calculateInputHeight() {
      const input = this.$refs.input;
      if (!input) return;
      input.style.height = '0';
      const height = input.scrollHeight;
      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight); // This has to be done ASAP, waiting for Vue
      // to update the DOM causes ugly layout jumping

      input.style.height = Math.max(minHeight, height) + 'px';
    },

    genInput() {
      const input = __unplugin_components_89.options.methods.genInput.call(this);
      input.tag = 'textarea';
      delete input.data.attrs.type;
      input.data.attrs.rows = this.rows;
      return input;
    },

    onInput(e) {
      __unplugin_components_89.options.methods.onInput.call(this, e);
      this.autoGrow && this.calculateInputHeight();
    },

    onKeyDown(e) {
      // Prevents closing of a
      // dialog when pressing
      // enter
      if (this.isFocused && e.keyCode === 13) {
        e.stopPropagation();
      }

      this.$emit('keydown', e);
    }

  }
});

var VTooltip = '';

/* @vue/component */

var __unplugin_components_42 = mixins(Colorable, Delayable, Dependent, Menuable).extend({
  name: 'v-tooltip',
  props: {
    closeDelay: {
      type: [Number, String],
      default: 0
    },
    disabled: Boolean,
    openDelay: {
      type: [Number, String],
      default: 0
    },
    openOnHover: {
      type: Boolean,
      default: true
    },
    openOnFocus: {
      type: Boolean,
      default: true
    },
    tag: {
      type: String,
      default: 'span'
    },
    transition: String
  },
  data: () => ({
    calculatedMinWidth: 0,
    closeDependents: false
  }),
  computed: {
    calculatedLeft() {
      const {
        activator,
        content
      } = this.dimensions;
      const unknown = !this.bottom && !this.left && !this.top && !this.right;
      const activatorLeft = this.attach !== false ? activator.offsetLeft : activator.left;
      let left = 0;

      if (this.top || this.bottom || unknown) {
        left = activatorLeft + activator.width / 2 - content.width / 2;
      } else if (this.left || this.right) {
        left = activatorLeft + (this.right ? activator.width : -content.width) + (this.right ? 10 : -10);
      }

      if (this.nudgeLeft) left -= parseInt(this.nudgeLeft);
      if (this.nudgeRight) left += parseInt(this.nudgeRight);
      return `${this.calcXOverflow(left, this.dimensions.content.width)}px`;
    },

    calculatedTop() {
      const {
        activator,
        content
      } = this.dimensions;
      const activatorTop = this.attach !== false ? activator.offsetTop : activator.top;
      let top = 0;

      if (this.top || this.bottom) {
        top = activatorTop + (this.bottom ? activator.height : -content.height) + (this.bottom ? 10 : -10);
      } else if (this.left || this.right) {
        top = activatorTop + activator.height / 2 - content.height / 2;
      }

      if (this.nudgeTop) top -= parseInt(this.nudgeTop);
      if (this.nudgeBottom) top += parseInt(this.nudgeBottom);
      if (this.attach === false) top += this.pageYOffset;
      return `${this.calcYOverflow(top)}px`;
    },

    classes() {
      return {
        'v-tooltip--top': this.top,
        'v-tooltip--right': this.right,
        'v-tooltip--bottom': this.bottom,
        'v-tooltip--left': this.left,
        'v-tooltip--attached': this.attach === '' || this.attach === true || this.attach === 'attach'
      };
    },

    computedTransition() {
      if (this.transition) return this.transition;
      return this.isActive ? 'scale-transition' : 'fade-transition';
    },

    offsetY() {
      return this.top || this.bottom;
    },

    offsetX() {
      return this.left || this.right;
    },

    styles() {
      return {
        left: this.calculatedLeft,
        maxWidth: convertToUnit(this.maxWidth),
        minWidth: convertToUnit(this.minWidth),
        top: this.calculatedTop,
        zIndex: this.zIndex || this.activeZIndex
      };
    }

  },

  beforeMount() {
    this.$nextTick(() => {
      this.value && this.callActivate();
    });
  },

  mounted() {
    if (getSlotType(this, 'activator', true) === 'v-slot') {
      consoleError(`v-tooltip's activator slot must be bound, try '<template #activator="data"><v-btn v-on="data.on>'`, this);
    }
  },

  methods: {
    activate() {
      // Update coordinates and dimensions of menu
      // and its activator
      this.updateDimensions(); // Start the transition

      requestAnimationFrame(this.startTransition);
    },

    deactivate() {
      this.runDelay('close');
    },

    genActivatorListeners() {
      const listeners = Activatable.options.methods.genActivatorListeners.call(this);

      if (this.openOnFocus) {
        listeners.focus = e => {
          this.getActivator(e);
          this.runDelay('open');
        };

        listeners.blur = e => {
          this.getActivator(e);
          this.runDelay('close');
        };
      }

      listeners.keydown = e => {
        if (e.keyCode === keyCodes.esc) {
          this.getActivator(e);
          this.runDelay('close');
        }
      };

      return listeners;
    },

    genActivatorAttributes() {
      return {
        'aria-haspopup': true,
        'aria-expanded': String(this.isActive)
      };
    },

    genTransition() {
      const content = this.genContent();
      if (!this.computedTransition) return content;
      return this.$createElement('transition', {
        props: {
          name: this.computedTransition
        }
      }, [content]);
    },

    genContent() {
      return this.$createElement('div', this.setBackgroundColor(this.color, {
        staticClass: 'v-tooltip__content',
        class: {
          [this.contentClass]: true,
          menuable__content__active: this.isActive,
          'v-tooltip__content--fixed': this.activatorFixed
        },
        style: this.styles,
        attrs: this.getScopeIdAttrs(),
        directives: [{
          name: 'show',
          value: this.isContentActive
        }],
        ref: 'content'
      }), this.getContentSlot());
    }

  },

  render(h) {
    return h(this.tag, {
      staticClass: 'v-tooltip',
      class: this.classes
    }, [this.showLazyContent(() => [this.genTransition()]), this.genActivator()]);
  }

});

var VTreeview = '';

// Components
const baseMixins = mixins(Colorable, inject('treeview'));
const VTreeviewNodeProps = {
  activatable: Boolean,
  activeClass: {
    type: String,
    default: 'v-treeview-node--active'
  },
  color: {
    type: String,
    default: 'primary'
  },
  disablePerNode: Boolean,
  expandIcon: {
    type: String,
    default: '$subgroup'
  },
  indeterminateIcon: {
    type: String,
    default: '$checkboxIndeterminate'
  },
  itemChildren: {
    type: String,
    default: 'children'
  },
  itemDisabled: {
    type: String,
    default: 'disabled'
  },
  itemKey: {
    type: String,
    default: 'id'
  },
  itemText: {
    type: String,
    default: 'name'
  },
  loadChildren: Function,
  loadingIcon: {
    type: String,
    default: '$loading'
  },
  offIcon: {
    type: String,
    default: '$checkboxOff'
  },
  onIcon: {
    type: String,
    default: '$checkboxOn'
  },
  openOnClick: Boolean,
  rounded: Boolean,
  selectable: Boolean,
  selectedColor: {
    type: String,
    default: 'accent'
  },
  shaped: Boolean,
  transition: Boolean,
  selectionType: {
    type: String,
    default: 'leaf',
    validator: v => ['leaf', 'independent'].includes(v)
  }
};
/* @vue/component */

const VTreeviewNode = baseMixins.extend().extend({
  name: 'v-treeview-node',
  inject: {
    treeview: {
      default: null
    }
  },
  props: {
    level: Number,
    item: {
      type: Object,
      default: () => null
    },
    parentIsDisabled: Boolean,
    ...VTreeviewNodeProps
  },
  data: () => ({
    hasLoaded: false,
    isActive: false,
    isIndeterminate: false,
    isLoading: false,
    isOpen: false,
    isSelected: false // Node is selected (checkbox)

  }),
  computed: {
    disabled() {
      return getObjectValueByPath(this.item, this.itemDisabled) || !this.disablePerNode && this.parentIsDisabled && this.selectionType === 'leaf';
    },

    key() {
      return getObjectValueByPath(this.item, this.itemKey);
    },

    children() {
      const children = getObjectValueByPath(this.item, this.itemChildren);
      return children && children.filter(child => !this.treeview.isExcluded(getObjectValueByPath(child, this.itemKey)));
    },

    text() {
      return getObjectValueByPath(this.item, this.itemText);
    },

    scopedProps() {
      return {
        item: this.item,
        leaf: !this.children,
        selected: this.isSelected,
        indeterminate: this.isIndeterminate,
        active: this.isActive,
        open: this.isOpen
      };
    },

    computedIcon() {
      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;
    },

    hasChildren() {
      return !!this.children && (!!this.children.length || !!this.loadChildren);
    }

  },

  created() {
    this.treeview.register(this);
  },

  beforeDestroy() {
    this.treeview.unregister(this);
  },

  methods: {
    checkChildren() {
      return new Promise(resolve => {
        // TODO: Potential issue with always trying
        // to load children if response is empty?
        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve();
        this.isLoading = true;
        resolve(this.loadChildren(this.item));
      }).then(() => {
        this.isLoading = false;
        this.hasLoaded = true;
      });
    },

    open() {
      this.isOpen = !this.isOpen;
      this.treeview.updateOpen(this.key, this.isOpen);
      this.treeview.emitOpen();
    },

    genLabel() {
      const children = [];
      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);
      return this.$createElement('div', {
        slot: 'label',
        staticClass: 'v-treeview-node__label'
      }, children);
    },

    genPrependSlot() {
      if (!this.$scopedSlots.prepend) return null;
      return this.$createElement('div', {
        staticClass: 'v-treeview-node__prepend'
      }, this.$scopedSlots.prepend(this.scopedProps));
    },

    genAppendSlot() {
      if (!this.$scopedSlots.append) return null;
      return this.$createElement('div', {
        staticClass: 'v-treeview-node__append'
      }, this.$scopedSlots.append(this.scopedProps));
    },

    genContent() {
      const children = [this.genPrependSlot(), this.genLabel(), this.genAppendSlot()];
      return this.$createElement('div', {
        staticClass: 'v-treeview-node__content'
      }, children);
    },

    genToggle() {
      return this.$createElement(__unplugin_components_95, {
        staticClass: 'v-treeview-node__toggle',
        class: {
          'v-treeview-node__toggle--open': this.isOpen,
          'v-treeview-node__toggle--loading': this.isLoading
        },
        slot: 'prepend',
        on: {
          click: e => {
            e.stopPropagation();
            if (this.isLoading) return;
            this.checkChildren().then(() => this.open());
          }
        }
      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);
    },

    genCheckbox() {
      return this.$createElement(__unplugin_components_95, {
        staticClass: 'v-treeview-node__checkbox',
        props: {
          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,
          disabled: this.disabled
        },
        on: {
          click: e => {
            e.stopPropagation();
            if (this.isLoading) return;
            this.checkChildren().then(() => {
              // We nextTick here so that items watch in VTreeview has a chance to run first
              this.$nextTick(() => {
                this.isSelected = !this.isSelected;
                this.isIndeterminate = false;
                this.treeview.updateSelected(this.key, this.isSelected);
                this.treeview.emitSelected();
              });
            });
          }
        }
      }, [this.computedIcon]);
    },

    genLevel(level) {
      return createRange(level).map(() => this.$createElement('div', {
        staticClass: 'v-treeview-node__level'
      }));
    },

    genNode() {
      const children = [this.genContent()];
      if (this.selectable) children.unshift(this.genCheckbox());

      if (this.hasChildren) {
        children.unshift(this.genToggle());
      } else {
        children.unshift(...this.genLevel(1));
      }

      children.unshift(...this.genLevel(this.level));
      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {
        staticClass: 'v-treeview-node__root',
        class: {
          [this.activeClass]: this.isActive
        },
        on: {
          click: () => {
            if (this.openOnClick && this.hasChildren) {
              this.checkChildren().then(this.open);
            } else if (this.activatable && !this.disabled) {
              this.isActive = !this.isActive;
              this.treeview.updateActive(this.key, this.isActive);
              this.treeview.emitActive();
            }
          }
        }
      }), children);
    },

    genChild(item, parentIsDisabled) {
      return this.$createElement(VTreeviewNode, {
        key: getObjectValueByPath(item, this.itemKey),
        props: {
          activatable: this.activatable,
          activeClass: this.activeClass,
          item,
          selectable: this.selectable,
          selectedColor: this.selectedColor,
          color: this.color,
          disablePerNode: this.disablePerNode,
          expandIcon: this.expandIcon,
          indeterminateIcon: this.indeterminateIcon,
          offIcon: this.offIcon,
          onIcon: this.onIcon,
          loadingIcon: this.loadingIcon,
          itemKey: this.itemKey,
          itemText: this.itemText,
          itemDisabled: this.itemDisabled,
          itemChildren: this.itemChildren,
          loadChildren: this.loadChildren,
          transition: this.transition,
          openOnClick: this.openOnClick,
          rounded: this.rounded,
          shaped: this.shaped,
          level: this.level + 1,
          selectionType: this.selectionType,
          parentIsDisabled
        },
        scopedSlots: this.$scopedSlots
      });
    },

    genChildrenWrapper() {
      if (!this.isOpen || !this.children) return null;
      const children = [this.children.map(c => this.genChild(c, this.disabled))];
      return this.$createElement('div', {
        staticClass: 'v-treeview-node__children'
      }, children);
    },

    genTransition() {
      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);
    }

  },

  render(h) {
    const children = [this.genNode()];
    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());
    return h('div', {
      staticClass: 'v-treeview-node',
      class: {
        'v-treeview-node--leaf': !this.hasChildren,
        'v-treeview-node--click': this.openOnClick,
        'v-treeview-node--disabled': this.disabled,
        'v-treeview-node--rounded': this.rounded,
        'v-treeview-node--shaped': this.shaped,
        'v-treeview-node--selected': this.isSelected
      },
      attrs: {
        'aria-expanded': String(this.isOpen)
      }
    }, children);
  }

});
var VTreeviewNode$1 = VTreeviewNode;

function filterTreeItem(item, search, textKey) {
  const text = getObjectValueByPath(item, textKey);
  return text.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) > -1;
}
function filterTreeItems(filter, item, search, idKey, textKey, childrenKey, excluded) {
  if (filter(item, search, textKey)) {
    return true;
  }

  const children = getObjectValueByPath(item, childrenKey);

  if (children) {
    let match = false;

    for (let i = 0; i < children.length; i++) {
      if (filterTreeItems(filter, children[i], search, idKey, textKey, childrenKey, excluded)) {
        match = true;
      }
    }

    if (match) return true;
  }

  excluded.add(getObjectValueByPath(item, idKey));
  return false;
}

// Styles
var __unplugin_components_46 = mixins(provide('treeview'), Themeable$1
/* @vue/component */
).extend({
  name: 'v-treeview',

  provide() {
    return {
      treeview: this
    };
  },

  props: {
    active: {
      type: Array,
      default: () => []
    },
    dense: Boolean,
    disabled: Boolean,
    filter: Function,
    hoverable: Boolean,
    items: {
      type: Array,
      default: () => []
    },
    multipleActive: Boolean,
    open: {
      type: Array,
      default: () => []
    },
    openAll: Boolean,
    returnObject: {
      type: Boolean,
      default: false // TODO: Should be true in next major

    },
    search: String,
    value: {
      type: Array,
      default: () => []
    },
    ...VTreeviewNodeProps
  },
  data: () => ({
    level: -1,
    activeCache: new Set(),
    nodes: {},
    openCache: new Set(),
    selectedCache: new Set()
  }),
  computed: {
    excludedItems() {
      const excluded = new Set();
      if (!this.search) return excluded;

      for (let i = 0; i < this.items.length; i++) {
        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);
      }

      return excluded;
    }

  },
  watch: {
    items: {
      handler() {
        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey));
        const newKeys = this.getKeys(this.items);
        const diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed

        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes

        diff.forEach(k => delete this.nodes[k]);
        const oldSelectedCache = [...this.selectedCache];
        this.selectedCache = new Set();
        this.activeCache = new Set();
        this.openCache = new Set();
        this.buildTree(this.items); // Only emit selected if selection has changed
        // as a result of items changing. This fixes a
        // potential double emit when selecting a node
        // with dynamic children

        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected();
      },

      deep: true
    },

    active(value) {
      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);
    },

    value(value) {
      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected);
    },

    open(value) {
      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);
    }

  },

  created() {
    const getValue = key => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key;

    this.buildTree(this.items);

    for (const value of this.value.map(getValue)) {
      this.updateSelected(value, true, true);
    }

    for (const active of this.active.map(getValue)) {
      this.updateActive(active, true);
    }
  },

  mounted() {
    // Save the developer from themselves
    if (this.$slots.prepend || this.$slots.append) {
      consoleWarn('The prepend and append slots require a slot-scope attribute', this);
    }

    if (this.openAll) {
      this.updateAll(true);
    } else {
      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true));
      this.emitOpen();
    }
  },

  methods: {
    /** @public */
    updateAll(value) {
      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value));
      this.emitOpen();
    },

    getKeys(items, keys = []) {
      for (let i = 0; i < items.length; i++) {
        const key = getObjectValueByPath(items[i], this.itemKey);
        keys.push(key);
        const children = getObjectValueByPath(items[i], this.itemChildren);

        if (children) {
          keys.push(...this.getKeys(children));
        }
      }

      return keys;
    },

    buildTree(items, parent = null) {
      var _a;

      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const key = getObjectValueByPath(item, this.itemKey);
        const children = (_a = getObjectValueByPath(item, this.itemChildren)) !== null && _a !== void 0 ? _a : [];
        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {
          isSelected: false,
          isIndeterminate: false,
          isActive: false,
          isOpen: false,
          vnode: null
        };
        const node = {
          vnode: oldNode.vnode,
          parent,
          children: children.map(c => getObjectValueByPath(c, this.itemKey)),
          item
        };
        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state

        if (this.selectionType !== 'independent' && parent !== null && !this.nodes.hasOwnProperty(key) && this.nodes.hasOwnProperty(parent)) {
          node.isSelected = this.nodes[parent].isSelected;
        } else {
          node.isSelected = oldNode.isSelected;
          node.isIndeterminate = oldNode.isIndeterminate;
        }

        node.isActive = oldNode.isActive;
        node.isOpen = oldNode.isOpen;
        this.nodes[key] = node;

        if (children.length && this.selectionType !== 'independent') {
          const {
            isSelected,
            isIndeterminate
          } = this.calculateState(key, this.nodes);
          node.isSelected = isSelected;
          node.isIndeterminate = isIndeterminate;
        } // Don't forget to rebuild cache


        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key);
        if (this.nodes[key].isActive) this.activeCache.add(key);
        if (this.nodes[key].isOpen) this.openCache.add(key);
        this.updateVnodeState(key);
      }
    },

    calculateState(node, state) {
      const children = state[node].children;
      const counts = children.reduce((counts, child) => {
        counts[0] += +Boolean(state[child].isSelected);
        counts[1] += +Boolean(state[child].isIndeterminate);
        return counts;
      }, [0, 0]);
      const isSelected = !!children.length && counts[0] === children.length;
      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0);
      return {
        isSelected,
        isIndeterminate
      };
    },

    emitOpen() {
      this.emitNodeCache('update:open', this.openCache);
    },

    emitSelected() {
      this.emitNodeCache('input', this.selectedCache);
    },

    emitActive() {
      this.emitNodeCache('update:active', this.activeCache);
    },

    emitNodeCache(event, cache) {
      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache]);
    },

    handleNodeCacheWatcher(value, cache, updateFn, emitFn) {
      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value;
      const old = [...cache];
      if (deepEqual(old, value)) return;
      old.forEach(key => updateFn(key, false));
      value.forEach(key => updateFn(key, true));
      emitFn();
    },

    getDescendants(key, descendants = []) {
      const children = this.nodes[key].children;
      descendants.push(...children);

      for (let i = 0; i < children.length; i++) {
        descendants = this.getDescendants(children[i], descendants);
      }

      return descendants;
    },

    getParents(key) {
      let parent = this.nodes[key].parent;
      const parents = [];

      while (parent !== null) {
        parents.push(parent);
        parent = this.nodes[parent].parent;
      }

      return parents;
    },

    register(node) {
      const key = getObjectValueByPath(node.item, this.itemKey);
      this.nodes[key].vnode = node;
      this.updateVnodeState(key);
    },

    unregister(node) {
      const key = getObjectValueByPath(node.item, this.itemKey);
      if (this.nodes[key]) this.nodes[key].vnode = null;
    },

    isParent(key) {
      return this.nodes[key].children && this.nodes[key].children.length;
    },

    updateActive(key, isActive) {
      if (!this.nodes.hasOwnProperty(key)) return;

      if (!this.multipleActive) {
        this.activeCache.forEach(active => {
          this.nodes[active].isActive = false;
          this.updateVnodeState(active);
          this.activeCache.delete(active);
        });
      }

      const node = this.nodes[key];
      if (!node) return;
      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);
      node.isActive = isActive;
      this.updateVnodeState(key);
    },

    updateSelected(key, isSelected, isForced = false) {
      if (!this.nodes.hasOwnProperty(key)) return;
      const changed = new Map();

      if (this.selectionType !== 'independent') {
        for (const descendant of this.getDescendants(key)) {
          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {
            this.nodes[descendant].isSelected = isSelected;
            this.nodes[descendant].isIndeterminate = false;
            changed.set(descendant, isSelected);
          }
        }

        const calculated = this.calculateState(key, this.nodes);
        this.nodes[key].isSelected = isSelected;
        this.nodes[key].isIndeterminate = calculated.isIndeterminate;
        changed.set(key, isSelected);

        for (const parent of this.getParents(key)) {
          const calculated = this.calculateState(parent, this.nodes);
          this.nodes[parent].isSelected = calculated.isSelected;
          this.nodes[parent].isIndeterminate = calculated.isIndeterminate;
          changed.set(parent, calculated.isSelected);
        }
      } else {
        this.nodes[key].isSelected = isSelected;
        this.nodes[key].isIndeterminate = false;
        changed.set(key, isSelected);
      }

      for (const [key, value] of changed.entries()) {
        this.updateVnodeState(key);
        if (this.selectionType === 'leaf' && this.isParent(key)) continue;
        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key);
      }
    },

    updateOpen(key, isOpen) {
      if (!this.nodes.hasOwnProperty(key)) return;
      const node = this.nodes[key];
      const children = getObjectValueByPath(node.item, this.itemChildren);

      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {
        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen));
      } else if (children && children.length) {
        node.isOpen = isOpen;
        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);
        this.updateVnodeState(key);
      }
    },

    updateVnodeState(key) {
      const node = this.nodes[key];

      if (node && node.vnode) {
        node.vnode.isSelected = node.isSelected;
        node.vnode.isIndeterminate = node.isIndeterminate;
        node.vnode.isActive = node.isActive;
        node.vnode.isOpen = node.isOpen;
      }
    },

    isExcluded(key) {
      return !!this.search && this.excludedItems.has(key);
    }

  },

  render(h) {
    const children = this.items.length ? this.items.filter(item => {
      return !this.isExcluded(getObjectValueByPath(item, this.itemKey));
    }).map(item => {
      const genChild = VTreeviewNode$1.options.methods.genChild.bind(this);
      return genChild(item, this.disabled || getObjectValueByPath(item, this.itemDisabled));
    })
    /* istanbul ignore next */
    : this.$slots.default; // TODO: remove type annotation with TS 3.2

    return h('div', {
      staticClass: 'v-treeview',
      class: {
        'v-treeview--hoverable': this.hoverable,
        'v-treeview--dense': this.dense,
        ...this.themeClasses
      }
    }, children);
  }

});

var render$W = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_0$5,{attrs:{"id":"app"}},[_c('title',[_vm._v(_vm._s(_vm.$t("indexTitle")))]),_c('router-view')],1)};
var staticRenderFns$W = [];

/* unplugin-vue-components disabled */var App_vue_vue_type_style_index_0_lang = '';

function normalizeComponent (
    scriptExports,
    render,
    staticRenderFns,
    functionalTemplate,
    injectStyles,
    scopeId,
    moduleIdentifier, /* server only */
    shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
      ? scriptExports.options
      : scriptExports;

  // render functions
  if (render) {
    options.render = render;
    options.staticRenderFns = staticRenderFns;
    options._compiled = true;
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true;
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId;
  }

  var hook;
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
          context || // cached call
          (this.$vnode && this.$vnode.ssrContext) || // stateful
          (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context);
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook;
  } else if (injectStyles) {
    hook = shadowMode
        ? function () {
          injectStyles.call(
              this,
              (options.functional ? this.parent : this).$root.$options.shadowRoot
          );
        }
        : injectStyles;
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook;
      // register for functional component in vue file
      var originalRender = options.render;
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context);
        return originalRender(h, context)
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing
          ? [].concat(existing, hook)
          : [hook];
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

/* unplugin-vue-components disabled *///

const __vue2_script$W = {
  name: 'App',
  mounted() {
    const html = document.documentElement;
    html.setAttribute('lang', this.$i18n.locale);
    setTimeout(() => {
      this.verifyLocale();
    }, 1);
    // Version based localStorage Cleanup
    if (!localStorage.getItem('interlock.version')) {
      console.error("No Interlock version found, clearing old localStorage Variables.");
      localStorage.clear();
    }
    else {
      this.localStorageSemverCleanup();
    }
  },
  methods: {
    async verifyLocale() {
      let setLang = localStorage.getItem('lang.locale');
      if (setLang == undefined || setLang == null) {
        let browserlang = navigator.language.toLowerCase();
        let locale_set = false;
        supported_locales.forEach(lang => {
          console.log(lang);
          if (browserlang.includes(lang.value)) {
            this.$i18n.locale = lang.value;
            locale_set = true;
          }
        });
        if (!locale_set)
          this.$i18n.locale = "en";
        localStorage.setItem('lang.locale', this.$i18n.locale);
      }
      else this.$i18n.locale = setLang;
    },
    localStorageSemverCleanup() {
      const i7kVersion = semver.clean(localStorage.getItem('interlock.version'));
      const versions = {
        "0.94.1": [
          "auth.access_token_lifetime",
          "auth.refresh_token_lifetime",
          "user.access_token_lifetime",
          "user.refresh_token_lifetime",
        ]
      };
      for (const v in versions) {
        if (!i7kVersion || semver.gte(i7kVersion, semver.clean(v)))
          versions[v].forEach(deprecated_key => {
            localStorage.removeItem(deprecated_key);
          });
      }
    }
  }
};
const __cssModules$W = {};
var __component__$W = /*#__PURE__*/normalizeComponent(
  __vue2_script$W,
  render$W,
  staticRenderFns$W,
  false,
  __vue2_injectStyles$W,
  null,
  null,
  null
);

function __vue2_injectStyles$W (context) {
  for(let o in __cssModules$W){
    this[o] = __cssModules$W[o];
  }
}

var App = /*#__PURE__*/(function () { return __component__$W.exports })();

var materialdesignicons = '';

var index$5 = '';

var index$4 = '';

var index$3 = '';

var index$2 = '';

var index$1 = '';

var _100$1 = '';

var _300$1 = '';

var _400$1 = '';

var _500$1 = '';

var _700$1 = '';

var _900$1 = '';

var _100Italic$1 = '';

var _300Italic$1 = '';

var _400Italic$1 = '';

var _500Italic$1 = '';

var _700Italic$1 = '';

var _900Italic$1 = '';

var index = '';

var _100 = '';

var _300 = '';

var _400 = '';

var _500 = '';

var _700 = '';

var _900 = '';

var _100Italic = '';

var _300Italic = '';

var _400Italic = '';

var _500Italic = '';

var _700Italic = '';

var _900Italic = '';

// Contributors:
// Martin Vilche & Dylan Blanqué
// ! IMPORTANT: Remember to set the following options in your theme.options
// customProperties: true
// variations: false

function hslToHex(h, s, l) {
	l /= 100;
	const a = s * Math.min(l, 1 - l) / 100;
	const f = n => {
		const k = (n + h / 30) % 12;
		const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
		return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
	};
	let r = `#${f(0)}${f(8)}${f(4)}`;
	if (r == "#NaNNaNNaN")
		throw new Error(`Color parse error (Values: ${h}, ${s}, ${l}`);
	return r;
}

const default_theme_colors = {
	light: {
		"white-d": "#FFFFFF",
		"black-d": "#000000",
		"background": hslToHex(0, 0, 94.5),
		"text-background": hslToHex(0, 0, 100),
		"text-inverted": hslToHex(0, 0, 0)
	},
	dark: {
		"white-d": "#000000",
		"black-d": "#FFFFFF",
		"background": hslToHex(210, 7.4, 21.2),
		"text-background": hslToHex(0, 0, 0),
		"text-inverted": hslToHex(0, 0, 100)
	},
};

const vueColorList = {
	// color_name: [h, s, v]
	default_themes: {
		primary: [211, 54.5, 56.1],
		accent: [29.5, 100, 76.9],
		secondary: [210, 7.4, 21.2],
		valid: [150, 86.9, 41.8],
		error: [0, 85.9, 45.5],
		gray: [0, 0, 50]
	},
	custom_themes: {
		// raven: {
		// 	colors:{
		// 		primary: [0, 54.5, 56.1],
		// 		accent: [120, 100, 76.9],
		// 	}
		// }
	}
};

function generateDefaultColorVariants(color_key, hsv_array, colors, parser_options) {
	const default_hue = hsv_array[0];
	const default_sat = hsv_array[1];
	const default_lig = hsv_array[2];
	let default_color_light = hslToHex(default_hue, default_sat, default_lig);
	let default_color_dark = hslToHex(default_hue, default_sat, 100 - default_lig);
	// light
	colors.light[color_key] = default_color_light;
	colors.light[`${color_key}-s`] = default_color_light;
	// dark
	colors.dark[color_key] = default_color_dark;
	colors.dark[`${color_key}-s`] = default_color_light;
	// Step saturation and lightness
	for (let lig = parser_options.lig_steps; lig < parser_options.limit; lig += parser_options.lig_steps) {
		let cur_clr_default_sat = hslToHex(default_hue, default_sat, lig);
		// Varying Lightness, default saturation, static
		colors.light[`${color_key}-${lig}-s`] = cur_clr_default_sat;
		colors.dark[`${color_key}-${lig}-s`] = cur_clr_default_sat;
		// Varying Lightness, default Saturation, dynamic
		colors.light[`${color_key}-${lig}`] = cur_clr_default_sat;
		colors.dark[`${color_key}-${lig}`] = hslToHex(default_hue, default_sat, 100 - lig);
		if (parser_options.add_saturation_variants && default_sat != 0) {
			for (let sat = parser_options.sat_steps; sat <= parser_options.limit; sat += parser_options.sat_steps) {
				let cur_clr_light = hslToHex(default_hue, sat, lig);
				let cur_clr_dark = hslToHex(default_hue, sat, lig);
				// Static Lightness (Ignores Theme)
				colors.light[`${color_key}-${lig}-${sat}-s`] = cur_clr_light;
				colors.dark[`${color_key}-${lig}-${sat}-s`] = cur_clr_light;
				// Dynamic Lightness (Theme Dependant)
				colors.light[`${color_key}-${lig}-${sat}`] = cur_clr_light;
				colors.dark[`${color_key}-${lig}-${sat}`] = cur_clr_dark;
			}
		}
	}
	return colors
}

function generateCustomColorVariants(color_key, hsv_array, colors, parser_options, theme_name) {
	const default_hue = hsv_array[0];
	const default_sat = hsv_array[1];
	const default_lig = hsv_array[2];
	let default_color = hslToHex(default_hue, default_sat, default_lig);
	colors[theme_name][color_key] = default_color;
	// Step saturation and lightness
	for (let lig = parser_options.lig_steps; lig < parser_options.limit; lig += parser_options.lig_steps) {
		let cur_clr_default_sat = hslToHex(default_hue, default_sat, lig);
		// Varying Lightness, default saturation, static
		colors[theme_name][`${color_key}-${lig}-s`] = cur_clr_default_sat;
		// Varying Lightness, default Saturation, dynamic
		colors[theme_name][`${color_key}-${lig}`] = cur_clr_default_sat;
		if (parser_options.add_saturation_variants) {
			for (let sat = parser_options.sat_steps; sat <= parser_options.limit; sat += parser_options.sat_steps) {
				let cur_clr = hslToHex(default_hue, sat, lig);
				// Static Lightness (Ignores Theme)
				colors[theme_name][`${color_key}-${lig}-${sat}-s`] = cur_clr;
				// Dynamic Lightness (Theme Dependant)
				colors[theme_name][`${color_key}-${lig}-${sat}`] = cur_clr;
			}
		}
	}
	return colors
}

// To get a Vue Color as a CSS Variable
// var(--v-variablename-base)
function parseVueColors() {
	let colors = {
		...default_theme_colors
	};
	let parser_options = {
		limit: 100,
		lig_steps: 5,
		// If enabled, adds saturation variants for each color lightness.
		add_saturation_variants: true, // Be aware, this VERY heavily multiplies color compute time.
		sat_steps: 25
	};

	for (const color_key in vueColorList.default_themes) {
		colors = generateDefaultColorVariants(
			color_key,
			vueColorList.default_themes[color_key],
			colors,
			parser_options
		);
	}

	for (const theme in vueColorList.custom_themes) {
		colors[theme] = {};
		const theme_colors = vueColorList.custom_themes[theme].colors;
		for (const color_key in theme_colors) {
			colors = generateCustomColorVariants(
				color_key,
				theme_colors[color_key],
				colors,
				parser_options,
				theme
			);
		}
	}
	// ! Log Colors
	// console.log("Vue Default Theme Colors Generated")
	// console.log(colors)
	// console.log(Object.keys(colors.dark).length + Object.keys(colors.light).length)
	return colors
}

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const colors = parseVueColors();

Vue$1.use(Vuetify, {
    directives: {
        Ripple: Ripple$1,
    },
});

var vuetify = new Vuetify({
    icons: {
        iconfont: 'mdi', // default - only for display purposes
    },
    theme: {
        options: {
            customProperties: true, // Enable Color Variables in CSS
            variations: false // Handled manually
        },
        dark: false,
        themes: {
            light: colors.light,
            dark: colors.dark
        },
    },
});

/*!
  * vue-router v3.6.5
  * (c) 2022 Evan You
  * @license MIT
  */

function extend$1 (a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode$1 = function (str) { return encodeURIComponent(str)
    .replace(encodeReserveRE, encodeReserveReplacer)
    .replace(commaRE, ','); };

function decode (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
  }
  return str
}

function resolveQuery (
  query,
  extraQuery,
  _parseQuery
) {
  if ( extraQuery === void 0 ) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    var value = extraQuery[key];
    parsedQuery[key] = Array.isArray(value)
      ? value.map(castQueryParamValue)
      : castQueryParamValue(value);
  }
  return parsedQuery
}

var castQueryParamValue = function (value) { return (value == null || typeof value === 'object' ? value : String(value)); };

function parseQuery (query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res
}

function stringifyQuery (obj) {
  var res = obj
    ? Object.keys(obj)
      .map(function (key) {
        var val = obj[key];

        if (val === undefined) {
          return ''
        }

        if (val === null) {
          return encode$1(key)
        }

        if (Array.isArray(val)) {
          var result = [];
          val.forEach(function (val2) {
            if (val2 === undefined) {
              return
            }
            if (val2 === null) {
              result.push(encode$1(key));
            } else {
              result.push(encode$1(key) + '=' + encode$1(val2));
            }
          });
          return result.join('&')
        }

        return encode$1(key) + '=' + encode$1(val)
      })
      .filter(function (x) { return x.length > 0; })
      .join('&')
    : null;
  return res ? ("?" + res) : ''
}

/*  */

var trailingSlashRE = /\/?$/;

function createRoute (
  record,
  location,
  redirectedFrom,
  router
) {
  var stringifyQuery = router && router.options.stringifyQuery;

  var query = location.query || {};
  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || (record && record.name),
    meta: (record && record.meta) || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
  }
  return Object.freeze(route)
}

function clone (value) {
  if (Array.isArray(value)) {
    return value.map(clone)
  } else if (value && typeof value === 'object') {
    var res = {};
    for (var key in value) {
      res[key] = clone(value[key]);
    }
    return res
  } else {
    return value
  }
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch (record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res
}

function getFullPath (
  ref,
  _stringifyQuery
) {
  var path = ref.path;
  var query = ref.query; if ( query === void 0 ) query = {};
  var hash = ref.hash; if ( hash === void 0 ) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash
}

function isSameRoute (a, b, onlyPath) {
  if (b === START) {
    return a === b
  } else if (!b) {
    return false
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && (onlyPath ||
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query))
  } else if (a.name && b.name) {
    return (
      a.name === b.name &&
      (onlyPath || (
        a.hash === b.hash &&
      isObjectEqual(a.query, b.query) &&
      isObjectEqual(a.params, b.params))
      )
    )
  } else {
    return false
  }
}

function isObjectEqual (a, b) {
  if ( a === void 0 ) a = {};
  if ( b === void 0 ) b = {};

  // handle null value #1566
  if (!a || !b) { return a === b }
  var aKeys = Object.keys(a).sort();
  var bKeys = Object.keys(b).sort();
  if (aKeys.length !== bKeys.length) {
    return false
  }
  return aKeys.every(function (key, i) {
    var aVal = a[key];
    var bKey = bKeys[i];
    if (bKey !== key) { return false }
    var bVal = b[key];
    // query values can be null and undefined
    if (aVal == null || bVal == null) { return aVal === bVal }
    // check nested equality
    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal)
    }
    return String(aVal) === String(bVal)
  })
}

function isIncludedRoute (current, target) {
  return (
    current.path.replace(trailingSlashRE, '/').indexOf(
      target.path.replace(trailingSlashRE, '/')
    ) === 0 &&
    (!target.hash || current.hash === target.hash) &&
    queryIncludes(current.query, target.query)
  )
}

function queryIncludes (current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false
    }
  }
  return true
}

function handleRouteEntered (route) {
  for (var i = 0; i < route.matched.length; i++) {
    var record = route.matched[i];
    for (var name in record.instances) {
      var instance = record.instances[name];
      var cbs = record.enteredCbs[name];
      if (!instance || !cbs) { continue }
      delete record.enteredCbs[name];
      for (var i$1 = 0; i$1 < cbs.length; i$1++) {
        if (!instance._isBeingDestroyed) { cbs[i$1](instance); }
      }
    }
  }
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render (_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    // used by devtools to display a router-view badge
    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode ? parent.$vnode.data : {};
      if (vnodeData.routerView) {
        depth++;
      }
      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      var cachedData = cache[name];
      var cachedComponent = cachedData && cachedData.component;
      if (cachedComponent) {
        // #2301
        // pass props
        if (cachedData.configProps) {
          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);
        }
        return h(cachedComponent, data, children)
      } else {
        // render previous empty view
        return h()
      }
    }

    var matched = route.matched[depth];
    var component = matched && matched.components[name];

    // render empty node if no matched route or no config component
    if (!matched || !component) {
      cache[name] = null;
      return h()
    }

    // cache component
    cache[name] = { component: component };

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (
        (val && current !== vm) ||
        (!val && current === vm)
      ) {
        matched.instances[name] = val;
      }
    }

    // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // register instance in init hook
    // in case kept-alive component be actived when routes changed
    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive &&
        vnode.componentInstance &&
        vnode.componentInstance !== matched.instances[name]
      ) {
        matched.instances[name] = vnode.componentInstance;
      }

      // if the route transition has already been confirmed then we weren't
      // able to call the cbs during confirmation as the component was not
      // registered yet, so we call it here.
      handleRouteEntered(route);
    };

    var configProps = matched.props && matched.props[name];
    // save route and configProps in cache
    if (configProps) {
      extend$1(cache[name], {
        route: route,
        configProps: configProps
      });
      fillPropsinData(component, data, route, configProps);
    }

    return h(component, data, children)
  }
};

function fillPropsinData (component, data, route, configProps) {
  // resolve props
  var propsToPass = data.props = resolveProps(route, configProps);
  if (propsToPass) {
    // clone to prevent mutation
    propsToPass = data.props = extend$1({}, propsToPass);
    // pass non-declared props as attrs
    var attrs = data.attrs = data.attrs || {};
    for (var key in propsToPass) {
      if (!component.props || !(key in component.props)) {
        attrs[key] = propsToPass[key];
        delete propsToPass[key];
      }
    }
  }
}

function resolveProps (route, config) {
  switch (typeof config) {
    case 'undefined':
      return
    case 'object':
      return config
    case 'function':
      return config(route)
    case 'boolean':
      return config ? route.params : undefined
  }
}

/*  */

function resolvePath (
  relative,
  base,
  append
) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/')
}

function parsePath (path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  }
}

function cleanPath (path) {
  return path.replace(/\/(?:\s*\/)+/g, '/')
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options), options)
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys;
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options && options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

/*  */

// $flow-disable-line
var regexpCompileCache = Object.create(null);

function fillParams (
  path,
  params,
  routeMsg
) {
  params = params || {};
  try {
    var filler =
      regexpCompileCache[path] ||
      (regexpCompileCache[path] = pathToRegexp_1.compile(path));

    // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}
    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string
    if (typeof params.pathMatch === 'string') { params[0] = params.pathMatch; }

    return filler(params, { pretty: true })
  } catch (e) {
    return ''
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}

/*  */

function normalizeLocation (
  raw,
  current,
  append,
  router
) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next._normalized) {
    return next
  } else if (next.name) {
    next = extend$1({}, raw);
    var params = next.params;
    if (params && typeof params === 'object') {
      next.params = extend$1({}, params);
    }
    return next
  }

  // relative params
  if (!next.path && next.params && current) {
    next = extend$1({}, next);
    next._normalized = true;
    var params$1 = extend$1(extend$1({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params$1;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params$1, ("path " + (current.path)));
    } else ;
    return next
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = (current && current.path) || '/';
  var path = parsedPath.path
    ? resolvePath(parsedPath.path, basePath, append || next.append)
    : basePath;

  var query = resolveQuery(
    parsedPath.query,
    next.query,
    router && router.options.parseQuery
  );

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  }
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var noop = function () {};

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    custom: Boolean,
    exact: Boolean,
    exactPath: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    ariaCurrentValue: {
      type: String,
      default: 'page'
    },
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render (h) {
    var this$1$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(
      this.to,
      current,
      this.append
    );
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback =
      globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback =
      globalExactActiveClass == null
        ? 'router-link-exact-active'
        : globalExactActiveClass;
    var activeClass =
      this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass =
      this.exactActiveClass == null
        ? exactActiveClassFallback
        : this.exactActiveClass;

    var compareTarget = route.redirectedFrom
      ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router)
      : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget, this.exactPath);
    classes[activeClass] = this.exact || this.exactPath
      ? classes[exactActiveClass]
      : isIncludedRoute(current, compareTarget);

    var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1$1.replace) {
          router.replace(location, noop);
        } else {
          router.push(location, noop);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = { class: classes };

    var scopedSlot =
      !this.$scopedSlots.$hasNormal &&
      this.$scopedSlots.default &&
      this.$scopedSlots.default({
        href: href,
        route: route,
        navigate: handler,
        isActive: classes[activeClass],
        isExactActive: classes[exactActiveClass]
      });

    if (scopedSlot) {
      if (scopedSlot.length === 1) {
        return scopedSlot[0]
      } else if (scopedSlot.length > 1 || !scopedSlot.length) {
        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot)
      }
    }

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href, 'aria-current': ariaCurrentValue };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = (a.data = extend$1({}, a.data));
        aData.on = aData.on || {};
        // transform existing events in both objects into arrays so we can push later
        for (var event in aData.on) {
          var handler$1 = aData.on[event];
          if (event in on) {
            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
          }
        }
        // append new listeners for router-link
        for (var event$1 in on) {
          if (event$1 in aData.on) {
            // on[event] is always a function
            aData.on[event$1].push(on[event$1]);
          } else {
            aData.on[event$1] = handler;
          }
        }

        var aAttrs = (a.data.attrs = extend$1({}, a.data.attrs));
        aAttrs.href = href;
        aAttrs['aria-current'] = ariaCurrentValue;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default)
  }
};

function guardEvent (e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) { return }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) { return }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) { return }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true
}

function findAnchor (children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child
      }
    }
  }
}

var _Vue;

function install (Vue) {
  if (install.installed && _Vue === Vue) { return }
  install.installed = true;

  _Vue = Vue;

  var isDef = function (v) { return v !== undefined; };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate () {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed () {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get () { return this._routerRoot._router }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get () { return this._routerRoot._route }
  });

  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function createRouteMap (
  routes,
  oldPathList,
  oldPathMap,
  oldNameMap,
  parentRoute
) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  // $flow-disable-line
  var pathMap = oldPathMap || Object.create(null);
  // $flow-disable-line
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  }
}

function addRouteRecord (
  pathList,
  pathMap,
  nameMap,
  route,
  parent,
  matchAs
) {
  var path = route.path;
  var name = route.name;

  var pathToRegexpOptions =
    route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    alias: route.alias
      ? typeof route.alias === 'string'
        ? [route.alias]
        : route.alias
      : [],
    instances: {},
    enteredCbs: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props:
      route.props == null
        ? {}
        : route.components
          ? route.props
          : { default: route.props }
  };

  if (route.children) {
    route.children.forEach(function (child) {
      var childMatchAs = matchAs
        ? cleanPath((matchAs + "/" + (child.path)))
        : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];
    for (var i = 0; i < aliases.length; ++i) {
      var alias = aliases[i];

      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(
        pathList,
        pathMap,
        nameMap,
        aliasRoute,
        parent,
        record.path || '/' // matchAs
      );
    }
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    }
  }
}

function compileRouteRegex (
  path,
  pathToRegexpOptions
) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
  return regex
}

function normalizePath (
  path,
  parent,
  strict
) {
  if (!strict) { path = path.replace(/\/$/, ''); }
  if (path[0] === '/') { return path }
  if (parent == null) { return path }
  return cleanPath(((parent.path) + "/" + path))
}

/*  */



function createMatcher (
  routes,
  router
) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes (routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function addRoute (parentOrRoute, route) {
    var parent = (typeof parentOrRoute !== 'object') ? nameMap[parentOrRoute] : undefined;
    // $flow-disable-line
    createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent);

    // add aliases of parent
    if (parent && parent.alias.length) {
      createRouteMap(
        // $flow-disable-line route is defined if parent is
        parent.alias.map(function (alias) { return ({ path: alias, children: [route] }); }),
        pathList,
        pathMap,
        nameMap,
        parent
      );
    }
  }

  function getRoutes () {
    return pathList.map(function (path) { return pathMap[path]; })
  }

  function match (
    raw,
    currentRoute,
    redirectedFrom
  ) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (!record) { return _createRoute(null, location) }
      var paramNames = record.regex.keys
        .filter(function (key) { return !key.optional; })
        .map(function (key) { return key.name; });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      location.path = fillParams(record.path, location.params);
      return _createRoute(record, location, redirectedFrom)
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom)
        }
      }
    }
    // no match
    return _createRoute(null, location)
  }

  function redirect (
    record,
    location
  ) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function'
      ? originalRedirect(createRoute(record, location, null, router))
      : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || typeof redirect !== 'object') {
      return _createRoute(null, location)
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      nameMap[name];
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location)
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params);
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location)
    } else {
      return _createRoute(null, location)
    }
  }

  function alias (
    record,
    location,
    matchAs
  ) {
    var aliasedPath = fillParams(matchAs, location.params);
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location)
    }
    return _createRoute(null, location)
  }

  function _createRoute (
    record,
    location,
    redirectedFrom
  ) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location)
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs)
    }
    return createRoute(record, location, redirectedFrom, router)
  }

  return {
    match: match,
    addRoute: addRoute,
    getRoutes: getRoutes,
    addRoutes: addRoutes
  }
}

function matchRoute (
  regex,
  path,
  params
) {
  var m = path.match(regex);

  if (!m) {
    return false
  } else if (!params) {
    return true
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];
    }
  }

  return true
}

function resolveRecordPath (path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true)
}

/*  */

// use User Timing api (if present) for more accurate key precision
var Time =
  inBrowser && window.performance && window.performance.now
    ? window.performance
    : Date;

function genStateKey () {
  return Time.now().toFixed(3)
}

var _key = genStateKey();

function getStateKey () {
  return _key
}

function setStateKey (key) {
  return (_key = key)
}

/*  */

var positionStore = Object.create(null);

function setupScroll () {
  // Prevent browser scroll behavior on History popstate
  if ('scrollRestoration' in window.history) {
    window.history.scrollRestoration = 'manual';
  }
  // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
  // window.location.protocol + '//' + window.location.host
  // location.host contains the port and location.hostname doesn't
  var protocolAndPath = window.location.protocol + '//' + window.location.host;
  var absolutePath = window.location.href.replace(protocolAndPath, '');
  // preserve existing history state as it could be overriden by the user
  var stateCopy = extend$1({}, window.history.state);
  stateCopy.key = getStateKey();
  window.history.replaceState(stateCopy, '', absolutePath);
  window.addEventListener('popstate', handlePopState);
  return function () {
    window.removeEventListener('popstate', handlePopState);
  }
}

function handleScroll (
  router,
  to,
  from,
  isPop
) {
  if (!router.app) {
    return
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return
  }

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(
      router,
      to,
      from,
      isPop ? position : null
    );

    if (!shouldScroll) {
      return
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll
        .then(function (shouldScroll) {
          scrollToPosition((shouldScroll), position);
        })
        .catch(function (err) {
        });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition () {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function handlePopState (e) {
  saveScrollPosition();
  if (e.state && e.state.key) {
    setStateKey(e.state.key);
  }
}

function getScrollPosition () {
  var key = getStateKey();
  if (key) {
    return positionStore[key]
  }
}

function getElementPosition (el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  }
}

function isValidPosition (obj) {
  return isNumber$1(obj.x) || isNumber$1(obj.y)
}

function normalizePosition (obj) {
  return {
    x: isNumber$1(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber$1(obj.y) ? obj.y : window.pageYOffset
  }
}

function normalizeOffset (obj) {
  return {
    x: isNumber$1(obj.x) ? obj.x : 0,
    y: isNumber$1(obj.y) ? obj.y : 0
  }
}

function isNumber$1 (v) {
  return typeof v === 'number'
}

var hashStartsWithNumberRE = /^#\d/;

function scrollToPosition (shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';
  if (isObject && typeof shouldScroll.selector === 'string') {
    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
      ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
      : document.querySelector(shouldScroll.selector);

    if (el) {
      var offset =
        shouldScroll.offset && typeof shouldScroll.offset === 'object'
          ? shouldScroll.offset
          : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    // $flow-disable-line
    if ('scrollBehavior' in document.documentElement.style) {
      window.scrollTo({
        left: position.x,
        top: position.y,
        // $flow-disable-line
        behavior: shouldScroll.behavior
      });
    } else {
      window.scrollTo(position.x, position.y);
    }
  }
}

/*  */

var supportsPushState =
  inBrowser &&
  (function () {
    var ua = window.navigator.userAgent;

    if (
      (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
      ua.indexOf('Mobile Safari') !== -1 &&
      ua.indexOf('Chrome') === -1 &&
      ua.indexOf('Windows Phone') === -1
    ) {
      return false
    }

    return window.history && typeof window.history.pushState === 'function'
  })();

function pushState (url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      // preserve existing history state as it could be overriden by the user
      var stateCopy = extend$1({}, history.state);
      stateCopy.key = getStateKey();
      history.replaceState(stateCopy, '', url);
    } else {
      history.pushState({ key: setStateKey(genStateKey()) }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState (url) {
  pushState(url, true);
}

// When changing thing, also edit router.d.ts
var NavigationFailureType = {
  redirected: 2,
  aborted: 4,
  cancelled: 8,
  duplicated: 16
};

function createNavigationRedirectedError (from, to) {
  return createRouterError(
    from,
    to,
    NavigationFailureType.redirected,
    ("Redirected when going from \"" + (from.fullPath) + "\" to \"" + (stringifyRoute(
      to
    )) + "\" via a navigation guard.")
  )
}

function createNavigationDuplicatedError (from, to) {
  var error = createRouterError(
    from,
    to,
    NavigationFailureType.duplicated,
    ("Avoided redundant navigation to current location: \"" + (from.fullPath) + "\".")
  );
  // backwards compatible with the first introduction of Errors
  error.name = 'NavigationDuplicated';
  return error
}

function createNavigationCancelledError (from, to) {
  return createRouterError(
    from,
    to,
    NavigationFailureType.cancelled,
    ("Navigation cancelled from \"" + (from.fullPath) + "\" to \"" + (to.fullPath) + "\" with a new navigation.")
  )
}

function createNavigationAbortedError (from, to) {
  return createRouterError(
    from,
    to,
    NavigationFailureType.aborted,
    ("Navigation aborted from \"" + (from.fullPath) + "\" to \"" + (to.fullPath) + "\" via a navigation guard.")
  )
}

function createRouterError (from, to, type, message) {
  var error = new Error(message);
  error._isRouter = true;
  error.from = from;
  error.to = to;
  error.type = type;

  return error
}

var propertiesToLog = ['params', 'query', 'hash'];

function stringifyRoute (to) {
  if (typeof to === 'string') { return to }
  if ('path' in to) { return to.path }
  var location = {};
  propertiesToLog.forEach(function (key) {
    if (key in to) { location[key] = to[key]; }
  });
  return JSON.stringify(location, null, 2)
}

function isError (err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1
}

function isNavigationFailure (err, errorType) {
  return (
    isError(err) &&
    err._isRouter &&
    (errorType == null || err.type === errorType)
  )
}

/*  */

function runQueue (queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

function resolveAsyncComponents (matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function'
            ? resolvedDef
            : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
          if (!error) {
            error = isError(reason)
              ? reason
              : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) { next(); }
  }
}

function flatMapComponents (
  matched,
  fn
) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) { return fn(
      m.components[key],
      m.instances[key],
      m, key
    ); })
  }))
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

var hasSymbol =
  typeof Symbol === 'function' &&
  typeof Symbol.toStringTag === 'symbol';

function isESModule (obj) {
  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once (fn) {
  var called = false;
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (called) { return }
    called = true;
    return fn.apply(this, args)
  }
}

/*  */

var History = function History (router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
  this.listeners = [];
};

History.prototype.listen = function listen (cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady (cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError (errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo (
  location,
  onComplete,
  onAbort
) {
    var this$1$1 = this;

  var route;
  // catch redirect option https://github.com/vuejs/vue-router/issues/3201
  try {
    route = this.router.match(location, this.current);
  } catch (e) {
    this.errorCbs.forEach(function (cb) {
      cb(e);
    });
    // Exception should still be thrown
    throw e
  }
  var prev = this.current;
  this.confirmTransition(
    route,
    function () {
      this$1$1.updateRoute(route);
      onComplete && onComplete(route);
      this$1$1.ensureURL();
      this$1$1.router.afterHooks.forEach(function (hook) {
        hook && hook(route, prev);
      });

      // fire ready cbs once
      if (!this$1$1.ready) {
        this$1$1.ready = true;
        this$1$1.readyCbs.forEach(function (cb) {
          cb(route);
        });
      }
    },
    function (err) {
      if (onAbort) {
        onAbort(err);
      }
      if (err && !this$1$1.ready) {
        // Initial redirection should not mark the history as ready yet
        // because it's triggered by the redirection instead
        // https://github.com/vuejs/vue-router/issues/3225
        // https://github.com/vuejs/vue-router/issues/3331
        if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {
          this$1$1.ready = true;
          this$1$1.readyErrorCbs.forEach(function (cb) {
            cb(err);
          });
        }
      }
    }
  );
};

History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
    var this$1$1 = this;

  var current = this.current;
  this.pending = route;
  var abort = function (err) {
    // changed after adding errors with
    // https://github.com/vuejs/vue-router/pull/3047 before that change,
    // redirect and aborted navigation would produce an err == null
    if (!isNavigationFailure(err) && isError(err)) {
      if (this$1$1.errorCbs.length) {
        this$1$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  var lastRouteIndex = route.matched.length - 1;
  var lastCurrentIndex = current.matched.length - 1;
  if (
    isSameRoute(route, current) &&
    // in the case the route map has been dynamically appended to
    lastRouteIndex === lastCurrentIndex &&
    route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]
  ) {
    this.ensureURL();
    if (route.hash) {
      handleScroll(this.router, current, route, false);
    }
    return abort(createNavigationDuplicatedError(current, route))
  }

  var ref = resolveQueue(
    this.current.matched,
    route.matched
  );
    var updated = ref.updated;
    var deactivated = ref.deactivated;
    var activated = ref.activated;

  var queue = [].concat(
    // in-component leave guards
    extractLeaveGuards(deactivated),
    // global before hooks
    this.router.beforeHooks,
    // in-component update hooks
    extractUpdateHooks(updated),
    // in-config enter guards
    activated.map(function (m) { return m.beforeEnter; }),
    // async components
    resolveAsyncComponents(activated)
  );

  var iterator = function (hook, next) {
    if (this$1$1.pending !== route) {
      return abort(createNavigationCancelledError(current, route))
    }
    try {
      hook(route, current, function (to) {
        if (to === false) {
          // next(false) -> abort navigation, ensure current URL
          this$1$1.ensureURL(true);
          abort(createNavigationAbortedError(current, route));
        } else if (isError(to)) {
          this$1$1.ensureURL(true);
          abort(to);
        } else if (
          typeof to === 'string' ||
          (typeof to === 'object' &&
            (typeof to.path === 'string' || typeof to.name === 'string'))
        ) {
          // next('/') or next({ path: '/' }) -> redirect
          abort(createNavigationRedirectedError(current, route));
          if (typeof to === 'object' && to.replace) {
            this$1$1.replace(to);
          } else {
            this$1$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated);
    var queue = enterGuards.concat(this$1$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1$1.pending !== route) {
        return abort(createNavigationCancelledError(current, route))
      }
      this$1$1.pending = null;
      onComplete(route);
      if (this$1$1.router.app) {
        this$1$1.router.app.$nextTick(function () {
          handleRouteEntered(route);
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute (route) {
  this.current = route;
  this.cb && this.cb(route);
};

History.prototype.setupListeners = function setupListeners () {
  // Default implementation is empty
};

History.prototype.teardown = function teardown () {
  // clean up event listeners
  // https://github.com/vuejs/vue-router/issues/2341
  this.listeners.forEach(function (cleanupListener) {
    cleanupListener();
  });
  this.listeners = [];

  // reset current history route
  // https://github.com/vuejs/vue-router/issues/3294
  this.current = START;
  this.pending = null;
};

function normalizeBase (base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = (baseEl && baseEl.getAttribute('href')) || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '')
}

function resolveQueue (
  current,
  next
) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  }
}

function extractGuards (
  records,
  name,
  bind,
  reverse
) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard)
        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
        : bind(guard, instance, match, key)
    }
  });
  return flatten(reverse ? guards.reverse() : guards)
}

function extractGuard (
  def,
  key
) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key]
}

function extractLeaveGuards (deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
}

function extractUpdateHooks (updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
}

function bindGuard (guard, instance) {
  if (instance) {
    return function boundRouteGuard () {
      return guard.apply(instance, arguments)
    }
  }
}

function extractEnterGuards (
  activated
) {
  return extractGuards(
    activated,
    'beforeRouteEnter',
    function (guard, _, match, key) {
      return bindEnterGuard(guard, match, key)
    }
  )
}

function bindEnterGuard (
  guard,
  match,
  key
) {
  return function routeEnterGuard (to, from, next) {
    return guard(to, from, function (cb) {
      if (typeof cb === 'function') {
        if (!match.enteredCbs[key]) {
          match.enteredCbs[key] = [];
        }
        match.enteredCbs[key].push(cb);
      }
      next(cb);
    })
  }
}

/*  */

var HTML5History = /*@__PURE__*/(function (History) {
  function HTML5History (router, base) {
    History.call(this, router, base);

    this._startLocation = getLocation(this.base);
  }

  if ( History ) HTML5History.__proto__ = History;
  HTML5History.prototype = Object.create( History && History.prototype );
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.setupListeners = function setupListeners () {
    var this$1$1 = this;

    if (this.listeners.length > 0) {
      return
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1$1.current;

      // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.
      var location = getLocation(this$1$1.base);
      if (this$1$1.current === START && location === this$1$1._startLocation) {
        return
      }

      this$1$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    };
    window.addEventListener('popstate', handleRoutingEvent);
    this.listeners.push(function () {
      window.removeEventListener('popstate', handleRoutingEvent);
    });
  };

  HTML5History.prototype.go = function go (n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
    var this$1$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1$1.base + route.fullPath));
      handleScroll(this$1$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1$1.base + route.fullPath));
      handleScroll(this$1$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL (push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
    return getLocation(this.base)
  };

  return HTML5History;
}(History));

function getLocation (base) {
  var path = window.location.pathname;
  var pathLowerCase = path.toLowerCase();
  var baseLowerCase = base.toLowerCase();
  // base="/a" shouldn't turn path="/app" into "/a/pp"
  // https://github.com/vuejs/vue-router/issues/3555
  // so we ensure the trailing slash in the base
  if (base && ((pathLowerCase === baseLowerCase) ||
    (pathLowerCase.indexOf(cleanPath(baseLowerCase + '/')) === 0))) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash
}

/*  */

var HashHistory = /*@__PURE__*/(function (History) {
  function HashHistory (router, base, fallback) {
    History.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return
    }
    ensureSlash();
  }

  if ( History ) HashHistory.__proto__ = History;
  HashHistory.prototype = Object.create( History && History.prototype );
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners () {
    var this$1$1 = this;

    if (this.listeners.length > 0) {
      return
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1$1.current;
      if (!ensureSlash()) {
        return
      }
      this$1$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1$1.router, route, current, true);
        }
        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    };
    var eventType = supportsPushState ? 'popstate' : 'hashchange';
    window.addEventListener(
      eventType,
      handleRoutingEvent
    );
    this.listeners.push(function () {
      window.removeEventListener(eventType, handleRoutingEvent);
    });
  };

  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(
      location,
      function (route) {
        pushHash(route.fullPath);
        handleScroll(this$1$1.router, route, fromRoute, false);
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(
      location,
      function (route) {
        replaceHash(route.fullPath);
        handleScroll(this$1$1.router, route, fromRoute, false);
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  HashHistory.prototype.go = function go (n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL (push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    return getHash()
  };

  return HashHistory;
}(History));

function checkFallback (base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true
  }
}

function ensureSlash () {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true
  }
  replaceHash('/' + path);
  return false
}

function getHash () {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  // empty path
  if (index < 0) { return '' }

  href = href.slice(index + 1);

  return href
}

function getUrl (path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return (base + "#" + path)
}

function pushHash (path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash (path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}

/*  */

var AbstractHistory = /*@__PURE__*/(function (History) {
  function AbstractHistory (router, base) {
    History.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if ( History ) AbstractHistory.__proto__ = History;
  AbstractHistory.prototype = Object.create( History && History.prototype );
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1$1 = this;

    this.transitionTo(
      location,
      function (route) {
        this$1$1.stack = this$1$1.stack.slice(0, this$1$1.index + 1).concat(route);
        this$1$1.index++;
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1$1 = this;

    this.transitionTo(
      location,
      function (route) {
        this$1$1.stack = this$1$1.stack.slice(0, this$1$1.index).concat(route);
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  AbstractHistory.prototype.go = function go (n) {
    var this$1$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(
      route,
      function () {
        var prev = this$1$1.current;
        this$1$1.index = targetIndex;
        this$1$1.updateRoute(route);
        this$1$1.router.afterHooks.forEach(function (hook) {
          hook && hook(route, prev);
        });
      },
      function (err) {
        if (isNavigationFailure(err, NavigationFailureType.duplicated)) {
          this$1$1.index = targetIndex;
        }
      }
    );
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/'
  };

  AbstractHistory.prototype.ensureURL = function ensureURL () {
    // noop
  };

  return AbstractHistory;
}(History));

/*  */



var VueRouter = function VueRouter (options) {
  if ( options === void 0 ) options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback =
    mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break
  }
};

var prototypeAccessors = { currentRoute: { configurable: true } };

VueRouter.prototype.match = function match (raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom)
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current
};

VueRouter.prototype.init = function init (app /* Vue component instance */) {
    var this$1$1 = this;

  this.apps.push(app);

  // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639
  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1$1.apps.indexOf(app);
    if (index > -1) { this$1$1.apps.splice(index, 1); }
    // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused
    if (this$1$1.app === app) { this$1$1.app = this$1$1.apps[0] || null; }

    if (!this$1$1.app) { this$1$1.history.teardown(); }
  });

  // main app previously initialized
  // return as we don't need to set up new history listener
  if (this.app) {
    return
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History || history instanceof HashHistory) {
    var handleInitialScroll = function (routeOrError) {
      var from = history.current;
      var expectScroll = this$1$1.options.scrollBehavior;
      var supportsScroll = supportsPushState && expectScroll;

      if (supportsScroll && 'fullPath' in routeOrError) {
        handleScroll(this$1$1, routeOrError, from, false);
      }
    };
    var setupListeners = function (routeOrError) {
      history.setupListeners();
      handleInitialScroll(routeOrError);
    };
    history.transitionTo(
      history.getCurrentLocation(),
      setupListeners,
      setupListeners
    );
  }

  history.listen(function (route) {
    this$1$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach (fn) {
  return registerHook(this.beforeHooks, fn)
};

VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
  return registerHook(this.resolveHooks, fn)
};

VueRouter.prototype.afterEach = function afterEach (fn) {
  return registerHook(this.afterHooks, fn)
};

VueRouter.prototype.onReady = function onReady (cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError (errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push (location, onComplete, onAbort) {
    var this$1$1 = this;

  // $flow-disable-line
  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1$1.history.push(location, resolve, reject);
    })
  } else {
    this.history.push(location, onComplete, onAbort);
  }
};

VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1$1 = this;

  // $flow-disable-line
  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1$1.history.replace(location, resolve, reject);
    })
  } else {
    this.history.replace(location, onComplete, onAbort);
  }
};

VueRouter.prototype.go = function go (n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back () {
  this.go(-1);
};

VueRouter.prototype.forward = function forward () {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
  var route = to
    ? to.matched
      ? to
      : this.resolve(to).route
    : this.currentRoute;
  if (!route) {
    return []
  }
  return [].concat.apply(
    [],
    route.matched.map(function (m) {
      return Object.keys(m.components).map(function (key) {
        return m.components[key]
      })
    })
  )
};

VueRouter.prototype.resolve = function resolve (
  to,
  current,
  append
) {
  current = current || this.history.current;
  var location = normalizeLocation(to, current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  }
};

VueRouter.prototype.getRoutes = function getRoutes () {
  return this.matcher.getRoutes()
};

VueRouter.prototype.addRoute = function addRoute (parentOrRoute, route) {
  this.matcher.addRoute(parentOrRoute, route);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

VueRouter.prototype.addRoutes = function addRoutes (routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties( VueRouter.prototype, prototypeAccessors );

var VueRouter$1 = VueRouter;

function registerHook (list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) { list.splice(i, 1); }
  }
}

function createHref (base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path
}

// We cannot remove this as it would be a breaking change
VueRouter.install = install;
VueRouter.version = '3.6.5';
VueRouter.isNavigationFailure = isNavigationFailure;
VueRouter.NavigationFailureType = NavigationFailureType;
VueRouter.START_LOCATION = START;

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

var axios$2 = {exports: {}};

var bind$2 = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

var bind$1 = bind$2;

// utils is a library of generic helper functions non-specific to axios

var toString$1 = Object.prototype.toString;

// eslint-disable-next-line func-names
var kindOf = (function(cache) {
  // eslint-disable-next-line func-names
  return function(thing) {
    var str = toString$1.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
})(Object.create(null));

function kindOfTest(type) {
  type = type.toLowerCase();
  return function isKindOf(thing) {
    return kindOf(thing) === type;
  };
}

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
var isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
var isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
var isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString$1.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) ||
    toString$1.call(thing) === pattern ||
    (isFunction(thing.toString) && thing.toString() === pattern)
  );
}

/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
var isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind$1(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */

function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */

function toFlatObject(sourceObj, destObj, filter) {
  var props;
  var i;
  var prop;
  var merged = {};

  destObj = destObj || {};

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if (!merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = Object.getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */
function endsWith(str, searchString, position) {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */
function toArray(thing) {
  if (!thing) return null;
  var i = thing.length;
  if (isUndefined(i)) return null;
  var arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

// eslint-disable-next-line func-names
var isTypedArray = (function(TypedArray) {
  // eslint-disable-next-line func-names
  return function(thing) {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

var utils$h = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  isTypedArray: isTypedArray,
  isFileList: isFileList
};

var utils$g = utils$h;

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
var buildURL$2 = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$g.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils$g.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils$g.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils$g.forEach(val, function parseValue(v) {
        if (utils$g.isDate(v)) {
          v = v.toISOString();
        } else if (utils$g.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

var utils$f = utils$h;

function InterceptorManager$1() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager$1.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager$1.prototype.forEach = function forEach(fn) {
  utils$f.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

var InterceptorManager_1 = InterceptorManager$1;

var utils$e = utils$h;

var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
  utils$e.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

var utils$d = utils$h;

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
function AxiosError$5(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils$d.inherits(AxiosError$5, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

var prototype = AxiosError$5.prototype;
var descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED'
// eslint-disable-next-line func-names
].forEach(function(code) {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError$5, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError$5.from = function(error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);

  utils$d.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });

  AxiosError$5.call(axiosError, error.message, code, config, request, response);

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

var AxiosError_1 = AxiosError$5;

var transitional = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

var utils$c = utils$h;

/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/

function toFormData$1(obj, formData) {
  // eslint-disable-next-line no-param-reassign
  formData = formData || new FormData();

  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils$c.isDate(value)) {
      return value.toISOString();
    }

    if (utils$c.isArrayBuffer(value) || utils$c.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils$c.isPlainObject(data) || utils$c.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);

      utils$c.forEach(data, function each(value, key) {
        if (utils$c.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && typeof value === 'object') {
          if (utils$c.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (utils$c.endsWith(key, '[]') && (arr = utils$c.toArray(value))) {
            // eslint-disable-next-line func-names
            arr.forEach(function(el) {
              !utils$c.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });

      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);

  return formData;
}

var toFormData_1 = toFormData$1;

var AxiosError$4 = AxiosError_1;

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
var settle$1 = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError$4(
      'Request failed with status code ' + response.status,
      [AxiosError$4.ERR_BAD_REQUEST, AxiosError$4.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
};

var utils$b = utils$h;

var cookies$1 = (
  utils$b.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils$b.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils$b.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils$b.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
var isAbsoluteURL$1 = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

var isAbsoluteURL = isAbsoluteURL$1;
var combineURLs = combineURLs$1;

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
var buildFullPath$2 = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

var utils$a = utils$h;

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders$1 = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils$a.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils$a.trim(line.substr(0, i)).toLowerCase();
    val = utils$a.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

var utils$9 = utils$h;

var isURLSameOrigin$1 = (
  utils$9.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils$9.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

var AxiosError$3 = AxiosError_1;
var utils$8 = utils$h;

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function CanceledError$3(message) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError$3.call(this, message == null ? 'canceled' : message, AxiosError$3.ERR_CANCELED);
  this.name = 'CanceledError';
}

utils$8.inherits(CanceledError$3, AxiosError$3, {
  __CANCEL__: true
});

var CanceledError_1 = CanceledError$3;

var parseProtocol$1 = function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
};

var utils$7 = utils$h;
var settle = settle$1;
var cookies = cookies$1;
var buildURL$1 = buildURL$2;
var buildFullPath$1 = buildFullPath$2;
var parseHeaders = parseHeaders$1;
var isURLSameOrigin = isURLSameOrigin$1;
var transitionalDefaults$1 = transitional;
var AxiosError$2 = AxiosError_1;
var CanceledError$2 = CanceledError_1;
var parseProtocol = parseProtocol$1;

var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils$7.isFormData(requestData) && utils$7.isStandardBrowserEnv()) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath$1(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError$2('Request aborted', AxiosError$2.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError$2('Network Error', AxiosError$2.ERR_NETWORK, config, request, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults$1;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError$2(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError$2.ETIMEDOUT : AxiosError$2.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils$7.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$7.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils$7.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new CanceledError$2() : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    var protocol = parseProtocol(fullPath);

    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
      reject(new AxiosError$2('Unsupported protocol ' + protocol + ':', AxiosError$2.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData);
  });
};

// eslint-disable-next-line strict
var _null = null;

var utils$6 = utils$h;
var normalizeHeaderName = normalizeHeaderName$1;
var AxiosError$1 = AxiosError_1;
var transitionalDefaults = transitional;
var toFormData = toFormData_1;

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils$6.isUndefined(headers) && utils$6.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = xhr;
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = xhr;
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils$6.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$6.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults$3 = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils$6.isFormData(data) ||
      utils$6.isArrayBuffer(data) ||
      utils$6.isBuffer(data) ||
      utils$6.isStream(data) ||
      utils$6.isFile(data) ||
      utils$6.isBlob(data)
    ) {
      return data;
    }
    if (utils$6.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$6.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils$6.isObject(data);
    var contentType = headers && headers['Content-Type'];

    var isFileList;

    if ((isFileList = utils$6.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
      var _FormData = this.env && this.env.FormData;
      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults$3.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils$6.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: _null
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils$6.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults$3.headers[method] = {};
});

utils$6.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults$3.headers[method] = utils$6.merge(DEFAULT_CONTENT_TYPE);
});

var defaults_1 = defaults$3;

var utils$5 = utils$h;
var defaults$2 = defaults_1;

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
var transformData$1 = function transformData(data, headers, fns) {
  var context = this || defaults$2;
  /*eslint no-param-reassign:0*/
  utils$5.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};

var isCancel$1 = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

var utils$4 = utils$h;
var transformData = transformData$1;
var isCancel = isCancel$1;
var defaults$1 = defaults_1;
var CanceledError$1 = CanceledError_1;

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError$1();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
var dispatchRequest$1 = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils$4.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils$4.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults$1.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

var utils$3 = utils$h;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
var mergeConfig$2 = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
      return utils$3.merge(target, source);
    } else if (utils$3.isPlainObject(source)) {
      return utils$3.merge({}, source);
    } else if (utils$3.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$3.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils$3.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils$3.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils$3.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};

var data = {
  "version": "0.27.2"
};

var VERSION = data.version;
var AxiosError = AxiosError_1;

var validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

var validator$1 = {
  assertOptions: assertOptions,
  validators: validators$1
};

var utils$2 = utils$h;
var buildURL = buildURL$2;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var buildFullPath = buildFullPath$2;
var validator = validator$1;

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios$1.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig$1(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios$1.prototype.getUri = function getUri(config) {
  config = mergeConfig$1(this.defaults, config);
  var fullPath = buildFullPath(config.baseURL, config.url);
  return buildURL(fullPath, config.params, config.paramsSerializer);
};

// Provide aliases for supported request methods
utils$2.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig$1(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }

  Axios$1.prototype[method] = generateHTTPMethod();

  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
});

var Axios_1 = Axios$1;

var CanceledError = CanceledError_1;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

var CancelToken_1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
var spread = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

var utils$1 = utils$h;

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
var isAxiosError = function isAxiosError(payload) {
  return utils$1.isObject(payload) && (payload.isAxiosError === true);
};

var utils = utils$h;
var bind = bind$2;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults = defaults_1;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios$1 = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios$1.Axios = Axios;

// Expose Cancel & CancelToken
axios$1.CanceledError = CanceledError_1;
axios$1.CancelToken = CancelToken_1;
axios$1.isCancel = isCancel$1;
axios$1.VERSION = data.version;
axios$1.toFormData = toFormData_1;

// Expose AxiosError class
axios$1.AxiosError = AxiosError_1;

// alias for CanceledError for backward compatibility
axios$1.Cancel = axios$1.CanceledError;

// Expose all/spread
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = spread;

// Expose isAxiosError
axios$1.isAxiosError = isAxiosError;

axios$2.exports = axios$1;

// Allow use of default import syntax in TypeScript
axios$2.exports.default = axios$1;

var axios = axios$2.exports;

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const getRuntimeConfig = async () => {
    const runtimeConfig = await fetch('/config/local.json');
    return await runtimeConfig.json()
};

const local_config = await getRuntimeConfig()
    .then(function (json) {
        return {
            backend_url: json.backend_url,
            ssl: json.ssl,
            reject_unauthorized: json.reject_unauthorized,
            version: json.version
        }
    });

// Sets content type to json utf-8 default.
axios.defaults.headers.common["content-type"] = "application/json;charset=utf-8";

// SSL
let urlPrefix;
// Default back-end provider urls.
// ! PLEASE INCLUDE '/' at the end of URL.
if (local_config.ssl == true) {
    urlPrefix = "https://";
}
else {
    urlPrefix = "http://";
}
const base_url = urlPrefix + local_config.backend_url + "/";
// const base_url =  "http://127.0.0.1:8000/";

var request;
let axios_opts;
// Axios Instance.
if (local_config.reject_unauthorized != true) {
    axios_opts = {
        baseURL: base_url,
        withCredentials: true,
        rejectUnauthorized: false
    };
}
else {
    axios_opts = {
        baseURL: base_url,
        withCredentials: true,
        rejectUnauthorized: true
    };
}
request = axios.create(axios_opts);

const ignoreErrorCodes = [
    401, // Unauthorized
    403 // Forbidden
];

// LIST OF URL PATTERNS.
const urls = {
    home: {
        fetch: `api/home/`
    },
    auth: {
        token: `api/token/`,
        tokenRefresh: `api/token/refresh/`,
        logout: `api/token/revoke/`
    },
    user: {
        base: `api/ldap/users/`,
        fetch: `api/ldap/users/retrieve/`,
        deleteTotp: `api/totp/delete-for-user/`,
        lock: `api/ldap/users/lock/`,
        unlock: `api/ldap/users/unlock/`,
        changeAccountStatus: `api/ldap/users/change-status/`,
        changePassword: `api/ldap/users/change-password/`,
        bulkInsert: `api/ldap/users/bulk/create/`,
        bulkDelete: `api/ldap/users/bulk/destroy/`,
        bulkUpdate: `api/ldap/users/bulk/update/`,
        bulkUnlock: `api/ldap/users/bulk/unlock/`,
        bulkChangeStatus: `api/ldap/users/bulk/change-status/`,
        bulkExport: `api/ldap/users/bulk/export/`,
        // These endpoints will be moved to a separate viewset
        selfChangePassword: `api/ldap/users/self/change-password/`,
        selfUpdate: `api/ldap/users/self/update/`,
        selfFetch: `api/ldap/users/self/fetch/`,
        selfInfo: `api/ldap/users/self/info/`,
        //
    },
    djangoUser: {
        base: `api/users/`,
        detail: `api/users/{pk}/`,
        changeAccountStatus: `api/users/{pk}/change-status/`,
        changePassword: `api/users/{pk}/change-password/`,
        // These endpoints will be moved to a separate viewset
        selfUpdate: `api/users/self/update/`,
        selfChangePassword: `api/users/self/change-password/`,
        //
        bulkInsert: `api/users/bulk/create/`,
        bulkDelete: `api/users/bulk/destroy/`,
        bulkUpdate: `api/users/bulk/update/`,
        bulkChangeStatus: `api/users/bulk/change-status/`,
        bulkExport: `api/users/bulk/export/`,
    },
    group: {
        base: `api/ldap/groups/`,
        fetch: `api/ldap/groups/retrieve-dn/`,
    },
    log: {
        base: `api/logs/`,
        list: `api/logs/`,
        reset: `api/logs/reset/`,
        truncate: `api/logs/truncate/`
    },
    domain: {
        base: `api/ldap/domain/`,
        zone: `api/ldap/domain/zone/`,
    },
    dnsr: {
        base: `api/ldap/record/`,
    },
    gpo: {
        list: `api/ldap/gpo/`,
    },
    settings: {
        base: `api/settings/`,
        detail: `api/settings/{pk}/`,
        preset_enable: `api/settings/{pk}/enable/`,
        preset_rename: `api/settings/{pk}/rename/`,
        save: `api/settings/save/`,
        reset: `api/settings/reset/`,
        test: `api/settings/test/`,
        sync_users: `api/settings/sync-users/`,
        prune_users: `api/settings/prune-users/`,
        purge_users: `api/settings/purge-users/`,
    },
    dirtree: {
        base: `api/ldap/dirtree/`,
        organizational_units: `api/ldap/dirtree/organizational-units/`,
        move: `api/ldap/dirtree/move/`,
        rename: `api/ldap/dirtree/rename/`,
    },
    totp: {
        list: `api/totp/`,
        create: `api/totp/create-device/`,
        validate: `api/totp/validate-device/`,
        delete: `api/totp/delete-device/`,
    },
    test: {
        get: `api/test/`,
        post: `api/test/post/`,
        put: `api/test/put/`,
        delete: `api/test/delete/`,
        options: `api/test/options/`
    },
    liveness: {
        check: `api/liveness/check/`
    },
    debug: {
        list: `api/debug/`,
        action: `api/debug/action/`,
    },
    application: {
        base: `api/application/`,
        detail: `api/application/{pk}/`,
        oidc_well_known: "openid/.well-known/openid-configuration/",
    },
    applicationGroup: {
        base: `api/application/group/`,
        detail: `api/application/group/{pk}/`,
        change_status: `api/application/group/{pk}/change-status/`,
        create_info: `api/application/group/create-info/`,
    },
    oidc: {
        consent: `openid/consent/`,
        end_session: `openid/end-session/`
    }
};
const eraseLocalUserData = () => {
    const localUserKeys = [
        "first_name",
        "last_name",
        "username",
        "email",
        "admin_allowed",
    ];
    localUserKeys.forEach(v => {
        localStorage.removeItem(`user.${v}`);
    });
    return
};

var tokenIsRefreshing = false;

const forToken = async () => {
    console.log("Waiting for token refresh.");
    let tokenRefreshCountLimit = 20;
    let tokenRefreshWaitLimit = 500;
    let tokenRefreshWait = 0;
    while (tokenIsRefreshing === true && await (new Promise(resolve => setTimeout(() => resolve(tokenRefreshWait), tokenRefreshWaitLimit))) < tokenRefreshCountLimit) {
        tokenRefreshWait++;
    }
    return
};

// Add a request interceptor
request.interceptors.request.use(
    async function (config) {
        if (tokenIsRefreshing === true)
            await forToken();
        // Do something before request is sent
        return config;
    },
    function (error) {
        // Do something with request error
        return Promise.reject(error);
    });

// Adds Axios Response Interceptor.
request.interceptors.response.use(
    // On Request Success...
    (response) => {
        // do nothing.
        return response
    },
    // On Request Error...
    async (error) => {
        // Get Configuration of failed request.
        const originalRequest = error.config;
        if (error?.response?.status == undefined) {
            console.error("HTTP Status undefined, going back to login.");
            // erase local storage and go to Index Login.
            eraseLocalUserData();
            if (router.app.$route.path != "/login")
                router.push('/login');
        }
        // If the request error code is 403 and the request hasn't been retried...
        if (error.response.status === 401 && !originalRequest._retry) {
            if (tokenIsRefreshing === true) {
                await forToken();
                return axios(originalRequest); // Resends
            }
            tokenIsRefreshing = true;
            // Check flag for request being retried.
            originalRequest._retry = true;
            // Send refresh token request.
            let tokenRefreshAxios = axios.create(axios_opts);
            return tokenRefreshAxios.post(base_url + urls.auth.tokenRefresh)
                // then, if refresh request succeeds.
                .then(response => {
                    tokenIsRefreshing = false;
                    var date = new Date();
                    // 1) Set tokens on LocalStorage.
                    localStorage.setItem('auth.refreshClock', date);
                    localStorage.setItem('auth.access_expire', response.data.access_expire);
                    localStorage.setItem('auth.refresh_expire', response.data.refresh_expire);
                    // 2) Return re-sent request through new axios.
                    return axios(originalRequest);
                    // on refresh request error catch
                }).catch((e) => {
                    tokenIsRefreshing = false;
                    if (e.status != undefined && !ignoreErrorCodes.includes(e.status))
                        console.error(e);
                    if (e?.response?.status == 401) {
                        // erase local storage and go to Index Login.
                        eraseLocalUserData();
                        if (router.app.$route.path != "/login")
                            router.push('/login');
                    }
                    return Promise.reject(error.response)
                })
            // Else, if the error is other than Unauthorized...
        } else
            // Return error response.
            return Promise.reject(error)
    }
);// End of Interceptor.

var backend_config = {
    base_url: base_url,
    urls: urls,
    request: request
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const calls = {
    login: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.auth.token, data).then(response => {
                if (!response || response.status == 401) {
                    reject(response);
                    console.log('Authentication Rejected');
                }
                var date = new Date();

                localStorage.setItem('auth.refreshClock', date);
                localStorage.setItem('auth.access_expire', response.data.access_expire);
                localStorage.setItem('auth.refresh_expire', response.data.refresh_expire);
                localStorage.setItem("user.username", response.data.username);
                localStorage.setItem("user.user_type", response.data.user_type);
                if (Object.keys(response.data).includes('admin_allowed'))
                    localStorage.setItem("user.admin_allowed", response.data.admin_allowed);
                else
                    localStorage.removeItem("user.admin_allowed");
                resolve(response);
            }).catch((e) => {
                localStorage.removeItem('user.admin_allowed');
                // if (e?.response?.data?.code != "otp_required"){
                //     console.log('Authentication Error')
                // }
                reject(e);
            });
        })
    },
    logout: (timeout = false) => {
        const removeKeys = [
            "refreshClock",
            "username",
            "first_name",
            "last_name",
            "user_type",
            "email",
            "admin_allowed"
        ];
        if (!timeout)
            return new Promise(resolve => {
                backend_config.request.post(backend_config.urls.auth.logout).then(() => {
                    removeKeys.forEach(element => {
                        localStorage.removeItem(element);
                    });
                    resolve();
                }).catch(error => {
                    console.error(error);
                    removeKeys.forEach(element => {
                        localStorage.removeItem(element);
                    });
                    resolve();
                });
            })
        else {
            removeKeys.forEach(element => {
                localStorage.removeItem(element);
            });
        }
    }
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$g = {
    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.user.base).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    insert: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.base, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    fetch: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.fetch, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    update: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.user.base, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },

    delete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.patch(backend_config.urls.user.base, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },

    lock: (username) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.lock, { username: username }).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    unlock: (username) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.unlock, { username: username }).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    changePassword: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.changePassword, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },

    changeAccountStatus: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.changeAccountStatus, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    bulkInsert: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.bulkInsert, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    bulkDelete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.bulkDelete, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    bulkUpdate: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.bulkUpdate, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    bulkChangeStatus: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.bulkChangeStatus, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    bulkUnlock: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.bulkUnlock, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    selfUpdate: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.user.selfUpdate, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },

    selfInfo: () => {
        const authKeys = [];
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.user.selfInfo)
                .then(response => {
                    for (const key in response.data.user) {
                        if (authKeys.includes(key))
                            localStorage.setItem(`auth.${key}`, response.data.user[key]);
                        else
                            localStorage.setItem(`user.${key}`, response.data.user[key]);
                    }
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    selfChangePassword: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.selfChangePassword, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },

    selfFetch: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.user.selfFetch).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    deleteTotp: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.user.deleteTotp, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$f = {
    insert: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.group.base, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    update: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.group.base, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    delete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.patch(backend_config.urls.group.base, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },

    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.group.base).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    fetch: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.group.fetch, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    }
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$e = {
    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.dirtree.organizational_units)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    dirtree: (filter) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.dirtree.base, { filter: filter })
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    move: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.dirtree.move, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    rename: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.dirtree.rename, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    insert: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.dirtree.base, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    delete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.patch(backend_config.urls.dirtree.base, data).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$d = {
    details: () => {
        const REMOVE_KEYS_IF_MISSING = [
            "debug"
        ];
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.domain.base)
                .then(response => {
                    resolve(response);
                    for (const key in response.data.details)
                        localStorage.setItem(`ldap.${key}`, response.data.details[key]);
                    REMOVE_KEYS_IF_MISSING.forEach(k => {
                        if (!(k in response.data.details))
                            localStorage.removeItem(`ldap.${k}`);
                    });
                }).catch((e) => reject(e));
        })
    },

    zones: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.domain.zone, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    insert: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.domain.base, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    delete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.patch(backend_config.urls.domain.base, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$c = {
    insert: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.dnsr.base, { record: data }).then(response => {
                resolve(response);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    update: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.dnsr.base, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    delete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.patch(backend_config.urls.dnsr.base, data)
                .then(response => {
                    resolve(response.data);
                }).catch((e) => reject(e));
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$b = {
    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.gpo.list)
                .then(response => {
                    resolve(response);
                })
                .catch((e) => reject(e));
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$a = {
    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.settings.base)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    fetch: (presetId) => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.settings.detail.replace("{pk}", presetId))
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    reset: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.settings.reset)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    test: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.settings.test, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    save: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.settings.save, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    sync_users: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.settings.sync_users)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    prune_users: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.settings.prune_users)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    purge_users: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.settings.purge_users)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    preset_create: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.settings.base, data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    preset_rename: (data) => {
        let id = data.id;
        delete data.id;
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.settings.preset_rename.replace("{pk}", id), data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    preset_delete: (data) => {
        let id = data.id;
        delete data.id;
        return new Promise((resolve, reject) => {
            backend_config.request.delete(backend_config.urls.settings.detail.replace("{pk}", id), data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    },

    preset_enable: (data) => {
        let id = data.id;
        delete data.id;
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.settings.preset_enable.replace("{pk}", id), data)
                .then(response => {
                    resolve(response);
                }).catch((e) => reject(e));
        })
    }
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$9 = {

    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.log.list).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    reset: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.log.reset).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    truncate: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.log.truncate, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$8 = {

    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.totp.list).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    create: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.totp.create).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    validate: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.totp.validate, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    delete: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.delete(backend_config.urls.totp.delete).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$7 = {

    get: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.test.get).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    post: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.test.post, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    put: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.put(backend_config.urls.test.put, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    delete: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.delete(backend_config.urls.test.delete, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },

    options: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.options(backend_config.urls.test.options, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$6 = {

    check: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.liveness.check).then(response => {
                resolve(response.data);
            })
                .catch((e) => {
                    reject(e);
                });
        })
    }
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$5 = {
    // Lists valid Debugging Operations for LDAP Connector
    list: () => {
        return new Promise((resolve, reject) => {
            backend_config.request.get(backend_config.urls.debug.list).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    },
    action: (data) => {
        return new Promise((resolve, reject) => {
            backend_config.request.post(backend_config.urls.debug.action, data).then(response => {
                resolve(response.data);
            }).catch((e) => {
                reject(e);
            });
        })
    }
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$4 = {
	list: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.application.base).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	insert: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.application.base, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	fetch: (id) => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.application.detail.replace("{pk}", id)).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	update: (data) => {
		let id = data.id;
		return new Promise((resolve, reject) => {
			backend_config.request.put(backend_config.urls.application.detail.replace("{pk}", id), data).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	delete: (id) => {
		return new Promise((resolve, reject) => {
			backend_config.request.delete(backend_config.urls.application.detail.replace("{pk}", id))
				.then(response => {
					resolve(response.data);
				}).catch((e) => reject(e));
		})
	},

	oidc_well_known: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.application.oidc_well_known).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$3 = {
	list: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.djangoUser.base).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	fetch: (id) => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.djangoUser.detail.replace("{pk}", id)).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	insert: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.base, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	delete: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.delete(backend_config.urls.djangoUser.detail.replace("{pk}", data.id))
				.then(response => {
					resolve(response.data);
				}).catch((e) => reject(e));
		})
	},

	update: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.put(backend_config.urls.djangoUser.detail.replace("{pk}", data.id), data)
				.then(response => {
					resolve(response.data);
				}).catch((e) => reject(e));
		})
	},

	changeAccountStatus: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.changeAccountStatus.replace("{pk}", data.id), data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	changePassword: (data) => {
		let id = structuredClone(data.id);
		try {
			["id", "username"].forEach(k => {
				if (k in data)
					delete data[k];
			});
		} catch (error) {
			console.error(error);
		}
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.changePassword.replace("{pk}", id), data)
				.then(response => {
					resolve(response.data);
				}).catch((e) => reject(e));
		})
	},

	selfFetch: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.user.selfFetch).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	selfInfo: () => {
		const authKeys = [];
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.user.selfInfo)
				.then(response => {
					for (const key in response.data.user) {
						if (authKeys.includes(key))
							localStorage.setItem(`auth.${key}`, response.data.user[key]);
						else
							localStorage.setItem(`user.${key}`, response.data.user[key]);
					}
					resolve(response);
				}).catch((e) => reject(e));
		})
	},

	selfUpdate: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.put(backend_config.urls.djangoUser.selfUpdate, data)
				.then(response => {
					resolve(response.data);
				}).catch((e) => reject(e));
		})
	},

	selfChangePassword: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.put(backend_config.urls.djangoUser.selfChangePassword, data)
				.then(response => {
					resolve(response.data);
				}).catch((e) => reject(e));
		})
	},

	bulkInsert: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.bulkInsert, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	bulkDelete: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.bulkDelete, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	bulkUpdate: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.bulkUpdate, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	bulkChangeStatus: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.djangoUser.bulkChangeStatus, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	},
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$2 = {
	create_info: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.applicationGroup.create_info).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	insert: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.applicationGroup.base, data)
				.then(response => {
					resolve(response);
				}).catch((e) => reject(e));
		})
	},

	update: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.put(backend_config.urls.applicationGroup.detail.replace("{pk}", data.id), data)
				.then(response => {
					resolve(response);
				}).catch((e) => reject(e));
		})
	},

	list: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.applicationGroup.base).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	fetch: (id) => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.applicationGroup.detail.replace("{pk}", id)).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	delete: (id) => {
		return new Promise((resolve, reject) => {
			backend_config.request.delete(backend_config.urls.applicationGroup.detail.replace("{pk}", id)).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	},

	change_status: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.patch(backend_config.urls.applicationGroup.change_status.replace("{pk}", data.id), { enabled: data.enabled }).then(response => {
				resolve(response.data);
			}).catch((e) => {
				reject(e);
			});
		})
	}
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions$1 = {
	consent: (data) => {
		return new Promise((resolve, reject) => {
			backend_config.request.post(backend_config.urls.oidc.consent, data).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	}
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const actions = {
	fetch: () => {
		return new Promise((resolve, reject) => {
			backend_config.request.get(backend_config.urls.home.fetch).then(response => {
				resolve(response);
			}).catch((e) => {
				reject(e);
			});
		})
	}
};

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

const modules = {
    auth: calls,
    user: actions$g,
    group: actions$f,
    ou: actions$e,
    settings: actions$a,
    log: actions$9,
    domain: actions$d,
    dnsr: actions$c,
    gpo: actions$b,
    totp: actions$8,
    test: actions$7,
    liveness: actions$6,
    debug: actions$5,
    application: actions$4,
    djangoUser: actions$3,
    applicationGroup: actions$2,
    oidc: actions$1,
    home: actions
};

const interlock_backend = {
    call: (moduleCallLinkString, data) => {
        if (!moduleCallLinkString)
            throw Error("Missing Link String Parameters. Linking String provided is undefined.")
        const links = moduleCallLinkString.split('/');
        if (links.length == 1)
            throw Error("Missing Link String Parameters. Linking String Example 'module/call'.")
        else if (!(links[0] in modules))
            throw Error("Module `" + links[0] + "` not registered in provider modules.")
        else if (!(links[1] in modules[links[0]]))
            throw Error("Function `" + links[1] + "` was not found in `" + links[0] + "` module.")
        else {
            return modules[links[0]][links[1]](data)
        }
    }
};

class ApiModel {

	/**
	 * Abstract ApiModel Constructor.
	 * Override.
	 * 
	 * Contributors
	 * Martín Vilche
	 * Dylan Blanqué
	 */
	constructor() {
		if (this.constructor === ApiModel) {
			throw new TypeError('Abstract class "ApiModel" cannot be instantiated directly.');
		}
	}

	validate() {
		throw new TypeError("The method `validate` inherited by ApiModel must be overridden.");
	}

	getById() {
		throw new TypeError("The method `getById` inherited by ApiModel must be overridden.");
	}

	list() {
		throw new TypeError("The method `list` inherited by ApiModel must be overridden.");
	}
}

class HomeInfo extends ApiModel {

	local_user_count = 0;
	oidc_well_known = {};
	ldap_user_count = 0;
	ldap_enabled = false;
	ldap_tls = false;
	ldap_ssl = false;
	ldap_ok = false;
	ldap_active_server = null;
	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id 
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	async fetch() {
		return await interlock_backend.call('home/fetch')
			.then(response => {
				const data = response.data.data;
				Object.keys(data).forEach(key => {
					this[key] = data[key];
				});
			})
	}
}

var render$V = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_76,{attrs:{"flat":"","color":"transparent"}},[_c(__unplugin_components_91,{staticClass:"py-3 px-6",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_76,{attrs:{"outlined":"","color":"gray-95"}},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.getLoadingColor(),"indeterminate":_vm.loading}}),_c(VCardTitle,{staticClass:"mt-2"},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t("section.home.oidc.title"))+" ")])],1),_c(VCardText,[_c(VExpandTransition,[(_vm.loading !== true)?_c(__unplugin_components_4$1,{attrs:{"dense":"","color":"transparent"}},[_c(__unplugin_components_8,_vm._l((_vm.data.oidc_well_known),function(value,key){return (_vm.displayedOidcData.includes(key))?_c(__unplugin_components_9$2,{key:key,attrs:{"two-line":""}},[_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t(("section.home.oidc." + key)))+" ")]),_c(VListItemSubtitle,[_vm._v(" "+_vm._s(value)+" ")])],1),_c(__unplugin_components_10$2,[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"icon":"","small":""},on:{"click":function($event){return _vm.copyValueToClipboard(value)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t("actions.copy")))])])],1)],1):_vm._e()}),1)],1):_vm._e()],1)],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{attrs:{"height":"100%","outlined":"","color":"gray-95"}},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.getLoadingColor(),"indeterminate":_vm.loading}}),_c(VCardTitle,{staticClass:"mt-2"},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t("section.home.local.title"))+" ")])],1),_c(VCardText,[_c(VExpandTransition,[(_vm.loading !== true)?_c(__unplugin_components_4$1,{attrs:{"disabled":"","dense":"","color":"transparent"}},[_c(__unplugin_components_8,_vm._l((_vm.userCountKeys),function(key){return _c(__unplugin_components_9$2,{key:key,attrs:{"two-line":""}},[_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t(("section.home.local." + key)))+" ")]),_c(VListItemSubtitle,[_vm._v(" "+_vm._s(_vm.data[key])+" ")])],1)],1)}),1)],1):_vm._e()],1)],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{staticClass:"d-flex flex-column",attrs:{"height":"100%","outlined":"","color":"gray-95"}},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.getLoadingColor(),"indeterminate":_vm.loading}}),_c(VCardTitle,{staticClass:"mt-2"},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t("section.home.ldap.title"))+" ")])],1),_c(VCardText,[_c(VExpandTransition,[(_vm.loading !== true)?_c(__unplugin_components_4$1,{attrs:{"disabled":"","dense":"","color":"transparent"}},[_c(__unplugin_components_8,_vm._l((_vm.ldapKeys),function(key){return _c(__unplugin_components_9$2,{key:key,attrs:{"two-line":_vm.isTwoLine(key)}},[_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t(("section.home.ldap." + key)))+" ")]),(_vm.isTwoLine(key))?_c(VListItemSubtitle,[_vm._v(" "+_vm._s(_vm.data[key])+" ")]):_vm._e()],1),_c(__unplugin_components_10$2,[(typeof _vm.data[key] === 'boolean')?_c('div',[(_vm.showBoolInactive(key))?_c(__unplugin_components_95,[_vm._v(" mdi-checkbox-blank-circle-outline ")]):(_vm.data[key] === true)?_c(__unplugin_components_95,{attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle ")]):_c(__unplugin_components_95,{attrs:{"color":"red"}},[_vm._v(" mdi-close-circle ")])],1):(!_vm.isTwoLine(key))?_c('div',[_vm._v(" "+_vm._s(_vm.data[key])+" ")]):_vm._e()])],1)}),1)],1):_vm._e()],1)],1)],1)],1)],1)],1)],1)};
var staticRenderFns$V = [];

/* unplugin-vue-components disabled *///

const __vue2_script$V = {
	name: 'HomeViewContainer',
	props: {
		initLoad: Boolean,
		viewTitle: String,
		snackbarTimeout: Number,
	},
	data() {
		return {
			data: new HomeInfo({}),
			loading: false,
			error: false,
			errorMsg: "",
			displayedOidcData: [
				"issuer",
				"authorization_endpoint"
			],
			categories: {
				users: [
					"local_user_count",
					"ldap_user_count",
				],
				ldap: [
					"ldap_enabled",
					"ldap_tls",
					"ldap_ssl",
					"ldap_ok",
				],
				oidc: [
					"oidc_well_known"
				],
			},
			userCountKeys: [
				"local_user_count",
				"ldap_user_count",
			],
			ldapKeys: [
				"ldap_enabled",
				"ldap_tls",
				"ldap_ssl",
				"ldap_ok",
				"ldap_active_server",
			],
		}
	},
	mounted() {
		this.fetchHomeInfo();
	},
	methods: {
		getLoadingColor() {
			if (this.error)
				return "error"
			if (this.loading)
				return "primary"
			return "primary-80"
		},
		isTwoLine(key) {
			if (!(key in this.data))
				return false
			if (this.data[key] === null || this.data[key] === undefined)
				return false
			return key in this.data && this.data[key].length > 16
		},
		showBoolInactive(key) {
			if (["ldap_tls", "ldap_ssl", "ldap_ok"].includes(key) &&
				this.data.ldap_enabled !== true) {
				return true
			}
			return false
		},
		copyValueToClipboard(value) {
			navigator.clipboard.writeText(value);
			notificationBus.$emit("createNotification", {
				message: this.$t("actions.copiedToClipboard"),
				type: 'info',
				timeout: 1e3
			});
		},
		startLoading() {
			this.loading = true;
			this.error = false;
			this.errorMsg = "";
		},
		stopLoading(clearErrors = false) {
			this.loading = false;
			if (clearErrors === true) {
				this.error = false;
				this.errorMsg = "";
			}
		},
		async fetchHomeInfo() {
			this.startLoading();
			await this.data.fetch()
				.then(() => {
					const message = this.initLoad ? this.$t("section.home.welcomeMessage") : `${this.$t("category.home")} ${this.$tc("words.loaded.m", 1)}`;
					this.stopLoading();
					notificationBus.$emit("createNotification", {
						message: message,
						type: '',
						icon: '',
						color: 'secondary-20-s',
						text: 'white'
					});
				})
				.catch(error => {
					console.error(error);
				});
			this.$emit("done");
		}
	},
};
const __cssModules$V = {};
var __component__$V = /*#__PURE__*/normalizeComponent(
  __vue2_script$V,
  render$V,
  staticRenderFns$V,
  false,
  __vue2_injectStyles$V,
  null,
  null,
  null
);

function __vue2_injectStyles$V (context) {
  for(let o in __cssModules$V){
    this[o] = __cssModules$V[o];
  }
}

var HomeViewContainer = /*#__PURE__*/(function () { return __component__$V.exports })();

class Application extends ApiModel {

	name = "";
	client_id = "";
	client_secret = "";
	redirect_uris = "";
	scopes = [];
	response_types = {};
	request_consent = false;
	reuse_consent = false;
	enabled = false;
	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id 
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	async list() {
		return await interlock_backend.call('application/list')
	}

	async oidc_well_known() {
		return await interlock_backend.call('application/oidc_well_known')
	}

	async insert(data) {
		return await interlock_backend.call('application/insert', data)
	}

	async delete(data) {
		return await interlock_backend.call('application/delete', data)
	}

	async fetch(id) {
		return await interlock_backend.call('application/fetch', id)
	}

	async update(data) {
		return await interlock_backend.call('application/update', data)
	}
}

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

function calculateCUITVerifierDigit(cuitNum) {
  var validateSum = 0;
  var cuitRev = cuitNum.toString().slice(0, -1).split('').reverse().join(''); // 6480780402
  var currentSeriesDigit = 2;

  for (let currentDigitIndex = 0; currentDigitIndex < cuitRev.length; currentDigitIndex++) {
    var currentDigit = parseInt(cuitRev.substring(currentDigitIndex, currentDigitIndex + 1));
    var seriesResult = currentDigit * currentSeriesDigit;
    validateSum += seriesResult;

    if (currentSeriesDigit < 7)
      currentSeriesDigit++;
    else
      currentSeriesDigit = 2;
  }

  var validateModEleven = validateSum % 11;
  return validateModEleven;
}

function validateIPv4Address(v) {
  return !v || /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-4]|2[0-4][0-9]|[1]?[0-9][0-9]?)$/.test(v) || i18n.t("error.validation.ipv4Address")
}

/**
 * 
 * @param {string} v 
 * @param {boolean} brackets 
 * @returns true || i18n string
 */
function validateIPv6Address(v, brackets = false) {
  var ipv6_array;
  var regex_ipv6 = /^[0-9a-fA-F]{0,4}:([0-9a-fA-F]{0,4}:){1,6}[0-9a-fA-F]{1,4}$/;
  var regex_ipv6_ambiguity = /^.*::.*(::.*){1,}$/;
  ipv6_array = v.split(":");

  // URI Brackets Check
  if (brackets === true) {
    regex_ipv6 = /^\[{0,1}[0-9a-fA-F]{0,4}:([0-9a-fA-F]{0,4}:){1,6}[0-9a-fA-F]{1,4}\]{0,1}$/;
    if (!v.includes("[") || !v.includes("]"))
      return i18n.t("error.validation.ipv6AddressUri")
  }

  // Basic REGEX Check
  if (!regex_ipv6.test(v))
    return i18n.t("error.validation.ipv6Address")

  // Length Check
  if (ipv6_array.length > 8 || (ipv6_array.length <= 7 && !v.includes("::")))
    return i18n.t("error.validation.ipv6AddressLength")

  // Ambiguity Check
  if (regex_ipv6_ambiguity.test(v))
    return i18n.t("error.validation.ipv6AddressAmbiguous")

  return true
}

/**
 * 
 * @param {string} v 
 * @param {boolean} uri 
 * @returns true || i18n string
 */
function validateIPAddress(v, uri = false) {
  if (/^.*[a-fA-F].*$/.test(v) || v.includes("[") || v.includes("]"))
    return validateIPv6Address(v, uri)
  return validateIPv4Address(v)
}

const validationMixin = {
  methods: {
    // * ------------------------------ Individual REGEX Input Rules ------------------------------ * //
    inputRulesRequired: (v) => (v != null && v != undefined && v.length != 0) || i18n.t("error.validation.fieldRequired"),
    inputRulesAboveZero: (v) => (parseInt(v) > 0) || i18n.t("error.validation.aboveZero"),
    inputRulesBelow10000: (v) => (parseInt(v) < 10000) || i18n.t("error.validation.below10000"),
    inputRulesLetters: (v) => !v || /^[üöñóúíáéa-zA-Z ]{0,}$/.test(v) || i18n.t("error.validation.alphabetic"),
    inputRulesLettersStrict: (v) => !v || /^[a-zA-Z ]{0,}$/.test(v) || i18n.t("error.validation.alphabetic"),
    inputRulesLettersStrictUnderscore: (v) => !v || /^[a-zA-Z_ ]{0,}$/.test(v) || i18n.t("error.validation.alphabetic"),
    inputRulesCountry: (v) => !v || /^[a-zA-Z'\s]{0,}$/.test(v) || i18n.t("error.validation.alphabetic"),
    inputRulesNumbers: (v) => !v || /^[0-9.]{0,}$/.test(v) || i18n.t("error.validation.numeric"),
    inputRulesMax4: (v) => !v || /^.{1,4}$/.test(v) || i18n.t("error.validation.max4"),
    inputRulesMax6: (v) => !v || /^.{1,6}$/.test(v) || i18n.t("error.validation.max6"),
    inputRulesMax8: (v) => !v || /^.{1,8}$/.test(v) || i18n.t("error.validation.max8"),
    inputRulesMax255: (v) => !v || /^.{1,255}$/.test(v) || i18n.t("error.validation.max255"),
    inputRulesInt32: (v) => !v || /[0-9]{1,10}$/.test(v) && v < 4294967296 || i18n.t("error.validation.int32"),
    inputRulesNoDoubleQuotes: (v) => !v || /^[^"]+$/.test(v) || i18n.t("error.validation.doubleQuotes"),
    inputRulesNoSingleQuotes: (v) => !v || /^[^']+$/.test(v) || i18n.t("error.validation.singleQuotes"),
    inputRulesalphaNumericSpaces: (v) => !v || /^[üöñóúíáéa-z0-9]+[üöñóúíáéa-z0-9\s]+$/i.test(v) || i18n.t("error.validation.alphaNumericSpaces"),
    inputRulesalphaNumericSpecial: (v) => !v || /^[üöñóúíáéa-z0-9]+[?¿!@üöñóúíáéa-z0-9,.\s_-]+$/i.test(v) || i18n.t("error.validation.alphaNumericSpecial"),
    inputRulesalphaNumericPassword: (v) => !v || /^[!@#$%&*()üöñóúíáéa-z0-9]+([!@#$%&*()üöñóúíáéa-z0-9,._-]{7,})+$/i.test(v) || i18n.t("error.validation.alphaNumericPassword"),
    inputRulesalphaNumericSpecialUsername: (v) => !v || /^[a-z0-9]+([a-z0-9_-]{1,})+$/i.test(v) || i18n.t("error.validation.alphaNumericSpecialUsername"),
    inputRulesalphaNumericSpecialCN: (v) => !v || /^[a-z0-9]+([a-z0-9_-\s]{1,})+$/i.test(v) || i18n.t("error.validation.alphaNumericSpecial"),
    inputRulesalphaNumericSpecialName: (v) => !v || /^[a-z0-9]+([a-z0-9_-\s]{1,})+$/i.test(v) || i18n.t("error.validation.alphaNumericSpecial"),

    // ASCII Source
    // https://stackoverflow.com/questions/14313183/javascript-regex-how-do-i-check-if-the-string-is-ascii-only
    inputRulesFullASCIISet: (v) => !v || /^[\x20-\x7E]*$/.test(v) || i18n.t("error.validation.ascii"),

    inputRulesDN: (v) => !v || /^(?:[A-Za-z][\w-]*|\d+(?:\.\d+)*)=(?:#(?:[\dA-Fa-f]{2})+|(?:[^,=+<>#;\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*|"(?:[^\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*")(?:\+(?:[A-Za-z][\w-]*|\d+(?:\.\d+)*)=(?:#(?:[\dA-Fa-f]{2})+|(?:[^,=+<>#;\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*|"(?:[^\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*"))*(?:,(?:[A-Za-z][\w-]*|\d+(?:\.\d+)*)=(?:#(?:[\dA-Fa-f]{2})+|(?:[^,=+<>#;\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*|"(?:[^\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*")(?:\+(?:[A-Za-z][\w-]*|\d+(?:\.\d+)*)=(?:#(?:[\dA-Fa-f]{2})+|(?:[^,=+<>#;\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*|"(?:[^\\"]|\\[,=+<>#;\\"]|\\[\dA-Fa-f]{2})*"))*)*$/i.test(v) || i18n.t("error.validation.distinguishedName"),
    inputRulesDomain: (v) => !v || /^((?:http(?:s){0,5}(:\/\/){0,1}){0,1}(?:[a-zA-Z0-9-_.]){2,61}(?:\.[a-zA-Z]{2,})+)?$/.test(v) || i18n.t("error.validation.domain"),
    inputRulesEndpoint: (v) => !v || /^http(?:s):[/]{2}([a-zA-Z0-9-_.]){2,63}(?:\.[a-zA-Z]{2,})+(?:\:[0-9]{1,5})?([/a-zA-Z0-9-_.])+$/.test(v) || i18n.t("error.validation.endpoint"),
    inputRulesDomainCanonical: (v) => !v || /^(((?:[a-zA-Z0-9-_.]){2,61}(?:\.[a-zA-Z]{2,})+|(?:[a-zA-Z0-9-_]){2,63}))\.$/.test(v) || i18n.t("error.validation.domainCanonical"),
    inputRulesDomainNonTLD: (v) => !v || /^(((?:[a-zA-Z0-9-_.]){2,61}(?:\.[a-zA-Z]{2,})+|(?:[a-zA-Z0-9-_]){2,64}))?$/.test(v) || i18n.t("error.validation.domain"),
    inputRulesDomainRoot: (v) => !v || /^(((?:[a-zA-Z0-9-_.]){2,61}(?:\.[a-zA-Z]{2,})+|(?:[a-zA-Z0-9-_]){2,64})|[@]{1})?$/.test(v) || i18n.t("error.validation.domainRoot"),
    inputRulesEmail: (v) => !v || /^([a-zA-Z0-9._-]{2,64})@(?:[a-zA-Z0-9-\\.]){2,61}(?:\.[a-zA-Z]{2,})+$/.test(v) || i18n.t("error.validation.email"),
    inputRulesUSN: (v) => !v || /^([a-zA-Z0-9._-]{2,64})@(?:[a-zA-Z0-9-\\.]){2,61}((?:[a-zA-Z0-9-]){2,61})+$/.test(v) || i18n.t("error.validation.usn"),
    // inputRulesIPv4: (v) => !v || /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-4]|2[0-4][0-9]|[1]?[0-9][0-9]?)$/.test(v) || i18n.t("error.validation.ipv4Address"),
    // inputRulesIPv6: (v) => !v || /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(v) || i18n.t("error.validation.ipv6Address"),
    inputRulesREALM: (v) => !v || /^[A-Z]{1,15}$/.test(v) || i18n.t("error.validation.realm"),
    inputRulesPORT: (v) => !v || /^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$/.test(v) || i18n.t("error.validation.ldapURI_PORT"),
    inputRuleTOTP: (v) => !v || /^[0-9]{6}$/.test(v) || i18n.t("error.validation.totpLength"),

    // Phone Regex Rules
    //inputRulesPhone: (v) => !v || /^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/.test(v) || /.+[0-9]{2}[0-9]{1,2}[0-9]{2}[0-9]{4}[0-9]{4}/.test(v) || i18n.t("error.validation.phone"),
    inputRulesPhone: (v) => !v || /^\+?[\d-]+$/.test(v) || i18n.t("error.validation.phone"), // Basic phone validation (Has a plus and digits?)
    inputRulesPhone_ext: (v) => {
      var message = true;
      if (v &&
        (
          !/^\+54(\s|-)?9?(\s|-)?11(\s|-)?[0-9]{4}(\s|-)?[0-9]{4}$/.test(v) && // +54 9 11 0000 0000
          !/^\+54(\s|-)?9?(\s|-)?(2[0-9]{2}|3[0-9]{2})(\s|-)?[0-9]{3,4}(\s|-)?[0-9]{4}$/.test(v) && // +54 9 2xx 000(0) 0000
          !/^\+54(\s|-)?9?(\s|-)?(2[0-9]{3}|3[0-9]{3})(\s|-)?[0-9]{3}(\s|-)?[0-9]{3}$/.test(v)  // +54 9 2xxx 000 000
        )
      ) {
        message = i18n.t("error.validation.phone");
      }
      return message;
    },

    inputRulesCBU: (v) => {
      var message = true;
      if (v && !/^[0-9]{22}$/.test(v)) {
        message = i18n.t("error.validation.cbu");
      }
      return message;
    },

    inputRulesIPv4: (v) => {
      return validateIPv4Address(v)
    },

    inputRulesIPv6: (v) => {
      return validateIPv6Address(v)
    },

    inputRulesIPv6Brackets: (v) => {
      return validateIPv6Address(v, true)
    },

    inputRulesIP: (v) => {
      return validateIPAddress(v)
    },

    inputRulesIP_URI: (v) => {
      return validateIPAddress(v, true)
    },

    // inputRulesCUITFormat: (v) => !v || /(^([0-9]{2})-([0-9]{8})-([0-9]{1}))|(^[0-9]{11})$/i.test(v) || i18n.t("error.validation.cuitFormat"),
    inputRulesDNIMatchesCUIT: (cuit, dni, compareCuitAndDNI) => {
      if (cuit && !/(^([0-9]{2})-([0-9]{8})-([0-9]{1}))|(^[0-9]{11})$/i.test(cuit)) {
        return i18n.t("error.validation.cuitFormat");
      }

      var cuitNum = cuit.replace(/-/g, ""); // 20408708460
      var cuitPrefix = parseInt(String(cuitNum.substr(0, 2)));
      var cuitMiddle = parseInt(String(cuitNum.substr(2, 8)));
      var cuitVerifDigit = parseInt(String(cuitNum.substr(-1))); // 2040870846

      var validateModEleven = calculateCUITVerifierDigit(cuitNum);
      var elevenMinus = 11 - validateModEleven;
      var result = elevenMinus;

      switch (elevenMinus) {
        case 11:
          result = 0;
          break;
        case 10:
          result = 1;
          break;
        case 0:
          if (cuitPrefix == 20 || cuitPrefix == 27 || cuitPrefix == 24) {
            cuitPrefix = 23;
            cuitNum = cuitPrefix + cuitMiddle + cuitVerifDigit;
            validateModEleven = calculateCUITVerifierDigit(cuitNum);
            elevenMinus = 11 - validateModEleven;
            result = elevenMinus;
          } else if (cuitPrefix == 30 || cuitPrefix == 34) {
            cuitPrefix = 33;
            cuitNum = cuitPrefix + cuitMiddle + cuitVerifDigit;
            validateModEleven = calculateCUITVerifierDigit(cuitNum);
            elevenMinus = 11 - validateModEleven;
            result = elevenMinus;
          }
          break;
        default:
          result = elevenMinus;
          break;
      }

      if (result != cuitVerifDigit)
        return i18n.t("error.validation.cuitFormat");

      if (compareCuitAndDNI == true) {
        if (cuitPrefix + dni + cuitVerifDigit != cuitNum) {
          return i18n.t("error.validation.dniNotInCuit");
        }
      }
      return true
    },

    /**
     * fieldRules(v, fieldName, isRequired)
     * 
     * @param v Field value to validate - String | Resource
     * @param fieldName Field class type defined in function switch - String
     * @param isRequired Whether the field is required or not - Boolean Flag [true | false]
     *
     * fieldName naming convention: class + field
     * Example: Generic Email => ge_email
     * Example: Customer Email => cu_email
    */
    fieldRules(v, fieldName, isRequired) {
      var message = true;
      var rules = [];
      var v_array = [];

      if (fieldName == null || fieldName == undefined || fieldName.length == 0) {
        console.log("fieldRules(): fieldName is not set.");
        return "fieldRules(): fieldName is not set."
      }

      // Adds required input Rule if it's passed from parameter
      if (isRequired == true || (isRequired != null && isRequired.length > 0)) {
        // console.log(fieldName+' is required')
        rules.push(this.inputRulesRequired);
      }

      // ----------------- Centralized rule management for input field types ----------------- //
      // * ------------------------------ Add your rules here ------------------------------ * //
      switch (fieldName) {
        // Generic Field Rules
        case "ge_lettersStrictUnderscore": // Generic
          rules.push(this.inputRulesLettersStrictUnderscore);
          break;
        case "ge_lettersStrict": // Generic
          rules.push(this.inputRulesLettersStrict);
          break;
        case "ge_numbers": // Generic INT Field
          rules.push(this.inputRulesNumbers);
          break;
        case "ge_name": // Generic Name Field
          rules.push(this.inputRulesalphaNumericSpecialName);
          break;
        case "ge_cn": // Generic Common Name
          rules.push(this.inputRulesalphaNumericSpecialCN);
          break;
        case "ge_integer": // Generic Integer Field
          rules.push(this.inputRulesAboveZero);
          break;
        case "ge_int32":
          rules.push(this.inputRulesInt32);
          break;
        case "ge_username": // Generic Username Field
          rules.push(this.inputRulesalphaNumericSpecialUsername);
          break;
        case "ge_password": // Generic Password Field
          rules.push(this.inputRulesalphaNumericPassword);
          break;
        case "ldap_dn": // LDAP Distinguished Name validator
          rules.push(this.inputRulesDN);
          break;
        case "net_ipv4": // IPv4 Validation
          rules.push(this.inputRulesIPv4);
          break;
        case "net_ipv6": // IPv6 Validation
          rules.push(this.inputRulesIPv6);
          break;
        case "net_ip_uri": // IPv4/6 Validation (IPv6 with brackets)
          rules.push(this.inputRulesIP_URI);
          break;
        case "net_ip": // IPv4/6 Validation
          rules.push(this.inputRulesIP);
          break;
        case "net_port": // LDAP Realm validator
          rules.push(this.inputRulesPORT);
          break;
        case "net_domain_canonical": // LDAP Domain validator
          rules.push(this.inputRulesDomainCanonical);
          break;
        case "ldap_realm": // LDAP Realm validator
          rules.push(this.inputRulesREALM);
          break;
        case "ldap_website": // LDAP Domain validator
          rules.push(this.inputRulesDomainNonTLD);
          break;
        case "ldap_usn": // LDAP User Principal Name validator
          rules.push(this.inputRulesUSN);
          break;
        case "ge_message": // Generic Name Field
          rules.push(this.inputRulesalphaNumericSpecial);
          break;
        case "ge_topic": // Generic Name Field
          rules.push(this.inputRulesalphaNumericSpecial);
          break;
        case "ge_email": // E-mail
        case "ge_mail":
          rules.push(this.inputRulesEmail);
          break;
        case "ge_fiscal_number": // CUIT
          rules.push(this.inputRulesDNIMatchesCUIT);
          break;
        case "ge_phone":
          rules.push(this.inputRulesPhone);
          break;
        case "ge_phone_intl":
          rules.push(this.inputRulesPhone);
          break;
        case "ge_website":
          rules.push(this.inputRulesDomain);
          break;
        case "ge_endpoint":
          rules.push(this.inputRulesEndpoint);
          break;
        case "ge_address_street": // Address Street
          rules.push(this.inputRulesalphaNumericSpecial);
          break;
        case "ge_price":
        case "ge_address_number": // Address Number
          rules.push(this.inputRulesNumbers);
          break;
        case "ge_address_floor": // Address Floor
          rules.push(this.inputRulesalphaNumericSpaces, this.inputRulesMax4);
          break;
        case "ge_address_apartment": // Address Apartment
          rules.push(this.inputRulesalphaNumericSpaces, this.inputRulesMax6);
          break;
        case "ge_address_postal_code": // Address Postal Code
          rules.push(this.inputRulesalphaNumericSpaces, this.inputRulesMax8);
          break;
        case "ge_address_city": // Address City
          rules.push(this.inputRulesalphaNumericSpecial);
          break;
        case "ge_state": // State
          rules.push(this.inputRulesalphaNumericSpecial);
          break;
        case "ge_type":
          rules.push(this.inputRulesLetters);
          break;
        case "ge_country": // Country
          rules.push(this.inputRulesCountry);
          break;
        case "ge_ascii": // ASCII Only
          rules.push(this.inputRulesFullASCIISet);
          break;
        case "dns_stringData": // StringData
          rules.push(this.inputRulesFullASCIISet, this.inputRulesNoDoubleQuotes, this.inputRulesMax255);
          break;
        case "dns_root": // DNS Root Validation
          rules.push(this.inputRulesDomainRoot);
          break;
        case "set_log_max": // DNS Root Validation
          rules.push(this.inputRulesAboveZero, this.inputRulesBelow10000, this.inputRulesNumbers);
          break;
        case "auth_totp":
          rules.push(this.inputRulesNumbers, this.inputRuleTOTP);
          break;
        case "auth_recovery":
          rules.push(this.inputRulesalphaNumericSpecialCN);
          break;
        case "ge_app_name":
          rules.push(this.inputRulesalphaNumericSpecialName);
      }

      // For every rule in rules array...
      for (var rule in rules) {
        try {
          // If the rule is inputRules Required
          if (rule == this.inputRulesRequired) {
            var val = Array.isArray(v) ? v[0] : v;
            message = rules[rule](val);
          }
          // Every other rule
          else {
            // If an array of values is passed to the input rule - This was necessary to fix undefined / null errors
            if (Array.isArray(v)) {
              v_array = [...(v || [])];
              for (let index = 0; index < v_array.length; index++) {
                if (!v_array[index])
                  v_array[index] = '';
              }
              if (rules[rule](...v_array) != true && message == true)
                message = rules[rule](...v_array);
            }
            // If a single value is passed to the input rule do the normal thing
            else {
              if (!v)
                v = '';
              if (rules[rule](v) != true && message == true)
                message = rules[rule](v);
            }
          }
        } catch (error) {
          console.log(rule);
          console.error(error);
        }
      }
      return message;
    },
  }
};

// Vuelidate Documentation - https://vuelidate.js.org/#sub-regex-based-validator
// Domain validation - https://stackoverflow.com/questions/26093545/how-to-validate-domain-name-using-regex/38578855
// Original Regex: 
// ^(?:(?:(?:[a-zA-z\-]+)\:\/{1,3})?(?:[a-zA-Z0-9])(?:[a-zA-Z0-9\-\.]){1,61}(?:\.[a-zA-Z]{2,})+|\[(?:(?:(?:[a-fA-F0-9]){1,4})(?::(?:[a-fA-F0-9]){1,4}){7}|::1|::)\]|(?:(?:[0-9]{1,3})(?:\.[0-9]{1,3}){3}))(?:\:[0-9]{1,5})?$

// INTERLOCK IS LICENSED UNDER GNU AGPLv3
// ORIGINAL PROJECT CREATED BY DYLAN BLANQUÉ AND BR CONSULTING S.R.L.
// File: utilsMixin.js

const utilsMixin = {
    methods: {
        getKeyByValue(object, value) {
            return Object.keys(object).find(key => object[key] === value);
        },
        toCamelCase(e) {
            return e.replace(/_([a-z])/g, (g) => g[1].toUpperCase());
        },
        toSnakeCase(e) {
            if (e.toLowerCase() === e) {
                return e;
            }
            return e.match(/([A-Z])/g).reduce(
                (str, c) => str.replace(new RegExp(c), '_' + c.toLowerCase()),
                e
            )
                .substring((e.slice(0, 1).match(/([A-Z])/g)) ? 1 : 0);
        },
        toPropCase(e) {
            if (e.toLowerCase() === e) {
                return e;
            }
            return e.match(/([A-Z])/g).reduce(
                (str, c) => str.replace(new RegExp(c), '-' + c.toLowerCase()),
                e
            )
                .substring((e.slice(0, 1).match(/([A-Z])/g)) ? 1 : 0);
        },
        // ----------------------------- LDAP Permissions ----------------------------- //
        calcEnabledPermissions(permissionList) {
            let result = 0;
            if (!permissionList) return result
            for (const [key] of Object.entries(permissionList)) {
                if (permissionList[key].value == true) {
                    result += permissionList[key].int;
                }
            }
            return result
        },
        getEnabledPermissions(permissionList) {
            let result = [];
            if (!permissionList) return result
            for (const [key] of Object.entries(permissionList)) {
                if (!(key in permissionList)) {
                    console.error(`${key} not in Permission list.`);
                    continue
                }
                if (permissionList[key].value == true)
                    result.push(key);
            }
            return result
        },
        // ---------------------------------------------------------------------------- //
        arraysAreEqual: function (a, b, sort) {
            let a_clone = structuredClone(a);
            if (sort == true) a_clone.sort();
            let b_clone = structuredClone(b);
            if (sort == true) b_clone.sort();
            return JSON.stringify(a_clone) === JSON.stringify(b_clone)
        },
        isNumeric(str) {
            if (typeof str != "string") return false // we only process strings!  
            return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
                !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
        },
        isNumber: function (evt) {
            // TODO - Analyze Clipboard data besides standard keypress events
            evt = (evt) ? evt : window.event;
            let charCode = (evt.which) ? evt.which : evt.keyCode;
            // Writing characters
            if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
                evt.preventDefault();
            } else if (evt.clipboardData != undefined && isNaN(evt.clipboardData.getData('Text'))) {
                evt.preventDefault();
            } else {
                return true;
            }
        },
        getResponseErrorCode(errorData) {
            let codeToUse = "ERR_UNKNOWN_SHORT";
            if (errorData === undefined)
                console.log("getResponseErrorCode(): No error data passed.");

            if (typeof errorData === "string")
                return errorData

            if (typeof errorData === "object") {
                if (errorData.response &&
                    errorData.response.data != undefined &&
                    errorData.response.data != null &&
                    errorData.response.data instanceof Object) {
                    if ('ldap_response' in errorData.response.data)
                        codeToUse = errorData.response.data.ldap_response.description;
                    else if ('code' in errorData.response.data)
                        codeToUse = errorData.response.data.code;
                }
                else if ('code' in errorData)
                    codeToUse = errorData.code;
                else if ('status_code' in errorData)
                    codeToUse = errorData.status_code;
                else if ('response' in errorData && 'status' in errorData.response)
                    codeToUse = errorData.response.status;
            }

            return (codeToUse)
        },
        getMessageForCode(error) {
            let codeToUse = this.getResponseErrorCode(error);
            let suffix;

            if (codeToUse != undefined && codeToUse != null) {
                if (typeof codeToUse !== 'string')
                    codeToUse = toString(codeToUse);

                if (codeToUse.length < 40)
                    suffix = ` (${codeToUse})`;
                else
                    suffix = ` (${codeToUse.substring(0, 40)}...)`;
            }

            // Attempt to cast to numeric
            if (this.isNumeric(codeToUse))
                codeToUse = Number(codeToUse);
            // OTP ---------------------------------------------------------- //
            if (/^otp_.*/.test(codeToUse))
                return this.$t('error.codes.otp.' + codeToUse)
            // DNS ---------------------------------------------------------- //
            else if (/^dns_.*/.test(codeToUse))
                return this.$t('error.codes.dns.' + codeToUse)
            else if (/^user_.*/.test(codeToUse))
                return this.$t('error.codes.users.' + codeToUse)
            else if (/^ldap_.*/.test(codeToUse))
                return this.$t('error.codes.ldap.' + codeToUse)
            else if (/^group_.*/.test(codeToUse))
                return this.$t('error.codes.groups.' + codeToUse)
            else if (/^setting_.*/.test(codeToUse))
                return this.$t('error.codes.settings.' + codeToUse)
            else if (/^application_.*/.test(codeToUse))
                return this.$t('error.codes.applications.' + codeToUse)
            else if (/^oidc_.*/.test(codeToUse))
                return this.$t('error.codes.oidc.' + codeToUse)
            else
                switch (codeToUse) {
                    case 'ERR_UNKNOWN':
                        return this.$t("error.unknown")
                    case 'ERR_UNKNOWN_SHORT':
                        return this.$t("error.unknown_short")
                    case 'ERR_LDAP_GW':
                        return this.$t('error.codes.ldapGwError')
                    case 400:
                    case 'bad_request':
                    case 'ERR_BAD_REQUEST':
                    case 'data_key_missing':
                        return this.$t('error.codes.400')
                    case 403:
                    case 'permission_denied':
                        return this.$t('error.codes.403')
                    case 406:
                    case 'not_acceptable':
                        return this.$t('error.codes.406')
                    case 500:
                    case 'ERR_SERV_ERROR':
                    case 'ERR_BAD_RESPONSE':
                        return this.$t('error.codes.500')
                    case 'access_token_invalid':
                    case 'refresh_token_expired':
                    case 'unauthorized':
                        return this.$t('error.codes.401')
                    case 'ERR_INVALID_CSV':
                        return this.$t('error.codes.invalidCSV')
                    case 'ERR_INVALID_CSV_HEADERS':
                        return this.$t('error.codes.invalidCSVHeaders')
                    case 'ERR_FILEREADER':
                        return this.$t('error.codes.fileReader')
                    case 409:
                        return this.$t('error.codes.conflict')
                    case 'ERR_NETWORK':
                        return this.$t('error.codes.networkError')
                    case 'namingViolation':
                        return this.$t('error.codes.namingViolation')
                    // Users -------------------------------------------------------- //
                    case 'noUsersInImport':
                        return this.$t('error.codes.users.noUsersInImport')
                    // -------------------------------------------------------------- //
                    case null:
                    case undefined:
                    case "":
                    default:
                        console.log("Unknown Error Code: " + codeToUse);
                        if (codeToUse in this.$t('error.codes'))
                            return this.$t('error.codes.' + codeToUse)
                        else {
                            var msg = this.$t("error.unknown_short");
                            if (suffix != undefined && suffix != null && codeToUse != msg)
                                msg = msg + suffix;
                            return msg
                        }
                }
        },

        // Check if theme is dark
        isThemeDark(vuetify) {
            if (vuetify.theme.dark === true)
                return true;
            return false;
        },
        sortNullLast(items, index, isDesc) {
            items.sort((a, b) => {
                if (a[index] === b[index]) { // equal items sort equally
                    return 0;
                } else if (a[index] === null || a[index] === '') { // nulls sort after anything else
                    return 1;
                } else if (b[index] === null || b[index] === '') {
                    return -1;
                } else if (!isDesc[0]) { // otherwise, if we're ascending, lowest sorts first
                    return a[index] < b[index] ? -1 : 1;
                } else { // if descending, highest sorts first
                    return a[index] < b[index] ? 1 : -1;
                }
            });
            return items;
        },
    }
};

var render$U = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_18,{ref:"ApplicationFormVForm",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-8",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"readonly":!_vm.isBeingEdited && !_vm.isBeingCreated,"dense":"","rules":[this.fieldRules(_vm.localData.name, 'ge_app_name', true)],"label":_vm.$tc('section.applications.attribute.name')},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.localData.name),callback:function ($$v) {_vm.$set(_vm.localData, "name", $$v);},expression:"localData.name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"readonly":!_vm.isBeingEdited && !_vm.isBeingCreated,"dense":"","rules":[this.fieldRules(_vm.localData.redirect_uris, 'ge_endpoint', true)],"label":_vm.$tc('section.applications.attribute.redirect_uris'),"hint":_vm.$t('section.applications.dialog.create.redirectUriPlaceholder')},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.localData.redirect_uris),callback:function ($$v) {_vm.$set(_vm.localData, "redirect_uris", $$v);},expression:"localData.redirect_uris"}})],1),(_vm.isBeingCreated !== true)?_c(__unplugin_components_88,{attrs:{"cols":"8"}},[_c(__unplugin_components_91,{attrs:{"no-gutters":""}},[_c(__unplugin_components_89,{attrs:{"readonly":!_vm.isBeingEdited && !_vm.isBeingCreated,"dense":"","readonly":"","label":_vm.$tc('section.applications.attribute.client_id')},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.localData.client_id),callback:function ($$v) {_vm.$set(_vm.localData, "client_id", $$v);},expression:"localData.client_id"}}),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"small":"","icon":"","color":"primary"},on:{"click":[function($event){return _vm.copyText(_vm.localData.client_id)},function($event){$event.stopPropagation();}]}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,false,1336294657)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.applications.dialog.update.copyId"))+" ")])])],1)],1):_vm._e(),(_vm.isBeingCreated !== true)?_c(__unplugin_components_88,{attrs:{"cols":"8"}},[_c(__unplugin_components_91,{attrs:{"no-gutters":""}},[_c(__unplugin_components_89,{attrs:{"type":_vm.hideSecret ? 'password' : 'text',"append-icon":_vm.hideSecret ? 'mdi-eye' : 'mdi-eye-off',"prepend-inner-icon":"mdi-lock","readonly":"","dense":"","label":_vm.$tc('section.applications.attribute.client_secret')},on:{"click:append":function () { return (_vm.hideSecret = !_vm.hideSecret); },"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.localData.client_secret),callback:function ($$v) {_vm.$set(_vm.localData, "client_secret", $$v);},expression:"localData.client_secret"}}),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"small":"","icon":"","color":"primary"},on:{"click":[function($event){return _vm.copyText(_vm.localData.client_secret)},function($event){$event.stopPropagation();}]}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,false,210064410)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.applications.dialog.update.copySecret"))+" ")])])],1)],1):_vm._e()],1),_c(__unplugin_components_91,{attrs:{"justify":"center","align":"center","no-gutters":""}},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0 mx-2",attrs:{"on-icon":"mdi-checkbox-marked","color":"primary","disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"label":_vm.$t('words.enabled'),"dense":""},model:{value:(_vm.localData.enabled),callback:function ($$v) {_vm.$set(_vm.localData, "enabled", $$v);},expression:"localData.enabled"}})],1),_c(__unplugin_components_91,{attrs:{"justify":"center","align":"center","no-gutters":""}},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0 mx-2",attrs:{"on-icon":"mdi-checkbox-marked","color":"primary","disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"label":_vm.$t('section.applications.attribute.require_consent'),"dense":""},model:{value:(_vm.localData.require_consent),callback:function ($$v) {_vm.$set(_vm.localData, "require_consent", $$v);},expression:"localData.require_consent"}}),_c(__unplugin_components_28,{staticClass:"ma-0 pa-0 mx-2",attrs:{"on-icon":"mdi-checkbox-marked","color":"primary","disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"label":_vm.$t('section.applications.attribute.reuse_consent'),"dense":""},model:{value:(_vm.localData.reuse_consent),callback:function ($$v) {_vm.$set(_vm.localData, "reuse_consent", $$v);},expression:"localData.reuse_consent"}})],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-12",attrs:{"justify":"center","align":"stretch"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 ma-2",attrs:{"cols":"12","md":"5"}},[_c(__unplugin_components_76,{staticClass:"pa-4",attrs:{"outlined":"","width":"100%","height":"100%"}},[_c(VCardTitle,[_c(__unplugin_components_91,{attrs:{"no-gutters":"","justify":"center","align":"center"}},[_vm._v(" Scopes ")])],1),_c(VCardText,[_c(__unplugin_components_91,{attrs:{"no-gutters":""}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_4$1,{attrs:{"flat":"","dense":"","outlined":""}},[_c(__unplugin_components_8,[_c(__unplugin_components_9$2,[_c(VListItemContent,[_c(__unplugin_components_89,{attrs:{"dense":"","disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"rules":[this.fieldRules(_vm.scopeToAdd, 'ge_lettersStrict', false)],"label":_vm.$tc('section.applications.attribute.addScope')},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.addScopeValue.apply(null, arguments)}},model:{value:(_vm.scopeToAdd),callback:function ($$v) {_vm.scopeToAdd=$$v;},expression:"scopeToAdd"}})],1),_c(__unplugin_components_10$2,[_c(__unplugin_components_94,{staticClass:"mb-2",attrs:{"color":"primary","icon":"","disabled":_vm.addScopeIsEmpty() || (!_vm.isBeingEdited && !_vm.isBeingCreated)},on:{"click":_vm.addScopeValue}},[_c(__unplugin_components_95,[_vm._v("mdi-plus")])],1)],1)],1),_vm._l((_vm.localData.scopes),function(scope){return _c(__unplugin_components_9$2,{key:scope,attrs:{"dense":""}},[_c(VListItemContent,[_c(VListItemTitle,[_vm._v(_vm._s(scope))])],1),_c(__unplugin_components_10$2,[_c(__unplugin_components_94,{attrs:{"small":"","icon":"","disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"color":"error"},on:{"click":function($event){return _vm.removeScopeValue(scope)}}},[_c(__unplugin_components_95,[_vm._v("mdi-minus")])],1)],1)],1)})],2)],1)],1)],1)],1)],1)],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 ma-2",attrs:{"cols":"12","md":"5"}},[_c(__unplugin_components_76,{staticClass:"pa-4",attrs:{"outlined":"","width":"100%","height":"100%"}},[_c(VCardTitle,[_c(__unplugin_components_91,{attrs:{"no-gutters":"","justify":"center","align":"center"}},[_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"color":"primary"}},[_vm._v("mdi-key-chain-variant")]),_vm._v(" Response Types ")],1)],1),_c(VCardText,[_c(__unplugin_components_91,{attrs:{"no-gutters":""}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_4$1,{attrs:{"flat":"","dense":"","outlined":""}},[_c(__unplugin_components_8,_vm._l((_vm.localData.response_types),function(value,key){return _c(__unplugin_components_9$2,{key:key,attrs:{"disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"dense":""},on:{"click":function($event){return _vm.toggleResponseType(key)}}},[_c(VListItemContent,[_c(VListItemTitle,[_vm._v(_vm._s(key))])],1),_c(__unplugin_components_10$2,[_c(__unplugin_components_28,{attrs:{"on-icon":"mdi-checkbox-marked","color":"primary","disabled":!_vm.isBeingEdited && !_vm.isBeingCreated,"dense":"","readonly":"","input-value":value}})],1)],1)}),1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)};
var staticRenderFns$U = [];

/* unplugin-vue-components disabled *///

const __vue2_script$U = {
	name: "ApplicationForm",
	mixins: [utilsMixin, validationMixin],
	data() {
		return {
			hideSecret: true,
			localData: {},
			scopeToAdd: "",
			loading: false,
			loadingColor: "primary",
			error: false,
			errorMsg: "",
			submitted: false
		}
	},
	props: {
		applicationObject: Object,
		isBeingCreated: {
			type: Boolean,
			default: false
		},
		isBeingEdited: {
			type: Boolean,
			default: false
		}
	},
	watch: {
		localData: {
			deep: true,
			handler: function (v) {
				this.update();
			},
		}
	},
	methods: {
		validate() {
			return this.$refs.ApplicationFormVForm.validate();
		},
		resetValidation() {
			return this.$refs.ApplicationFormVForm.resetValidation();
		},
		toggleResponseType(key) {
			this.localData.response_types[key] = !this.localData.response_types[key];
			this.update();
			this.$forceUpdate();
		},
		copyText(textString) {
			navigator.clipboard.writeText(textString);
		},
		sync() {
			this.localData = Object.assign({}, this.applicationObject);
		},
		update() {
			this.$emit("update", this.localData);
		},
		nextStep() {
			this.$emit("nextStep");
		},
		addScopeIsEmpty() {
			return (
				this.scopeToAdd.length === 0 ||
				this.scopeToAdd === undefined ||
				this.scopeToAdd === null
			)
		},
		addScopeValue() {
			if (this.addScopeIsEmpty())
				return
			if (!this.localData.scopes.includes(this.scopeToAdd))
				this.localData.scopes.push(this.scopeToAdd);
			this.scopeToAdd = "";
			this.update();
		},
		removeScopeValue(v) {
			const index = this.localData.scopes.indexOf(v);
			if (index >= 0) {
				this.localData.scopes.splice(index, 1);
			}
			this.update();
		},
	},
};
const __cssModules$U = {};
var __component__$U = /*#__PURE__*/normalizeComponent(
  __vue2_script$U,
  render$U,
  staticRenderFns$U,
  false,
  __vue2_injectStyles$U,
  null,
  null,
  null
);

function __vue2_injectStyles$U (context) {
  for(let o in __cssModules$U){
    this[o] = __cssModules$U[o];
  }
}

var ApplicationForm = /*#__PURE__*/(function () { return __component__$U.exports })();

var render$T = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("section.applications.dialog.create.header")))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VExpandTransition,[_c('div',[_c(__unplugin_components_7,{model:{value:(_vm.createStage),callback:function ($$v) {_vm.createStage=$$v;},expression:"createStage"}},[_c(VStepperHeader,{staticClass:"px-16"},[_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 1,"step":"1"}},[_vm._v(" "+_vm._s(_vm.$vuetify.breakpoint.mdAndUp ? _vm.$t('section.applications.dialog.create.step1') : '')+" ")]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 1 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 2,"step":"2"}},[_vm._v(" "+_vm._s(_vm.$vuetify.breakpoint.mdAndUp ? _vm.$t('section.applications.dialog.create.step2') : '')+" ")]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 2 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":!_vm.loading && _vm.success,"step":"3"}},[_vm._v(" "+_vm._s(_vm.$vuetify.breakpoint.mdAndUp ? _vm.$t('section.applications.dialog.create.step3') : '')+" ")])],1),_c(VStepperItems,[_c(__unplugin_components_31,{staticClass:"ma-0 pa-0 pa-4",attrs:{"step":"1"}},[_c(ApplicationForm,{ref:"ApplicationForm",staticClass:"mt-4",attrs:{"applicationObject":_vm.applicationObject,"isBeingEdited":true,"isBeingCreated":true},on:{"update":_vm.updateApplicationData,"nextStep":_vm.nextStep}})],1),_c(__unplugin_components_31,{attrs:{"step":"2"}},[_c(__unplugin_components_91,{staticClass:"pa-12 ma-12",attrs:{"justify":"center","align-content":"center","align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VFabTransition,[_c(__unplugin_components_7$1,{attrs:{"value":"100","color":(this.error === false) ? (_vm.loading ? 'primary' : 'green') : 'red',"indeterminate":_vm.loading,"size":"100","width":"10"}},[_c(VFabTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.loading == false),expression:"loading == false"}]},[(_vm.error == true)?_c(__unplugin_components_95,{attrs:{"size":"82","color":"red"}},[_vm._v(" mdi-close-circle ")]):_c(__unplugin_components_95,{attrs:{"size":"82","color":"green"}},[_vm._v(" mdi-check-circle ")])],1)])],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VSlideYTransition,[(!this.loading && this.loading == false)?_c(__unplugin_components_88,[_c('h3',[_vm._v(" "+_vm._s(this.error ? this.errorMsg : _vm.$t('section.applications.dialog.create.success'))+" ")])]):_vm._e()],1)],1)],1)],1)],1)],1)],1)]),(_vm.$vuetify.breakpoint.smAndDown)?_c(__unplugin_components_46$1,{attrs:{"text":"","color":"red","timeout":"1500","centered":""},model:{value:(_vm.showSnackbar),callback:function ($$v) {_vm.showSnackbar=$$v;},expression:"showSnackbar"}},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")])],1):_vm._e(),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[_c('div',[_c(VSlideXReverseTransition,[(this.error && _vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_40,{staticClass:"mx-2",attrs:{"color":"red","text-color":"white"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.newApplication}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-cached ")]),_vm._v(" "+_vm._s(_vm.$t("actions.reset"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(_vm.createStage > 1 && _vm.createStage < 3)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 pr-4 ma-1",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.prevStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.prevStep.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-left ")]),_vm._v(" "+_vm._s(_vm.$t("actions.back_short"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pl-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.nextStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.create"))+" "),_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-right ")])],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage >= 2 && this.error === false)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.closeDialog(true)},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.done"))+" ")],1):_vm._e()],1)],1)])],1)],1)};
var staticRenderFns$T = [];

/* unplugin-vue-components disabled *///

const __vue2_script$T = {
	name: 'ApplicationCreate',
	components: {
	},
	data() {
		return {
			createStage: 1,
			applicationObject: new Application({}),
			scopeToAdd: "",
			success: false,
			loading: true,
			error: false,
			errorMsg: "",
			valid: false,
			allowRefresh: true,
			showSnackbar: false,
			createStage: 1,
			addObjectClass: "",
		}
	},
	mixins: [
		validationMixin,
		utilsMixin
	],
	props: {
		dialogKey: String
	},
	created() {
		this.newApplication();
	},
	methods: {
		updateApplicationData(newData) {
			this.applicationObject = Object.assign({}, newData);
		},
		async newApplication() {
			this.applicationObject = new Application({});
			await this.applicationObject.oidc_well_known()
				.then(response => {
					this.$refs.ApplicationForm.resetValidation();
					this.applicationObject.name = "";
					this.applicationObject.redirect_uris = "";
					this.applicationObject.scopes = ["openid", "profile", "email", "groups"];
					this.applicationObject.response_types = {};
					Object.values(response.response_types_supported).forEach(rt => {
						this.applicationObject.response_types[rt] = false;
					});
					this.createStage = 1;
					this.success = false;
					this.errorMsg = "";
					this.error = false;
					this.$nextTick(() => {
						// Do deep copy of object for reset
						if (this.applicationObject != undefined && this.applicationObject != null) {
							this.applicationCopy = Object.assign({}, this.applicationObject);
							this.$refs.ApplicationForm.sync();
						}
					});
				})
				.catch(error => {
					console.error(error);
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{
							message: this.errorMsg,
							type: 'error'
						}
					);
					this.loading = false;
					this.loadingColor = 'error';
					this.error = true;
				});
		},
		prevStep() {
			switch (this.createStage) {
				default:
					this.createStage -= 1;
					break;
			}
			this.error = false;
			this.errorMsg = "";
		},
		nextStep() {
			switch (this.createStage) {
				case 1:
					if (this.$refs.ApplicationForm.validate()) {
						this.error = false;
						this.errorMsg = "";
						this.createApplication();
					}
					else {
						// Force snackbar to reappear if error was pre-existent
						if (this.showSnackbar == true)
							this.showSnackbar = false;
						this.showSnackbar = true;
						this.error = true;
						this.errorMsg = this.$t('error.validation.fieldinvalid');
					}
					break;
				default:
					this.createStage += 1;
					break;
			}
		},
		closeDialog(refresh = false) {
			this.$emit('closeDialog', this.dialogKey, refresh);
		},
		async createApplication() {
			this.loading = true;
			this.error = false;
			this.errorMsg = "";
			this.createStage += 1;
			await new Application({}).insert(this.applicationObject)
				.then(response => {
					if (response.status == 200) {
						this.error = false;
						this.errorMsg = "";
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = true;
					} else {
						this.error = true;
						this.errorMsg = this.$t("error.unknown_short");
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = false;
					}
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.success = true;
					this.errorMsg = this.getMessageForCode(error);
				});
		}
	}
};
const __cssModules$T = {};
var __component__$T = /*#__PURE__*/normalizeComponent(
  __vue2_script$T,
  render$T,
  staticRenderFns$T,
  false,
  __vue2_injectStyles$T,
  null,
  null,
  null
);

function __vue2_injectStyles$T (context) {
  for(let o in __cssModules$T){
    this[o] = __cssModules$T[o];
  }
}

var ApplicationCreate = /*#__PURE__*/(function () { return __component__$T.exports })();

var render$S = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_7$1,{class:("ma-0 pa-0 " + _vm.contentClass + " " + _vm.componentClass),attrs:{"color":_vm.loadingColor || _vm.buttonColor,"value":_vm.loadingValue,"indeterminate":_vm.loading || _vm.fetchingData,"size":_vm.dense ? 36 : 38,"width":!_vm.dense ? 7 : 4}},[_c(__unplugin_components_94,{class:_vm.buttonClass,attrs:{"small":_vm.small && !_vm.dense,"x-small":_vm.dense,"color":_vm.buttonColor,"icon":_vm.buttonIcon,"fab":!_vm.buttonIcon,"disabled":_vm.loading || _vm.fetchingData,"elevation":"0","loading":_vm.loading},on:{"click":_vm.emitRefresh},scopedSlots:_vm._u([{key:"loader",fn:function(){return [_c('span',{staticClass:"custom-loader"},[_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor,"size":_vm.dense ? 24 : undefined}},[_vm._v("mdi-cached")])],1)]},proxy:true}])},[_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor,"size":_vm.dense ? 24 : undefined}},[_vm._v(" mdi-refresh ")])],1)],1)],1)};
var staticRenderFns$S = [];

/* unplugin-vue-components disabled *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

const __vue2_script$S = {
	name: 'RefreshButton',
	props: {
		loadingColor: {
			type: String,
			default: undefined
		},
		iconColor: {
			type: String,
			default: 'white'
		},
		buttonColor: {
			type: String,
			default: 'primary'
		},
		buttonClass: {
			type: String,
			default: ''
		},
		buttonIcon: {
			type: Boolean,
			default: false
		},
		small: {
			type: Boolean,
			default: true
		},
		dense: {
			type: Boolean,
			default: false
		},
		componentClass: {
			type: String,
			default: ''
		},
		contentClass: {
			type: String,
			default: ''
		},
		loading: Boolean,
		fetchingData: {
			type: Boolean,
			default: false
		},
		loadingValue: {
			type: Number,
			default: 100
		}
	},
	methods: {
		emitRefresh() {
			this.$emit('refresh');
		}
	},
};
const __cssModules$S = {};
var __component__$S = /*#__PURE__*/normalizeComponent(
  __vue2_script$S,
  render$S,
  staticRenderFns$S,
  false,
  __vue2_injectStyles$S,
  null,
  null,
  null
);

function __vue2_injectStyles$S (context) {
  for(let o in __cssModules$S){
    this[o] = __cssModules$S[o];
  }
}

var RefreshButton = /*#__PURE__*/(function () { return __component__$S.exports })();

var render$R = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VExpandTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.refreshLoading),expression:"!refreshLoading"}]},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.loadingColor,"indeterminate":_vm.refreshLoading || _vm.loading}}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(" "+_vm._s(((_vm.editFlag ? _vm.$t('actions.edit') : _vm.$t('actions.view')) + " " + (_vm.$tc("classes.application", 1))))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"ma-0 pa-0 pt-4"},[_c(ApplicationForm,{ref:"ApplicationForm",attrs:{"applicationObject":_vm.applicationObject,"isBeingEdited":_vm.editFlag},on:{"update":_vm.updateApplicationData}})],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":this.$vuetify.breakpoint.mdAndDown ? 'center' : 'space-between'}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center","justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'end'}},[(_vm.editFlag !== true)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.editApplication}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-pencil ")]),_vm._v(" "+_vm._s(_vm.$t("actions.edit"))+" ")],1):_vm._e(),(_vm.editFlag === true)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.viewApplication}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-eye ")]),_vm._v(" "+_vm._s(_vm.$t("actions.view"))+" ")],1):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"rounded":"","disabled":!_vm.editFlag || _vm.loading},on:{"click":_vm.saveApplication}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-content-save ")]),_vm._v(" "+_vm._s(_vm.$t("actions.save"))+" ")],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"rounded":"","disabled":!_vm.editFlag || _vm.loading},on:{"click":function($event){return _vm.saveApplication(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-exit-to-app ")]),_vm._v(" "+_vm._s(_vm.$t("actions.saveClose"))+" ")],1),_c(RefreshButton,{attrs:{"dense":"","fetching-data":_vm.fetchingData,"loading":_vm.refreshLoading},on:{"refresh":_vm.refreshApplication}})],1)],1)],1)],1)])],1)};
var staticRenderFns$R = [];

/* unplugin-vue-components disabled *///

const __vue2_script$R = {
	name: "ApplicationDialog",
	mixins: [validationMixin, utilsMixin],
	components: {
		RefreshButton,
		ApplicationForm
	},
	data() {
		return {
			hideSecret: true,
			applicationCopy: {},
			scopeToAdd: "",
			loading: false,
			loadingColor: "primary",
			error: false,
			errorMsg: "",
			submitted: false
		}
	},
	props: {
		dialogKey: String,
		editFlag: Boolean,
		applicationObject: Object,
		fetchingData: Boolean,
		refreshLoading: Boolean
	},
	created() {
		this.syncApplication();
	},
	methods: {
		logData() {
			console.log(this.applicationCopy);
			console.log(this.applicationObject);
		},
		resetLoadingStatus() {
			this.loading = false;
			this.error = false;
			this.errorMsg = "";
			this.submitted = false;
		},
		resetApplication() {
			this.resetLoadingStatus();
			if (this.$refs.ApplicationForm != undefined)
				this.$refs.ApplicationForm.resetValidation();
			this.applicationCopy = {};
		},
		updateApplicationData(newData) {
			this.applicationCopy = Object.assign({}, newData);
		},
		syncApplication() {
			this.resetApplication();
			this.applicationCopy = Object.assign({}, this.applicationObject);
			if (this.$refs.ApplicationForm)
				this.$refs.ApplicationForm.sync();
		},
		// Tells the parent view to refresh/fetch the group again
		async refreshApplication() {
			this.loading = true;
			this.$emit('refreshApplication', this.applicationCopy);
			this.loading = false;
			this.loadingColor = 'primary';
		},
		closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
		},
		async saveApplication(closeDialog = false) {
			this.loading = true;
			this.loadingColor = 'primary';

			const excludeKeys = [
				"client_id",
				"client_secret",
			];
			let data = Object.assign({}, this.applicationCopy);
			excludeKeys.forEach(k => {
				delete data[k];
			});

			if (this.$refs.ApplicationForm.validate()) {
				await new Application({}).update(data)
					.then(() => {
						if (closeDialog == true)
							this.closeDialog();
						this.$emit('save', data, closeDialog == true);
						this.loading = false;
						this.loadingColor = 'primary';
					})
					.catch(error => {
						console.error(error);
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification',
							{
								message: this.errorMsg,
								type: 'error'
							}
						);
						this.loading = false;
						this.loadingColor = 'error';
						this.error = true;
					});
			} else {
				this.loading = false;
				this.loadingColor = 'error';
				this.error = true;
			}
		},
		editApplication() {
			this.$emit('editToggle', true);
		},
		viewApplication() {
			this.$emit('editToggle', false);
			this.refreshApplication();
		},
	},
};
const __cssModules$R = {};
var __component__$R = /*#__PURE__*/normalizeComponent(
  __vue2_script$R,
  render$R,
  staticRenderFns$R,
  false,
  __vue2_injectStyles$R,
  null,
  null,
  null
);

function __vue2_injectStyles$R (context) {
  for(let o in __cssModules$R){
    this[o] = __cssModules$R[o];
  }
}

var ApplicationDialog = /*#__PURE__*/(function () { return __component__$R.exports })();

var render$Q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(((_vm.$t('actions.delete')) + " " + (_vm.$tc('classes.application', 1))))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.applications.dialog.delete.message'))+" "),_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.selectedApplication.name + "?")+" ")])])],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)},"click":function($event){return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$Q = [];

/* unplugin-vue-components disabled *///

const __vue2_script$Q = {
	name: "ApplicationDelete",
	mixins: [utilsMixin],
	props: {
		selectedApplication: Object,
		dialogKey: String
	},
	created() {
	},
	methods: {
		async closeDialog(deleteConfirm = false) {
			if (deleteConfirm == true) {
				if (this.selectedApplication == {} || !this.selectedApplication.id || !("id" in this.selectedApplication)) {
					console.error(this.selectedApplication);
					throw new Error("ID Key missing in Application Object.");
				}
				await new Application({}).delete(this.selectedApplication.id)
					.then(response => {
						if (response.data.id == this.selectedApplication.id)
							notificationBus.$emit('createNotification', {
								message: (this.$tc("classes.application", 1) + " " + this.$tc("words.deleted.f", 1)).toUpperCase(),
								type: 'info'
							});
						this.$emit('refresh');
					})
					.catch(error => {
						console.error(error);
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification', {
							message: (this.errorMsg).toUpperCase(),
							type: 'error'
						});
					});
			}
			this.$emit('closeDialog', this.dialogKey);
		},
	}
};
const __cssModules$Q = {};
var __component__$Q = /*#__PURE__*/normalizeComponent(
  __vue2_script$Q,
  render$Q,
  staticRenderFns$Q,
  false,
  __vue2_injectStyles$Q,
  null,
  null,
  null
);

function __vue2_injectStyles$Q (context) {
  for(let o in __cssModules$Q){
    this[o] = __cssModules$Q[o];
  }
}

var ApplicationDelete = /*#__PURE__*/(function () { return __component__$Q.exports })();

var render$P = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_0$2,{staticClass:"py-3 px-2 my-2",attrs:{"headers":_vm.tableData.headers,"items":_vm.tableData.items,"loading":_vm.loading,"footer-props":{
			'items-per-page-options': [10, 25, 50, 100, -1]
		},"sort-by":"name"},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center","justify":"end"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":_vm.listApplicationItems}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"disabled":_vm.loading,"color":"primary"},on:{"click":function($event){return _vm.openDialog('create')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.application', 1))+" ")],1)],1)]},proxy:true},{key:"item.enabled",fn:function(ref){
		var item = ref.item;
return [(item.enabled)?_c(__unplugin_components_42,{attrs:{"color":"red","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","disabled":_vm.loading},on:{"click":function($event){return _vm.toggleApplicationStatus(item, false)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"color":"valid-40-s"}},[_vm._v(" mdi-check ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.clickTo') + " " + _vm.$t('actions.disable') + " " + item.name))])]):(!item.enabled)?_c(__unplugin_components_42,{attrs:{"color":"green","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","disabled":_vm.loading},on:{"click":function($event){return _vm.toggleApplicationStatus(item, true)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"color":"error-60-s"}},[_vm._v(" mdi-close ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.clickTo') + " " + _vm.$t('actions.enable') + " " + item.name))])]):_vm._e()]}},{key:"item.actions",fn:function(ref){
		var item = ref.item;
return [_c(__unplugin_components_91,{staticClass:"my-1",attrs:{"justify":"center"}},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading},on:{"click":function($event){return _vm.fetchApplication(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-eye ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.view')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading},on:{"click":function($event){return _vm.fetchApplication(item, true)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-pencil ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.edit')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading},on:{"click":function($event){return _vm.deleteApplication(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"red"}},[_vm._v(" mdi-delete ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.delete')))])])],1)]}}],null,true),model:{value:(_vm.tableData.selected),callback:function ($$v) {_vm.$set(_vm.tableData, "selected", $$v);},expression:"tableData.selected"}}),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1000px"},model:{value:(_vm.dialogs['create']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'create', $$v);},expression:"dialogs['create']"}},[_c(ApplicationCreate,{ref:"ApplicationCreate",attrs:{"dialogKey":'create'},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.listApplicationItems}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1000px"},model:{value:(_vm.dialogs['update']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'update', $$v);},expression:"dialogs['update']"}},[_c(ApplicationDialog,{ref:"ApplicationDialog",attrs:{"refreshLoading":_vm.loading,"dialogKey":'update',"applicationObject":_vm.selectedApplication,"editFlag":_vm.editFlag},on:{"save":_vm.applicationSaved,"editToggle":function($event){_vm.editFlag = !_vm.editFlag;},"closeDialog":_vm.closeDialog,"refreshApplication":_vm.syncApplication}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1000px"},model:{value:(_vm.dialogs['delete']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'delete', $$v);},expression:"dialogs['delete']"}},[_c(ApplicationDelete,{ref:"ApplicationDelete",attrs:{"dialogKey":'delete',"selectedApplication":_vm.selectedApplication},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.listApplicationItems}})],1)],1)};
var staticRenderFns$P = [];

/* unplugin-vue-components disabled *///

const __vue2_script$P = {
	name: 'ApplicationView',
	components: {
		ApplicationCreate,
		ApplicationDialog,
		ApplicationDelete
	},
	mixins: [utilsMixin],
	props: {
		viewTitle: String,
		snackbarTimeout: Number
	},
	data() {
		return {
			loading: false,
			editFlag: false,
			selectedApplication: {},
			tableData: {
				headers: [],
				items: [],
				selected: []
			},
			// Dialog States
			dialogs: {
				create: false,
				update: false,
				delete: false
			}
		}
	},
	async created() {
		this.listApplicationItems();
	},
	methods: {
		// Reload Data Table Header Labels
		reloadDataTableHeaders() {
			this.tableData.headers.forEach(tableHeader => {
				switch (tableHeader.value) {
					case "actions":
						tableHeader.text = this.$t('actions.label');
						break;
					case "enabled":
						tableHeader.text = this.$t('words.enabled');
						break;
					default:
						tableHeader.text = this.$tc('section.applications.attribute.' + tableHeader.value, 1);
						break;
				}
			});
		},
		async listApplicationItems(emitNotif = true) {
			this.loading = true;
			this.error = false;
			this.tableData.headers = [];
			this.tableData.items = [];
			this.tableData.selected = [];
			await new Application({}).list()
				.then(response => {
					this.tableData.items = response.applications;
					this.tableData.headers = [];
					let headerDict = {};
					response.headers.forEach(header => {
						headerDict = {};
						headerDict.text = this.$tc('section.applications.attribute.' + header, 1);
						headerDict.value = header;
						if (header == 'enabled') {
							headerDict.text = this.$t("words.enabled");
							headerDict.align = 'center';
							headerDict.sortable = false;
						}
						this.tableData.headers.push(headerDict);
					});
					headerDict = {};
					headerDict.text = this.$t('actions.label');
					headerDict.value = 'actions';
					headerDict.align = 'center';
					headerDict.sortable = false;
					this.tableData.headers.push(headerDict);
					this.loading = false;
					this.error = false;
					this.errorMsg = "";
					if (emitNotif == true)
						notificationBus.$emit("createNotification", {
							message: (`${this.$tc("classes.application", response.applications.length)} ${this.$tc("words.loaded.m", response.applications.length)}`).toUpperCase(),
							type: 'success'
						});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{ message: this.errorMsg.toUpperCase(), type: 'error' }
					);
				});
			this.$emit('done');
		},
		async deleteApplication(selectedApplication) {
			this.selectedApplication = {};
			this.selectedApplication = selectedApplication;
			this.openDialog('delete');
		},
		syncApplication() {
			// Sync Data with Child Components
			if (this.$refs.ApplicationDialog != undefined)
				this.$refs.ApplicationDialog.syncApplication();
		},
		// Fetch individual Application
		async fetchApplication(item, isEditable = false, openedDialogLoading = false) {
			if (!openedDialogLoading)
				this.loading = true;
			this.fetchingData = true;
			this.selectedApplication.id = item.id;
			this.selectedApplication.name = item.name;
			await new Application({}).fetch(this.selectedApplication.id)
				.then(response => {
					this.selectedApplication = response.data;
					// Avoid re-doing the opening animation
					if (this.dialogs.update !== true)
						this.openDialog('update');
					// Check if is editable
					this.editFlag = isEditable;
					setTimeout(() => {
						this.loading = false;
						this.fetchingData = false;
					}, 50);
				})
				.catch(error => {
					console.error(error);
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{ message: this.errorMsg.toUpperCase(), type: 'error' }
					);
					this.loading = false;
					this.fetchingData = false;
					this.error = true;
				});
			this.syncApplication();
		},
		async toggleApplicationStatus(item, state) {
			this.loading = true;
			this.error = false;
			this.errorMsg = false;
			this.selectedApplication = {};
			this.selectedApplication = item;
			this.selectedApplication.enabled = state;
			let data = Object.assign({}, this.selectedApplication);
			let action = state === true ? "enabled" : "disabled";
			await new Application({}).update(data)
				.then(() => {
					this.loading = false;
					this.error = false;
					this.errorMsg = false;
					this.listApplicationItems(false);
					notificationBus.$emit('createNotification',
						{
							message: (this.$tc("classes.application", 1) + " " + this.$t("words." + action)).toUpperCase(),
							type: 'success'
						});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{
							message: this.errorMsg.toUpperCase(),
							type: 'error'
						});
				});
		},
		applicationSaved() {
			this.listApplicationItems(false);
			notificationBus.$emit('createNotification',
				{
					message: `${this.$tc("classes.application", 1)} ${this.$tc("words.saved.m", 1)}`.toUpperCase(),
					type: 'success'
				}
			);
		},
		openDialog(key) {
			this.dialogs[key] = true;
			switch (key) {
				case 'view':
				case 'update':
					if (key == "update")
						this.editFlag = true;
					else
						this.editFlag = false;
					if (this.$refs.ApplicationDialog != undefined)
						this.$refs.ApplicationDialog.syncApplication();
					break;
				case 'create':
					if (this.$refs.ApplicationCreate != undefined)
						this.$refs.ApplicationCreate.newApplication();
					break;
			}
		},
		async closeDialog(key, refresh = false) {
			this.dialogs[key] = false;
			if (refresh) {
				let emitNotif;
				switch (key) {
					default:
						emitNotif = true;
						break;
				}
				await this.listApplicationItems(emitNotif);
			}
		},
	}
};
const __cssModules$P = {};
var __component__$P = /*#__PURE__*/normalizeComponent(
  __vue2_script$P,
  render$P,
  staticRenderFns$P,
  false,
  __vue2_injectStyles$P,
  null,
  null,
  null
);

function __vue2_injectStyles$P (context) {
  for(let o in __cssModules$P){
    this[o] = __cssModules$P[o];
  }
}

var ApplicationView = /*#__PURE__*/(function () { return __component__$P.exports })();

function truncateDate(d) {
	if (d === undefined || d === null || d === "")
		return ""
	return `${new Date(d).toISOString().replace("T", " ").substring(0, 19)} (UTC)`;
}

function objectRecursiveSearch(targetEntity, idToSearch, keyToSearch = undefined, childrenKey = 'children', searchResult = undefined) {
	// console.log(targetEntity.distinguishedName)
	// If ID matches with current object
	if (idToSearch == targetEntity.id) {
		if (targetEntity[keyToSearch] != undefined) {
			searchResult = targetEntity[keyToSearch];
			return searchResult
		}
		else {
			// console.log('Error: targetEntity key(' + keyToSearch + ') is undefined or its value is missing')
			searchResult = targetEntity;
			return searchResult
		}
	}

	// If ID hasn't matched with this object,
	// then search in it's children if it has any.
	if (targetEntity[childrenKey] !== undefined && targetEntity[childrenKey] !== null && targetEntity[childrenKey].length != 0)
		// For each child do a recursive search calling this function
		targetEntity[childrenKey].forEach(child => {
			if (!searchResult) {
				searchResult = objectRecursiveSearch(child, idToSearch, keyToSearch, childrenKey, searchResult);
				if (searchResult && searchResult != false && searchResult != undefined) {
					return searchResult
				}
			}
		});
	return searchResult
}

function getDomainDetails() {
	let domainData = {};
	for (let i = 0; i < localStorage.length; i++) {
		const key = localStorage.key(i);
		if (key.startsWith("ldap.")) {
			const val = localStorage.getItem(key);
			domainData[key.replace("ldap.", "")] = val;
		}
	}
	return domainData
}

function filterObject(obj, predicate) {
	return Object.keys(obj)
		.filter(key => predicate(obj[key]))
		.reduce((res, key) => ({ ...res, [key]: obj[key] }), {});
}

class User extends ApiModel {

	first_name;
	last_name;
	username;
	password;
	last_login;
	role;
	is_staff;
	full_name;
	email;
	phone;
	street_address;
	postal_code;
	// Locale / City
	city;
	// State/Province
	state_province;
	// INT
	country_code_dcc;
	// 2 Letter Code for Country
	country_code_iso;
	// Full Country Name
	country_name;
	website;
	distinguished_name;
	user_principal_name;
	groups;
	// Permission ACLs
	user_account_control;
	created_at;
	changed_at;
	last_login;
	bad_password_count;
	password_set_at;
	primary_group_id;
	object_class;
	object_category;
	account_type;
	permissions;

	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id 
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	/**
	 * Logins as User, Standard Call.
	 * Data contains:
	 * @param {String} username 
	 * @param {String} password
	 * @param {Integer} totp_code [Optional]
	 * @returns Response Promise, Exception on Failure.
	 */
	async login(data) {
		return await interlock_backend.call('auth/login', data)
	}

	/**
	 * Logs out the current User, Standard Call.
	 */
	async logout() {
		return await interlock_backend.call('auth/logout')
	}

	async list() {
		return await interlock_backend.call('user/list')
	}

	async insert(data) {
		return await interlock_backend.call('user/insert', data)
	}

	async fetch(username) {
		return await interlock_backend.call('user/fetch', { username: username }).then(
			response => {
				if (!response)
					throw Error("Error fetching user data. Provider returned: " + response);
				else {
					Object.keys(response.data).forEach(key => {
						switch (key) {
							default:
								this[key] = response.data[key];
								break;
						}
					});
				}
			}
		)
	}

	async update(data) {
		return await interlock_backend.call('user/update', data)
	}

	async delete(data) {
		return await interlock_backend.call('user/delete', data)
	}

	async changeAccountStatus(data) {
		return await interlock_backend.call('user/changeAccountStatus', data)
	}

	async lock(data) {
		return await interlock_backend.call('user/lock', data)
	}

	async unlock(data) {
		return await interlock_backend.call('user/unlock', data)
	}

	async deleteTotp(data) {
		return await interlock_backend.call('user/deleteTotp', data)
	}

	async changePassword(data) {
		return await interlock_backend.call('user/changePassword', data)
	}

	async selfChangePassword(data) {
		return await interlock_backend.call('user/selfChangePassword', data)
	}

	async selfFetch() {
		return await interlock_backend.call('user/selfFetch').then(
			response => {
				if (!response)
					throw Error("Error fetching user data. Provider returned: " + response);
				else {
					Object.keys(response.data).forEach(key => {
						switch (key) {
							default:
								this[key] = response.data[key];
								break;
						}
					});
				}
			}
		)
	}

	async selfInfo() {
		return await interlock_backend.call('user/selfInfo')
	}

	async selfUpdate(data) {
		return await interlock_backend.call('user/selfUpdate', data)
	}

	async bulkInsert(data) {
		return await interlock_backend.call('user/bulkInsert', data)
	}

	async bulkDelete(data) {
		return await interlock_backend.call('user/bulkDelete', data)
	}

	async bulkUpdate(data) {
		return await interlock_backend.call('user/bulkUpdate', data)
	}

	async bulkChangeStatus(data) {
		return await interlock_backend.call('user/bulkChangeStatus', data)
	}

	async bulkUnlock(data) {
		return await interlock_backend.call('user/bulkUnlock', data)
	}
}

const callsPrefix = "djangoUser";
class DjangoUser extends ApiModel {

	first_name;
	last_name;
	username;
	password;
	user_type;
	is_enabled;
	email;

	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	async list() {
		return await interlock_backend.call(`${callsPrefix}/list`)
	}

	async fetch(id) {
		return await interlock_backend.call(`${callsPrefix}/fetch`, id).then(
			response => {
				if (!response)
					throw Error("Error fetching user data. Provider returned: " + response);
				else {
					Object.keys(response.data).forEach(key => {
						switch (key) {
							default:
								this[key] = response.data[key];
								break;
						}
					});
				}
			}
		)
	}

	async insert(data) {
		return await interlock_backend.call(`${callsPrefix}/insert`, data)
	}

	async update(data) {
		return await interlock_backend.call(`${callsPrefix}/update`, data)
	}

	async delete(id) {
		return await interlock_backend.call(`${callsPrefix}/delete`, id)
	}

	async changeAccountStatus(data) {
		return await interlock_backend.call(`${callsPrefix}/changeAccountStatus`, data)
	}

	async changePassword(data) {
		return await interlock_backend.call(`${callsPrefix}/changePassword`, data)
	}

	async selfInfo() {
		return await interlock_backend.call(`${callsPrefix}/selfInfo`)
	}

	async selfFetch() {
		return await interlock_backend.call(`${callsPrefix}/selfFetch`).then(
			response => {
				if (!response)
					throw Error("Error fetching user data. Provider returned: " + response);
				else {
					Object.keys(response.data).forEach(key => {
						switch (key) {
							default:
								this[key] = response.data[key];
								break;
						}
					});
				}
			}
		)
	}

	async selfUpdate(data) {
		return await interlock_backend.call(`${callsPrefix}/selfUpdate`, data)
	}

	async selfChangePassword(data) {
		return await interlock_backend.call(`${callsPrefix}/selfChangePassword`, data)
	}

	async bulkInsert(data) {
		return await interlock_backend.call(`${callsPrefix}/bulkInsert`, data)
	}

	async bulkDelete(data) {
		return await interlock_backend.call(`${callsPrefix}/bulkDelete`, data)
	}

	async bulkUpdate(data) {
		return await interlock_backend.call(`${callsPrefix}/bulkUpdate`, data)
	}

	async bulkChangeStatus(data) {
		return await interlock_backend.call(`${callsPrefix}/bulkChangeStatus`, data)
	}
}

class OrganizationalUnit extends ApiModel {

    distinguishedName;
    attributes;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async list() {
        return await interlock_backend.call('ou/list')
    }

    async filter(objectArray) {
        return await interlock_backend.call('ou/filter', objectArray)
    }

    async dirtree(filter) {
        return await interlock_backend.call('ou/dirtree', filter)
    }

    async move(data) {
        return await interlock_backend.call('ou/move', data)
    }

    async rename(data) {
        return await interlock_backend.call('ou/rename', data)
    }

    async insert(data) {
        return await interlock_backend.call('ou/insert', data)
    }

    async delete(data) {
        return await interlock_backend.call('ou/delete', data)
    }
}

var render$O = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.showLoadingBar)?_c(__unplugin_components_12$2,{attrs:{"indeterminate":_vm.loading,"color":_vm.loading ? 'primary' : 'secondary'}}):_vm._e(),_c(VExpandTransition,[(this.ouList.length > 0)?_c(__unplugin_components_46,{attrs:{"items":this.ouList,"active":_vm.activeObject,"dense":"","hoverable":"","activatable":""},on:{"update:active":[function($event){_vm.activeObject=$event;},_vm.updateObjectDestination]},scopedSlots:_vm._u([{key:"prepend",fn:function(ref){
var item = ref.item;
var open = ref.open;
return [(item.builtin == true && item.type != 'container')?_c(__unplugin_components_95,[_vm._v(" mdi-hammer ")]):(item.type == 'container')?_c(__unplugin_components_95,[_vm._v(" mdi-archive ")]):(item.type == 'organizational-unit')?_c(__unplugin_components_95,[_vm._v(" "+_vm._s(open ? 'mdi-folder-open' : 'mdi-folder')+" ")]):_c(__unplugin_components_95,[_vm._v(" mdi-group ")])]}},{key:"label",fn:function(ref){
var item = ref.item;
return [_c(__unplugin_components_91,{attrs:{"align":"start"}},[_c(__unplugin_components_88,{attrs:{"cols":"11","md":"auto"}},[_vm._v(" "+_vm._s(item.name)+" ")])],1)]}}],null,false,3474863438)}):_vm._e()],1)],1)};
var staticRenderFns$O = [];

/* unplugin-vue-components disabled *///

const __vue2_script$O = {
	name: 'DirtreeOUList',
	data() {
		return {
			activeObject: [],
			ouList: [],
			objectDestination: "",
			loading: false,
			error: false
		}
	},
	props: {
		baseDn: String,
		excludeObjects: String || Array, // This is to exclude self when moving an OU
		showLoadingBar: {
			type: Boolean,
			default: true
		},
		fetchOnCreated: {
			type: Boolean,
			default: true
		}
	},
	created() {
		if (this.fetchOnCreated)
			this.fetchOUs();
	},
	methods: {
		emitDestination() {
			this.$emit('selectedDestination', this.objectDestination);
		},
		clearList() {
			this.ouList = [];
		},
		updateObjectDestination(itemID) {
			if (!itemID || itemID.length == 0) {
				this.objectDestination = "CN=Users," + this.baseDn;
				// console.log('this.objectDestination was reset to ' + this.objectDestination)
				return this.objectDestination
			}
			var itemToUpdate = this.ouList.find(ou => ou.id == itemID);
			var searchResult;
			if (itemToUpdate == undefined) {
				this.ouList.forEach(ou => {
					if (!searchResult) {
						searchResult = objectRecursiveSearch(ou, parseInt(itemID), "distinguished_name");
						this.objectDestination = searchResult;
					}
				});
			} else if (itemToUpdate.id == itemID)
				this.objectDestination = itemToUpdate.distinguished_name;

			this.emitDestination();
		},
		async fetchOUs(excludeDict = undefined) {
			this.loading = true;
			this.error = false;
			this.activeObject = [];
			if (excludeDict)
				await new OrganizationalUnit({}).dirtree(excludeDict)
					.then(response => {
						this.ouList = response.data.ldapObjectList;
						this.loading = false;
						return response
					})
					.catch(error => {
						this.loading = false;
						this.error = true;
						console.error(error);
						return error
					});
			else
				await new OrganizationalUnit({}).list()
					.then(response => {
						this.ouList = response.data.ldapObjectList;
						this.loading = false;
						return response
					})
					.catch(error => {
						this.loading = false;
						this.error = true;
						console.error(error);
						return error
					});
		},
	},
};
const __cssModules$O = {};
var __component__$O = /*#__PURE__*/normalizeComponent(
  __vue2_script$O,
  render$O,
  staticRenderFns$O,
  false,
  __vue2_injectStyles$O,
  null,
  null,
  null
);

function __vue2_injectStyles$O (context) {
  for(let o in __cssModules$O){
    this[o] = __cssModules$O[o];
  }
}

var DirtreeOUList = /*#__PURE__*/(function () { return __component__$O.exports })();

const LDAPObjectClasses = [
	"accessControlSubentry",
	"account",
	"alias",
	"applicationEntity",
	"applicationProcess",
	"bootableDevice",
	"certificationAuthority",
	"certificationAuthority-V2",
	"collectiveAttributeSubentry",
	"country",
	"crlDistributionPoint",
	"device",
	"dmd",
	"dnsDomain",
	"documentSeries",
	"domain",
	"domainRelatedObject",
	"dsa",
	"extensibleObject",
	"friendlyCountry",
	"groupOfNames",
	"groupOfUniqueNames",
	"ieee802Device",
	"inetOrgPerson",
	"ipHost",
	"ipNetwork",
	"ipProtocol",
	"ipService",
	"javaContainer",
	"javaMarshalledObject",
	"javaNamingReference",
	"javaObject",
	"javaSerializedObject",
	"labeledURIObject",
	"locality",
	"mailRecipient",
	"newPilotPerson",
	"nisDomainObject",
	"nisKeyObject",
	"nisMap",
	"nisNetgroup",
	"nisObject",
	"oldQualityLabelledData",
	"oncRpc",
	"organization",
	"organizationalPerson",
	"organizationalRole",
	"organizationalUnit",
	"person",
	"pilotDSA",
	"pilotObject",
	"pilotOrganization",
	"posixAccount",
	"posixGroup",
	"top",
	"user",
	"referral",
	"residentialPerson",
	"room",
	"shadowAccount",
	"simpleSecurityObject",
	"strongAuthenticationUser"
];

const LDAPUserClasses = ['user', 'person', 'organizationalPerson', 'organizationalperson'];
const LDAPUserCategories = {
	basic: [
		"sAMAccountName",
		"givenName",
		"sn",
		"mail",
		"displayName",
		"is_enabled",
		"last_login",
		"telephoneNumber",
		"wWWHomePage",
	],
	location: [
		"streetAddress",
		"postalCode",
		"l",
		"st",
		"countryCode",
		"co",
		"c",
	],
	account: [
		"distinguishedName",
		"userPrincipalName",
		"userAccountControl",
		"whenCreated",
		"whenChanged",
		"lastLogon",
		"badPwdCount",
		"pwdLastSet",
		"primaryGroupID",
		"objectClass",
		"objectCategory",
		"sAMAccountType"
	]
};

var render$N = function () {
var this$1$1 = this;
var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("section.users.userCreate.header")))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VExpandTransition,[_c('div',[_c(__unplugin_components_7,{model:{value:(_vm.createStage),callback:function ($$v) {_vm.createStage=$$v;},expression:"createStage"}},[_c(VStepperHeader,{staticClass:"px-16"},[_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 1,"step":"1"}},[_vm._v(_vm._s(_vm.$t('section.users.userCreate.step1')))]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 1 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 2,"step":"2"}},[_vm._v(_vm._s(_vm.$t('section.users.userCreate.step2')))]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 2 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 3,"step":"3"}},[_vm._v(_vm._s(_vm.$t('section.users.userCreate.step3')))])],1),_c(VStepperItems,[_c(__unplugin_components_31,{attrs:{"step":"1"}},[_c(__unplugin_components_18,{ref:"userCreateForm1",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.user.username'),"rules":[this.fieldRules(_vm.userToCreate.username, 'ge_username', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.username),callback:function ($$v) {_vm.$set(_vm.userToCreate, "username", $$v);},expression:"userToCreate.username"}})],1)],1),(_vm.isLDAPView)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align":"center","justify":"space-around"}},[_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","color":"primary"},on:{"click":function($event){_vm.userDestination = _vm.basedn;}}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.move.setToRoot'))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","disabled":!_vm.allowRefresh,"elevation":"0"},on:{"click":function($event){return _vm.fetchOUs(true)}},scopedSlots:_vm._u([{key:"loader",fn:function(){return [_c('span',{staticClass:"custom-loader"},[_c(__unplugin_components_95,{attrs:{"color":"white"}},[_vm._v("mdi-cached")])],1)]},proxy:true}],null,false,2697205047)},[_vm._v(" "+_vm._s(_vm.$t('actions.refresh'))+" "),_c(__unplugin_components_95,[_vm._v(" mdi-refresh ")])],1)],1):_vm._e(),(_vm.isLDAPView)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"8"}},[_c(__unplugin_components_55,{staticStyle:{"border":"1px solid var(--v-primary-base)"},attrs:{"flat":"","hover":""},model:{value:(_vm.userPathExpansionPanel),callback:function ($$v) {_vm.userPathExpansionPanel=$$v;},expression:"userPathExpansionPanel"}},[_c(__unplugin_components_56,[_c(__unplugin_components_57,[_c('span',[_c('span',[_vm._v(" "+_vm._s(((_vm.$t('section.users.userCreate.userCreatedIn')) + ": "))+" ")]),_c('span',{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(this.userDestination)+" ")])])]),_c(__unplugin_components_58,[_c(__unplugin_components_76,{staticStyle:{"max-height":"300px","overflow":"auto !important"},attrs:{"flat":"","outlined":""}},[_c(DirtreeOUList,{ref:"DirtreeOUList",on:{"selectedDestination":_vm.setDestination}})],1)],1)],1)],1)],1)],1):_vm._e(),(_vm.isLDAPView)?_c('div',[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.first_name'),"rules":[this.fieldRules(_vm.userToCreate.first_name, 'ge_name')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.first_name),callback:function ($$v) {_vm.$set(_vm.userToCreate, "first_name", $$v);},expression:"userToCreate.first_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.last_name'),"rules":[this.fieldRules(_vm.userToCreate.last_name, 'ge_name')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.last_name),callback:function ($$v) {_vm.$set(_vm.userToCreate, "last_name", $$v);},expression:"userToCreate.last_name"}})],1)],1),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.full_name'),"rules":[this.fieldRules(_vm.getDisplayName, 'ge_topic')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.getDisplayName),callback:function ($$v) {_vm.getDisplayName=$$v;},expression:"getDisplayName"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"2"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.initials'),"rules":[this.fieldRules(_vm.userToCreate.initials, 'ge_topic')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.initials),callback:function ($$v) {_vm.$set(_vm.userToCreate, "initials", $$v);},expression:"userToCreate.initials"}})],1)],1),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","hint":_vm.$t('misc.autocomputedField'),"persistent-hint":"","label":_vm.$t('attribute.user_principal_name'),"readonly":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.getUSN),callback:function ($$v) {_vm.getUSN=$$v;},expression:"getUSN"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","hint":_vm.$t('misc.autocomputedField'),"persistent-hint":"","label":_vm.$t('attribute.user_principal_name_pre2000'),"readonly":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.getUSN_2000),callback:function ($$v) {_vm.getUSN_2000=$$v;},expression:"getUSN_2000"}})],1)],1)],1):_c('div',[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"first_name","label":_vm.$t('attribute.first_name'),"rules":[this.fieldRules(_vm.userToCreate.first_name, 'ge_name')]},model:{value:(_vm.userToCreate.first_name),callback:function ($$v) {_vm.$set(_vm.userToCreate, "first_name", $$v);},expression:"userToCreate.first_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_name","label":_vm.$t('attribute.last_name'),"rules":[this.fieldRules(_vm.userToCreate.last_name, 'ge_name')]},model:{value:(_vm.userToCreate.last_name),callback:function ($$v) {_vm.$set(_vm.userToCreate, "last_name", $$v);},expression:"userToCreate.last_name"}})],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_5,{staticClass:"mx-12 my-3 mt-6"})],1),_c(__unplugin_components_91,{staticClass:"mb-1",attrs:{"justify":"center"}},[_c('span',{staticClass:"text-overline",staticStyle:{"font-size":".95em !important"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.userCreate.optionalsHeader"))+" ")])]),(_vm.isLDAPView)?_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.user.email'),"rules":[this.fieldRules(_vm.userToCreate.email, 'ge_mail')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.email),callback:function ($$v) {_vm.$set(_vm.userToCreate, "email", $$v);},expression:"userToCreate.email"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.website'),"rules":[this.fieldRules(_vm.userToCreate.website, 'ge_website')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.website),callback:function ($$v) {_vm.$set(_vm.userToCreate, "website", $$v);},expression:"userToCreate.website"}})],1)],1):_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.user.email'),"rules":[this.fieldRules(_vm.userToCreate.email, 'ge_mail')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.email),callback:function ($$v) {_vm.$set(_vm.userToCreate, "email", $$v);},expression:"userToCreate.email"}})],1)],1)],1)],1),_c(__unplugin_components_31,{attrs:{"step":"2"}},[_c(__unplugin_components_18,{ref:"userCreateForm2",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{ref:"password",attrs:{"id":"password","type":_vm.passwordHidden ? 'password' : 'text',"required":"","append-icon":_vm.passwordHidden ? 'mdi-eye' : 'mdi-eye-off',"dense":"","label":_vm.$t('attribute.password'),"rules":[this.fieldRules(_vm.userToCreate.password, 'ge_password')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()},"click:append":function () { return (_vm.passwordHidden = !_vm.passwordHidden); }},model:{value:(_vm.userToCreate.password),callback:function ($$v) {_vm.$set(_vm.userToCreate, "password", $$v);},expression:"userToCreate.password"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{ref:"password_confirm",attrs:{"id":"password_confirm","type":_vm.passwordHidden ? 'password' : 'text',"dense":"","label":_vm.$t('attribute.password_confirm'),"rules":[function (v) { return v == this$1$1.userToCreate.password ? true : this$1$1.$t('error.validation.passwordNotSame'); }]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}},model:{value:(_vm.userToCreate.password_confirm),callback:function ($$v) {_vm.$set(_vm.userToCreate, "password_confirm", $$v);},expression:"userToCreate.password_confirm"}})],1)],1),(_vm.isLDAPView)?_c(__unplugin_components_4$1,_vm._l((_vm.permissions),function(value,key){return _c(__unplugin_components_9$2,{key:key,attrs:{"two-line":"","value":_vm.permissions[key].value},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()},"click":function($event){return _vm.onClickPermission(key)}}},[_c(VListItemContent,{staticClass:"pl-10"},[_c(VListItemTitle,{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(_vm.$t('section.users.permissions.' + key))+" ")]),_c(VListItemSubtitle,[_vm._v(" "+_vm._s(key)+" ")])],1),_c(__unplugin_components_10$2,[_c(__unplugin_components_28,{on:{"keypress":false,"keydown":false,"click":function($event){return _vm.onClickPermission(key)}},model:{value:(_vm.permissions[key].value),callback:function ($$v) {_vm.$set(_vm.permissions[key], "value", $$v);},expression:"permissions[key].value"}})],1)],1)}),1):_vm._e()],1)],1),_c(__unplugin_components_31,{attrs:{"step":"3"}},[_c(__unplugin_components_91,{staticClass:"pa-12 ma-12",attrs:{"justify":"center","align-content":"center","align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VFabTransition,[_c(__unplugin_components_7$1,{attrs:{"value":"100","color":(this.error === false) ? (_vm.loading ? 'primary' : 'green') : 'red',"indeterminate":_vm.loading,"size":"100","width":"10"}},[_c(VFabTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.loading == false),expression:"loading == false"}]},[(_vm.error == true)?_c(__unplugin_components_95,{attrs:{"size":"82","color":"red"}},[_vm._v("mdi-close-circle")]):_c(__unplugin_components_95,{attrs:{"size":"82","color":"green"}},[_vm._v("mdi-check-circle")])],1)])],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VSlideYTransition,[(!this.loading && this.loading == false)?_c(__unplugin_components_88,[_c('h3',[_vm._v(" "+_vm._s(this.error ? this.errorMsg : _vm.$t('section.users.userCreate.step3_success'))+" ")])]):_vm._e()],1)],1)],1)],1)],1)],1)],1)]),(_vm.$vuetify.breakpoint.smAndDown)?_c(__unplugin_components_46$1,{attrs:{"text":"","color":"red","timeout":"1500","centered":""},model:{value:(_vm.showSnackbar),callback:function ($$v) {_vm.showSnackbar=$$v;},expression:"showSnackbar"}},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")])],1):_vm._e(),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[_c('div',[_c(VSlideXReverseTransition,[(this.error && _vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_40,{staticClass:"mx-2",attrs:{"color":"red","text-color":"white"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.newUser}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-cached ")]),_vm._v(" "+_vm._s(_vm.$t("actions.reset"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(_vm.createStage > 1 && _vm.createStage < 4)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 pr-4 ma-1",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.prevStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.prevStep.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-left ")]),_vm._v(" "+_vm._s(_vm.$t("actions.back_short"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 3)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pl-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.nextStep()},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep()}}},[_vm._v(" "+_vm._s(this.createStage > 1 && this.userToCreate.password.length === 0 ? _vm.$t("actions.skip") : _vm.$t("actions.next"))+" "),_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-right ")])],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage > 2 && this.error === false)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.closeDialog(true)},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.done"))+" ")],1):_vm._e()],1)],1)])],1)],1)};
var staticRenderFns$N = [];

/* unplugin-vue-components disabled *///

const __vue2_script$N = {
	name: 'UserCreate',
	components: {
		DirtreeOUList
	},
	data() {
		return {
			passwordHidden: true,
			domain: "",
			realm: "",
			basedn: "",
			success: false,
			loading: true,
			error: false,
			errorMsg: "",
			valid: false,
			allowRefresh: true,
			showSnackbar: false,
			userPathExpansionPanel: false,
			userDestination: '',
			userToCreate: {},
			createStage: 1,
			addObjectClass: "",
			objectClasses: LDAPObjectClasses,
			permissions: {
				"LDAP_UF_ACCOUNT_DISABLE": {
					value: false,
					int: 2
				},
				"LDAP_UF_PASSWD_CANT_CHANGE": {
					value: false,
					int: 64
				},
				"LDAP_UF_DONT_EXPIRE_PASSWD": {
					value: false,
					int: 65536
				},
			},
			categories: LDAPUserCategories
		}
	},
	mixins: [
		validationMixin,
		utilsMixin
	],
	props: {
		dialogKey: String,
		parentTitle: String,
		userClass: Function,
	},
	created() {
		this.newUser;
	},
	computed: {
		isLDAPView() {
			return this.parentTitle === 'ldap-users'
		},
		calcEnabledPerms() {
			var result = 0;
			for (const [key, value] of Object.entries(this.permissions)) {
				if (value == true) {
					result += this.permission_values[key];
				}
			}
			return result
		},
		getEnabledPerms() {
			var array = [];
			for (const [key, value] of Object.entries(this.permissions)) {
				if (value == true)
					array.push(key);
			}
			return array
		},
		getUSN() {
			if (this.userToCreate.username != undefined)
				return this.userToCreate.username + "@" + this.domain
			else
				return "@" + this.domain
		},
		getUSN_2000() {
			if (this.userToCreate.username != undefined)
				return this.realm + "\\" + this.userToCreate.username
			else
				return this.realm + "\\"
		},
		getDisplayName() {
			if (this.userToCreate.first_name != undefined && this.userToCreate.first_name != "" ||
				this.userToCreate.last_name != undefined && this.userToCreate.last_name != ""
			)
				return (this.userToCreate.first_name || "") + " " + (this.userToCreate.last_name || "").trim()
			else
				return ""
		}
	},
	methods: {
		setDestination(destination = undefined) {
			// Set default destination if undefined
			if (destination == undefined || !destination) {
				this.userDestination = this.basedn;
				this.userPathExpansionPanel = 0;
			}
			// Set destination from arg
			else {
				this.userDestination = destination;
				this.userPathExpansionPanel = false;
			}
		},
		prevStep() {
			switch (this.createStage) {
				case 2:
					let domainDetails = getDomainDetails();
					this.domain = domainDetails.name;
					this.realm = domainDetails.realm;
					this.basedn = domainDetails.basedn;
					this.createStage -= 1;
					break;
				case 3:
					this.createStage -= 1;
					setTimeout(() => {
						this.loading = true;
					}, 500);
					break;
				default:
					this.createStage -= 1;
					break;
			}
			this.error = false;
			this.errorMsg = "";
		},
		nextStep() {
			switch (this.createStage) {
				case 1:
					if (this.$refs.userCreateForm1.validate()) {
						this.error = false;
						this.errorMsg = "";
						this.createStage += 1;
					}
					else {
						// Force snackbar to reappear if error was pre-existent
						if (this.showSnackbar == true)
							this.showSnackbar = false;
						this.showSnackbar = true;
						this.error = true;
						this.errorMsg = this.$t('error.validation.fieldinvalid');
					}
					break;
				case 2:
					if (this.$refs.userCreateForm2.validate()) {
						this.error = false;
						this.errorMsg = "";
						let permissions = [];
						Object.keys(this.userToCreate).forEach(key => {
							if (this.userToCreate[key] === undefined) {
								delete this.userToCreate[key];
							}
						});
						Object.keys(this.permissions).forEach(key => {
							if (this.permissions[key].value == true)
								permissions.push(key);
						});
						this.userToCreate.permissions = permissions;
						this.createUser();
					}
					else {
						// Force snackbar to reappear if error was pre-existent
						if (this.showSnackbar == true)
							this.showSnackbar = false;
						this.showSnackbar = true;
						this.error = true;
						this.errorMsg = this.$t('error.validation.fieldinvalid');
					}
					break;
				default:
					this.createStage += 1;
					break;
			}
		},
		async newUser() {
			this.passwordHidden = true;
			this.userPathExpansionPanel = false;
			this.userToCreate = new this.userClass({});
			this.userToCreate.password = "";
			this.userToCreate.password_confirm = "";
			this.createStage = 1;
			this.error = false;
			this.errorMsg = "";
			this.$refs.userCreateForm1.resetValidation();
			for (const [key] of Object.entries(this.permissions))
				this.permissions[key].value = false;
			let domainDetails = getDomainDetails();
			this.domain = domainDetails.name;
			this.realm = domainDetails.realm;
			this.basedn = domainDetails.basedn;
			this.fetchOUs();
			this.userDestination = "CN=Users," + this.basedn;
		},
		async fetchOUs(refresh = false) {
			if (refresh == true)
				this.userPathExpansionPanel = 0;
			if (this.$refs.DirtreeOUList != undefined) {
				this.allowRefresh = false;
				this.$nextTick(() => {
					if (refresh != true)
						this.setDestination();
					this.$refs.DirtreeOUList.fetchOUs()
						.then(() => {
							setTimeout(() => {
								this.allowRefresh = true;
							}, 50);
						});
				});
			}
		},
		onClickPermission(key) {
			this.permissions[key].value = !this.permissions[key].value;
		},
		closeDialog(refresh = false) {
			this.$emit('closeDialog', this.dialogKey, refresh);
		},
		async createUser() {
			this.error = false;
			this.errorMsg = "";
			this.createStage += 1;
			this.userToCreate.path = this.userDestination;
			await this.userToCreate.insert(this.userToCreate)
				.then(response => {
					if (response.status == 200) {
						this.error = false;
						this.errorMsg = "";
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = true;
					} else {
						this.error = true;
						this.errorMsg = this.$t("error.unknown_short");
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = false;
					}
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.success = true;
					this.errorMsg = this.getMessageForCode(error);
				});
		}
	}
};
const __cssModules$N = {};
var __component__$N = /*#__PURE__*/normalizeComponent(
  __vue2_script$N,
  render$N,
  staticRenderFns$N,
  false,
  __vue2_injectStyles$N,
  null,
  null,
  null
);

function __vue2_injectStyles$N (context) {
  for(let o in __cssModules$N){
    this[o] = __cssModules$N[o];
  }
}

var UserCreate = /*#__PURE__*/(function () { return __component__$N.exports })();

// INTERLOCK IS LICENSED UNDER GNU AGPLv3
// ORIGINAL PROJECT CREATED BY DYLAN BLANQUÉ AND BR CONSULTING S.R.L.
// File: csvMixin.js

const csvMixin = {
	methods: {
		csvToJSON(csv, delimiter) {
			csv = csv.replace(/\r\n/g, '\n'); // Replaces windows new line to linux.
			let lines = csv.split('\n');
			let result = [];
			let resultObjects = [];
			let headers = lines[0].split(delimiter);
			let last_line = lines.slice(-1)[0];

			for (let i = 0; i < headers.length; i++) {
				if (headers[i].length < 1)
					return "ERR_INVALID_CSV_HEADERS"
			}

			if (last_line.length > 1)
				return false

			for (let i = 1; i < lines.length - 1; i++) {
				// For imports
				let row = [];
				// For data tables
				let previewRow = {};
				let emptyLine = true;
				let currentLine = lines[i].split(delimiter);

				// Loop for each column in the line
				for (let j = 0; j < headers.length; j++) {
					const _v = currentLine[j];
					previewRow[headers[j]] = _v;
					row.push(_v);
				}

				for (const col of row) {
					if (col.length > 0)
						emptyLine = false;
					break
				}

				if (!emptyLine) {
					result.push(row);
					resultObjects.push(previewRow);
				}
			}
			return { headers: headers, data: result, preview_data: resultObjects }
		},
		// Methods End
	}
};

class CSV {

    static CELL_DIVIDER = '\t';
    static LINE_DIVIDER = '\n';

    static exportNoHeaders(rows, title) {
        var exported = [];
        for (var x = 0; x < rows.length; x++) {
            var row = "";
            for (var y = 0; y < rows[x].length; y++) {
                if (y < (rows[x].length - 1)) {
                    row += rows[x][y] + this.CELL_DIVIDER;
                } else {
                    row += rows[x][y] + this.LINE_DIVIDER;
                }
            }
            exported.push(row);
        }
        var csv = new Blob(exported, { type: "text/csv" });
        var downloadLink = document.createElement("a");
        downloadLink.download = title + '.csv';
        downloadLink.href = window.URL.createObjectURL(csv);
        downloadLink.style.display = "none";
        document.body.appendChild(downloadLink);
        downloadLink.click();
    }

    static export(headers, rows, title) {
        var exported = [];
        for (var i = 0; i < headers.length; i++) {
            var header = "";
            if (i < (headers.length - 1))
                header += headers[i] + this.CELL_DIVIDER;
            else header += headers[i] + this.LINE_DIVIDER;
            exported.push(header);
        }
        for (var x = 0; x < rows.length; x++) {
            var row = "";
            for (var y = 0; y < rows[x].length; y++) {
                if (y < (rows[x].length - 1))
                    row += rows[x][y] + this.CELL_DIVIDER;
                else
                    row += rows[x][y] + this.LINE_DIVIDER;
            }
            exported.push(row);
        }
        var csv = new Blob(exported, { type: "text/csv" });
        var downloadLink = document.createElement("a");
        downloadLink.download = title + '.csv';
        downloadLink.href = window.URL.createObjectURL(csv);
        downloadLink.style.display = "none";
        document.body.appendChild(downloadLink);
        downloadLink.click();
    }

    static guessDelimiters(csv, possibleDelimiters) {
        return possibleDelimiters.filter(weedOut);

        function weedOut(delimiter) {
            var cache = -1;
            return csv.split('\n').every(checkLength);

            function checkLength(line) {
                if (!line) {
                    return true;
                }

                var length = line.split(delimiter).length;
                if (cache < 0) {
                    cache = length;
                }
                return cache === length && length > 1;
            }
        }
    }

    static ensure_default_delimiters(csv) {
        return this.ensure_delimiters(CSV.LINE_DIVIDER, CSV.CELL_DIVIDER, csv)
    }

    /**
     * 
     * Checks that delimiters exist in CSV String and expects these dividers to ensure
     * the same amount of columns per row.
     * 
     * @param {string} rowdel 
     * @param {string} coldel 
     * @param {string} csv_string 
     * @returns {boolean}
     */
    static ensure_delimiters(rowdel, coldel, csv_string) {
        csv_string.replace(/\r\n/g, '\n'); // Replaces windows new line to linux.
        if (!csv_string.includes(rowdel)) // If row delimiter not found
            throw new Error("LINE_DEL_NOT_FOUND")
        if (!csv_string.includes(coldel)) // If cell delimiter not found
            throw new Error("COL_DEL_NOT_FOUND")
        var rows = csv_string.split(rowdel);
        var rows_amount = rows.length;
        var expected_columns = rows[0].split(CSV.CELL_DIVIDER).length;
        var i = 0;
        while (i < rows_amount && rows[i].split(CSV.CELL_DIVIDER).length == expected_columns) {
            ++i;
        }
        if (i < rows_amount - 1)
            throw new Error("PARSING_ERROR")
        return true
    }
}

const LDAPCountries = [
	"Afghanistan",
	"Albania",
	"Algeria",
	"American Samoa",
	"Andorra",
	"Angola",
	"Anguilla",
	"Antarctica",
	"Antigua and Barbuda",
	"Argentina",
	"Armenia",
	"Aruba",
	"Australia",
	"Austria",
	"Azerbaijan",
	"Bahamas",
	"Bahrain",
	"Bangladesh",
	"Barbados",
	"Belarus",
	"Belgium",
	"Belize",
	"Benin",
	"Bermuda",
	"Bhutan",
	"Bolivia",
	"Bonaire",
	"Bosnia and Herzegovina",
	"Botswana",
	"Bouvet Island",
	"Brazil",
	"British Indian Ocean Territory",
	"Brunei Darussalam",
	"Bulgaria",
	"Burkina Faso",
	"Burundi",
	"Cambodia",
	"Cameroon",
	"Canada",
	"Cape Verde",
	"Cayman Islands",
	"Central African Republic",
	"Chad",
	"Chile",
	"China",
	"Christmas Island",
	"Cocos (Keeling) Islands",
	"Colombia",
	"Comoros",
	"Congo",
	"Democratic Republic of the Congo",
	"Cook Islands",
	"Costa Rica",
	"Croatia",
	"Cuba",
	"Curacao",
	"Cyprus",
	"Czech Republic",
	"Cote d'Ivoire",
	"Denmark",
	"Djibouti",
	"Dominica",
	"Dominican Republic",
	"Ecuador",
	"Egypt",
	"El Salvador",
	"Equatorial Guinea",
	"Eritrea",
	"Estonia",
	"Ethiopia",
	"Islas Malvinas",
	"Faroe Islands",
	"Fiji",
	"Finland",
	"France",
	"French Guiana",
	"French Polynesia",
	"French Southern Territories",
	"Gabon",
	"Gambia",
	"Georgia",
	"Germany",
	"Ghana",
	"Gibraltar",
	"Greece",
	"Greenland",
	"Grenada",
	"Guadeloupe",
	"Guam",
	"Guatemala",
	"Guernsey",
	"Guinea",
	"Guinea-Bissau",
	"Guyana",
	"Haiti",
	"Heard Island and McDonald Islands",
	"Holy See (Vatican City State)",
	"Honduras",
	"Hong Kong",
	"Hungary",
	"Iceland",
	"India",
	"Indonesia",
	"Islamic Republic of Iran",
	"Iraq",
	"Ireland",
	"Isle of Man",
	"Israel",
	"Italy",
	"Jamaica",
	"Japan",
	"Jersey",
	"Jordan",
	"Kazakhstan",
	"Kenya",
	"Kiribati",
	"Democratic People's Republic of Korea",
	"Kuwait",
	"Kyrgyzstan",
	"Lao People's Democratic Republic",
	"Latvia",
	"Lebanon",
	"Lesotho",
	"Liberia",
	"Libya",
	"Liechtenstein",
	"Lithuania",
	"Luxembourg",
	"Macao",
	"Former Yugoslav Republic of Macedonia",
	"Madagascar",
	"Malawi",
	"Malaysia",
	"Maldives",
	"Mali",
	"Malta",
	"Marshall Islands",
	"Martinique",
	"Mauritania",
	"Mauritius",
	"Mayotte",
	"Mexico",
	"Federated States of Micronesia",
	"Republic of Moldova",
	"Monaco",
	"Mongolia",
	"Montenegro",
	"Montserrat",
	"Morocco",
	"Mozambique",
	"Myanmar",
	"Namibia",
	"Nauru",
	"Nepal",
	"Netherlands",
	"New Caledonia",
	"New Zealand",
	"Nicaragua",
	"Niger",
	"Nigeria",
	"Niue",
	"Norfolk Island",
	"Northern Mariana Islands",
	"Norway",
	"Oman",
	"Pakistan",
	"Palau",
	"State of Palestine",
	"Panama",
	"Papua New Guinea",
	"Paraguay",
	"Peru",
	"Philippines",
	"Pitcairn",
	"Poland",
	"Portugal",
	"Puerto Rico",
	"Qatar",
	"Romania",
	"Russian Federation",
	"Rwanda",
	"Reunion",
	"Saint Barthelemy",
	"Saint Helena",
	"Saint Kitts and Nevis",
	"Saint Lucia",
	"Saint Martin (French part)",
	"Saint Pierre and Miquelon",
	"Saint Vincent and the Grenadines",
	"Samoa",
	"San Marino",
	"Sao Tome and Principe",
	"Saudi Arabia",
	"Senegal",
	"Serbia",
	"Seychelles",
	"Sierra Leone",
	"Singapore",
	"Sint Maarten (Dutch part)",
	"Slovakia",
	"Slovenia",
	"Solomon Islands",
	"Somalia",
	"South Africa",
	"South Georgia and the South Sandwich Islands",
	"South Sudan",
	"Spain",
	"Sri Lanka",
	"Sudan",
	"Suriname",
	"Svalbard and Jan Mayen",
	"Swaziland",
	"Sweden",
	"Switzerland",
	"Syrian Arab Republic",
	"Taiwan, Province of China",
	"Tajikistan",
	"United Republic of Tanzania",
	"Thailand",
	"Timor-Leste",
	"Togo",
	"Tokelau",
	"Tonga",
	"Trinidad and Tobago",
	"Tunisia",
	"Turkey",
	"Turkmenistan",
	"Turks and Caicos Islands",
	"Tuvalu",
	"Uganda",
	"Ukraine",
	"United Arab Emirates",
	"United Kingdom",
	"United States",
	"United States Minor Outlying Islands",
	"Uruguay",
	"Uzbekistan",
	"Vanuatu",
	"Venezuela",
	"Vietnam",
	"British Virgin Islands",
	"US Virgin Islands",
	"Wallis and Futuna",
	"Western Sahara",
	"Yemen",
	"Zambia",
	"Zimbabwe",
];

var render$M = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.contentClass},[(_vm.showTitle)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mb-2",attrs:{"justify":"center"}},[_c('span',{staticClass:"font-weight-normal"},[_vm._v(" "+_vm._s(_vm.label || _vm.$t("components.objectEditor"))+" ")])]):_vm._e(),(_vm.resettable)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-2 mb-6",attrs:{"justify":"center"}},[_c(__unplugin_components_94,{attrs:{"x-small":"","outlined":""},on:{"click":_vm.emitReset}},[_vm._v(" "+_vm._s(_vm.$t("actions.reset"))+" ")])],1):_vm._e(),_c(__unplugin_components_91,{directives:[{name:"show",rawName:"v-show",value:(!_vm.disableAddDelete),expression:"!disableAddDelete"}],staticClass:"ma-0 pa-0",attrs:{"align":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"5"}},[(_vm.keyChoices.length == 0)?_c(__unplugin_components_89,{staticClass:"pa-0 ma-0 ml-2 mr-4",attrs:{"dense":_vm.dense,"label":_vm.$t('words.key'),"readonly":_vm.readonly,"hint":_vm.$t(_vm.keyHint),"persistent-hint":_vm.persistentHint,"outlined":"","required":_vm.required && _vm.keyToAdd.length == 0 ? true : false,"rules":_vm.isFieldInComplexValidators(_vm.keyToAdd) ? [_vm.fieldRules(_vm.valueToAdd, _vm.complexValidator.keyToAdd.k)] : _vm.valueValidator},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.addToObject(_vm.keyToAdd, _vm.valueToAdd)}},model:{value:(_vm.keyToAdd),callback:function ($$v) {_vm.keyToAdd=$$v;},expression:"keyToAdd"}}):_c(__unplugin_components_0$3,{staticClass:"pa-0 ma-0 ml-2 mr-4",attrs:{"dense":_vm.dense,"items":_vm.keyChoices,"label":_vm.$t('words.key'),"readonly":_vm.readonly,"outlined":""},scopedSlots:_vm._u([{key:"selection",fn:function(data){return [_c('span',[_vm._v(" "+_vm._s(_vm.getSelectText(data.item))+" ")])]}},{key:"item",fn:function(data){return [_c('span',[_vm._v(" "+_vm._s(_vm.getSelectText(data.item))+" ")])]}}]),model:{value:(_vm.keyToAdd),callback:function ($$v) {_vm.keyToAdd=$$v;},expression:"keyToAdd"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"5"}},[(!_vm.isChoicesField(_vm.keyToAdd))?_c(__unplugin_components_89,{staticClass:"pa-0 ma-0 mr-2",attrs:{"label":_vm.$t('words.value'),"dense":_vm.dense,"hint":_vm.$t(_vm.valueHint),"persistent-hint":_vm.persistentHint,"readonly":_vm.readonly,"required":_vm.required && _vm.valueToAdd.length == 0 ? true : false,"rules":_vm.isFieldInComplexValidators(_vm.keyToAdd) ? [_vm.fieldRules(_vm.valueToAdd, _vm.complexValidator.keyToAdd.v)] : _vm.valueValidator,"outlined":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.addToObject(_vm.keyToAdd, _vm.valueToAdd)}},model:{value:(_vm.valueToAdd),callback:function ($$v) {_vm.valueToAdd=$$v;},expression:"valueToAdd"}}):(_vm.valueChoices[_vm.keyToAdd].type == 'select')?_c(__unplugin_components_0$3,{attrs:{"append-icon":_vm.getSelectIcon(_vm.keyToAdd, 'append'),"dense":_vm.dense,"hint":_vm.$t(_vm.valueHint),"items":_vm.valueChoices[_vm.keyToAdd].values,"label":_vm.getSelectLabel(_vm.keyToAdd),"persistent-hint":_vm.persistentHint,"prepend-icon":_vm.getSelectIcon(_vm.keyToAdd, 'prepend'),"readonly":_vm.readonly,"value":_vm.valueToAdd,"outlined":""},on:{"change":function($event){return _vm.updateValue(_vm.keyToAdd, $event)}},scopedSlots:_vm._u([{key:"selection",fn:function(data){return [_c('span',[_vm._v(" "+_vm._s(_vm.getSelectText(data.item))+" ")])]}},{key:"item",fn:function(data){return [_c('span',[_vm._v(" "+_vm._s(_vm.getSelectText(data.item))+" ")])]}}])}):_c(__unplugin_components_53,{attrs:{"dense":_vm.dense,"hint":_vm.$t(_vm.valueHint),"items":_vm.LDAPCountries,"label":_vm.getSelectLabel(_vm.keyToAdd),"persistent-hint":_vm.persistentHint,"readonly":_vm.readonly,"rules":[function (v) { return _vm.valueChoices[_vm.keyToAdd].values.includes(v) || _vm.valueToAdd != undefined && _vm.valueToAdd.length == 0 }],"value":_vm.valueToAdd,"outlined":""},on:{"change":function($event){return _vm.updateValue(_vm.keyToAdd, $event)}}})],1),_c(__unplugin_components_88,{class:(_vm.actionButtonClasses + " mb-6"),attrs:{"cols":"auto"}},[_c(__unplugin_components_94,{attrs:{"small":"","color":"primary","disabled":_vm.readonly == true || this.isFieldDisabled(_vm.keyToAdd) || _vm.keyToAdd in this.objectToEdit,"rounded":"","icon":""},on:{"click":function($event){return _vm.addToObject(_vm.keyToAdd, _vm.valueToAdd)}}},[_c(__unplugin_components_95,[_vm._v(" mdi-plus ")])],1)],1)],1),_vm._l((_vm.objectToEdit),function(subItem,subItemKey){return _c(__unplugin_components_9$2,_vm._b({key:subItemKey},'v-list-item',_vm.objectToEdit,false),[(_vm.reorder)?_c(__unplugin_components_32,[_c(__unplugin_components_94,{attrs:{"x-small":"","icon":""},on:{"click":function($event){return _vm.moveItem(subItemKey)}}},[_c(__unplugin_components_95,[_vm._v("mdi-arrow-up")])],1),_c(__unplugin_components_94,{attrs:{"x-small":"","icon":""},on:{"click":function($event){return _vm.moveItem(subItemKey, false)}}},[_c(__unplugin_components_95,[_vm._v("mdi-arrow-down")])],1)],1):_vm._e(),_c(VListItemContent,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 px-2 py-1",attrs:{"cols":"6"}},[_c(__unplugin_components_89,{attrs:{"outlined":"","dense":_vm.dense,"disabled":_vm.isFieldDisabled(subItemKey),"hide-details":!_vm.complexValidator,"hint":_vm.complexValidator ? _vm.complexValidator.subItemKey.kHint : undefined,"required":_vm.required && subItemKey.length == 0 ? true : false,"label":_vm.$t('words.key'),"value":subItemKey,"readonly":""}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"6"}},[(!_vm.isChoicesField(subItemKey))?_c(__unplugin_components_89,{attrs:{"outlined":"","dense":_vm.dense,"disabled":_vm.isFieldDisabled(subItemKey),"hide-details":!_vm.complexValidator,"hint":_vm.complexValidator ? _vm.complexValidator.subItemKey.vHint : undefined,"required":_vm.required && subItem.length == 0 ? true : false,"label":_vm.$t('words.value'),"value":subItem,"readonly":_vm.readonly},on:{"change":function($event){return _vm.updateValue(subItemKey, $event)}}}):(_vm.valueChoices[subItemKey].type == 'select')?_c(__unplugin_components_0$3,{attrs:{"append-icon":_vm.getSelectIcon(subItemKey, 'append'),"prepend-icon":_vm.getSelectIcon(subItemKey, 'prepend'),"readonly":_vm.readonly,"label":_vm.getSelectLabel(subItemKey),"items":_vm.valueChoices[subItemKey].values,"value":subItem,"hide-details":"","outlined":"","dense":_vm.dense},on:{"change":function($event){return _vm.updateValue(subItemKey, $event)}},scopedSlots:_vm._u([{key:"selection",fn:function(data){return [_c('span',[_vm._v(" "+_vm._s(_vm.getSelectText(data.item))+" ")])]}},{key:"item",fn:function(data){return [_c('span',[_vm._v(" "+_vm._s(_vm.getSelectText(data.item))+" ")])]}}],null,true)}):_c(__unplugin_components_53,{attrs:{"dense":_vm.dense,"hide-details":"","outlined":"","label":_vm.getSelectLabel(subItemKey),"readonly":_vm.readonly,"value":subItem,"items":_vm.LDAPCountries,"rules":[function (v) { return _vm.valueChoices[subItemKey].values.includes(v) || subItem != undefined && subItem.length == 0 }]},on:{"change":function($event){return _vm.updateValue(subItemKey, $event)}}})],1)],1),_c(__unplugin_components_10$2,{class:_vm.actionButtonClasses},[_c(__unplugin_components_94,{directives:[{name:"show",rawName:"v-show",value:(!_vm.disableAddDelete),expression:"!disableAddDelete"}],class:'ml-2 ' + (_vm.complexValidator ? 'mb-7' : ''),attrs:{"color":"primary","disabled":_vm.readonly == true || _vm.isFieldDisabled(subItemKey) || !_vm.isFieldDeletable(subItemKey),"rounded":"","small":"","icon":""},on:{"click":function($event){return _vm.removeFromObject(subItemKey)}}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-minus ")])],1)],1)],1)})],2)};
var staticRenderFns$M = [];

/* unplugin-vue-components disabled *///

// Complex Validator Object Structure:
// validators: {
// 'password':{
//      'k':'keyValidatorName',
//      'v':'valueValidatorName',
//      'kHint':'keyHint',
//      'vHint':'valueHint',
//  }
// }

const __vue2_script$M = {
	name: 'ObjectEditor',
	mixins: [validationMixin, utilsMixin],
	data() {
		return {
			LDAPCountries: LDAPCountries,
			...this.getInitialData()
		}
	},
	props: {
		value: Object,
		reorder: Boolean,
		label: String,
		dense: {
			type: Boolean,
			default: true
		},
		disableAddDelete: {
			type: Boolean,
			default: false
		},
		showTitle: {
			type: Boolean,
			default: false
		},
		keyChoices: {
			type: Array,
			default: () => { return [] }
		},
		valueChoices: {
			type: Object,
			default: () => { return {} }
		},
		required: Boolean,
		readonly: Boolean,
		keyHint: String,
		valueHint: String,
		persistentHint: Boolean,
		keyValidator: Function,
		valueValidator: Function,
		disabledFields: {
			type: Array
		},
		deletableFields: {
			type: Array
		},
		persistentFields: {
			type: Array
		},
		allowEmptyFields: {
			type: Boolean,
			default: false
		},
		resettable: Boolean,
		complexValidator: Object,
		contentClass: {
			type: String,
			default: "ma-0 px-6 py-2 pt-4"
		}
	},
	emits: ['update:value'],
	created() {
		this.setObject();
		this.actionButtonClasses = "ma-0 pa-0 mx-1";
	},
	mounted() {
	},
	watch: {
		value(new_v) {
			this.objectToEdit = new_v;
		},
		// keyToAdd(new_v){
		// console.log(new_v)
		// }
	},
	methods: {
		getInitialData() {
			return {
				objectToEdit: {},
				keyToAdd: "",
				valueToAdd: "",
			}
		},
		forceUpdate() {
			this.$nextTick(() => {
				this.$forceUpdate();
			});
		},
		setObject() {
			this.data = { ...this.data, ...this.getInitialData() };
			if (this.value != undefined)
				this.objectToEdit = this.value;
			this.forceUpdate();
		},
		isFieldInComplexValidators(key) {
			if (this.complexValidator != undefined)
				return key in this.complexValidator
		},
		isFieldDisabled(key) {
			if (this.disabledFields != undefined)
				return this.disabledFields.includes(key)
		},
		isFieldDeletable(key) {
			if (this.deletableFields !== undefined && Array.isArray(this.deletableFields))
				return this.deletableFields.includes(key)
			return true
		},
		updateValue(k, v) {
			this.objectToEdit[k] = v;
			this.updateObject();
		},
		addToObject(key, value) {
			if (this.keyToAdd.length < 1)
				return
			if (this.allowEmptyFields !== true)
				if (this.valueToAdd.length < 1)
					return
			if (this.isFieldDisabled(key))
				return
			this.objectToEdit[key] = value;
			this.valueToAdd = "";
			this.keyToAdd = "";
			this.updateObject();
		},
		removeFromObject(key) {
			delete this.objectToEdit[key];
			this.updateObject();
		},
		emitReset() {
			this.$emit('reset');
		},
		updateObject() {
			this.$emit('update', this.objectToEdit);
			this.forceUpdate();
		},
		moveItem(k, up = true) {
			var v = this.objectToEdit[k];
			var idx = Object.keys(this.objectToEdit).indexOf(k);
			// Convert Object to Key Value Array
			let keyValues = Object.entries(this.objectToEdit);
			// Remove item from Key Value pairs
			keyValues.splice(idx, 1);

			if (up) {
				idx -= 1;
				if (idx < 0)
					idx = Object.keys(this.objectToEdit).length;
			} else {
				idx += 1;
				if (idx >= Object.keys(this.objectToEdit).length)
					idx = 0;
			}
			// Re-add at new index
			keyValues.splice(idx, 0, [k, v]);
			this.objectToEdit = Object.fromEntries(keyValues);
			this.updateObject();
		},
		getSelectLabel(subItemKey) {
			if (typeof this.valueChoices[subItemKey] !== 'object') return undefined
			if ('label' in this.valueChoices[subItemKey])
				return this.valueChoices[subItemKey]['label']
			return this.$t('words.value')
		},
		getSelectIcon(subItemKey, iconType) {
			const selectIconTypes = ['append', 'prepend'];
			if (!selectIconTypes.includes(iconType)) return undefined
			if (typeof this.valueChoices[subItemKey] !== 'object') return undefined
			if (`${iconType}-icon` in this.valueChoices[subItemKey])
				return this.valueChoices[subItemKey][`${iconType}-icon`]
		},
		isChoicesField(subItemKey) {
			if (typeof this.valueChoices !== 'object') return false
			return subItemKey in this.valueChoices
		},
		getSelectText(subItemData) {
			if ('text_i18n' in subItemData) return this.$t(subItemData.text_i18n)
			if ('text' in subItemData) return subItemData.text
			if ('value' in subItemData) return subItemData.value
			if (!('item' in subItemData)) {
				throw new Error("Bad Value for choice field in ObjectEditor")
			}
			return subItemData.item
		},
	}
};
const __cssModules$M = {};
var __component__$M = /*#__PURE__*/normalizeComponent(
  __vue2_script$M,
  render$M,
  staticRenderFns$M,
  false,
  __vue2_injectStyles$M,
  null,
  null,
  null
);

function __vue2_injectStyles$M (context) {
  for(let o in __cssModules$M){
    this[o] = __cssModules$M[o];
  }
}

var ObjectEditor = /*#__PURE__*/(function () { return __component__$M.exports })();

var render$L = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.error == true ? 'red' : 'primary',"indeterminate":_vm.loading}}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.users.import.title'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1),_c(VExpandTransition,[(!_vm.showResult)?_c(__unplugin_components_26$1,{key:_vm.import_tab,ref:"importTabs",staticClass:"ma-0 pa-0",attrs:{"centered":"","grow":""},model:{value:(_vm.import_tab),callback:function ($$v) {_vm.import_tab=$$v;},expression:"import_tab"}},[_c(__unplugin_components_9),_c(__unplugin_components_12,{key:0},[_vm._v(_vm._s(_vm.$t("section.users.import.importOptions")))]),_c(__unplugin_components_12,{key:1,attrs:{"disabled":_vm.completed_tab < 1}},[_vm._v(_vm._s(_vm.$t("section.users.import.uploadFile")))]),_c(__unplugin_components_12,{key:2,attrs:{"disabled":_vm.completed_tab < 2}},[_vm._v(_vm._s(_vm.$t("section.users.import.previewData")))])],1):_vm._e()],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_25,{model:{value:(_vm.import_tab),callback:function ($$v) {_vm.import_tab=$$v;},expression:"import_tab"}},[_c(__unplugin_components_26,{key:0},[(_vm.isLdapUser)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align":"center","justify":"space-around"}},[_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","color":"primary"},on:{"click":function($event){_vm.userDestination = _vm.basedn;}}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.move.setToRoot'))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","disabled":!_vm.allowRefresh,"elevation":"0"},on:{"click":function($event){return _vm.fetchOUs(true)}},scopedSlots:_vm._u([{key:"loader",fn:function(){return [_c('span',{staticClass:"custom-loader"},[_c(__unplugin_components_95,{attrs:{"color":"white"}},[_vm._v("mdi-cached")])],1)]},proxy:true}],null,false,2697205047)},[_vm._v(" "+_vm._s(_vm.$t('actions.refresh'))+" "),_c(__unplugin_components_95,[_vm._v(" mdi-refresh ")])],1)],1):_vm._e(),(_vm.isLdapUser)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"8"}},[_c(__unplugin_components_55,{staticStyle:{"border":"1px solid var(--v-primary-base)"},attrs:{"flat":"","hover":""},model:{value:(_vm.userPathExpansionPanel),callback:function ($$v) {_vm.userPathExpansionPanel=$$v;},expression:"userPathExpansionPanel"}},[_c(__unplugin_components_56,[_c(__unplugin_components_57,[_c('span',[_c('span',[_vm._v(" "+_vm._s(((_vm.$t('section.users.userCreate.userCreatedIn')) + ":"))+" ")]),_c('span',{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(this.userDestination)+" ")])])]),_c(__unplugin_components_58,[_c(__unplugin_components_76,{staticStyle:{"max-height":"300px","overflow":"auto !important"},attrs:{"flat":"","outlined":""}},[_c(DirtreeOUList,{ref:"DirtreeOUList",on:{"selectedDestination":_vm.setDestination}})],1)],1)],1)],1)],1)],1):_vm._e(),(_vm.isLdapUser)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mb-2",attrs:{"align":"center","justify":"center"}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-information ")]),_c('a',{on:{"click":function($event){_vm.showCountries = !_vm.showCountries;}}},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.showCountries"))+" ")])],1):_vm._e(),_c(VExpandTransition,[(_vm.showCountries && _vm.isLdapUser)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mb-2",attrs:{"justify":"center"}},[_c(__unplugin_components_17,{staticClass:"ma-0 px-6 py-2",attrs:{"dense":"","type":"info","hide-details":"","icon":false}},[_c(__unplugin_components_53,{attrs:{"label":_vm.$t('section.users.import.countryList'),"items":_vm.LDAPCountries},model:{value:(_vm.countryInfo),callback:function ($$v) {_vm.countryInfo=$$v;},expression:"countryInfo"}})],1)],1):_vm._e()],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mb-2",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_18,{ref:"importPlaceholderPassword",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_28,{attrs:{"label":_vm.$t('section.users.import.usePlaceholderPassword')},on:{"change":_vm.resetPlaceholderPassword},model:{value:(_vm.usePlaceholderPassword),callback:function ($$v) {_vm.usePlaceholderPassword=$$v;},expression:"usePlaceholderPassword"}}),_c(VExpandTransition,[_c(__unplugin_components_89,{directives:[{name:"show",rawName:"v-show",value:(_vm.usePlaceholderPassword),expression:"usePlaceholderPassword"}],ref:"importPlaceholderPasswordField",attrs:{"type":_vm.passwordHidden ? 'password' : 'text',"required":_vm.usePlaceholderPassword,"append-icon":_vm.passwordHidden ? 'mdi-eye' : 'mdi-eye-off',"dense":"","label":_vm.$t('attribute.password'),"rules":[this.fieldRules(_vm.placeholderPassword, 'ge_password', _vm.usePlaceholderPassword ? true : false)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)},"click:append":function () { return (_vm.passwordHidden = !_vm.passwordHidden); }},model:{value:(_vm.placeholderPassword),callback:function ($$v) {_vm.placeholderPassword=$$v;},expression:"placeholderPassword"}})],1)],1)],1)],1),_c(VExpandTransition,[_c(__unplugin_components_91,{directives:[{name:"show",rawName:"v-show",value:(_vm.showUserMappings),expression:"showUserMappings"}],staticClass:"pa-0 ma-0 mb-4",attrs:{"justify":"center"}},[_c(ObjectEditor,{ref:"importFieldsEditor",attrs:{"value":this.import_fields,"label":_vm.$t('section.users.import.dataMapping'),"dense":"","reorder":"","resettable":"","required":true,"deletableFields":_vm.deletableFields,"disabledFields":_vm.usePlaceholderPassword ? ['password'] : []},on:{"update":function (v) { return _vm.import_fields = v; },"reset":_vm.setDefaultImportFields}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mb-2",attrs:{"justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"color":"primary"},on:{"click":_vm.downloadTemplate}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-download ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.downloadTemplate"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"color":"primary"},on:{"click":function($event){_vm.showUserMappings = !_vm.showUserMappings;}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-cog ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.editUserMappings"))+" ")])],1)],1)],1),_c(__unplugin_components_26,{key:1},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"6"}},[_c(__unplugin_components_52,{ref:"importFileInput",staticClass:"ma-0 pa-0",attrs:{"label":_vm.$t('section.users.import.fileToUpload'),"outlined":"","clearable":"","prepend-icon":"","prepend-inner-icon":"mdi-upload","show-size":"","accept":".csv,.tsv,.txt"},on:{"change":_vm.previewFile,"click:clear":function($event){return _vm.clearFile()}},model:{value:(_vm.inputFile),callback:function ($$v) {_vm.inputFile=$$v;},expression:"inputFile"}}),_c(__unplugin_components_12$2,{staticClass:"ma-0 pa-0 my-1",attrs:{"color":_vm.json_loaded ? (_vm.error == true ? 'red' : 'green') : 'primary',"indeterminate":_vm.loading}}),_c(VFadeTransition,[(_vm.json_loaded != true)?_c(__unplugin_components_17,{attrs:{"icon":false,"type":"warning","dense":""}},[_c('span',{domProps:{"innerHTML":_vm._s(_vm.$t('section.users.import.supportedExtensions').toUpperCase())}})]):(_vm.json_loaded && !_vm.error)?_c(__unplugin_components_17,{attrs:{"icon":"mdi-check-circle","dense":"","type":"success","close-icon":"text-uppercase"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.readyToImport").toUpperCase())+" ")]):_c(__unplugin_components_17,{attrs:{"icon":"mdi-close-circle","dense":"","type":"error","color":"red","close-icon":"text-uppercase"}},[_vm._v(" "+_vm._s(_vm.errorMsg.toUpperCase())+" ")])],1)],1)],1)],1),_c(__unplugin_components_26,{key:2},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[(!_vm.showResult)?_c(__unplugin_components_17,{staticClass:"ma-4",attrs:{"dense":"","type":"info","close-icon":"text-uppercase"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.previewMode").toUpperCase())+" ")]):(!_vm.error && _vm.showResult)?_c(__unplugin_components_17,{staticClass:"ma-4",attrs:{"icon":"mdi-check-circle","dense":"","type":"success","close-icon":"text-uppercase"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.bulkImportSuccess").toUpperCase())+" ")]):_c(__unplugin_components_17,{staticClass:"ma-4",attrs:{"icon":"mdi-alert-circle","dense":"","type":"warning","close-icon":"text-uppercase"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.bulkImportPartial").toUpperCase())+" ")])],1),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[_c(__unplugin_components_0$2,{staticClass:"py-3 px-2 mt-2 mb-2",attrs:{"headers":this.tableData.headers,"items":this.tableData.items,"loading":this.loading,"footer-props":{
							'items-per-page-options': [10, 25, 50, 100, -1]
						}},scopedSlots:_vm._u([{key:"item.status",fn:function(ref){
						var item = ref.item;
return [(item.status < 0 && item.error == 'password')?_c(__unplugin_components_95,{attrs:{"color":"orange"}},[_vm._v(" mdi-alert-circle ")]):(item.status < 0)?_c(__unplugin_components_95,{attrs:{"color":"red"}},[_vm._v(" mdi-close-circle ")]):(item.status == 0)?_c(__unplugin_components_95,{attrs:{"color":"valid"}},[_vm._v(" mdi-check-circle ")]):(item.status > 0)?_c(__unplugin_components_95,{attrs:{"color":"primary"}},[_vm._v(" mdi-share ")]):_vm._e()]}},{key:"item.error",fn:function(ref){
						var item = ref.item;
return [(item.error != 'none')?_c(__unplugin_components_40,{class:_vm.getClassForError(item.error)},[_vm._v(" "+_vm._s(_vm.$t("section.users.import.error." + item.error))+" ")]):(item.status > 0)?_c(__unplugin_components_40,{class:'bg-blue'},[_vm._v(" "+_vm._s(_vm.$t("words.skipped"))+" ")]):_c(__unplugin_components_40,{class:'bg-valid'},[_vm._v(" "+_vm._s(_vm.$t("words.success"))+" ")])]}}],null,true)})],1)],1)],1)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.prevStep}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" "+_vm._s(_vm.import_tab < 1 || _vm.showResult && _vm.import_tab > 1 ? 'mdi-close-circle' : 'mdi-chevron-left')+" ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.import_tab < 1 || _vm.showResult && _vm.import_tab > 1 ? _vm.$t("actions.close") : _vm.$t("actions.back"))+" ")])],1),(_vm.import_tab > 1 && !_vm.showResult)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"disabled":_vm.loading || _vm.json_loaded != true || _vm.error,"color":"primary","rounded":""},on:{"click":function($event){return _vm.importUsers()}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-check-circle ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.import") + " " + _vm.$tc("classes.user", _vm.tableData.items.length || 1))+" ")])],1):(_vm.import_tab < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"disabled":!_vm.isStepValid(),"dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.isStepValid(),"light":_vm.isThemeDark(_vm.$vuetify) && _vm.isStepValid(),"rounded":""},on:{"click":_vm.nextStep}},[_c('span',{staticClass:"pl-2"},[_vm._v(" "+_vm._s(_vm.$t("actions.next"))+" ")]),_c(__unplugin_components_95,{attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-right ")])],1):_vm._e()],1)],1)],1)};
var staticRenderFns$L = [];

/* unplugin-vue-components disabled *///

const __vue2_script$L = {
	name: "UserImport",
	mixins: [
		validationMixin,
		utilsMixin,
		csvMixin
	],
	data() {
		return {
			LDAPCountries: LDAPCountries,
			loading: false,
			showResult: false,
			error: false,
			errorMsg: "",
			inputFile: null,
			json_result: {},
			json_loaded: false,
			status_color: 'blue',
			allowRefresh: true,
			deletableFields: [
				"password",
				"initials",
				"phone",
				"website",
				"street_address",
				"postal_code",
				"city",
				"state_province",
				"country_name",
			],
			showUserMappings: false,
			userPathExpansionPanel: false,
			import_tab: 0,
			completed_tab: 0,
			import_fields: {},
			usePlaceholderPassword: false,
			placeholderPassword: "",
			placeholderPassword_idx: 1,
			passwordHidden: true,
			userDestination: undefined,
			countryInfo: '',
			showCountries: false,
			tableData: {
				headers: [],
				items: []
			}
		}
	},
	props: {
		userObject: Object,
		userClass: Function,
		dialogKey: String
	},
	mounted() {
		this.setDefaultImportFields();
	},
	components: {
		DirtreeOUList,
		ObjectEditor
	},
	watch: {
		usePlaceholderPassword(new_value) {
			if (new_value == true) {
				this.placeholderPassword_idx = Object.keys(this.import_fields).indexOf('password');
				delete this.import_fields['password'];
			}
			else {
				// convert object to keyValues ["key1", "value1"] ["key2", "value2"]
				let keyValues = Object.entries(this.import_fields);
				// insert key value at index
				keyValues.splice(this.placeholderPassword_idx, 0, ["password", "password"]);
				// convert key values to obj {key1: "value1", newKey: "newValue", key2: "value2"}
				this.import_fields = Object.fromEntries(keyValues);
			}

			this.$refs.importFieldsEditor.setObject();
		},
		inputFile(v) {
			if (v == null || v == undefined) {
				notificationBus.$emit('createNotification', {
					message: this.$t("section.users.import.fileCleared"),
					type: 'info'
				});
			}
		}
	},
	computed: {
		isLocalUser() {
			if (!this.userClass)
				return false
			return (this.userClass == DjangoUser)
		},
		isLdapUser() {
			if (!this.userClass)
				return false
			return (this.userClass == User)
		}
	},
	methods: {
		isStepValid() {
			switch (this.import_tab) {
				case 0:
					if (this.isLdapUser)
						if (!this.userDestination || this.userDestination.length == 0)
							return false
					break;
				case 1:
					if (!this.json_loaded || this.json_result == false || this.error)
						return false
					break;
			}
			return true
		},
		prevStep() {
			if (this.import_tab < 1 || this.showResult && this.import_tab > 1)
				this.closeDialog();
			switch (this.import_tab - 1) {
				case 0:
					this.error = false;
					this.errorMsg = "";
					this.clearFile();
					this.clearDataTable();
					this.import_tab -= 1;
					break;
				default:
					this.import_tab -= 1;
					break;
			}
		},
		nextStep() {
			switch (this.import_tab + 1) {
				case 1:
					if (this.usePlaceholderPassword && this.$refs.importPlaceholderPassword.validate()) {
						this.import_tab += 1;
						this.completed_tab += 1;
					}
					else if (!this.usePlaceholderPassword) {
						this.import_tab += 1;
						this.completed_tab += 1;
					}
					break;
				default:
					this.import_tab += 1;
					this.completed_tab += 1;
					break;
			}
		},
		resetPlaceholderPassword() {
			this.placeholderPassword = "";
			this.passwordHidden = true;
			this.$refs.importPlaceholderPasswordField.reset();
		},
		getLocalUserImportHeaders() {
			var v = [];
			for (const key in this.import_fields)
				v.push(this.import_fields[key]);
			return v
		},
		// TODO - Check newline validation
		downloadTemplate() {
			const t_headers = this.getLocalUserImportHeaders();
			CSV.export(
				t_headers,
				[],
				"ilck_user_import_template"
			);
		},
		refreshDataTable() {
			this.tableData.headers = [];
			for (let i = 0; i < this.json_result.headers.length; i++) {
				let local_alias = this.getKeyByValue(
					this.import_fields,
					this.json_result.headers[i]
				);
				this.tableData.headers.push({
					text: this.$t(`attribute.${local_alias}`),
					align: 'center',
					value: this.json_result.headers[i],
				});
			}
			this.tableData.items = this.json_result.preview_data;
		},
		clearDataTable() {
			this.tableData.headers = [];
			this.tableData.items = [];
			this.completed_tab -= 1;
		},
		async previewFile(file) {
			if (!file || file == undefined || file == null || file.length == 0)
				return
			this.loading = true;
			const t_headers = this.getLocalUserImportHeaders();

			let reader = new FileReader();
			reader.readAsText(file, "UTF-8");
			reader.onload = async (event) => {
				// notificationBus.$emit('send', {type: "success", text:"File Uploaded Successfully!"});
				let csv_file = event.target.result;
				csv_file = csv_file.replace(/\r\n/g, '\n'); // Replaces windows new line to linux.
				let csv_delimiter = CSV.guessDelimiters(csv_file, [",", "\t"]);

				this.json_result = await this.csvToJSON(csv_file, csv_delimiter);

				// csvToJSON can return invalid headers error
				if (typeof (this.json_result) === 'string') {
					this.error = true;
					this.errorMsg = this.getMessageForCode(this.json_result);
				}

				// Validate headers
				if (!this.error && !this.json_result.headers) {
					this.json_result = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode('ERR_INVALID_CSV_HEADERS');
				}

				// Header Cross Checking
				if (!this.error) {
					if (this.json_result.headers.length != t_headers.length) {
						this.json_result = false;
						this.error = true;
						this.errorMsg = this.getMessageForCode('ERR_INVALID_CSV_HEADERS');
					} else {
						for (let i = 0; i < this.json_result.headers.length; i++)
							if (this.json_result.headers[i] != t_headers[i]) {
								this.json_result = false;
								this.error = true;
								this.errorMsg = this.getMessageForCode('ERR_INVALID_CSV_HEADERS');
							}
					}
				}

				if (!this.error && this.json_result.data.length < 1) {
					this.error = true;
					this.json_result = false;
					this.errorMsg = this.getMessageForCode('noUsersInImport');
				}

				if (this.error) {
					this.error = true;
					if (this.errorMsg.length < 1)
						this.errorMsg = this.getMessageForCode('ERR_INVALID_CSV');
					this.loading = false;
					notificationBus.$emit('createNotification', {
						message: this.errorMsg,
						type: 'error'
					});
					this.clearDataTable();
				} else {
					notificationBus.$emit('createNotification', {
						message: this.$t("section.users.import.fileReady"),
						type: 'success'
					});
					this.refreshDataTable();
				}
				this.json_loaded = true;
			};
			reader.onerror = (event) => {
				console.error(event);
				this.error = true;
				this.errorMsg = this.getMessageForCode('ERR_INVALID_CSV');
				this.json_loaded = true;
				this.loading = false;
				notificationBus.$emit('createNotification', {
					message: this.errorMsg,
					type: 'error'
				});
				this.clearDataTable();
			};

			setTimeout(() => {
				this.loading = false;
			}, 500);
		},
		clearFile() {
			this.loading = false;
			this.showResult = false;
			this.error = false;
			this.errorMsg = "";
			if (this.$refs.importFileInput)
				this.$refs.importFileInput.reset();
			this.inputFile = null;
			this.json_result = {};
			this.json_loaded = false;
			this.clearDataTable();
		},
		clearData() {
			this.clearFile();
			let domainDetails = getDomainDetails();
			this.domain = domainDetails.name;
			this.realm = domainDetails.realm;
			this.basedn = domainDetails.basedn;
			this.fetchOUs();
			if (this.isLdapUser)
				this.userDestination = "CN=Users," + this.basedn;
			else
				this.userDestination = undefined;
			this.import_tab = 0;
			this.completed_tab = 0;
			this.usePlaceholderPassword = false;
			this.passwordHidden = true;
			this.placeholderPassword = "";
			this.placeholderPassword_idx = 1;
			this.setDefaultImportFields();
			this.resetPlaceholderPassword();
			this.showUserMappings = false;
			if (this.$refs.importTabs)
				if (this.$refs.items)
					this.$refs.importTabs.callSlider();
		},
		setDefaultImportFields() {
			if (this.isLdapUser)
				this.import_fields = {
					"username": "username",
					"password": "password",
					"email": "email",
					"first_name": "first_name",
					"last_name": "last_name",
					"initials": "initials",
					"phone": "phone",
					"website": "website",
					"street_address": "street_address",
					"postal_code": "postal_code",
					"city": "city",
					"state_province": "state_province",
					"country_name": "country_name"
				};
			else
				this.import_fields = {
					"username": "username",
					"password": "password",
					"email": "email",
					"first_name": "first_name",
					"last_name": "last_name",
				};
		},
		async fetchOUs(refresh = false) {
			if (refresh == true)
				this.userPathExpansionPanel = 0;
			if (this.$refs.DirtreeOUList != undefined) {
				this.allowRefresh = false;
				this.$nextTick(() => {
					if (refresh != true)
						this.setDestination();
					this.$refs.DirtreeOUList.fetchOUs()
						.then(() => {
							setTimeout(() => {
								this.allowRefresh = true;
							}, 50);
						});
				});
			}
		},
		setDestination(destination = undefined) {
			if (this.isLdapUser) {
				// Set default destination if undefined
				if (destination == undefined || !destination) {
					this.userDestination = this.basedn;
					this.userPathExpansionPanel = 0; // Enable Panel ID 0
				}
				// Set destination from arg
				else {
					this.userDestination = destination;
					this.userPathExpansionPanel = false;
				}
			} else {
				this.userDestination = undefined;
				this.userPathExpansionPanel = false;
			}
		},
		getClassForError(key) {
			switch (key) {
				case "password":
				case "country":
					return "bg-orange"
				default:
					return "bg-red"
			}
		},
		closeDialog() {
			var refresh = false;
			if (this.showResult)
				refresh = true;
			return this.$emit('closeDialog', this.dialogKey, refresh);
		},
		async importUsers() {
			this.loading = true;
			let send_data = {
				headers: this.json_result.headers,
				placeholder_password: this.placeholderPassword,
				mapping: this.import_fields,
				users: this.json_result.data,
				path: this.userDestination
			};
			await new this.userClass({}).bulkInsert(send_data)
				.then(response => {
					setTimeout(() => {
						this.loading = false;
					}, 100);
					this.error = false;
					this.errorMsg = "";
					if (response.data.code != 0) {
						notificationBus.$emit('createNotification', {
							message: this.$t('error.unknown_short'),
							type: "error"
						});
						throw new Error(this.$t('error.unknown_short'));
					}
					this.showResult = true;
					this.tableData = {
						headers: [],
						items: []
					};
					this.tableData.headers.push({
						text: this.$tc("classes.user", 1),
						align: 'center',
						value: this.import_fields['username'],
					});
					this.tableData.headers.push({
						text: this.$t("words.status"),
						align: 'center',
						value: 'status',
					});
					this.tableData.headers.push({
						text: this.$t("words.error"),
						align: 'center',
						value: 'error',
					});
					if (response.data.failed_users.length > 0) {
						response.data.failed_users.forEach(u => {
							this.tableData.items.push({
								"username": u.username,
								"status": -1,
								"error": u.stage
							});
						});
						this.error = true;
					}
					if (response.data.skipped_users.length > 0)
						response.data.skipped_users.forEach(u => {
							this.tableData.items.push({
								"username": u,
								"status": 1,
								"error": "none"
							});
						});
					if (response.data.created_users.length > 0)
						response.data.created_users.forEach(u => {
							this.tableData.items.push({
								"username": u,
								"status": 0,
								"error": "none"
							});
						});
				})
				.catch(e => {
					console.error(e);
					setTimeout(() => {
						this.loading = false;
					}, 100);
					this.error = true;
					if (this.errorMsg.length < 1)
						this.errorMsg = this.getMessageForCode(e).toUpperCase();
					notificationBus.$emit('createNotification', {
						message: this.errorMsg,
						type: "error"
					});
				});
		},
	}
};
const __cssModules$L = {};
var __component__$L = /*#__PURE__*/normalizeComponent(
  __vue2_script$L,
  render$L,
  staticRenderFns$L,
  false,
  __vue2_injectStyles$L,
  null,
  null,
  null
);

function __vue2_injectStyles$L (context) {
  for(let o in __cssModules$L){
    this[o] = __cssModules$L[o];
  }
}

var UserImport = /*#__PURE__*/(function () { return __component__$L.exports })();

var render$K = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{class:_vm.contentClass,attrs:{"flat":""}},[(_vm.showHeader)?_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1):_vm._e(),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-16 my-3",attrs:{"justify":"space-between","align":"center"}},[_c(__unplugin_components_88,[_c(__unplugin_components_91,{attrs:{"justify":"start"}},[_c(__unplugin_components_40,{staticClass:"mx-1"},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-checkbox-blank ")]),_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.containsGroups"))+" ")],1),_c(__unplugin_components_40,[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-close-box ")]),_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.doesNotContainGroups"))+" ")],1)],1)],1),_c(__unplugin_components_88,[_c(__unplugin_components_91,{attrs:{"justify":"end"}},[_c(__unplugin_components_94,{attrs:{"disabled":!this.ldapList || this.ldapList.length < 1,"text":"","color":"primary"},on:{"click":_vm.toggleOpenAll}},[_c(VFabTransition,[(_vm.listOpenAll)?_c(__unplugin_components_95,[_vm._v(" mdi-chevron-double-up ")]):_c(__unplugin_components_95,[_vm._v(" mdi-chevron-double-down ")])],1),_vm._v(" "+_vm._s(_vm.listOpenAll ? _vm.$t("actions.closeAll") : _vm.$t("actions.openAll"))+" ")],1),(_vm.addButton)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 mx-2 px-2",attrs:{"disabled":this.ldapList && this.ldapList.length < 1 || _vm.selectedDNsLength < 1,"color":"primary"},on:{"click":_vm.addDNs}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1"},[_vm._v(" mdi-plus ")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN'))+" ")],1):_vm._e(),_c(RefreshButton,{attrs:{"loading":_vm.loading,"button-class":"ma-1"},on:{"refresh":_vm.fetchLists}})],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"10"}},[_c(__unplugin_components_76,{staticStyle:{"max-height":"560px","overflow":"auto !important"},attrs:{"flat":"","outlined":""}},[(_vm.showLoadingBar)?_c(__unplugin_components_12$2,{attrs:{"indeterminate":_vm.loading,"color":_vm.loading ? 'primary' : 'secondary'}}):_vm._e(),_c(VExpandTransition,[(this.ldapList.length > 0)?_c(__unplugin_components_46,{ref:"groupTreeview",attrs:{"open-all":this.listOpenAll,"items":this.ldapList,"dense":"","open-on-click":"","hoverable":""},scopedSlots:_vm._u([{key:"prepend",fn:function(ref){
var item = ref.item;
var open = ref.open;
return [_c(__unplugin_components_91,{staticClass:"mx-1",on:{"click":function($event){_vm.isTypeValid(item.type.toLowerCase()) ? _vm.changeSelectedStatus(item) : undefined;}}},[_c(__unplugin_components_28,{attrs:{"off-icon":(!_vm.isTypeValid(item.type.toLowerCase())) ? (item.children && item.children.length > 0 ? 'mdi-checkbox-blank' : 'mdi-close-box') : undefined,"input-value":_vm.getIsSelected(item),"disabled":!_vm.isTypeValid(item.type.toLowerCase())},on:{"change":function($event){return _vm.changeSelectedStatus(item)},"click":function($event){$event.stopPropagation();}}}),(item.builtin == true && item.type != 'container')?_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" mdi-hammer ")]):(item.type == 'container')?_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" mdi-archive ")]):(item.type == 'organizational-unit')?_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" "+_vm._s(open ? 'mdi-folder-open' : 'mdi-folder')+" ")]):_vm._e(),(_vm.isUserType(item.type))?_c(__unplugin_components_95,[_vm._v(" mdi-account ")]):(item.type.toLowerCase() == 'group')?_c(__unplugin_components_95,[_vm._v(" mdi-google-circles-communities ")]):_c(__unplugin_components_95,[_vm._v(" mdi-group ")])],1)]}},{key:"label",fn:function(ref){
var item = ref.item;
return [_c(__unplugin_components_91,{attrs:{"align":"start"},on:{"click":function($event){_vm.isTypeValid(item.type.toLowerCase()) ? _vm.changeSelectedStatus(item) : undefined;}}},[_c(__unplugin_components_88,{attrs:{"cols":"11","md":"auto"}},[_vm._v(" "+_vm._s(item.name)+" ")])],1)]}}],null,false,3331522730)}):_vm._e()],1)],1)],1)],1)],1)};
var staticRenderFns$K = [];

/* unplugin-vue-components disabled *///

let defaultFilter$1 = {
	"exclude": {},
	"include": {
		"objectCategory": [
			"organizationalUnit",
			"container",
		],
		"name": "Builtin",
	},
	"use_defaults": false,
};
const __vue2_script$K = {
	name: 'CNObjectList',
	components: {
		RefreshButton
	},
	data() {
		return {
			userClasses: LDAPUserClasses,
			ldapList: [],
			selectedDNs: [],
			showLoadingBar: false,
			loading: false,
			listOpenAll: false,
			openItems: [],
			filter: defaultFilter$1
		}
	},
	props: {
		value: Array,
		isSelectedKey: {
			type: String,
			default: "id"
		},
		dialogKey: String,
		valueKey: {
			type: String,
			default: "id"
		},
		enableGroups: {
			type: Boolean,
			default: true
		},
		enableUsers: {
			type: Boolean,
			default: true
		},
		addButton: {
			type: Boolean,
			default: true
		},
		openAllButton: {
			type: Boolean,
			default: true
		},
		showHeader: {
			type: Boolean,
			default: true
		},
		contentClass: {
			type: String,
			default: "pa-2"
		},
		disabled: Boolean,
		excludeDNs: {
			type: Array,
			default: undefined
		}
	},
	computed: {
		selectedDNsLength() {
			return this.selectedDNs.length
		}
	},
	methods: {
		getIsSelected(item) {
			if (this.value !== undefined && this.value !== null && Array.isArray(this.value)) {
				return this.value.includes(item[this.valueKey])
			}
			return this.selectedDNs.includes(item[this.valueKey])
		},
		changeSelectedStatus(item) {
			if (this.value !== undefined && this.value !== null) {
				let v = structuredClone(this.value);
				if (v.includes(item[this.valueKey]))
					v = v.filter(e => e != item[this.valueKey]);
				else
					v.push(item[this.valueKey]);
				this.$emit('input', v);
			} else {
				if (this.selectedDNs.includes(item[this.valueKey]))
					this.selectedDNs = this.selectedDNs.filter(e => e != item[this.valueKey]);
				else
					this.selectedDNs.push(item[this.valueKey]);
			}
		},
		isUserType(itemObjectClass) {
			let isUser = false;
			if (this.userClasses.includes(itemObjectClass.toLowerCase()))
				isUser = true;
			return isUser
		},
		toggleOpenAll() {
			this.listOpenAll = !this.listOpenAll;
			if (this.$refs.groupTreeview != undefined)
				this.$refs.groupTreeview.updateAll(this.listOpenAll);
		},
		addDNs() {
			let searchResult;
			let finalGroupArray = [];
			// If there's a Selected Member to Add
			if (this.selectedDNs.length > 0) {
				// Loop for each Group ID
				this.selectedDNs.forEach(groupID => {
					// Loop for all objects in LDAP List to do a recursive search
					this.ldapList.forEach(element => {
						// If a result is not found keep searching
						if (!searchResult || searchResult.length == 0) {
							searchResult = objectRecursiveSearch(element, parseInt(groupID));
						}
						// Once done push it and set the result to undefined for the next object
						if (searchResult != undefined) {
							// console.log(searchResult)
							finalGroupArray.push(searchResult);
							searchResult = undefined;
						}
					});
				});
				this.$emit('addDNs', finalGroupArray);
			}
		},
		isTypeValid(type) {
			if (this.disabled)
				return false
			let types = [
				...this.userClasses,
				'group'
			];
			if (types.includes(type))
				return true
			return false
		},
		resetFilter() {
			this.filter = defaultFilter$1;
		},
		async fetchLists() {
			this.ldapList = [];
			this.resetFilter();
			let filter = this.filter;
			// Gotta force update for the filter value refresh, Javascript LOL
			this.$forceUpdate;
			filter['include']['objectClass'] = [];
			let objectClassFilter = filter['include']['objectClass'];
			// Enable Groups in filter
			if (this.enableGroups)
				objectClassFilter.push("group");
			else {
				let groupIncludeFilter = objectClassFilter.indexOf("group");
				if (groupIncludeFilter >= 0)
					objectClassFilter.splice(groupIncludeFilter);
			}
			// Enable users in filter
			if (this.enableUsers)
				objectClassFilter.push("user");
			else {
				let userIncludeFilter = objectClassFilter.indexOf("user");
				if (userIncludeFilter >= 0)
					objectClassFilter.splice(userIncludeFilter);
			}
			this.loading = true;
			this.error = false;
			this.selectedDNs = [];
			if (this.excludeDNs != undefined && this.excludeDNs.length > 0) {
				filter['exclude']["distinguishedName"] = [];
				this.excludeDNs.forEach(distinguishedName => {
					filter['exclude']["distinguishedName"].push(distinguishedName);
				});
			}
			await new OrganizationalUnit({}).dirtree(this.filter)
				.then(response => {
					this.ldapList = response.data.ldapObjectList;
					this.loading = false;
					return response
				})
				.catch(error => {
					this.loading = false;
					this.error = true;
					console.error(error);
					return error
				});
		},
		clearList() {
			this.ldapList = [];
		},
		// setDestination(destination){
		// console.log(destination)
		// },
		closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
		}
	},

};
const __cssModules$K = {};
var __component__$K = /*#__PURE__*/normalizeComponent(
  __vue2_script$K,
  render$K,
  staticRenderFns$K,
  false,
  __vue2_injectStyles$K,
  null,
  null,
  null
);

function __vue2_injectStyles$K (context) {
  for(let o in __cssModules$K){
    this[o] = __cssModules$K[o];
  }
}

var CNObjectList = /*#__PURE__*/(function () { return __component__$K.exports })();

const disabled_permissions = [
	"LDAP_UF_LOCKOUT",
	"LDAP_UF_PASSWORD_EXPIRED"
];
const permissions = {
	LDAP_UF_SCRIPT: {
		value: false,
		int: 1
	},
	LDAP_UF_ACCOUNT_DISABLE: {
		value: false,
		int: 2
	},
	LDAP_UF_HOMEDIR_REQUIRED: {
		value: false,
		int: 8
	},
	LDAP_UF_LOCKOUT: {
		value: false,
		int: 16
	},
	LDAP_UF_PASSWD_NOTREQD: {
		value: false,
		int: 32
	},
	LDAP_UF_PASSWD_CANT_CHANGE: {
		value: false,
		int: 64
	},
	LDAP_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED: {
		value: false,
		int: 128
	},
	LDAP_UF_NORMAL_ACCOUNT: {
		value: false,
		int: 512
	},
	LDAP_UF_INTERDOMAIN_TRUST_ACCOUNT: {
		value: false,
		int: 2048
	},
	LDAP_UF_WORKSTATION_TRUST_ACCOUNT: {
		value: false,
		int: 4096
	},
	LDAP_UF_SERVER_TRUST_ACCOUNT: {
		value: false,
		int: 8192
	},
	LDAP_UF_DONT_EXPIRE_PASSWD: {
		value: false,
		int: 65536
	},
	LDAP_UF_MNS_LOGON_ACCOUNT: {
		value: false,
		int: 131072
	},
	LDAP_UF_SMARTCARD_REQUIRED: {
		value: false,
		int: 262144
	},
	LDAP_UF_TRUSTED_FOR_DELEGATION: {
		value: false,
		int: 524288
	},
	LDAP_UF_NOT_DELEGATED: {
		value: false,
		int: 1048576
	},
	LDAP_UF_USE_DES_KEY_ONLY: {
		value: false,
		int: 2097152
	},
	LDAP_UF_DONT_REQUIRE_PREAUTH: {
		value: false,
		int: 4194304
	},
	LDAP_UF_PASSWORD_EXPIRED: {
		value: false,
		int: 8388608
	},
	LDAP_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION: {
		value: false,
		int: 16777216
	},
	LDAP_UF_NO_AUTH_DATA_REQUIRED: {
		value: false,
		int: 33554432
	},
	LDAP_UF_PARTIAL_SECRETS_ACCOUNT: {
		value: false,
		int: 67108864
	}
};
var ldap_perm_json_raw = {
	disabled_permissions: disabled_permissions,
	permissions: permissions
};

var render$J = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_91,{class:_vm.contentClass,attrs:{"align-content":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":_vm.hideSidebar ? 12 : 8}},[_c(__unplugin_components_76,{staticClass:"ma-0 pa-0",attrs:{"height":"100%","flat":"","outlined":!_vm.hideOutlines}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mt-5 mx-4 mb-5",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.users.perms'))+" ")]),_c(__unplugin_components_4$1,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"max-width":"100%","justify":_vm.$vuetify.breakpoint.mdAndUp ? 'start' : 'center'}},_vm._l((_vm.permissions),function(p_opts,p_key){return _c(__unplugin_components_9$2,{key:p_key,attrs:{"disabled":_vm.isPermissionDisabled(p_key) || !_vm.editFlag,"two-line":"","value":_vm.permissions[p_key].value},on:{"click":function($event){return _vm.togglePermission(p_key)}}},[(_vm.isCommonlyUsed(p_key))?_c(__unplugin_components_4,[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_95,_vm._g(_vm._b({attrs:{"color":"primary","x-small":""}},'v-icon',attrs,false),on),[_vm._v(" mdi-star-four-points ")])]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.commonlyUsed")))])])],1):_vm._e(),_c(VListItemContent,{class:_vm.isCommonlyUsed(p_key) ? '' : 'pl-10'},[_c(VListItemTitle,{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(_vm.$t('section.users.permissions.' + p_key))+" ")]),_c(VListItemSubtitle,[_vm._v(" "+_vm._s(p_key)+" ")])],1),_c(__unplugin_components_10$2,[_c(__unplugin_components_28,{attrs:{"disabled":!_vm.editFlag},on:{"click":function($event){return _vm.togglePermission(p_key)}},model:{value:(_vm.permissions[p_key].value),callback:function ($$v) {_vm.$set(_vm.permissions[p_key], "value", $$v);},expression:"permissions[p_key].value"}})],1)],1)}),1)],1)],1)],1),(!_vm.hideSidebar)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"4"}},[_c(__unplugin_components_76,{class:'ma-0 pa-0 ' + _vm.marginRawOutputCol,attrs:{"height":"100%","flat":"","outlined":!_vm.hideOutlines}},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-4",attrs:{"height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-5",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.users.permsRaw'))+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c('a',{staticClass:"text-white",attrs:{"href":"https://docs.microsoft.com/en-US/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties","target":"_blank"}},[_c(__unplugin_components_17,{attrs:{"type":"info"}},[_vm._v(" "+_vm._s(_vm.$t('section.users.permsRawHint'))+" ")])],1)]),_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_42$1,{attrs:{"hide-details":"","label":_vm.$t('section.users.permsOutputArray'),"outlined":!_vm.hideOutlines,"readonly":"","auto-grow":""},model:{value:(_vm.enabledPermList),callback:function ($$v) {_vm.enabledPermList=$$v;},expression:"enabledPermList"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_89,{attrs:{"hide-details":"","label":_vm.$t('section.users.permsCalc'),"outlined":!_vm.hideOutlines,"readonly":""},model:{value:(_vm.enabledPermInts),callback:function ($$v) {_vm.enabledPermInts=$$v;},expression:"enabledPermInts"}})],1)],1)],1)],1)],1):_vm._e()],1)};
var staticRenderFns$J = [];

/* unplugin-vue-components disabled *///
const __vue2_script$J = {
	name: 'UserPermissionList',
	mixins: [utilsMixin],
	props: {
		emitDefault: {
			type: Boolean,
			default: false
		},
		editFlag: {
			type: Boolean,
			default: false
		},
		permissions: Object,
		disabledPermissions: {
			type: Array,
			default() { return [] }
		},
		hideSidebar: {
			type: Boolean,
			default: false
		},
		contentClass: {
			type: String,
			default: "ma-0 pa-0"
		},
		hideOutlines: {
			type: Boolean,
			default: false
		}
	},
	created() {
		this.init();
	},
	computed: {
		marginRawOutputCol() {
			return this.$vuetify.breakpoint.mdAndUp ? 'ml-2' : 'mt-2'
		},
		enabledPermList() {
			return this.getEnabledPermissions(this.permissions)
		},
		enabledPermInts() {
			return this.calcEnabledPermissions(this.permissions)
		}
	},
	watch: {
		// 'permissions': {
		//     handler: function (newValue, oldValue) {
		//         for (const key in newValue) {
		// 			if (newValue[key] != oldValue[key])
		// 				console.log(key)
		// 				console.log(newValue[key].value)
		// 		}
		//     },
		//     deep: true
		// }
	},
	methods: {
		init() {
		},
		isCommonlyUsed(key) {
			const COMMON_PERMS = [
				"LDAP_UF_ACCOUNT_DISABLE",
				"LDAP_UF_NORMAL_ACCOUNT",
				"LDAP_UF_DONT_EXPIRE_PASSWD",
			];
			return COMMON_PERMS.includes(key)
		},
		isPermissionDisabled(key) {
			if (this.disabledPermissions.length > 0)
				return this.disabledPermissions.includes(key)
			return ldap_perm_json_raw.disabled_permissions.includes(key)
		},
		// When a permission in the v-list changes this function is executed
		togglePermission(key) {
			if (!(key in this.permissions)) {
				console.error(`${key} not in Permission list.`);
				return
			}
			if (this.editFlag === true) {
				this.$emit('update', key);
			}
		},
	}
};
const __cssModules$J = {};
var __component__$J = /*#__PURE__*/normalizeComponent(
  __vue2_script$J,
  render$J,
  staticRenderFns$J,
  false,
  __vue2_injectStyles$J,
  null,
  null,
  null
);

function __vue2_injectStyles$J (context) {
  for(let o in __cssModules$J){
    this[o] = __cssModules$J[o];
  }
}

var UserPermissionList = /*#__PURE__*/(function () { return __component__$J.exports })();

var render$I = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0",attrs:{"loading":_vm.refreshLoading}},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.loadingColor,"indeterminate":_vm.refreshLoading || _vm.loading}}),_c(VExpandTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.refreshLoading),expression:"!refreshLoading"}]},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[(!_vm.usercopy.first_name || _vm.usercopy.first_name == '' || !_vm.usercopy.last_name || _vm.usercopy.last_name == '')?_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.usercopy.username ? _vm.$tc('classes.user', 1) + ': ' + _vm.usercopy.username : '')+" ")]):_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$tc('classes.user', 1) + ': ' + _vm.usercopy.first_name + " " + _vm.usercopy.last_name)+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),(_vm.isLDAPView())?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 py-2 pr-1 pl-3 ma-1",attrs:{"small":"","color":"primary"},on:{"click":function($event){return _vm.goToTargetTab(_vm.tab - 1)}}},[_c(VFadeTransition,[(_vm.tab - 1 == _vm.TABS.PERMS || _vm.tab - 1 < 0)?_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.changeUserPerms"))+" ")]):(_vm.tab - 1 == _vm.TABS.GROUPS)?_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.changeUserGroups"))+" ")]):_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.userDetails"))+" ")])]),_c(__unplugin_components_95,[_vm._v("mdi-chevron-left")])],1):_vm._e(),(_vm.isLDAPView())?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 py-2 pr-1 pl-3 ma-1",attrs:{"small":"","color":"primary"},on:{"click":function($event){return _vm.goToTargetTab(_vm.tab + 1)}}},[_c(VFadeTransition,[(_vm.tab + 1 == _vm.TABS.PERMS)?_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.changeUserPerms"))+" ")]):(_vm.tab + 1 == _vm.TABS.GROUPS || _vm.tab + 1 > Object.keys(_vm.TABS).length - 1)?_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.changeUserGroups"))+" ")]):_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.userDetails"))+" ")])]),_c(__unplugin_components_95,[_vm._v("mdi-chevron-right")])],1):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VExpandTransition,[_c(__unplugin_components_91,{directives:[{name:"show",rawName:"v-show",value:(_vm.editFlag && _vm.showAlert),expression:"editFlag && showAlert"}],staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[_c(__unplugin_components_17,{staticClass:"pa-0 ma-1 pa-4 pb-3 mt-3",attrs:{"border":"top","type":"warning","icon":false}},[_c(__unplugin_components_95,{staticClass:"mdso mr-2"},[_vm._v("warning")]),_vm._v(" "+_vm._s(_vm.$t('section.users.editFlagWarning'))+" "),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 ml-2 pr-2 pl-1",attrs:{"small":""},on:{"click":_vm.viewUser}},[_c(__unplugin_components_95,{attrs:{"color":"orange"}},[_vm._v("mdi-chevron-left")]),_vm._v(" "+_vm._s(_vm.$t('actions.back'))+" ")],1)],1)],1)],1),_c(VExpandTransition,[_c(__unplugin_components_91,{directives:[{name:"show",rawName:"v-show",value:(!_vm.editFlag && _vm.showAlert),expression:"!editFlag && showAlert"}],staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[_c(__unplugin_components_17,{staticClass:"pa-0 ma-1 pa-4 pb-3 mt-3",attrs:{"border":"top","type":"info","icon":false}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v("mdi-eye-circle")]),_vm._v(" "+_vm._s(_vm.$t('section.users.viewFlagWarning'))+" "),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 ml-2 pr-2 pl-1",attrs:{"small":"","disabled":_vm.isLDAPUser() && !_vm.isLDAPView()},on:{"click":_vm.editUser}},[_c(__unplugin_components_95,{staticClass:"mx-1",attrs:{"color":"blue","small":""}},[_vm._v("mdi-pencil")]),_vm._v(" "+_vm._s(_vm.$t('actions.edit'))+" ")],1)],1)],1)],1),_c(__unplugin_components_26$1,{attrs:{"height":"0"},model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v;},expression:"tab"}},[_c(__unplugin_components_26,{key:0},[_c(VCardText,{staticClass:"my-3 py-4"},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","md":"10"}},[_c(__unplugin_components_0$3,{attrs:{"dense":"","id":"primary_group_id","label":_vm.$t('attribute.primary_group_id'),"readonly":_vm.editFlag != true,"items":this.usercopy.groups,"hint":_vm.$t('section.users.userDialog.hint.primary_group_id'),"persistent-hint":"","item-text":_vm.getNameForPID,"item-value":"object_relative_id"},model:{value:(_vm.usercopy.primary_group_id),callback:function ($$v) {_vm.$set(_vm.usercopy, "primary_group_id", $$v);},expression:"usercopy.primary_group_id"}})],1)],1),_c(__unplugin_components_91,{staticClass:"mb-2",attrs:{"justify":"center","align-content":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"10"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-0 pt-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-2",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.users.groups'))+" ")]),_c(__unplugin_components_5,{staticClass:"mx-12"}),_c(__unplugin_components_4$1,{attrs:{"dense":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mx-6 my-3",attrs:{"justify":"end"}},[_c(__unplugin_components_94,{attrs:{"color":"primary","outlined":"","disabled":_vm.editFlag != true},on:{"click":function($event){return _vm.openDialog('userAddToGroup')}}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-plus ")]),_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.addToGroup"))+" ")],1)],1),_c(__unplugin_components_8,{attrs:{"active-class":"groupSelected"}},_vm._l((_vm.usercopy.groups),function(group,key){return _c(__unplugin_components_9$2,{key:key,scopedSlots:_vm._u([{key:"default",fn:function(ref){return [_c(__unplugin_components_10$2),_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(group.name + (group.object_relative_id && group.object_relative_id.length > 0 ? ("(" + (group.object_relative_id) + ")") : ""))+" ")])],1),_c(__unplugin_components_10$2,{staticClass:"ma-0"},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"small":"","icon":"","color":"primary"},on:{"click":[function($event){return _vm.goToGroup(group.distinguished_name)},function($event){$event.stopPropagation();}]}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-arrow-right-bold ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.goTo") + " " + _vm.$tc("classes.group", 1))+" ")])])],1),_c(__unplugin_components_10$2,{staticClass:"ma-0"},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"small":"","icon":"","color":"primary"},on:{"click":[function($event){return _vm.copyText(group.distinguished_name)},function($event){$event.stopPropagation();}]}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.groups.groupDialog.copyDistinguishedName"))+" ")])])],1),_c(__unplugin_components_10$2,{staticClass:"ma-0"},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({directives:[{name:"show",rawName:"v-show",value:(group.object_relative_id != _vm.usercopy.primary_group_id),expression:"group.object_relative_id != usercopy.primary_group_id"}],attrs:{"small":"","icon":"","disabled":_vm.editFlag != true,"color":"red"},on:{"click":[function($event){return _vm.removeFromGroup(group.distinguished_name)},function($event){$event.stopPropagation();}]}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-close ")])],1),_c(__unplugin_components_94,_vm._g(_vm._b({directives:[{name:"show",rawName:"v-show",value:(group.object_relative_id == _vm.usercopy.primary_group_id),expression:"group.object_relative_id == usercopy.primary_group_id"}],attrs:{"small":"","icon":""},on:{"click":function($event){$event.stopPropagation();}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-close ")])],1)]}}],null,true)},[(group.object_relative_id != _vm.usercopy.primary_group_id)?_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.removeFromGroup"))+" ")]):_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.primaryGroupRemoveDisabled"))+" ")])])],1)]}}],null,true)})}),1)],1)],1)],1)],1)],1)],1),_c(__unplugin_components_26,{key:1},[_c(VCardText,{staticClass:"ma-0 py-4"},[_c(__unplugin_components_18,{ref:"userForm",on:{"submit":function($event){$event.preventDefault();}}},[(_vm.isLDAPView())?_c(__unplugin_components_91,{staticClass:"mb-2",attrs:{"align-content":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-5",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'start'}},[_vm._v(" "+_vm._s(_vm.$t('section.users.basicDetails'))+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"first_name","label":_vm.$t('attribute.first_name'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.first_name, 'ge_name')]},model:{value:(_vm.usercopy.first_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "first_name", $$v);},expression:"usercopy.first_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_name","label":_vm.$t('attribute.last_name'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.last_name, 'ge_name')]},model:{value:(_vm.usercopy.last_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "last_name", $$v);},expression:"usercopy.last_name"}})],1),_c(__unplugin_components_88,{class:this.$vuetify.breakpoint.smAndUp ? 'mt-3' : '',attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"email","label":_vm.$t('attribute.user.email'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.email, 'ge_email')]},model:{value:(_vm.usercopy.email),callback:function ($$v) {_vm.$set(_vm.usercopy, "email", $$v);},expression:"usercopy.email"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(VFadeTransition,[_c(__unplugin_components_76,{directives:[{name:"ripple",rawName:"v-ripple"}],staticClass:"pa-1 py-2",attrs:{"outlined":""}},[_c('span',{attrs:{"color":(_vm.usercopy.is_enabled ? 'valid-40' : 'error')}},[_vm._v(" "+_vm._s(_vm.usercopy.is_enabled ? _vm.$t('attribute.user.is_enabled') : _vm.$t('attribute.user.is_disabled'))+" ")]),(_vm.usercopy.is_enabled == true)?_c('div',{attrs:{"elevation":"0"}},[_c(__unplugin_components_95,{attrs:{"color":"valid-40"}},[_vm._v(" mdi-check ")])],1):(_vm.usercopy.is_enabled == false)?_c('div',{attrs:{"elevation":"0","icon":"","rounded":""}},[_c(__unplugin_components_95,{attrs:{"color":"error"}},[_vm._v(" mdi-close ")])],1):_vm._e()])],1)],1),(_vm.user.last_login != undefined && _vm.user.last_login != '')?_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.last_login') + ": " + _vm.user.last_login)+" ")]):_vm._e(),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"phone","label":_vm.$t('attribute.phone'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.phone, 'ge_phone_intl')]},model:{value:(_vm.usercopy.phone),callback:function ($$v) {_vm.$set(_vm.usercopy, "phone", $$v);},expression:"usercopy.phone"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"website","label":_vm.$t('attribute.website'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.website, 'ge_website')]},model:{value:(_vm.usercopy.website),callback:function ($$v) {_vm.$set(_vm.usercopy, "website", $$v);},expression:"usercopy.website"}})],1)],1)],1)],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-5",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'end'}},[_vm._v(" "+_vm._s(_vm.$t('section.users.location'))+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"street_address","label":_vm.$t('attribute.street_address'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.street_address, 'ge_address_street')]},model:{value:(_vm.usercopy.street_address),callback:function ($$v) {_vm.$set(_vm.usercopy, "street_address", $$v);},expression:"usercopy.street_address"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"postal_code","label":_vm.$t('attribute.postal_code'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.postal_code, 'ge_address_postal_code')]},model:{value:(_vm.usercopy.postal_code),callback:function ($$v) {_vm.$set(_vm.usercopy, "postal_code", $$v);},expression:"usercopy.postal_code"}})],1),_c(__unplugin_components_88,{class:this.$vuetify.breakpoint.smAndUp ? 'mt-3' : '',attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"city","label":_vm.$t('attribute.city'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.city, 'ge_address_city')]},model:{value:(_vm.usercopy.city),callback:function ($$v) {_vm.$set(_vm.usercopy, "city", $$v);},expression:"usercopy.city"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_76,{directives:[{name:"ripple",rawName:"v-ripple"}],staticClass:"pa-1 py-2",attrs:{"outlined":""}},[(_vm.usercopy.country_code_dcc != undefined && _vm.usercopy.country_code_dcc != '' && _vm.usercopy.country_code_dcc != 0)?_c('div',[_vm._v(" "+_vm._s(_vm.$t('attribute.country_codes'))+" "),_c('div',{attrs:{"elevation":"0"}},[_vm._v(" "+_vm._s(_vm.usercopy.country_code_dcc)+" "+_vm._s("(" + _vm.usercopy.country_code_iso + ")")+" ")])]):_c('div',[_vm._v(" "+_vm._s(_vm.$t('attribute.country_codes'))+" "),_c('div',[_vm._v(" "+_vm._s(_vm.$t('error.data.noCountryCode'))+" ")])])])],1),(_vm.user.last_login != undefined && _vm.user.last_login != '')?_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.last_login') + ": " + _vm.user.last_login)+" ")]):_vm._e(),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"state_province","label":_vm.$t('attribute.state_province'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.state_province, 'ge_state')]},model:{value:(_vm.usercopy.state_province),callback:function ($$v) {_vm.$set(_vm.usercopy, "state_province", $$v);},expression:"usercopy.state_province"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_53,{attrs:{"dense":"","id":"country_name","label":_vm.$t('attribute.country_name'),"clearable":_vm.editFlag === true,"readonly":_vm.editFlag != true,"items":_vm.LDAPCountries,"rules":[this.fieldRules(_vm.usercopy.country_name, 'ge_country')]},model:{value:(_vm.usercopy.country_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "country_name", $$v);},expression:"usercopy.country_name"}})],1)],1)],1)],1)],1):_vm._e(),(_vm.isLDAPView())?_c(__unplugin_components_91,{staticClass:"mt-2"},[_c(__unplugin_components_55,{staticClass:"ma-1",attrs:{"flat":""},model:{value:(_vm.panel),callback:function ($$v) {_vm.panel=$$v;},expression:"panel"}},[_c(__unplugin_components_56,{staticClass:"outlined"},[_c(__unplugin_components_57,{staticClass:"font-weight-medium"},[_vm._v(" "+_vm._s(_vm.$t("section.users.advancedDetails"))+" ")]),_c(__unplugin_components_58,[_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"distinguished_name","label":_vm.$t('attribute.distinguished_name'),"readonly":"","rules":[this.fieldRules(_vm.usercopy.distinguished_name, 'ldap_dn')]},model:{value:(_vm.usercopy.distinguished_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "distinguished_name", $$v);},expression:"usercopy.distinguished_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"user_principal_name","label":_vm.$t('attribute.user_principal_name'),"readonly":"","value":_vm.getUSN,"rules":[this.fieldRules(_vm.usercopy.user_principal_name, 'ldap_usn')]}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6","justify":_vm.$vuetify.breakpoint.lgAndUp ? 'start' : 'center'}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"account_type","label":_vm.$t('attribute.account_type'),"readonly":"","rules":[this.fieldRules(_vm.usercopy.account_type, 'ge_lettersStrictUnderscore')]},model:{value:(_vm.usercopy.account_type),callback:function ($$v) {_vm.$set(_vm.usercopy, "account_type", $$v);},expression:"usercopy.account_type"}})],1)],1),_c(__unplugin_components_91,{attrs:{"justify":_vm.$vuetify.breakpoint.lgAndUp ? 'start' : 'center',"align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","md":"3"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 py-2 pr-1 pl-3 ma-1",attrs:{"outlined":"","dense":"","color":"primary"},on:{"click":function($event){return _vm.goToTargetTab(_vm.TABS.GROUPS)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.changeUserGroups"))+" "),_c(__unplugin_components_95,[_vm._v("mdi-chevron-left")])],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12","md":"4"}},[_c(__unplugin_components_0$3,{attrs:{"dense":"","id":"primary_group_id","label":_vm.$t('attribute.primary_group_id'),"readonly":_vm.editFlag != true,"items":this.usercopy.groups,"hint":_vm.$t('section.users.userDialog.hint.primary_group_id'),"persistent-hint":"","item-text":_vm.getNameForPID,"item-value":"object_relative_id"},model:{value:(_vm.usercopy.primary_group_id),callback:function ($$v) {_vm.$set(_vm.usercopy, "primary_group_id", $$v);},expression:"usercopy.primary_group_id"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","md":"2"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"user_account_control","label":_vm.$t('attribute.user_account_control'),"readonly":"","rules":[this.fieldRules(_vm.enabledPermInts, 'ge_numbers')]},model:{value:(_vm.enabledPermInts),callback:function ($$v) {_vm.enabledPermInts=$$v;},expression:"enabledPermInts"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","md":"3"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 py-2 pr-1 pl-3 ma-1",attrs:{"outlined":"","color":"primary"},on:{"click":function($event){return _vm.goToTargetTab(_vm.TABS.PERMS)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.changeUserPerms"))+" "),_c(__unplugin_components_95,[_vm._v("mdi-chevron-right")])],1)],1)],1),_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"created_at","label":_vm.$t('attribute.created_at'),"readonly":""},model:{value:(_vm.usercopy.created_at),callback:function ($$v) {_vm.$set(_vm.usercopy, "created_at", $$v);},expression:"usercopy.created_at"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"modified_at","label":_vm.$t('attribute.modified_at'),"readonly":""},model:{value:(_vm.usercopy.modified_at),callback:function ($$v) {_vm.$set(_vm.usercopy, "modified_at", $$v);},expression:"usercopy.modified_at"}})],1)],1),_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_login_win32","label":_vm.$t('attribute.last_login_win32'),"readonly":""},model:{value:(_vm.usercopy.last_login_win32),callback:function ($$v) {_vm.$set(_vm.usercopy, "last_login_win32", $$v);},expression:"usercopy.last_login_win32"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"password_set_at","label":_vm.$t('attribute.password_set_at'),"readonly":""},model:{value:(_vm.usercopy.password_set_at),callback:function ($$v) {_vm.$set(_vm.usercopy, "password_set_at", $$v);},expression:"usercopy.password_set_at"}})],1)],1),_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"8"}},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c('span',[_vm._v(" "+_vm._s(_vm.$t('attribute.object_class'))+" ")])]),_c(__unplugin_components_91,{attrs:{"justify":"center"}},_vm._l((_vm.usercopy.object_class),function(i){return _c(__unplugin_components_40,{key:i,staticClass:"ma-1",attrs:{"light":_vm.$vuetify.theme.dark,"dark":!_vm.$vuetify.theme.dark,"close":_vm.editFlag == true},on:{"click:close":function($event){return _vm.removeObjectClassFromArray(i)}}},[_vm._v(" "+_vm._s(i)+" ")])}),1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_53,{attrs:{"dense":"","label":_vm.$t('actions.addObjectClass'),"clearable":"","readonly":_vm.editFlag != true,"hint":_vm.$t('section.users.userDialog.hint.addObjectClass'),"items":_vm.objectClasses},model:{value:(_vm.addObjectClass),callback:function ($$v) {_vm.addObjectClass=$$v;},expression:"addObjectClass"}}),_c(__unplugin_components_94,{staticClass:"ml-3",attrs:{"color":"primary","disabled":_vm.editFlag != true,"rounded":"","icon":""},on:{"click":_vm.addObjectClassToArray}},[_c(__unplugin_components_95,[_vm._v(" mdi-plus ")])],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"12"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"object_category","label":_vm.$t('attribute.object_category'),"readonly":"","rules":[this.fieldRules(_vm.usercopy.object_category, 'ldap_dn')]},model:{value:(_vm.usercopy.object_category),callback:function ($$v) {_vm.$set(_vm.usercopy, "object_category", $$v);},expression:"usercopy.object_category"}})],1)],1)],1)],1)],1)],1):_c(__unplugin_components_91,{staticClass:"mb-2",attrs:{"align-content":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-5",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'start'}},[_vm._v(" "+_vm._s(_vm.$t('section.users.basicDetails'))+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"first_name","label":_vm.$t('attribute.first_name'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.first_name, 'ge_name')]},model:{value:(_vm.usercopy.first_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "first_name", $$v);},expression:"usercopy.first_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_name","label":_vm.$t('attribute.last_name'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.last_name, 'ge_name')]},model:{value:(_vm.usercopy.last_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "last_name", $$v);},expression:"usercopy.last_name"}})],1),_c(__unplugin_components_88,{class:this.$vuetify.breakpoint.smAndUp ? 'mt-3' : '',attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"email","label":_vm.$t('attribute.user.email'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.usercopy.email, 'ge_email')]},model:{value:(_vm.usercopy.email),callback:function ($$v) {_vm.$set(_vm.usercopy, "email", $$v);},expression:"usercopy.email"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(VFadeTransition,[_c(__unplugin_components_76,{directives:[{name:"ripple",rawName:"v-ripple"}],staticClass:"pa-1 py-2",attrs:{"outlined":""}},[_c('span',{attrs:{"color":(_vm.usercopy.is_enabled ? 'valid-40' : 'error')}},[_vm._v(" "+_vm._s(_vm.usercopy.is_enabled ? _vm.$t('attribute.user.is_enabled') : _vm.$t('attribute.user.is_disabled'))+" ")]),(_vm.usercopy.is_enabled == true)?_c('div',{attrs:{"elevation":"0"}},[_c(__unplugin_components_95,{attrs:{"color":"valid-40"}},[_vm._v(" mdi-check ")])],1):(_vm.usercopy.is_enabled == false)?_c('div',{attrs:{"elevation":"0","icon":"","rounded":""}},[_c(__unplugin_components_95,{attrs:{"color":"error"}},[_vm._v(" mdi-close ")])],1):_vm._e()])],1)],1),(_vm.user.last_login != undefined && _vm.user.last_login != '')?_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.last_login') + ": " + _vm.user.last_login)+" ")]):_vm._e()],1)],1)],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-5",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'end'}},[_vm._v(" "+_vm._s(_vm.$t('section.users.userDialog.extraDetails'))+" ")]),(!_vm.isLDAPView())?_c(__unplugin_components_91,{staticClass:"mb-2",attrs:{"align-content":"center"}},[_c(__unplugin_components_91,{attrs:{"justify":"center","no-gutters":""}},[_c(__unplugin_components_88,{staticClass:"mb-1",attrs:{"cols":"12"}},[_c('p',{staticClass:"ma-0 pa-0",staticStyle:{"cursor":"default"}},[_vm._v(" "+_vm._s(_vm.$t("attribute.user.user_type"))+" ")])]),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_40,{attrs:{"color":"primary"}},[_vm._v(" "+_vm._s(_vm.user.user_type ? _vm.user.user_type.toUpperCase() : 'UNKNOWN')+" ")])],1)],1),_c(__unplugin_components_91,{staticClass:"ma-4",attrs:{"justify":"center","no-gutters":""}},[(_vm.user.dn && _vm.user.dn.length > 0)?_c(__unplugin_components_88,{staticClass:"px-2",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"dn","label":_vm.$t('attribute.distinguished_name'),"value":_vm.user.dn,"readonly":""}})],1):_vm._e(),_c(__unplugin_components_88,{staticClass:"px-2",attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"dn","label":_vm.$t('attribute.created_at'),"value":_vm.user.created_at,"readonly":""}})],1),_c(__unplugin_components_88,{staticClass:"px-2",attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"dn","label":_vm.$t('attribute.modified_at'),"value":_vm.user.modified_at,"readonly":""}})],1)],1)],1):_vm._e()],1)],1)],1)],1)],1)],1),_c(__unplugin_components_26,{key:2},[_c(UserPermissionList,{attrs:{"content-class":"ma-0 pa-0 mx-2 pb-4","permissions":this.permissions,"enable-calculations":"","edit-flag":_vm.editFlag},on:{"update":_vm.onClickPermission}})],1)],1)],1)]),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":this.$vuetify.breakpoint.mdAndDown ? 'center' : 'space-between'}},[_c(__unplugin_components_0$4,{attrs:{"top":"","offset-y":"","right":"","nudge-top":"3rem","close-on-content-click":false},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"pa-0 px-4 pr-1 mx-1",staticStyle:{"min-width":"32px"},attrs:{"elevation":"0","disabled":!_vm.editFlag,"color":"primary","outlined":""}},'v-btn',attrs,false),on),[_vm._v(" "+_vm._s(_vm.$t("actions.moreActions"))+" "),_c(__unplugin_components_95,{class:_vm.extraListOpen == true ? 'active' : '',attrs:{"id":"filterListButton"}},[_vm._v(" mdi-chevron-up ")])],1)]}}]),model:{value:(_vm.extraListOpen),callback:function ($$v) {_vm.extraListOpen=$$v;},expression:"extraListOpen"}},[_c(__unplugin_components_4$1,{attrs:{"elevation":"0","dense":"","dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_9$2,{staticClass:"ma-0 pa-0 px-2",attrs:{"disabled":!_vm.editFlag,"dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)},on:{"click":_vm.deleteTotp}},[_c(__unplugin_components_32,{staticClass:"mx-0 pa-0 mr-2",attrs:{"color":"primary"}},[_c(__unplugin_components_95,[_vm._v(" mdi-cellphone ")])],1),_c(VListItemContent,{staticClass:"v-list-btn v-btn",attrs:{"color":"primary"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.userDialog.deleteTotp").toUpperCase())+" ")])],1),(!_vm.usercopy.is_enabled)?_c(__unplugin_components_9$2,{staticClass:"ma-0 pa-0 px-2",attrs:{"disabled":!_vm.editFlag || _vm.isLoggedInUser(_vm.usercopy.username),"dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)},on:{"click":function($event){return _vm.setAccountStatus(true)}}},[_c(__unplugin_components_32,{staticClass:"mx-0 pa-0 mr-2"},[_c(__unplugin_components_95,{attrs:{"color":"valid"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")])],1),_c(VListItemContent,{staticClass:"v-list-btn v-btn"},[_vm._v(" "+_vm._s(_vm.$t("actions.enable").toUpperCase())+" ")])],1):(_vm.usercopy.is_enabled == true)?_c(__unplugin_components_9$2,{staticClass:"ma-0 pa-0 px-2",attrs:{"disabled":!_vm.editFlag || _vm.isLoggedInUser(_vm.usercopy.username),"dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)},on:{"click":function($event){return _vm.setAccountStatus(false)}}},[_c(__unplugin_components_32,{staticClass:"mx-0 pa-0 mr-2"},[_c(__unplugin_components_95,{attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1),_c(VListItemContent,{staticClass:"v-list-btn v-btn"},[_vm._v(" "+_vm._s(_vm.$t("actions.disable").toUpperCase())+" ")])],1):_vm._e()],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center","justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'end'}},[(_vm.editFlag != true)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":"","disabled":_vm.isLDAPUser() && !_vm.isLDAPView()},on:{"click":_vm.editUser}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-pencil ")]),_vm._v(" "+_vm._s(_vm.$t("actions.edit"))+" ")],1):_vm._e(),(_vm.editFlag == true)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.viewUser}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-eye ")]),_vm._v(" "+_vm._s(_vm.$t("actions.view"))+" ")],1):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"rounded":"","disabled":!_vm.editFlag || _vm.loading},on:{"click":_vm.saveUser}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-content-save ")]),_vm._v(" "+_vm._s(_vm.$t("actions.save"))+" ")],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag && !_vm.loading,"rounded":"","disabled":!_vm.editFlag || _vm.loading},on:{"click":function($event){return _vm.saveUser(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-exit-to-app ")]),_vm._v(" "+_vm._s(_vm.$t("actions.saveClose"))+" ")],1),_c(RefreshButton,{attrs:{"dense":"","fetching-data":_vm.fetchingData,"loading":_vm.refreshLoading},on:{"refresh":_vm.refreshUser}})],1)],1)],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['userAddToGroup']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userAddToGroup', $$v);},expression:"dialogs['userAddToGroup']"}},[_c(CNObjectList,{ref:"UserAddToGroup",attrs:{"dialogKey":'userAddToGroup',"excludeDNs":_vm.excludeGroups,"enableUsers":false},on:{"addDNs":_vm.addToGroup,"closeDialog":_vm.closeInnerDialog}})],1)],1)};
var staticRenderFns$I = [];

/* unplugin-vue-components disabled *///

const __vue2_script$I = {
	name: 'UserDialog',
	components: {
		CNObjectList,
		RefreshButton,
		UserPermissionList
	},
	data() {
		return {
			objectClasses: LDAPObjectClasses,
			categories: LDAPUserCategories,
			LDAPCountries: LDAPCountries,
			TABS: {
				GROUPS: 0,
				DEFAULT: 1,
				PERMS: 2,
			},
			showAlert: false,
			panel: [],
			loading: false,
			loadingColor: 'accent',
			extraListOpen: false,
			tab: () => { return this.TABS.DEFAULT },
			error: false,
			errorMsg: "",
			domain: "",
			realm: "",
			basedn: "",
			changingPerms: false,
			changingGroups: false,
			usercopy: {},
			addObjectClass: "",
			deleted_groups: [],
			groups_to_remove: [],
			groups_to_add: [],
			excludeGroups: [],
			// Dialog States
			dialogs: {
				userAddToGroup: false
			},
			permissions: ldap_perm_json_raw.permissions,
		}
	},
	mixins: [validationMixin, utilsMixin],
	props: {
		dialogKey: String,
		editFlag: Boolean,
		user: Object,
		userClass: Function,
		fetchingData: Boolean,
		refreshLoading: Boolean,
		parentTitle: String,
	},
	created() {
		this.alertDelay = 0.5e3;
		this.syncUser();
	},
	computed: {
		enabledPermInts() {
			return this.calcEnabledPermissions(this.permissions)
		},
		getUSN() {
			return `${this.usercopy.username}@${this.domain}`
		},
	},
	watch: {
		'dialogs': {
			handler: function (v_new) {
				if (!v_new['userAddToGroup'] || v_new['userAddToGroup'] == false)
					this.$refs.UserAddToGroup.clearList();
			},
			deep: true
		},
	},
	methods: {
		truncateDate,
		isLDAPView() {
			return this.parentTitle == 'ldap-users'
		},
		isLDAPUser() {
			if ("user_type" in this.user)
				return this.user.user_type == "ldap"
			return true
		},
		getModifiedValues() {
			let v = [];
			const IGNORE_KEYS = [
				'last_login_win32'
			];
			for (const key in this.user) {
				if (IGNORE_KEYS.includes(key)) continue
				if (!(key in this.user) ||
					!(key in this.usercopy)) {
					continue
				}
				if (Array.isArray(this.user[key])) {
					// Compare Values for Partial Update
					let orig_list = structuredClone(this.user[key]);
					orig_list.sort();
					this.usercopy[key].sort();
					if (JSON.stringify(orig_list) !== JSON.stringify(this.usercopy[key]))
						v.push(key);
				}
				else if (this.usercopy[key] != this.user[key]) {
					v.push(key);
				}
			}
			return v
		},
		getIsUserModified() {
			// Check Group Changes
			if (this.groups_to_add.length > 0 || this.groups_to_remove.length > 0)
				return true
			//  Check Permissions Changes
			let p = [];
			for (const [key] of Object.entries(this.permissions)) {
				if (this.permissions[key].value == true)
					p.push(key);
			}
			if (this.user.permissions !== undefined)
				if (!this.arraysAreEqual(p, this.user.permissions))
					return true
			// Check the rest of the user data.
			if (this.getModifiedValues().length > 0)
				return true
			return false
		},
		goToGroup(groupDn) {
			this.$emit('goToGroup', { distinguished_name: groupDn });
		},
		setupExclude() {
			this.excludeGroups = [];
			if (this.usercopy.groups != undefined && this.usercopy.groups.length > 0) {
				this.usercopy.groups.forEach(g => {
					this.excludeGroups.push(g.distinguished_name);
				});
			}
			if (this.usercopy.groups_to_add != undefined && this.usercopy.groups_to_add.length > 0) {
				this.usercopy.groups_to_add.forEach(g => {
					if (!this.excludeGroups.includes(g))
						this.excludeGroups.push(g);
				});
			}
			return
		},
		openDialog(key) {
			this.dialogs[key] = true;
			switch (key) {
				case 'userAddToGroup':
					this.setupExclude();
					this.$refs.UserAddToGroup.fetchLists(this.excludeGroups);
					break;
			}
		},
		closeInnerDialog(key) {
			this.dialogs[key] = false;
		},
		addToGroup(groups) {
			this.groups_to_add = groups.map(e => e.distinguished_name);
			if (!this.usercopy.groups)
				this.usercopy.groups = [];
			groups.forEach(g => {
				if (this.usercopy.groups.filter(e => e.distinguished_name == g.distinguished_name).length == 0) {
					let deleted_group_dns = this.deleted_groups.map(dg => dg.distinguished_name);
					if (deleted_group_dns.includes(g.distinguished_name)) {
						let index_in_deleted = deleted_group_dns.indexOf(g.distinguished_name);
						this.usercopy.groups.push(this.deleted_groups[index_in_deleted]);
					} else {
						this.usercopy.groups.push(g);
					}
				}

				if (this.groups_to_remove != undefined) {
					// console.log("MTR Includes this member, removing. " + g.distinguished_name)
					this.groups_to_remove = this.groups_to_remove.filter(e => e != g.distinguished_name);
				}
			});
			this.closeInnerDialog('userAddToGroup');
			// this.logGroups()
			this.setupExclude();
			this.$forceUpdate;
		},
		removeFromGroup(groupDn) {
			let currentGroupFilter = this.usercopy.groups.filter(e => e.distinguished_name == groupDn);
			let currentGroup;
			if (currentGroupFilter.length > 0)
				currentGroup = currentGroupFilter[0];

			if (currentGroup['object_relative_id'] == this.usercopy['primary_group_id']) {
				console.error("Primary group cannot be deleted");
			}
			else {
				if (!this.groups_to_remove.includes(groupDn))
					this.groups_to_remove.push(groupDn);

				if (this.groups_to_add.includes(groupDn))
					this.groups_to_add = this.groups_to_add.filter(e => e != groupDn);

				if (this.excludeGroups.includes(groupDn))
					this.excludeGroups = this.excludeGroups.filter(e => e != groupDn);

				if (this.deleted_groups.filter(e => e.distinguished_name == groupDn).length < 1)
					this.deleted_groups.push(currentGroup);
				this.usercopy.groups = this.usercopy.groups.filter(e => e.distinguished_name != groupDn);
				// this.logGroups()
				this.setupExclude();
				this.$forceUpdate;
			}
		},
		logGroups() {
			console.log("Groups to Add");
			console.log(this.groups_to_add);
			console.log("Groups to Remove");
			console.log(this.groups_to_remove);
			console.log("User Groups");
			console.log(this.usercopy.groups);
		},
		copyText(textString) {
			navigator.clipboard.writeText(textString);
		},
		getNameForPID(item) {
			if (item && item?.name && item?.object_relative_id)
				return `${item.name} (${item.object_relative_id.toString()})`
		},
		setDomainDetails() {
			let domainDetails = getDomainDetails();
			this.domain = domainDetails['name'];
			this.realm = domainDetails['realm'];
			this.basedn = domainDetails['basedn'];
		},
		setObjectClassToArray() {
			if (this.usercopy.object_class && this.usercopy.object_class != '' && (typeof this.usercopy.object_class === 'string' || this.usercopy.object_class instanceof String)) {
				this.usercopy.object_class = this.usercopy.object_class.replace(/'/g, "\"");
				this.usercopy.object_class = JSON.parse(this.usercopy.object_class);
			}
		},
		removeObjectClassFromArray(value) {
			// Returns array without value
			if (this.usercopy.object_class.includes(value) && Array.isArray(this.usercopy.object_class))
				this.usercopy.object_class = this.usercopy.object_class.filter(e => e !== value);
			this.addObjectClass = value;
		},
		addObjectClassToArray() {
			if (!this.usercopy.object_class.includes(this.addObjectClass) && this.addObjectClass)
				this.usercopy.object_class.push(this.addObjectClass);
			this.addObjectClass = '';
		},
		// When a permission in the v-list changes this function is executed
		onClickPermission(key) {
			if (this.editFlag == true)
				this.permissions[key].value = !this.permissions[key].value;
		},
		goBackToDetails() {
			this.tab = this.TABS.DEFAULT;
			this.changingPerms = false;
			this.changingGroups = false;
		},
		// This function sets the permissions each time the usercopy object is
		// synced to the parent view user object
		setPermissions() {
			for (const [key] of Object.entries(this.permissions)) {
				this.permissions[key].value = false;
			}
			if (this.usercopy['permissions'] != undefined) {
				this.usercopy['permissions'].forEach(perm => {
					this.permissions[perm].value = true;
				});
			}
		},
		delay(t, val) {
			return new Promise(resolve => setTimeout(resolve, t, val));
		},
		goToTargetTab(targetTab) {
			if (targetTab > Object.keys(this.TABS).length - 1) targetTab = 0;
			if (targetTab < 0) targetTab = 2;
			this.tab = targetTab;
			switch (targetTab) {
				case this.TABS.GROUPS:
					this.changingPerms = false;
					this.changingGroups = true;
					break;
				case this.TABS.PERMS:
					this.changingPerms = true;
					this.changingGroups = false;
					break;
				default:
					this.changingPerms = false;
					this.changingGroups = false;
					break;
			}
		},
		refreshUserList() {
			this.$emit('refreshUserList');
		},
		async setAccountStatus(enabled) {
			this.extraListOpen = false;
			let ident;
			if (this.isLDAPUser())
				ident = {
					username: this.usercopy.username,
					enabled: enabled
				};
			else
				ident = {
					id: this.usercopy.id,
					enabled: enabled
				};
			await new this.userClass({}).changeAccountStatus(ident)
				.then(() => {
					let action = `words.${enabled ? 'enabled' : 'disabled'}`;
					this.refreshUser();
					this.refreshUserList();
					notificationBus.$emit('createNotification',
						{
							message: (`${this.$tc("classes.user", 1)} ${this.$t(action)}`).toUpperCase(),
							type: 'warning'
						}
					);
				})
				.catch(error => {
					console.error(error);
					notificationBus.$emit('createNotification',
						{
							message: this.getMessageForCode(error),
							type: 'error'
						}
					);
				});
		},
		async deleteTotp(closeDialog = false) {
			await new User({}).deleteTotp({ username: this.usercopy.username })
				.then(() => {
					if (closeDialog == true)
						this.closeDialog();
					else
						this.refreshUser();
		  notificationBus.$emit('createNotification',
			{
			  message: (this.$tc("classes.totp-device", 1) + " " + this.$t("words.deleted.m")).toUpperCase(),
			  type: 'success'
			}
		  );
		  this.loading = false;
		  this.loadingColor = 'primary';
		})
		.catch(error => {
		  console.error(error);
		  this.loading = false;
		  this.loadingColor = 'error';
		  this.error = true;
		  this.errorMsg = this.getMessageForCode(error);
		  notificationBus.$emit('createNotification',
			{ message: this.errorMsg.toUpperCase(), type: 'error' }
		  );
		});
	},
	editUser() {
	  this.showAlert = false;
	  this.$emit('editToggle', true);
	  setTimeout(() => {
		this.setShowAlert();
	  }, this.alertDelay);
	},
	viewUser() {
	  this.showAlert = false;
	  this.$emit('editToggle', false);
	  this.refreshUser();
	  setTimeout(() => {
		this.setShowAlert();
	  }, this.alertDelay);
	},
	closeDialog() {
	  this.$emit('closeDialog', this.dialogKey);
	},
	async saveUser(closeDialog = false) {
	  if (this.getIsUserModified() != true) {
		console.log("User was not modified, ignoring user save request.");
		return
	  }
	  switch (this.parentTitle) {
		case "django-users":
		  if (this.$refs.userForm.validate()) {
			await new this.userClass({}).update(this.usercopy)
			  .then(() => {
				if (closeDialog == true)
				  this.closeDialog();
				else
				  this.refreshUser();
				this.$emit('save');
				this.loading = false;
				this.loadingColor = 'primary';
			  })
			  .catch(error => {
				console.error(error);
				this.loading = false;
				this.loadingColor = 'error';
				this.error = true;
				this.errorMsg = this.getMessageForCode(error);
				notificationBus.$emit('createNotification',
				  { message: this.errorMsg.toUpperCase(), type: 'error' }
				);
			  });
		  } else {
			this.loading = false;
			this.loadingColor = 'error';
			this.error = true;
		  }
		  break;
		default:
		  this.loading = true;
		  this.loadingColor = 'primary';
		  // Set permissions array properly
		  this.usercopy.permissions = [];
		  for (const [key] of Object.entries(this.permissions)) {
			if (this.permissions[key].value == true)
			  this.usercopy.permissions.push(key);
		  }

		  let modifiedValues = this.getModifiedValues();
		  let partialUpdateData = {
			username: this.usercopy.username,
			distinguished_name: this.usercopy.distinguished_name,
		  };
		  modifiedValues.forEach(k => {
			partialUpdateData[k] = this.usercopy[k];
		  });
		  if (this.groups_to_add.length > 0)
			partialUpdateData.groups_to_add = this.groups_to_add;
		  else
			delete partialUpdateData.groups_to_add;
		  // Groups to Remove
		  if (this.groups_to_remove.length > 0)
			partialUpdateData.groups_to_remove = this.groups_to_remove;
		  else
			delete partialUpdateData.groups_to_remove;

		  // Uncomment below to debug permissions list
		  // console.log(this.usercopy.permissions)
		  if (this.$refs.userForm.validate()) {
			await new this.userClass({}).update(partialUpdateData)
			  .then(() => {
				if (closeDialog == true)
				  this.closeDialog();
				else
				  this.refreshUser();
				this.$emit('save');
				this.loading = false;
				this.loadingColor = 'primary';
			  })
			  .catch(error => {
				console.error(error);
				this.loading = false;
				this.loadingColor = 'error';
				this.error = true;
				this.errorMsg = this.getMessageForCode(error);
				notificationBus.$emit('createNotification',
				  { message: this.errorMsg.toUpperCase(), type: 'error' }
				);
			  });
		  } else {
			this.loading = false;
			this.loadingColor = 'error';
			this.error = true;
		  }
		  break;
	  }
	},
	isLoggedInUser(username) {
	  if (username == localStorage.getItem('user.username'))
		return true
	  return false
	},

	setUserGroups() {
	  this.groups_to_remove = [];
	  this.groups_to_add = [];
	},
	setShowAlert() {
	  if (this.isLDAPUser() && this.isLDAPView() || !this.isLDAPUser() && !this.isLDAPView())
		this.showAlert = true;
	},
	// Sync the usercopy object to the parent view user object on the
	// next tick to avoid mutation errors
	syncUser() {
	  this.tab = this.TABS.DEFAULT;
	  this.changingPerms = false;
	  this.changingGroups = false;
	  this.excludeGroups = [];
	  this.setDomainDetails();
	  this.usercopy = new this.userClass({});
	  this.extraListOpen = false;
	  this.$nextTick(() => {
		this.usercopy = Object.assign({}, this.user);
		this.setUserGroups();
		this.setObjectClassToArray();
		this.setupExclude();
		if (this.usercopy.last_login_win32 == 0)
		  this.usercopy.last_login_win32 = this.$t('section.users.userDialog.noLastLogon');
		this.setPermissions();
		this.loading = false;
		this.loadingColor = 'primary';
		if (Object.keys(this.user).length != 0)
		  setTimeout(() => {
			this.setShowAlert();
		  }, this.alertDelay);
	  });
	},
	// Tells the parent view to refresh/fetch the user again
	async refreshUser() {
	  this.loading = true;
	  this.$emit('refreshUser', this.user);
	  this.setupExclude();
	  this.loading = false;
	  this.loadingColor = 'primary';
	},
	exit() {
	  this.showAlert = false;
	  this.tab = this.TABS.DEFAULT;
	}
  }
};
const __cssModules$I = {};
var __component__$I = /*#__PURE__*/normalizeComponent(
  __vue2_script$I,
  render$I,
  staticRenderFns$I,
  false,
  __vue2_injectStyles$I,
  null,
  null,
  null
);

function __vue2_injectStyles$I (context) {
  for(let o in __cssModules$I){
    this[o] = __cssModules$I[o];
  }
}

var UserDialog = /*#__PURE__*/(function () { return __component__$I.exports })();

var render$H = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_12$2,{attrs:{"indeterminate":_vm.loading,"color":_vm.loadingColor}}),_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.users.userBulkUpdate.title'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(__unplugin_components_7,{model:{value:(_vm.stage),callback:function ($$v) {_vm.stage=$$v;},expression:"stage"}},[_c(VStepperHeader,{staticClass:"px-16"},[_c(__unplugin_components_11,{attrs:{"complete":_vm.stage > 1,"step":"1"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.userBulkUpdate.step1"))+" ")]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.stage > 1 ? 'border-color: var(--v-primary-base) !important' : '')}),(_vm.isLdapUser)?_c(__unplugin_components_11,{attrs:{"complete":_vm.stage > 2,"step":"2"}},[_vm._v(" "+_vm._s(_vm.$t("section.users.userBulkUpdate.step2"))+" ")]):_vm._e()],1),_c(VExpandTransition,[_c(VStepperItems,{directives:[{name:"show",rawName:"v-show",value:(_vm.showStepper),expression:"showStepper"}]},[_c(__unplugin_components_31,{attrs:{"step":"1"}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 pa-4",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{class:'pa-0 ma-0' + _vm.colMarginsR,attrs:{"cols":"12","md":_vm.isLocalUser ? 12 : 6}},[_c(__unplugin_components_76,{attrs:{"height":"100%","flat":"","outlined":""}},[_c(ObjectEditor,{ref:"userBulkUpdateObjectEditor",attrs:{"allow-empty-fields":"","dense":"","resettable":"","value":_vm.userFields,"value-choices":_vm.choicesFields,"key-choices":_vm.getKeyChoiceFields()},on:{"update":_vm.updateFields,"reset":function($event){return _vm.setDefaultFields()}}})],1)],1),(_vm.isLdapUser)?_c(__unplugin_components_88,{class:'pa-0 ma-0' + _vm.colMarginsL,attrs:{"cols":"12","md":"6"}},[_c(UserPermissionList,{ref:"UserBulkUpdatePermissionList",attrs:{"permissions":_vm.permissions,"edit-flag":"","content-class":"ma-0 pa-0","hide-sidebar":""},on:{"update":_vm.onClickPermission}})],1):_vm._e()],1)],1),(_vm.isLdapUser)?_c(__unplugin_components_31,{attrs:{"step":"2"}},[_c(__unplugin_components_91,{staticClass:"px-12",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_4$1,{directives:[{name:"show",rawName:"v-show",value:(_vm.showModifiedAttributes),expression:"showModifiedAttributes"}],staticClass:"my-1",attrs:{"nav":"","width":"100%"}},[_c(__unplugin_components_9$2,[_c(VListItemContent,[_c(VListItemTitle,{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(_vm.$t("section.users.userBulkUpdate.modifiedAttributes"))+" ")])],1)],1),_vm._l((_vm.userFields),function(v,k){return _c(__unplugin_components_9$2,{key:k},[_c(__unplugin_components_91,{attrs:{"justify":"space-around"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_5,{staticClass:"mb-2"})],1),_c(__unplugin_components_88,{staticClass:"mx-2"},[_vm._v(" "+_vm._s(_vm.$t(("attribute." + k)))+" ")]),_c(__unplugin_components_88,{staticClass:"mx-2"},[_c(__unplugin_components_95,{attrs:{"color":"primary"}},[_vm._v(" mdi-arrow-right-thin ")])],1),_c(__unplugin_components_88,{staticClass:"mx-2"},[_vm._v(" "+_vm._s(v)+" ")])],1)],1)}),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_5,{staticClass:"mx-2"})],1)],2),(_vm.getEnabledPermissions(_vm.permissions).length >= 1)?_c(__unplugin_components_4$1,{staticClass:"my-1",attrs:{"nav":"","width":"100%"}},[_c(__unplugin_components_9$2,[_c(VListItemContent,[_c(VListItemTitle,{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(_vm.$t("section.users.perms"))+" ")])],1)],1),_vm._l((_vm.getEnabledPermissions(_vm.permissions)),function(k){return _c(__unplugin_components_9$2,{key:k},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_5,{staticClass:"mb-2"}),_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t(("section.users.permissions." + k)))+" ")])],1)],1)],1)}),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_5,{staticClass:"mx-2"})],1)],2):_vm._e()],1)],1):_vm._e()],1)],1)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":this.$vuetify.breakpoint.mdAndDown ? 'center' : 'space-between'}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center","justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'end'}},[_c(__unplugin_components_94,{directives:[{name:"show",rawName:"v-show",value:(_vm.stage == 1 && _vm.isLdapUser),expression:"stage == 1 && isLdapUser"}],staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){_vm.stage++;}}},[_vm._v(" "+_vm._s(_vm.$t("actions.next"))+" "),_c(__unplugin_components_95,{staticClass:"ml-1"},[_vm._v(" mdi-chevron-right ")])],1),_c(__unplugin_components_94,{directives:[{name:"show",rawName:"v-show",value:(_vm.stage >= 2),expression:"stage >= 2"}],staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){_vm.stage--;}}},[_c(__unplugin_components_95,{staticClass:"ml-1"},[_vm._v(" mdi-chevron-left ")]),_vm._v(" "+_vm._s(_vm.$t("actions.back"))+" ")],1),_c(__unplugin_components_94,{directives:[{name:"show",rawName:"v-show",value:(_vm.stage == 1 && _vm.isLocalUser || _vm.stage == 2),expression:"stage == 1 && isLocalUser || stage == 2"}],staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"disabled":!_vm.allowSave,"color":"primary","rounded":""},on:{"click":function($event){return _vm.saveUsers(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-exit-to-app ")]),_vm._v(" "+_vm._s(_vm.$t("actions.saveClose"))+" ")],1)],1)],1)],1)],1)};
var staticRenderFns$H = [];

/* unplugin-vue-components disabled *///

const __vue2_script$H = {
	name: "UserBulkUpdate",
	mixins: [utilsMixin, validationMixin],
	computed: {
		colMarginsL() {
			if (this.$vuetify.breakpoint.mdAndUp) return ' pl-2'
			return ' mt-4'
		},
		colMarginsR() {
			if (this.$vuetify.breakpoint.mdAndUp) return ' pr-2'
			return ''
		},
		isLocalUser() {
			if (!this.userClass)
				return false
			return this.userClass == DjangoUser
		},
		isLdapUser() {
			if (!this.userClass)
				return false
			return this.userClass == User
		},
	},
	components: {
		ObjectEditor,
		UserPermissionList
	},
	props: {
		userClass: Function,
		selectedUsers: Array,
		dialogKey: String,
	},
	data() {
		return {
			allowSave: false,
			LDAPCountries: LDAPCountries,
			showStepper: false,
			stage: 1,
			showModifiedAttributes: false,
			userFields: {},
			permissions: {},
			choicesFields: {},
			forceUpdateTick: 0,
			loading: false,
			loadingColor: 'primary',
		}
	},
	created() {
		this.init();
	},
	watch: {
		forceUpdateTick: {
			deep: true,
			immediate: true,
			handler: function (val, oldVal) {
				this.setAllowSave();
			}
		},
	},
	methods: {
		init() {
			console.log(`Init: ${this.$options.name}`);
			setTimeout(() => {
				this.showStepper = true;
			}, 150);
			this.setDefaultFields();
			this.setDefaultPerms();
			this.stage = 1;
		},
		exit() {
			this.showStepper = false;
		},
		setAllowSave() {
			if (this.isLdapUser) this.allowSave = true;
			else this.allowSave = Object.keys(this.userFields).length >= 1;
		},
		updateFields(v) {
			this.forceUpdateTick++;
			this.userFields = v;
			this.setModifiedAttributes();
		},
		setModifiedAttributes() {
			if (this.userFields == undefined) return this.showModifiedAttributes = false
			if (Object.keys(this.userFields).length <= 0) return this.showModifiedAttributes = false
			return this.showModifiedAttributes = true
		},
		getDefaultFields() {
			let fields = {
				"first_name": {
					text_i18n: "attribute.first_name",
					value: ""
				},
				"last_name": {
					text_i18n: "attribute.last_name",
					value: ""
				},
			};
			if (this.isLdapUser) {
				fields = {
					...fields,
					"phone": {
						text_i18n: "attribute.phone",
						value: ""
					},
					"street_address": {
						text_i18n: "attribute.street_address",
						value: ""
					},
					"postal_code": {
						text_i18n: "attribute.postal_code",
						value: ""
					},
					"city": {
						text_i18n: "attribute.city",
						value: ""
					},
					"state_province": {
						text_i18n: "attribute.state_province",
						value: ""
					},
					"country_name": {
						text_i18n: "attribute.country_name",
						value: ""
					},
					"website": {
						text_i18n: "attribute.website",
						value: ""
					},
				};
			}
			return fields
		},
		setDefaultFields() {
			this.setAllowSave();
			if (this.$refs.userBulkUpdateObjectEditor !== undefined)
				this.$refs.userBulkUpdateObjectEditor.setObject();
			this.userFields = {};
			this.choicesFields = {
				"country_name": {
					values: this.LDAPCountries,
					type: "autocomplete"
				}
			};
		},
		setDefaultPerms() {
			this.permissions = structuredClone(ldap_perm_json_raw.permissions);
			this.permissions["LDAP_UF_NORMAL_ACCOUNT"].value = true;
		},
		getKeyChoiceFields() {
			let r = [];
			let defaultFields = this.getDefaultFields();
			Object.keys(defaultFields).forEach(k => {
				defaultFields[k].value = k;
				r.push(defaultFields[k]);
			});
			return r
		},
		// When a permission in the v-list changes this function is executed
		onClickPermission(key) {
			this.permissions[key].value = !this.permissions[key].value;
		},
		async saveUsers() {
			this.loading = true;
			let data;
			let filteredFields = filterObject(this.userFields, v => v && v.length >= 1);
			let filteredPerms = filterObject(this.permissions, v => v.value === true);
			if (this.isLdapUser) {
				filteredPerms = Object.keys(filteredPerms);
				data = {
					users: this.selectedUsers.map(v => v.username),
					values: filteredFields,
					permissions: filteredPerms
				};
			} else {
				data = {
					users: this.selectedUsers.map(v => v.id),
					values: filteredFields,
				};
			}
			await new this.userClass({}).bulkUpdate(data)
				.then(response => {
					this.closeDialog();
					notificationBus.$emit('createNotification',
						{
							message: (this.$tc("classes.user", this.selectedUsers.length) + " " + this.$t("words.saved.m")).toUpperCase(),
							type: 'success'
						}
					);
					this.loading = false;
					this.loadingColor = 'primary';
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.loadingColor = 'error';
					this.error = true;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{ message: this.errorMsg.toUpperCase(), type: 'error' }
					);
				});
		},
		async closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
			this.$emit('refresh');
		},
	}
};
const __cssModules$H = {};
var __component__$H = /*#__PURE__*/normalizeComponent(
  __vue2_script$H,
  render$H,
  staticRenderFns$H,
  false,
  __vue2_injectStyles$H,
  null,
  null,
  null
);

function __vue2_injectStyles$H (context) {
  for(let o in __cssModules$H){
    this[o] = __cssModules$H[o];
  }
}

var UserBulkUpdate = /*#__PURE__*/(function () { return __component__$H.exports })();

var render$G = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(__unplugin_components_12$2,{attrs:{"color":_vm.error == true ? 'red' : 'primary',"indeterminate":_vm.loading}}),_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.title'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_18,{ref:"userResetPasswordForm",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 mt-8 mb-4 text-uppercase font-weight-normal",staticStyle:{"font-size":"medium !important"},attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.changePasswordForUser') + " ")+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 mt-4 mb-5 text-uppercase font-weight-bold",staticStyle:{"font-size":"large !important"},attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.userObject.first_name && _vm.userObject.last_name ? _vm.userObject.first_name + " " + _vm.userObject.last_name + " (" + _vm.userObject.username + ")" : _vm.userObject.username)+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"10","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"type":_vm.passwordHidden ? 'password' : 'text',"required":"","append-icon":_vm.passwordHidden ? 'mdi-eye' : 'mdi-eye-off',"dense":"","label":_vm.$t('attribute.password'),"rules":[this.fieldRules(_vm.user.password, 'ge_password', true)]},on:{"click:append":function () { return (_vm.passwordHidden = !_vm.passwordHidden); },"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true, _vm.user)}},model:{value:(_vm.user.password),callback:function ($$v) {_vm.$set(_vm.user, "password", $$v);},expression:"user.password"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"10","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"type":_vm.passwordHidden ? 'password' : 'text',"dense":"","label":_vm.$t('attribute.password_confirm'),"rules":[_vm.user.password_confirm == _vm.user.password ? true : this.$t('error.validation.passwordNotSame')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true, _vm.user)}},model:{value:(_vm.user.password_confirm),callback:function ($$v) {_vm.$set(_vm.user, "password_confirm", $$v);},expression:"user.password_confirm"}})],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 pt-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 pb-3",attrs:{"cols":"12"}},[_c('h3',[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.complexity.title'))+" ")])]),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c('ul',[_c('li',[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.complexity.letters'))+" ")]),_c('li',[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.complexity.numbers'))+" ")]),_c('li',[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.complexity.symbols'))+" ")]),_c('li',[_vm._v(" "+_vm._s(_vm.$t('section.users.resetPasswordDialog.complexity.dontMatchUser'))+" ")])])])],1)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":function($event){return _vm.closeDialog(true, _vm.user)}}},[_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"color":"white"}},[_vm._v(" mdi-account-key ")]),_c('span',{staticClass:"pr-1 text-white"},[_vm._v(" "+_vm._s(_vm.$t("actions.changePassword"))+" ")])],1)],1)],1)],1)};
var staticRenderFns$G = [];

/* unplugin-vue-components disabled *///

const __vue2_script$G = {
	name: "UserResetPassword",
	mixins: [
		validationMixin,
		utilsMixin
	],
	data() {
		return {
			passwordHidden: true,
			loading: false,
			error: false,
			errorMsg: "",
			user: {
				"password": "",
				"password_confirm": "",
			}
		}
	},
	props: {
		userObject: Object,
		isEndUser: {
			type: Boolean,
			default: false
		},
		userClass: Function,
		parentTitle: String,
		dialogKey: String
	},
	created() {
	},
	methods: {
		clearUser() {
			this.loading = false;
			this.error = false;
			this.errorMsg = false;
			this.user = {
				"password": "",
				"password_confirm": "",
			};
			this.$refs.userResetPasswordForm.resetValidation();
		},
		async closeDialog(resetConfirm = false, user = {}) {
			if (resetConfirm !== true)
				this.$emit('closeDialog', this.dialogKey, resetConfirm);
			if (this.isEndUser === true) {
				if (resetConfirm === true && this.$refs.userResetPasswordForm.validate()) {
					this.loading = true;
					await new this.userClass({}).selfChangePassword(user)
						.then(response => {
							setTimeout(() => {
								this.loading = false;
							}, 100);
							this.error = false;
							this.errorMsg = "";
							notificationBus.$emit('createNotification', {
								message: this.$t('section.logs.extras.changed_password'),
								type: "success"
							});
							this.$emit('closeDialog', this.dialogKey, resetConfirm);
						})
						.catch(error => {
							setTimeout(() => {
								this.loading = false;
							}, 100);
							this.error = true;
							this.errorMsg = this.getMessageForCode(error).toUpperCase();
							notificationBus.$emit('createNotification', {
								message: this.errorMsg,
								type: "error"
							});
						});
				}
			}
			else {
				if (this.parentTitle == "ldap-users") {
					user.distinguished_name = this.userObject.distinguished_name;
				} else {
					user.id = this.userObject.id;
				}
				user.username = this.userObject.username;
				if (resetConfirm == true && this.$refs.userResetPasswordForm.validate()) {
					this.loading = true;
					await new this.userClass({}).changePassword(user)
						.then(response => {
							setTimeout(() => {
								this.loading = false;
							}, 100);
							this.error = false;
							this.errorMsg = "";
							notificationBus.$emit('createNotification', {
								message: this.$t('section.logs.extras.changed_password'),
								type: "success"
							});
							this.$emit('closeDialog', this.dialogKey, true);
						})
						.catch(error => {
							console.error(error);
							setTimeout(() => {
								this.loading = false;
							}, 100);
							this.error = true;
							this.errorMsg = this.getResponseErrorCode(error);
							if (this.errorMsg.toLowerCase() == "unwillingtoperform")
								this.errorMsg = this.getMessageForCode(this.errorMsg + "Pwd").toUpperCase();
							else
								this.errorMsg = this.getMessageForCode(this.errorMsg).toUpperCase();
							notificationBus.$emit('createNotification', {
								message: this.errorMsg,
								type: "error"
							});
						});
				}
			}
		},
	}
};
const __cssModules$G = {};
var __component__$G = /*#__PURE__*/normalizeComponent(
  __vue2_script$G,
  render$G,
  staticRenderFns$G,
  false,
  __vue2_injectStyles$G,
  null,
  null,
  null
);

function __vue2_injectStyles$G (context) {
  for(let o in __cssModules$G){
    this[o] = __cssModules$G[o];
  }
}

var UserResetPassword = /*#__PURE__*/(function () { return __component__$G.exports })();

var render$F = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.users.deleteUser.title'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(!_vm.multipleUsers ? _vm.$t('section.users.deleteUser.message') : '')+" "),(!_vm.multipleUsers)?_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(( _vm.userObject.first_name && _vm.userObject.last_name ? ((_vm.userObject.first_name) + " " + (_vm.userObject.last_name) + " (" + (_vm.userObject.username) + ")") : _vm.userObject.username ) + "?")+" ")]):(_vm.multipleUsers)?_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.$t('section.users.deleteUser.mass') + "?")+" "),_vm._l((_vm.userObjectList),function(user){return _c('span',{key:user.username},[_c('br'),_vm._v(" "+_vm._s(( user.first_name && user.last_name ? ((user.first_name) + " " + (user.last_name) + " (" + (user.username) + ")") : user.username ))+" ")])})],2):_vm._e()])],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)},"click":function($event){return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$F = [];

/* unplugin-vue-components disabled *///

const __vue2_script$F = {
	name: "UserDelete",
	mixins: [utilsMixin],
	props: {
		userObject: Object,
		userObjectList: Array,
		dialogKey: String,
		massDelete: Boolean,
		userClass: Function,
		parentTitle: String,
	},
	created() {
	},
	computed: {
		multipleUsers() {
			return this.userObjectList.length > 0
		}
	},
	methods: {
		async closeDialog(deleteConfirm = false, user = {}) {
			if (!this.multipleUsers) {
				if (user != {}) {
					if (this.parentTitle == "ldap-users") {
						user.distinguished_name = this.userObject.distinguished_name;
						user.username = this.userObject.username;
					} else {
						user.id = this.userObject.id;
						user.username = this.userObject.username;
					}
				}
			}

			if (deleteConfirm == true) {
				if (this.multipleUsers) {
					let _filtered_data;
					if (this.userClass == DjangoUser) {
						_filtered_data = { "users": this.userObjectList.map(({ id }) => id) };
					} else {
						_filtered_data = this.userObjectList.map(({ distinguished_name, username }) => ({
							distinguished_name,
							username,
						}));
					}
					await new this.userClass({}).bulkDelete(_filtered_data)
						.then(() => {
							this.$emit('closeDialog', this.dialogKey, true);
						})
						.catch(error => {
							this.$emit('closeDialog', this.dialogKey, true, {
								message: this.getMessageForCode(error),
								type: 'error'
							});
						});
				} else {
					await new this.userClass({}).delete(user)
						.then(response => {
							this.$emit('closeDialog', this.dialogKey, true);
						})
						.catch(error => {
							console.error(error);
							this.$emit('closeDialog', this.dialogKey, true, {
								message: this.getMessageForCode(error),
								type: 'error'
							});
						});
				}
			} else {
				this.$emit('closeDialog', this.dialogKey);
			}
		},
	}
};
const __cssModules$F = {};
var __component__$F = /*#__PURE__*/normalizeComponent(
  __vue2_script$F,
  render$F,
  staticRenderFns$F,
  false,
  __vue2_injectStyles$F,
  null,
  null,
  null
);

function __vue2_injectStyles$F (context) {
  for(let o in __cssModules$F){
    this[o] = __cssModules$F[o];
  }
}

var UserDelete = /*#__PURE__*/(function () { return __component__$F.exports })();

var render$E = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_0$2,{staticClass:"py-3 px-2 mt-2 mb-2",attrs:{"headers":_vm.tableData.headers,"show-select":true,"item-key":_vm.tableItemKey,"items":_vm.tableData.items,"custom-sort":_vm.sortNullLast,"loading":_vm.loading,"search":_vm.searchString,"footer-props":{
			'items-per-page-options': [10, 25, 50, 100, -1]
		},"sort-by":_vm.tableDefaultSortKey},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","label":_vm.$t('actions.search')},model:{value:(_vm.searchString),callback:function ($$v) {_vm.searchString=$$v;},expression:"searchString"}}),_c(__unplugin_components_91,{staticClass:"pa-0 px-4",staticStyle:{"max-width":"fit-content"},attrs:{"justify":"end"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":function($event){return _vm.listUserItems(true)}}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"disabled":_vm.loading || !_vm.isImplemented('create'),"color":"primary"},on:{"click":function($event){return _vm.openDialog('userCreate')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.user', 1))+" ")],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","dark":!_vm.loading && !_vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('import'),"light":!_vm.loading && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('import'),"disabled":_vm.loading || !_vm.isImplemented('import')},on:{"click":function($event){return _vm.openDialog('userImport')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":""}},[_vm._v("mdi-file-import")]),_vm._v(" "+_vm._s(_vm.$t('actions.import'))+" ")],1),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","href":_vm.getExportLink(),"download":"","dark":!_vm.loading && !_vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('export'),"light":!_vm.loading && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('export'),"disabled":_vm.loading || !_vm.isImplemented('export')}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":""}},[_vm._v("mdi-file-export")]),_vm._v(" "+_vm._s(_vm.$t('actions.export'))+" ")],1),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","dark":!_vm.actionButtonsDisabled && _vm.isImplemented('bulkEnable'),"light":!_vm.actionButtonsDisabled && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('bulkEnable'),"color":"green","disabled":_vm.loading || _vm.tableData.selected.length < 1 || !_vm.isImplemented('bulkEnable')},on:{"click":function($event){return _vm.massAccountStatusChange(false)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":""}},[_vm._v("mdi-check")]),_vm._v(" "+_vm._s(_vm.$t('actions.enable'))+" ")],1),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","color":"red","dark":!_vm.actionButtonsDisabled && _vm.isImplemented('bulkDisable'),"light":!_vm.actionButtonsDisabled && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('bulkDisable'),"disabled":_vm.loading || _vm.tableData.selected.length < 1 || !_vm.isImplemented('bulkDisable')},on:{"click":function($event){return _vm.massAccountStatusChange(true)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":""}},[_vm._v("mdi-close")]),_c('span',{attrs:{"color":_vm.actionButtonsDisabled ? 'error' : 'error-70-s'}},[_vm._v(" "+_vm._s(_vm.$t('actions.disable'))+" ")])],1),(_vm.viewTitle == 'ldap-users')?_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","dark":!_vm.actionButtonsDisabled && !_vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('bulkUnlock'),"light":!_vm.actionButtonsDisabled && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('bulkUnlock'),"disabled":_vm.actionButtonsDisabled || !_vm.isImplemented('bulkUnlock')},on:{"click":function($event){return _vm.massUnlock()}}},[_c('span',[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":""}},[_vm._v("mdi-lock-open")]),_vm._v(" "+_vm._s(_vm.$t('actions.unlock'))+" ")],1)]):_vm._e(),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","dark":!_vm.actionButtonsDisabled && _vm.isImplemented('bulkEdit'),"light":!_vm.actionButtonsDisabled && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('bulkEdit'),"color":"primary","disabled":_vm.actionButtonsDisabled || !_vm.isImplemented('bulkEdit')},on:{"click":function($event){return _vm.openBulkOperationDialog('userBulkUpdate')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":"","dark":"","color":_vm.actionButtonsDisabled ? undefined : 'white'}},[_vm._v("mdi-shield-account")]),_c('span',{attrs:{"color":_vm.actionButtonsDisabled ? undefined : 'white'}},[_vm._v(" "+_vm._s(_vm.$t('actions.edit'))+" ")])],1),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"small":"","dark":!_vm.actionButtonsDisabled && _vm.isImplemented('bulkDelete'),"light":!_vm.actionButtonsDisabled && _vm.isThemeDark(_vm.$vuetify) && _vm.isImplemented('bulkDelete'),"color":"red","disabled":_vm.actionButtonsDisabled || !_vm.isImplemented('bulkDelete')},on:{"click":function($event){return _vm.openBulkOperationDialog('userDelete')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1",attrs:{"small":"","dark":"","color":_vm.actionButtonsDisabled ? undefined : 'white'}},[_vm._v("mdi-delete")]),_c('span',{attrs:{"color":_vm.actionButtonsDisabled ? undefined : 'white'}},[_vm._v(" "+_vm._s(_vm.$t('actions.delete'))+" ")])],1)],1)]},proxy:true},{key:"item.user_type",fn:function(ref){
		var item = ref.item;
return [_c(__unplugin_components_40,{attrs:{"color":"primary"}},[_vm._v(" "+_vm._s(item.user_type.toUpperCase())+" ")])]}},{key:"item.is_enabled",fn:function(ref){
		var item = ref.item;
return [(_vm.isLoggedInUser(item.username))?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_95,_vm._g(_vm._b({attrs:{"color":"primary"}},'v-icon',attrs,false),on),[_vm._v(" mdi-account ")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('section.users.youAreHere'))+" "),_c(__unplugin_components_95,{attrs:{"color":"white"}},[_vm._v("mdi-emoticon")])],1)]):(item.is_enabled)?_c(__unplugin_components_42,{attrs:{"color":"red","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","disabled":_vm.loading || _vm.isLoggedInUser(item.username) || !_vm.isUserEditable(item)},on:{"click":function($event){return _vm.setAccountStatus(item, false)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"color":!_vm.isLoggedInUser(item.username) ? 'valid-40-s' : ''}},[_vm._v(" mdi-check ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(((_vm.$t('actions.clickTo')) + " " + (_vm.$t('actions.disable').toLowerCase()) + " " + (item.username)))+" ")])]):(!item.is_enabled)?_c(__unplugin_components_42,{attrs:{"color":"green","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","disabled":_vm.loading || _vm.isLoggedInUser(item.username) || !_vm.isUserEditable(item)},on:{"click":function($event){return _vm.setAccountStatus(item, true)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"color":!_vm.isLoggedInUser(item.username) ? 'error-60-s' : ''}},[_vm._v(" mdi-close ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(((_vm.$t('actions.clickTo')) + " " + (_vm.$t('actions.enable').toLowerCase()) + " " + (item.username)))+" ")])]):_vm._e()]}},{key:"item.actions",fn:function(ref){
		var item = ref.item;
return [_c(__unplugin_components_91,{staticClass:"my-1",attrs:{"justify":"center"}},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading},on:{"click":function($event){return _vm.fetchUser(item, false)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-eye ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.view')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading || !_vm.isUserEditable(item)},on:{"click":function($event){return _vm.fetchUser(item, true)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-pencil ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.edit')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading || !_vm.isUserEditable(item)},on:{"click":function($event){return _vm.changeUserPassword(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-key-variant ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.changePassword')))])]),(_vm.viewTitle == 'ldap-users')?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","color":"secondary-20","rounded":"","small":"","disabled":_vm.loading},on:{"click":function($event){return _vm.unlockUser(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-lock-open ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.unlock')))])]):_vm._e(),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [(!_vm.isLoggedInUser(item.username))?_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading},on:{"click":function($event){return _vm.openBulkOperationDialog('userDelete', item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"red"}},[_vm._v(" mdi-delete ")])],1):_c(__unplugin_components_94,{attrs:{"disabled":"","elevation":"0","icon":"","small":""}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-delete ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.delete')))])])],1)]}}],null,true),model:{value:(_vm.tableData.selected),callback:function ($$v) {_vm.$set(_vm.tableData, "selected", $$v);},expression:"tableData.selected"}}),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['userDialog']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userDialog', $$v);},expression:"dialogs['userDialog']"}},[_c(UserDialog,{ref:"UserDialog",attrs:{"user":_vm.data.userdata,"editFlag":this.editableForm,"dialogKey":'userDialog',"refreshLoading":_vm.loading,"disable-actions":_vm.fetchingData,"fetchingData":_vm.fetchingData,"userClass":_vm.userClass,"parentTitle":_vm.viewTitle},on:{"closeDialog":_vm.closeDialog,"save":_vm.userSaved,"goToGroup":_vm.goToGroup,"editToggle":_vm.setViewToEdit,"refreshUser":_vm.refreshUser,"refreshUserList":function($event){return _vm.listUserItems(false)}}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['userDelete']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userDelete', $$v);},expression:"dialogs['userDelete']"}},[_c(UserDelete,{ref:"UserDelete",attrs:{"userObject":this.data.selectedUser,"userObjectList":_vm.tableData.selected,"dialogKey":'userDelete',"userClass":_vm.userClass,"parentTitle":_vm.viewTitle},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.listUserItems}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['userResetPassword']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userResetPassword', $$v);},expression:"dialogs['userResetPassword']"}},[_c(UserResetPassword,{ref:"UserResetPassword",attrs:{"userObject":this.data.selectedUser,"dialogKey":'userResetPassword',"parentTitle":_vm.viewTitle,"userClass":_vm.userClass},on:{"closeDialog":_vm.closeDialog}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['userCreate']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userCreate', $$v);},expression:"dialogs['userCreate']"}},[_c(UserCreate,{ref:"UserCreate",attrs:{"dialogKey":'userCreate',"userClass":_vm.userClass,"parentTitle":_vm.viewTitle},on:{"closeDialog":_vm.closeDialog}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","persistent":"","max-width":"1600px"},model:{value:(_vm.dialogs['userImport']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userImport', $$v);},expression:"dialogs['userImport']"}},[_c(UserImport,{ref:"UserImport",attrs:{"dialogKey":'userImport',"parentTitle":_vm.viewTitle,"userClass":_vm.userClass},on:{"closeDialog":_vm.closeDialog}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1600px"},model:{value:(_vm.dialogs['userBulkUpdate']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userBulkUpdate', $$v);},expression:"dialogs['userBulkUpdate']"}},[_c(UserBulkUpdate,{ref:"UserBulkUpdate",attrs:{"selectedUsers":this.tableData.selected,"dialogKey":'userBulkUpdate',"parentTitle":_vm.viewTitle,"userClass":_vm.userClass},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.listUserItems}})],1)],1)};
var staticRenderFns$E = [];

/* unplugin-vue-components disabled *///

const __vue2_script$E = {
	name: 'UserView',
	mixins: [validationMixin, utilsMixin],
	components: {
		UserCreate,
		UserImport,
		UserDialog,
		UserResetPassword,
		UserBulkUpdate,
		UserDelete,
		RefreshButton
	},
	data() {
		return {
			tableData: {
				headers: [],
				items: [],
				selected: []
			},
			localUsersOnly: false,
			userClass: undefined,
			tableItemKey: undefined,
			tableDefaultSortKey: undefined,
			searchString: "",
			loading: false,
			fetchingData: false,
			error: false,
			errorMsg: "",
			editableForm: false,

			// User Data
			data: {
				selectedUser: {
					"username": "",
					"distinguished_name": ""
				},
				userdata: {},
			},

			// Dialog States
			dialogs: {
				userDialog: false,
				userImport: false,
				userDelete: false,
				userResetPassword: false,
				userCreate: false,
				userBulkUpdate: false
			}
		}
	},
	created() {
		this.listUserItems(true);
	},
	watch: {
		'computedDialogs': {
			handler: function (v, v_old) {
				for (const d in v) {
					const ref_key = d[0].toUpperCase() + d.slice(1);
					// On Close do exit method
					if (v_old[d] === true) {
						if (this.$refs[ref_key].exit !== undefined) {
							this.$refs[ref_key].exit();
							console.log(`Exit for ${d} executed.`);
						}
					}
				}
			},
			deep: true
		}
	},
	computed: {
		actionButtonsDisabled() {
			return this.loading || this.tableData.selected.length < 1
		},
		computedDialogs() {
			return Object.assign({}, this.dialogs)
		}
	},
	props: {
		viewTitle: String,
		snackbarTimeout: Number
	},
	methods: {
		isImplemented(action) {
			switch (this.viewTitle) {
				case "django-users":
					switch (action) {
						case "bulkUnlock":
							return false
						case "import":
						case "export":
						case "bulkEdit":
						case "bulkDelete":
						case "bulkEnable":
						case "bulkDisable":
						default:
							return true
					}
				default:
					return true
			}
		},
		resetSearch() {
			this.searchString = "";
		},
		goToGroup(groupDn) {
			this.$emit('goToGroup', groupDn);
			this.closeDialog('userDialog');
		},
		getExportLink() {
			let _cfg = backend_config;
			// Local Users
			if (this.userClass == DjangoUser)
				return `${_cfg.base_url}${_cfg.urls.djangoUser.bulkExport}`
			// LDAP Users
			else if (this.userClass == User)
				return `${_cfg.base_url}${_cfg.urls.user.bulkExport}`
		},
		openDialog(key) {
			this.dialogs[key] = true;
			switch (key) {
				case 'userDialog':
					if (this.$refs.UserDialog != undefined)
						this.$refs.UserDialog.goBackToDetails();
					break;
				case 'userCreate':
					if (this.$refs.UserCreate != undefined)
						this.$refs.UserCreate.newUser();
					break;
				case 'userResetPassword':
					if (this.$refs.UserResetPassword != undefined)
						this.$refs.UserResetPassword.clearUser();
					break;
				case 'userImport':
					if (this.$refs.UserImport != undefined)
						this.$refs.UserImport.clearData();
					break;
				case 'userBulkUpdate':
					if (this.$refs.UserBulkUpdate != undefined)
						this.$refs.UserBulkUpdate.init();
					break;
			}
		},
		async closeDialog(key, refresh = false, emitData = undefined) {
			this.dialogs[key] = false;
			if (refresh) {
				let emitNotif;
				switch (key) {
					case 'userResetPassword':
						emitNotif = false;
						notificationBus.$emit("createNotification", {
							message: this.$t("actions.passwordChanged").toUpperCase(),
							type: 'success'
						});
						break;
					case 'userImport':
						emitNotif = false;
						notificationBus.$emit("createNotification", {
							message: this.$t('section.users.import.bulkImportSuccess').toUpperCase(),
							type: 'success'
						});
						break;
					case 'userDelete':
						emitNotif = false;
						if (!emitData)
							emitData = {
								message: this.$t('section.users.deleteUser.success').toUpperCase(),
								type: 'info'
							};
						notificationBus.$emit("createNotification", emitData);
						break;
					default:
						emitNotif = true;
						break;
				}
				await this.listUserItems(emitNotif);
			}
		},
		setViewToEdit(value) {
			this.editableForm = value;
		},
		// Reload Data Table Header Labels
		reloadDataTableHeaders() {
			this.tableData.headers.forEach(tableHeader => {
				if (tableHeader.value == "actions") {
					tableHeader.text = this.$t('actions.label');
				} else {
					tableHeader.text = this.$t('attribute.' + tableHeader.value);
				}
			});
		},
		// Reset Data Table variables
		resetDataTable() {
			this.tableData.headers = [];
			this.tableData.items = [];
		},
		setLoading() {
			this.loading = true;
			this.error = false;
			this.tableData.headers = [];
			this.tableData.items = [];
			this.tableData.selected = [];
		},
		isUserEditable(user) {
			if ("user_type" in user)
				if (user.user_type != "local")
					return false
			return true
		},
		// User Actions
		async listUserItems(emitNotif) {
			this.resetDataTable();
			let translationParent;
			switch (this.viewTitle) {
				case "django-users":
					this.setLoading();
					this.userClass = DjangoUser;
					this.tableItemKey = "username";
					this.tableDefaultSortKey = "last_name";
					translationParent = "attribute.user.";
					break;
				case "ldap-users":
					this.setLoading();
					this.userClass = User;
					this.tableItemKey = "distinguished_name";
					this.tableDefaultSortKey = "sn";
					translationParent = "attribute.";
					break;
				default:
					return
			}
			await new this.userClass({}).list()
				.then(response => {
					let headerDict = {};
					response.headers.forEach(header => {
						headerDict = {};
						switch (header) {
							case "email":
								headerDict.text = this.$t("attribute.user.email");
								break;
							case "is_enabled":
								headerDict.text = this.$t("attribute.user." + header);
								headerDict.align = 'center';
								headerDict.sortable = false;
								break;
							default:
								headerDict.text = this.$t(translationParent + header);
								break;
						}
						headerDict.value = header;
						this.tableData.headers.push(headerDict);
					});
					headerDict = {};
					headerDict.text = this.$t('actions.label');
					headerDict.value = 'actions';
					headerDict.align = 'center';
					headerDict.sortable = false;
					this.tableData.headers.push(headerDict);
					this.tableData.items = response.users;
					for (let i = 0; i < this.tableData.items.length; i++) {
						const user = this.tableData.items[i];
						if (user.username == localStorage.getItem('user.username') ||
							user.username == 'Administrator' && localStorage.getItem('user.username') == 'admin') {
							user.isSelectable = false;
							continue
						}
						if ("user_type" in user) {
							if (user.user_type != "local")
								user.isSelectable = false;
						}
					}
					this.loading = false;
					this.error = false;
					this.errorMsg = "";
					if (emitNotif == true)
						notificationBus.$emit("createNotification", {
							message: (`${this.$tc("classes.user", response.users.length)} ${this.$tc("words.loaded.m", response.users.length)}`).toUpperCase(),
							type: 'success'
						});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{ message: this.errorMsg.toUpperCase(), type: 'error' }
					);
				});
			this.$emit('done');
		},
		async unlockUser(userObject) {
			await new User({}).unlock(userObject.username)
				.then(() => {
					this.loading = false;
					this.error = false;
					notificationBus.$emit("createNotification", {
						message: this.$t("section.users.userUnlocked").toUpperCase(),
						type: 'success'
					});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					notificationBus.$emit("createNotification", {
						message: this.$t("section.users.errorUserUnlock").toUpperCase(),
						type: 'error'
					});
				});
		},
		isLoggedInUser(username) {
			if (username == localStorage.getItem('user.username') || username == 'Administrator' && localStorage.getItem('username') == 'admin')
				return true
			return false
		},
		async changeUserPassword(userObject) {
			this.data.selectedUser = {};
			this.data.selectedUser = userObject;
			this.openDialog('userResetPassword');
		},
		openBulkOperationDialog(dialogRef, userObject) {
			this.data.selectedUser = {};
			if (userObject) {
				this.tableData.selected = [];
				this.data.selectedUser = userObject;
			}
			if (this.data.selectedUser || this.tableData.selected.length > 0)
				this.openDialog(dialogRef);
		},
		async setAccountStatus(userObject, enabled) {
			this.loading = true;
			this.error = false;
			this.errorMsg = false;
			this.data.selectedUser = {};
			this.data.selectedUser = userObject;
			this.data.userdata = await new this.userClass({});
			let ident;
			if (this.viewTitle === "ldap-users")
				ident = {
					username: this.data.selectedUser.username,
					enabled: enabled
				};
			else
				ident = {
					id: this.data.selectedUser.id,
					enabled: enabled
				};
			await this.data.userdata.changeAccountStatus(ident)
				.then(() => {
					let action = `words.${enabled ? 'enabled' : 'disabled'}`;
					this.loading = false;
					this.error = false;
					this.errorMsg = false;
					this.listUserItems(false);
					notificationBus.$emit('createNotification',
						{
							message: (`${this.$tc("classes.user", 1)} ${this.$t(action)}`).toUpperCase(),
							type: 'success'
						});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{
							message: this.errorMsg.toUpperCase(),
							type: 'error'
						});
				});
		},
		async refreshUser(item) {
			await this.fetchUser(item, this.editableForm, true).then(() => {
				if (this.$refs.UserDialog != undefined)
					this.$refs.UserDialog.syncUser();
			});
		},
		async massAccountStatusChange(disable) {
			this.loading = true;
			this.error = false;
			this.errorMsg = "";
			const current_user = localStorage.getItem('user.username');
			const actionMsg = disable ? this.$t("words.disabled") : this.$t("words.enabled");
			const actionType = disable ? 'warning' : 'success';
			if (this.tableData.selected.find(v => v == current_user)) {
				throw new Error("Current user cannot change their own status.");
			}
			else {
				let _filtered_data;
				if (this.userClass == DjangoUser) {
					_filtered_data = this.tableData.selected.map(
						({ id }) => id
					);
				} else {
					_filtered_data = this.tableData.selected.map(
						({ distinguished_name, username }) => ({ distinguished_name, username })
					);
				}
				await new this.userClass({}).bulkChangeStatus({
					"enabled": !disable,
					"users": _filtered_data
				})
					.then(() => {
						this.loading = false;
						this.error = false;
						this.errorMsg = "";
						this.listUserItems(false);
						notificationBus.$emit('createNotification',
							{
								message: (this.$tc("classes.user", _filtered_data.length) + " " + actionMsg).toUpperCase(),
								type: actionType
							}
						);
					})
					.catch(error => {
						console.error(error);
						this.loading = false;
						this.error = true;
						this.errorMsg = this.getMessageForCode(error);
						this.listUserItems(false);
						notificationBus.$emit('createNotification',
							{
								message: this.errorMsg.toUpperCase(),
								type: 'error'
							});
					});
			}
		},
		async massUnlock() {
			this.loading = true;
			this.error = false;
			this.errorMsg = false;
			let _filtered_data = this.tableData.selected.map(
				({ distinguished_name, username }) => ({ distinguished_name, username })
			);
			await new User({}).bulkUnlock(_filtered_data)
				.then(() => {
					this.loading = false;
					this.error = false;
					this.errorMsg = false;
					this.listUserItems(false);
					notificationBus.$emit('createNotification',
						{
							message: (this.$tc("classes.user", this.tableData.selected.length) + " " + this.$tc("words.unlocked.n", this.tableData.selected.length).toUpperCase()).toUpperCase(),
							icon: 'mdi-lock-open',
							type: 'info'
						}
					);
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{ message: this.errorMsg.toUpperCase(), type: 'error' }
					);
					this.listUserItems(false);
				});
		},
		userSaved() {
			this.listUserItems(false);
			this.$refs.UserDialog.syncUser();
			notificationBus.$emit("createNotification",
				{
					message: (`${this.$tc("classes.user", 1)} ${this.$tc("words.saved.m", 1)}`).toUpperCase(),
					type: 'success'
				});
		},
		// Fetch individual User
		async fetchUser(item, isEditable = false, openedDialogLoading = false) {
			let ident = this.viewTitle == "ldap-users" ? item.username : item.id;
			if (!openedDialogLoading)
				this.loading = true;
			this.fetchingData = true;
			this.data.selectedUser.username = item.username;
			if (this.viewTitle == "ldap-users")
				this.data.selectedUser.distinguished_name = item.distinguished_name;
			this.data.userdata = new this.userClass({});
			await this.data.userdata.fetch(ident)
				.then(() => {
					if (!this.dialogs.userDialog) {
						this.openDialog('userDialog');
						this.$refs.UserDialog.syncUser();
						this.$refs.UserDialog.setupExclude();
					}
					if (isEditable == true)
						this.editableForm = true;
					else
						this.editableForm = false;
					setTimeout(() => {
						this.loading = false;
					}, 50);
					this.fetchingData = false;
				})
				.catch(error => {
					console.error(error);
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit('createNotification',
						{ message: this.errorMsg.toUpperCase(), type: 'error' }
					);
					this.loading = false;
					this.fetchingData = false;
					this.error = true;
				});
		},
	},
};
const __cssModules$E = {};
var __component__$E = /*#__PURE__*/normalizeComponent(
  __vue2_script$E,
  render$E,
  staticRenderFns$E,
  false,
  __vue2_injectStyles$E,
  null,
  null,
  null
);

function __vue2_injectStyles$E (context) {
  for(let o in __cssModules$E){
    this[o] = __cssModules$E[o];
  }
}

var UserView = /*#__PURE__*/(function () { return __component__$E.exports })();

class Group extends ApiModel {

	name;
	full_name;
	email;
	members;
	distinguished_name;
	username;
	has_members;
	group_types;
	group_scopes;

	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id 
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	async list() {
		return await interlock_backend.call("group/list")
	}

	async fetch(distinguishedName) {
		return await interlock_backend.call("group/fetch", { group: distinguishedName }).then(
			response => {
				if (!response)
					throw Error("Error fetching user data. Provider returned: " + response);
				else {
					Object.keys(response.data).forEach(key => {
						this[key] = response.data[key];
					});
				}
			}
		)
	}

	async insert(data) {
		return await interlock_backend.call("group/insert", data)
	}

	async update(data) {
		return await interlock_backend.call("group/update", data)
	}

	async delete(data) {
		return await interlock_backend.call("group/delete", data)
	}
}

class ApplicationGroup extends ApiModel {

	name;
	enabled;
	application;
	users;
	ldap_objects;

	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id 
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	async create_info() {
		return await interlock_backend.call("applicationGroup/create_info")
	}

	async list() {
		return await interlock_backend.call("applicationGroup/list")
	}

	async fetch(id) {
		return await interlock_backend.call("applicationGroup/fetch", id).then(
			response => {
				if (!response)
					throw Error("Error fetching user data. Provider returned: " + response);
				else {
					Object.keys(response.data).forEach(key => {
						this[key] = response.data[key];
					});
				}
			}
		)
	}

	async update(data) {
		return await interlock_backend.call("applicationGroup/update", data)
	}

	async change_status(data) {
		return await interlock_backend.call("applicationGroup/change_status", data)
	}

	async delete(id) {
		return await interlock_backend.call("applicationGroup/delete", id)
	}

	async insert(data) {
		return await interlock_backend.call("applicationGroup/insert", data)
	}
}

var render$D = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"ma-0 pa-0",style:(_vm.getStyle())},[(_vm.showLoading)?_c(__unplugin_components_12$2,{attrs:{"loading":_vm.loading}}):_vm._e(),_c(__unplugin_components_4$1,{attrs:{"dense":_vm.dense,"disabled":_vm.disabled}},[_c(__unplugin_components_8,{attrs:{"multiple":""},model:{value:(_vm.selected),callback:function ($$v) {_vm.selected=$$v;},expression:"selected"}},_vm._l((_vm.userChoices),function(item,index){return _c(__unplugin_components_9$2,{key:item[_vm.usernameKey],attrs:{"value":item.id},on:{"change":function($event){return _vm.updateSelected(item)}},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var active = ref.active;
return [_c(__unplugin_components_4,{staticClass:"my-0 pa-0"},[(!active)?_c(__unplugin_components_95,[_vm._v(" mdi-checkbox-blank-outline ")]):_c(__unplugin_components_95,{attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked ")])],1),_c(VListItemContent,{staticClass:"ma-0 pa-0"},[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.getName(item))+" ")])],1),_c(__unplugin_components_10$2)]}}],null,true)})}),1)],1)],1)};
var staticRenderFns$D = [];

/* unplugin-vue-components disabled *///

const __vue2_script$D = {
	data() {
		return {
			loading: true,
			error: false,
			selected: []
		}
	},
	mixins: [utilsMixin],
	props: {
		disabled: Boolean,
		userChoices: { type: Array, default() { return null } },
		value: { type: Array },
		usernameKey: { type: String, default: "username" },
		nameKeys: { type: Array, default() { return ["first_name", "last_name"] } },
		showName: { type: Boolean, default: false },
		userType: { type: String },
		dense: { type: Boolean, default: true },
		showLoading: { type: Boolean, default: false },
		width: { type: String | Number },
		height: { type: String | Number },
		minWidth: { type: String | Number },
		minHeight: { type: String | Number },
		maxWidth: { type: String | Number },
		maxHeight: { type: String | Number, default: "400px" },
	},
	methods: {
		getSelectedValue(item) {
			if (Array.isArray(this.value))
				return this.value.includes(item.id)
			return false
		},
		updateSelected(item) {
			let r = structuredClone(this.value);
			if (r.includes(item.id))
				r.splice(r.indexOf(item.id), 1);
			else
				r.push(item.id);
			this.$emit('input', r);
		},
		getName(item) {
			let first_or_last_name = (
				(item[this.nameKeys[0]] &&
					item[this.nameKeys[0]].length > 0)
				||
				(item[this.nameKeys[1]] &&
					item[this.nameKeys[1]].length > 0)
			);
			let name = `${item[this.nameKeys[0]]} ${item[this.nameKeys[1]]}`;
			if (this.showName && first_or_last_name)
				return `${name} (${item[this.usernameKey]})`
			return item[this.usernameKey]
		},
		getStyle() {
			let r = "height: 100%; width: 100%;";
			let cssClasses = [
				"minWidth",
				"minHeight",
				"maxWidth",
				"maxHeight"
			];
			cssClasses.forEach(cssKey => {
				if (this._props[cssKey] !== undefined) {
					let prop_value = this._props[cssKey];
					if (typeof prop_value == "number")
						prop_value = String(prop_value) + "px";
					r = r + `${this.toPropCase(cssKey)}: ${prop_value};`;
				}
			});
			return r
		},
		clearData() {
			this.loading = true;
			this.error = false;
			if (this.value !== undefined && this.value !== null && Array.isArray(this.value))
				this.selected = this.value;
			else
				this.selected = [];
			this.items = [];
		}
	},
};
const __cssModules$D = {};
var __component__$D = /*#__PURE__*/normalizeComponent(
  __vue2_script$D,
  render$D,
  staticRenderFns$D,
  false,
  __vue2_injectStyles$D,
  null,
  null,
  null
);

function __vue2_injectStyles$D (context) {
  for(let o in __cssModules$D){
    this[o] = __cssModules$D[o];
  }
}

var __unplugin_components_14 = /*#__PURE__*/(function () { return __component__$D.exports })();

var render$C = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_18,{ref:"form",staticClass:"ma-0 pa-0 mt-8"},[(_vm.createFlag)?_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c(__unplugin_components_88,[_c(__unplugin_components_0$3,{attrs:{"rules":[_vm.inputRulesRequired],"items":_vm.application_choices,"item-text":"name","item-value":"id","required":"","label":_vm.$tc('classes.application', 1)},model:{value:(_vm.application),callback:function ($$v) {_vm.application=$$v;},expression:"application"}})],1)],1):_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c(__unplugin_components_88,[_c('h2',[_vm._v(" "+_vm._s(_vm.applicationName)+" ")])])],1),(!_vm.createFlag)?_c(__unplugin_components_91,{attrs:{"align-content":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"10","md":"5"}},[_c(__unplugin_components_28,{attrs:{"dense":"","id":"enabled","label":_vm.$t('words.enabled'),"disabled":_vm.actionDisabled},model:{value:(_vm.enabled),callback:function ($$v) {_vm.enabled=$$v;},expression:"enabled"}})],1)],1):_vm._e(),_c(__unplugin_components_91,{staticClass:"mt-8 mb-4",attrs:{"justify":"center"}},[_c('h2',[_vm._v(" "+_vm._s(_vm.$t('category.header.django-users'))+" ")])]),_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VExpandTransition,[_c(__unplugin_components_76,{attrs:{"max-height":"400","width":"100%","height":"100%","outlined":""}},[_c(__unplugin_components_14,{ref:"UserObjectList",attrs:{"user-choices":_vm.user_choices,"return-keys":['id'],"disabled":_vm.actionDisabled,"show-name":"","dense":"","user-type":"local"},model:{value:(_vm.users),callback:function ($$v) {_vm.users=$$v;},expression:"users"}})],1)],1)],1)],1),_c(__unplugin_components_91,{staticClass:"mt-8 mb-4",attrs:{"justify":"center"}},[_c('h2',[_vm._v(" "+_vm._s(_vm.$t('category.header.ldap-groups'))+" ")])]),_c(__unplugin_components_91,[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(CNObjectList,{ref:"AddLDAPGroup",attrs:{"dialogKey":'addLDAPGroup',"add-button":false,"value-key":"distinguished_name","enableUsers":false,"disabled":_vm.actionDisabled,"content-class":"ma-0 pa-0","showHeader":false},model:{value:(_vm.ldap_objects),callback:function ($$v) {_vm.ldap_objects=$$v;},expression:"ldap_objects"}})],1)],1)],1)};
var staticRenderFns$C = [];

/* unplugin-vue-components disabled *///

const __vue2_script$C = {
	name: 'ApplicationGroupForm',
	mixins: [validationMixin],
	props: {
		disabled: Boolean,
		value: { type: Object, required: true },
		user_choices: { type: Array },
		application_choices: { type: Array },
		editFlag: { type: Boolean, default: false },
		createFlag: { type: Boolean, default: false },
	},
	computed: {
		applicationName() {
			if (this.value?.application?.name !== undefined &&
				this.value?.application?.name !== null) {
				return this.value.application.name
			}
			return this.value.application
		},
		actionDisabled() {
			return !this.editFlag && !this.createFlag || this.disabled
		},
		application: {
			get() { return this.value.application; },
			set(v) { this.$emit('input', { ...this.value, application: v }); }
		},
		enabled: {
			get() { return this.value.enabled; },
			set(v) { this.$emit('input', { ...this.value, enabled: v }); }
		},
		users: {
			get() { return this.value.users; },
			set(v) { this.$emit('input', { ...this.value, users: v }); }
		},
		ldap_objects: {
			get() { return this.value.ldap_objects; },
			set(v) { this.$emit('input', { ...this.value, ldap_objects: v }); }
		},
	},
	methods: {
		init(options = {}) {
			if (options?.fetch_lists !== false)
				this.$refs.AddLDAPGroup.fetchLists();
			if (options?.clear_data !== false)
				this.$refs.UserObjectList.clearData();
		},
		validate() {
			return this.$refs.form.validate()
		},
		resetValidation() {
			return this.$refs.form.resetValidation()
		},
	}
};
const __cssModules$C = {};
var __component__$C = /*#__PURE__*/normalizeComponent(
  __vue2_script$C,
  render$C,
  staticRenderFns$C,
  false,
  __vue2_injectStyles$C,
  null,
  null,
  null
);

function __vue2_injectStyles$C (context) {
  for(let o in __cssModules$C){
    this[o] = __cssModules$C[o];
  }
}

var ApplicationGroupForm = /*#__PURE__*/(function () { return __component__$C.exports })();

var render$B = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_12$2,{attrs:{"loading":_vm.loading}}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(" "+_vm._s(_vm.createFlag ? _vm.$t("section.applicationGroups.dialog.create.header") : _vm.$tc("classes.application-group", 1))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,[_c(ApplicationGroupForm,{ref:"ApplicationGroupForm",attrs:{"application_choices":_vm.data.application_choices,"user_choices":_vm.data.user_choices,"createFlag":_vm.createFlag,"editFlag":_vm.editFlag},model:{value:(_vm.requestData),callback:function ($$v) {_vm.requestData=$$v;},expression:"requestData"}})],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[(_vm.createFlag)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.createGroup()},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.createGroup()}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.create"))+" ")],1):_vm._e(),(!_vm.editFlag && !_vm.createFlag)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.editGroup}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-pencil ")]),_vm._v(" "+_vm._s(_vm.$t("actions.edit"))+" ")],1):_vm._e(),(_vm.editFlag && !_vm.createFlag)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.viewGroup}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-eye ")]),_vm._v(" "+_vm._s(_vm.$t("actions.view"))+" ")],1):_vm._e(),(!_vm.createFlag)?_c(__unplugin_components_94,{class:(_vm.editFlag ? '' : '') + 'ma-0 pa-0 pa-4 ma-1',attrs:{"rounded":"","dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"disabled":!_vm.editFlag},on:{"click":_vm.saveGroup}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-content-save ")]),_vm._v(" "+_vm._s(_vm.$t("actions.save"))+" ")],1):_vm._e(),(!_vm.createFlag)?_c(__unplugin_components_94,{class:(_vm.editFlag ? '' : '') + 'ma-0 pa-0 pa-4 ma-1',attrs:{"rounded":"","dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"disabled":!_vm.editFlag},on:{"click":function($event){return _vm.saveGroup(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-exit-to-app ")]),_vm._v(" "+_vm._s(_vm.$t("actions.saveClose"))+" ")],1):_vm._e(),_c(RefreshButton,{attrs:{"dense":"","fetching-data":_vm.fetchingData,"loading":_vm.refreshLoading},on:{"refresh":_vm.refreshGroup}})],1)],1)],1)};
var staticRenderFns$B = [];

/* unplugin-vue-components disabled *///

const __vue2_script$B = {
	name: 'ApplicationGroupCreate',
	props: {
		dialogKey: String,
		value: Object,
		createFlag: Boolean,
		editFlag: Boolean,
		fetchingData: Boolean,
		refreshLoading: Boolean,
	},
	components: {
		ApplicationGroupForm
	},
	data() {
		return {
			logRequestData: false,
			data: {
				application: "",
				application_choices: [],
				user_choices: [],
			},
			requestData: {
				users: [],
				ldap_objects: []
			},
			validApplications: [],
			success: false,
			loading: true,
			error: false,
			valid: false,
			errorMsg: "",
			dialogs: {
				addLDAPGroup: false
			}
		}
	},
	mixins: [validationMixin, utilsMixin],
	methods: {
		refreshGroup() {
			this.$emit('refreshGroup', this.value);
		},
		editGroup() {
			this.$emit('editToggle', true);
		},
		viewGroup() {
			this.$emit('editToggle', false);
		},
		closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
		},
		clearData() {
			this.validApplications = [];
			if (this.createFlag) {
				this.requestData = {
					users: [],
					ldap_objects: []
				};
			} else {
				this.requestData = this.value;
			}
			this.data = {
				application: "",
				application_choices: [],
				user_choices: [],
			};
		},
		async syncApplicationGroup() {
			this.clearData();
			await new ApplicationGroup({}).create_info()
				.then(response => {
					this.loading = false;
					this.data.application_choices = response.data.applications;
					this.data.user_choices = response.data.users;
					this.$refs.ApplicationGroupForm.init();
				})
				.catch(error => {
					console.error(error);
					this.error = true;
					this.loading = false;
					this.errorMsg = this.getMessageForCode(error);
					notificationBus.$emit("createNotification",
						{
							message: this.errorMsg.toUpperCase(),
							type: 'error'
						});
				});
		},
		async saveGroup(closeDialog = false) {
			this.loading = true;
			this.error = false;
			this.errorMsg = "";
			let finalData = Object.assign({}, this.requestData);
			finalData.application = this.requestData.application.id;
			if (this.$refs.ApplicationGroupForm.validate()) {
				await new ApplicationGroup({}).update(finalData)
					.then(() => {
						this.$emit('save', this.requestData, closeDialog == true);
						this.loading = false;
						this.loadingColor = 'primary';
					})
					.catch(error => {
						console.error(error);
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification',
							{
								message: this.errorMsg,
								type: 'error'
							}
						);
						this.loading = false;
						this.loadingColor = 'error';
						this.error = true;
					});
			}
		},
		async createGroup() {
			this.loading = true;
			this.error = false;
			this.errorMsg = "";
			if (this.$refs.ApplicationGroupForm.validate()) {
				await new ApplicationGroup({}).insert(this.requestData)
					.then(response => {
						this.loading = false;
						this.closeDialog();
						this.$emit('refresh');
						notificationBus.$emit("createNotification",
							{
								message: `${this.$tc("classes.applicationGroup", 1)} ${this.$t("words.created.m", 1)}`.toUpperCase(),
								type: 'success'
							});
					})
					.catch(error => {
						console.error(error);
						this.error = true;
						this.loading = false;
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit("createNotification",
							{
								message: this.errorMsg.toUpperCase(),
								type: 'error'
							});
					});
			}
		}
	},
};
const __cssModules$B = {};
var __component__$B = /*#__PURE__*/normalizeComponent(
  __vue2_script$B,
  render$B,
  staticRenderFns$B,
  false,
  __vue2_injectStyles$B,
  null,
  null,
  null
);

function __vue2_injectStyles$B (context) {
  for(let o in __cssModules$B){
    this[o] = __cssModules$B[o];
  }
}

var ApplicationGroupDialog = /*#__PURE__*/(function () { return __component__$B.exports })();

const GROUP_TYPE_DISTRIBUTION = "TYPE_DISTRIBUTION";
const GROUP_TYPE_SECURITY = "TYPE_SECURITY";
const GROUP_TYPE_SYSTEM = "TYPE_SYSTEM"; // Not selectable
const GROUP_SCOPE_GLOBAL = "SCOPE_GLOBAL";
const GROUP_SCOPE_DOMAIN_LOCAL = "SCOPE_DOMAIN_LOCAL";
const GROUP_SCOPE_UNIVERSAL = "SCOPE_UNIVERSAL";

const GROUP_SCOPE_DEFAULT = GROUP_SCOPE_DOMAIN_LOCAL;
const GROUP_TYPE_DEFAULT = GROUP_TYPE_SECURITY;

const LDAPGroupTypes = {
	GROUP_TYPE_DISTRIBUTION: GROUP_TYPE_DISTRIBUTION,
	GROUP_TYPE_SECURITY: GROUP_TYPE_SECURITY,
};
const LDAPGroupScopes = {
	GROUP_SCOPE_GLOBAL: GROUP_SCOPE_GLOBAL,
	GROUP_SCOPE_DOMAIN_LOCAL: GROUP_SCOPE_DOMAIN_LOCAL,
	GROUP_SCOPE_UNIVERSAL: GROUP_SCOPE_UNIVERSAL,
};

var render$A = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4 px-1",attrs:{"align-content":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2 mb-2",attrs:{"cols":"12","md":"4"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-0 px-3 py-1",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.groups.groupDialog.groupType'))+" ")]),_c(__unplugin_components_10,{staticClass:"ma-0 pa-0",attrs:{"mandatory":"","readonly":!_vm.editFlag,"disabled":!_vm.editFlag,"value":_vm.currentType}},_vm._l((_vm.LDAPGroupTypes),function(value,key){return _c(__unplugin_components_12$1,{key:key,attrs:{"value":value,"label":_vm.$t('section.groups.types.' + key)},on:{"change":function($event){return _vm.updateType(value)}}})}),1)],1)],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2 mb-2",attrs:{"cols":"12","md":"4"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-0 px-3 py-1",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.groups.groupDialog.groupScope'))+" ")]),_c(__unplugin_components_10,{staticClass:"ma-0 pa-0",attrs:{"mandatory":"","readonly":!_vm.editFlag,"disabled":!_vm.editFlag,"value":_vm.currentScope}},_vm._l((_vm.LDAPGroupScopes),function(value,key){return _c(__unplugin_components_12$1,{key:key,attrs:{"value":value,"label":_vm.$t('section.groups.scopes.' + key)},on:{"change":function($event){return _vm.updateScope(value)}}})}),1)],1)],1)],1)};
var staticRenderFns$A = [];

/* unplugin-vue-components disabled *///

const __vue2_script$A = {
	name: 'GroupTypeRadioGroups',
	mixins: [utilsMixin],
	props: {
		editFlag: Boolean,
		groupTypes: {
			type: Array,
			default: () => { return [GROUP_TYPE_DEFAULT] }
		},
		groupScopes: {
			type: Array,
			default: () => { return [GROUP_SCOPE_DEFAULT] }
		}
	},
	data() {
		return {
			log: false,
			currentType: GROUP_TYPE_DEFAULT,
			currentScope: GROUP_SCOPE_DEFAULT,
			LDAPGroupTypes: LDAPGroupTypes,
			LDAPGroupScopes: LDAPGroupScopes,
		}
	},
	watch: {
		groupTypes: {
			handler: function (val, oldVal) {
				this.setCurrentType();
				if (this.log === true) {
					console.log(val);
					console.log(this.currentType);
				}
			}
		},
		groupScopes: {
			handler: function (val, oldVal) {
				this.setCurrentScope();
				if (this.log === true) {
					console.log(val);
					console.log(this.currentScope);
				}
			}
		},
	},
	methods: {
		setCurrentScope() {
			this.currentScope = this.groupScopes[0];
		},
		setCurrentType() {
			for (let i = 0; i < this.groupTypes.length; i++) {
				const t = this.groupTypes[i];
				if (t != GROUP_TYPE_SYSTEM)
					this.currentType = t;
			}
		},
		update() {
			this.updateScope();
			this.updateType();
		},
		updateType(v) {
			let result = [v];
			if (this.groupTypes.includes(GROUP_TYPE_SYSTEM))
				result.push(GROUP_TYPE_SYSTEM);
			this.$emit("update-type", result);
			this.$emit("updateType", result);
		},
		updateScope(v) {
			let result = [v];
			this.$emit("update-scope", result);
			this.$emit("updateScope", result);
		}
	},
};
const __cssModules$A = {};
var __component__$A = /*#__PURE__*/normalizeComponent(
  __vue2_script$A,
  render$A,
  staticRenderFns$A,
  false,
  __vue2_injectStyles$A,
  null,
  null,
  null
);

function __vue2_injectStyles$A (context) {
  for(let o in __cssModules$A){
    this[o] = __cssModules$A[o];
  }
}

var GroupTypeRadioGroups = /*#__PURE__*/(function () { return __component__$A.exports })();

var render$z = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0",attrs:{"loading":_vm.refreshLoading}},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.loadingColor,"indeterminate":_vm.refreshLoading || _vm.loading}}),_c(VExpandTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.refreshLoading),expression:"!refreshLoading"}]},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s((_vm.$tc('classes.group', 1)) + ": " + _vm.groupcopy.name)+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VExpandTransition,[_c(__unplugin_components_91,{directives:[{name:"show",rawName:"v-show",value:(_vm.editFlag && _vm.showAlert),expression:"editFlag && showAlert"}],staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[_c(__unplugin_components_17,{staticClass:"pa-0 ma-1 pa-4 pb-3 mt-3",attrs:{"border":"top","type":"warning","icon":false}},[_c(__unplugin_components_95,{staticClass:"mdso mr-2"},[_vm._v("warning")]),_vm._v(" "+_vm._s(_vm.$t('section.groups.editFlagWarning'))+" "),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 ml-2 pr-2 pl-1",attrs:{"small":""},on:{"click":_vm.viewGroup}},[_c(__unplugin_components_95,{attrs:{"color":"orange"}},[_vm._v("mdi-chevron-left")]),_vm._v(" "+_vm._s(_vm.$t('actions.back'))+" ")],1)],1)],1)],1),_c(VCardText,{staticClass:"ma-0 pa-0 py-4 pb-2"},[_c(__unplugin_components_18,{ref:"groupForm",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align-content":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"10","md":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"name","label":_vm.$t('attribute.name'),"readonly":_vm.editFlag != true && !_vm.loading,"rules":[this.fieldRules(_vm.groupcopy.name, 'ge_cn')]},model:{value:(_vm.groupcopy.name),callback:function ($$v) {_vm.$set(_vm.groupcopy, "name", $$v);},expression:"groupcopy.name"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"10","md":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"email","label":_vm.$t('attribute.email'),"readonly":_vm.editFlag != true,"rules":[this.fieldRules(_vm.groupcopy.email, 'ge_email')]},model:{value:(_vm.groupcopy.email),callback:function ($$v) {_vm.$set(_vm.groupcopy, "email", $$v);},expression:"groupcopy.email"}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align-content":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"10","md":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"object_relative_id","label":_vm.$t('attribute.object_relative_id'),"readonly":""},model:{value:(_vm.groupcopy.object_relative_id),callback:function ($$v) {_vm.$set(_vm.groupcopy, "object_relative_id", $$v);},expression:"groupcopy.object_relative_id"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"10","md":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"object_security_id","label":_vm.$t('attribute.object_security_id'),"readonly":""},model:{value:(_vm.groupcopy.object_security_id),callback:function ($$v) {_vm.$set(_vm.groupcopy, "object_security_id", $$v);},expression:"groupcopy.object_security_id"}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-2",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"10","md":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"distinguished_name","label":_vm.$t('attribute.distinguished_name'),"readonly":""},model:{value:(_vm.groupcopy.distinguished_name),callback:function ($$v) {_vm.$set(_vm.groupcopy, "distinguished_name", $$v);},expression:"groupcopy.distinguished_name"}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4 px-1",attrs:{"align-content":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"8"}},[(_vm.isBuiltIn())?_c(__unplugin_components_17,{attrs:{"color":_vm.isThemeDark(_vm.$vuetify) ? 'accent-75-s' : 'primary-55-s',"type":"info","text":""}},[_vm._v(" "+_vm._s(_vm.$t("section.groups.groupDialog.typeInBuiltinReadOnly"))+" ")]):_vm._e()],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(GroupTypeRadioGroups,{attrs:{"editFlag":_vm.editFlag && !_vm.isBuiltIn(),"group-types":_vm.groupcopy.group_types,"group-scopes":_vm.groupcopy.group_scopes},on:{"update-type":function (v) { return _vm.groupcopy.group_types = v; },"update-scope":function (v) { return _vm.groupcopy.group_scopes = v; }}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-4",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"8"}},[_c(__unplugin_components_94,{staticClass:"pa-3",attrs:{"rounded":"","text":"","color":"primary","outlined":"","disabled":!_vm.editFlag},on:{"click":function($event){return _vm.openDialog('addToGroup')}}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"small":""}},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t("actions.addN") + " " + _vm.$t("words.member"))+" ")],1)],1)],1),_c(__unplugin_components_91),(_vm.showMemberTab)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-4",attrs:{"align-content":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"10","md":"8"}},[_c(__unplugin_components_55,{style:(_vm.memberPanelExpanded == [0] ? 'border: 1px solid var(--v-primary-base);' : 'border: 1px solid var(--v-gray-80-base);'),attrs:{"flat":""},model:{value:(_vm.memberPanelExpanded),callback:function ($$v) {_vm.memberPanelExpanded=$$v;},expression:"memberPanelExpanded"}},[_c(__unplugin_components_56,[_c(__unplugin_components_57,[_vm._v(" "+_vm._s(_vm.$t('section.groups.groupDialog.members'))+" ")]),_c(__unplugin_components_58,[_c(__unplugin_components_4$1,{attrs:{"dense":""}},_vm._l((this.groupcopy.members),function(member,key){return _c(__unplugin_components_9$2,{key:key,class:key != 0 ? 'border-bottom' : 'border-block'},[_c(__unplugin_components_32,{},[(_vm.isUserType(member.object_class))?_c(__unplugin_components_95,[_vm._v(" mdi-account ")]):(member.object_class.includes('group'))?_c(__unplugin_components_95,[_vm._v(" mdi-google-circles-communities ")]):_c(__unplugin_components_95,[_vm._v(" mdi-group ")])],1),_c(VListItemContent,[(_vm.isUserType(member.object_class))?_c(__unplugin_components_91,{attrs:{"align":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"pa-0 ma-0 px-1",attrs:{"cols":"12"}},[_c('span',{staticClass:"ma-0 pa-0"},[_vm._v(" "+_vm._s(((_vm.$tc('classes.user', 1)) + ": "))+" "+_vm._s(((member.first_name && member.last_name) ? ((member.first_name) + " " + (member.last_name) + " (" + (member.username) + ")") : member.username))+" ")])])],1):(member.object_class.includes('group'))?_c(__unplugin_components_91,{attrs:{"align":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"pa-0 ma-0 px-1",attrs:{"cols":"12"}},[_c('span',{staticClass:"ma-0 pa-0"},[_vm._v(" "+_vm._s(((_vm.$tc('classes.group', 1)) + ": " + (member.name)))+" ")])])],1):_c(__unplugin_components_91,{attrs:{"align":"center","justify":"center"}},[_c(__unplugin_components_88,{staticClass:"pa-0 ma-0 px-1",attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(member.distinguished_name)+" ")])],1)],1),_c(__unplugin_components_10$2,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_42,{attrs:{"bottom":"","color":"primary"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"small":"","icon":"","color":"primary"}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-help-circle ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(member.distinguished_name)+" ")])])],1),_c(__unplugin_components_10$2,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"small":"","icon":"","color":"primary"},on:{"click":function($event){return _vm.copyText(member.distinguished_name)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.groups.groupDialog.copyDistinguishedName"))+" ")])])],1),_c(__unplugin_components_10$2,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_42,{attrs:{"bottom":"","color":"red"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"small":"","icon":"","color":"red","disabled":!_vm.editFlag},on:{"click":function($event){return _vm.removeMember(member.distinguished_name, _vm.groupcopy.members)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-close ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.remove"))+" ")])])],1)],1)}),1)],1)],1)],1)],1)],1):_vm._e()],1)],1)],1)]),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[(_vm.editFlag != true)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.editGroup}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-pencil ")]),_vm._v(" "+_vm._s(_vm.$t("actions.edit"))+" ")],1):_vm._e(),(_vm.editFlag == true)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.viewGroup}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-eye ")]),_vm._v(" "+_vm._s(_vm.$t("actions.view"))+" ")],1):_vm._e(),_c(__unplugin_components_94,{class:(_vm.editFlag ? '' : '') + 'ma-0 pa-0 pa-4 ma-1',attrs:{"rounded":"","dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"disabled":!_vm.editFlag},on:{"click":_vm.saveGroup}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-content-save ")]),_vm._v(" "+_vm._s(_vm.$t("actions.save"))+" ")],1),_c(__unplugin_components_94,{class:(_vm.editFlag ? '' : '') + 'ma-0 pa-0 pa-4 ma-1',attrs:{"rounded":"","dark":!_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"light":_vm.isThemeDark(_vm.$vuetify) && _vm.editFlag,"disabled":!_vm.editFlag},on:{"click":function($event){return _vm.saveGroup(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-exit-to-app ")]),_vm._v(" "+_vm._s(_vm.$t("actions.saveClose"))+" ")],1),_c(RefreshButton,{attrs:{"dense":"","fetching-data":_vm.fetchingData,"loading":_vm.refreshLoading},on:{"refresh":_vm.refreshGroup}})],1)],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['addToGroup']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'addToGroup', $$v);},expression:"dialogs['addToGroup']"}},[_c(CNObjectList,{ref:"AddToGroup",attrs:{"dialogKey":'addToGroup',"excludeDNs":_vm.excludeDNs},on:{"addDNs":_vm.addMembers,"closeDialog":_vm.closeInnerDialog}})],1)],1)};
var staticRenderFns$z = [];

/* unplugin-vue-components disabled */var GroupDialog_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$z = {
	name: 'GroupDialog',
	components: {
		CNObjectList,
		RefreshButton,
		GroupTypeRadioGroups,
	},
	data() {
		return {
			userClasses: LDAPUserClasses,
			loading: false,
			loadingColor: 'accent',
			error: false,
			errorMsg: "",
			domain: "",
			realm: "",
			basedn: "",
			showMemberTab: false,
			showAlert: false,
			groupcopy: {},
			excludeDNs: [],
			memberPanelExpanded: 0,
			members_to_add: [],
			members_to_remove: [],
			// Dialog States
			dialogs: {
				addToGroup: false
			},
		}
	},
	mixins: [validationMixin, utilsMixin],
	created() {
		this.alertDelay = 0.5e3;
		this.syncGroup();
	},
	watch: {
		dialogs: {
			handler: function (newValue) {
				if (!newValue['addToGroup'] || newValue['addToGroup'] == false)
					this.$refs.AddToGroup.clearList();
			},
			deep: true
		}
	},
	props: {
		dialogKey: String,
		editFlag: Boolean,
		group: Object,
		fetchingData: Boolean,
		refreshLoading: Boolean,
		groupClass: Function,
		parentTitle: String,
	},
	methods: {
		isBuiltIn() {
			if (!this.groupcopy?.distinguished_name || this.groupcopy?.distinguished_name.length < 1)
				return false
			return this.groupcopy.distinguished_name
				.toLowerCase()
				.includes("cn=builtin");
		},
		exit() {
			this.showAlert = false;
		},
		copyText(textString) {
			navigator.clipboard.writeText(textString);
		},
		getMembersLength() {
			if (this.groupcopy.members != undefined) {
				if (this.groupcopy.members.length == 0 || !this.groupcopy.members)
					this.showMemberTab = false;
				else
					this.showMemberTab = true;
			}
		},
		setupExclude() {
			this.excludeDNs = [];
			if (!this.excludeDNs.includes(this.groupcopy.distinguished_name))
				this.excludeDNs.push(this.groupcopy.distinguished_name);
			if (this.groupcopy.members != undefined && this.groupcopy.members.length > 0) {
				this.groupcopy.members.forEach(member => {
					this.excludeDNs.push(member.distinguished_name);
				});
			}
			if (this.members_to_add != undefined && this.members_to_add.length > 0) {
				this.members_to_add.forEach(member => {
					if (!this.excludeDNs.includes(member))
						this.excludeDNs.push(member);
				});
			}
			// this.logGroups()
		},
		openDialog(key) {
			this.dialogs[key] = true;
			switch (key) {
				case 'addToGroup':
					this.setupExclude();
					this.$refs.AddToGroup.fetchLists(this.excludeDNs);
					break;
			}
		},
		closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
		},
		closeInnerDialog(key) {
			this.dialogs[key] = false;
		},
		addMembers(members) {
			this.members_to_add = members.map(e => e.distinguished_name);
			if (!this.groupcopy.members)
				this.groupcopy.members = [];
			members.forEach(g => {
				if (this.groupcopy.members.filter(e => e.distinguished_name == g.distinguished_name).length == 0)
					this.groupcopy.members.push(g);

				if (this.members_to_remove != undefined) {
					// console.log("MTR Includes this member, removing. " + g.distinguished_name)
					this.members_to_remove = this.members_to_remove.filter(e => e != g.distinguished_name);
				}
			});
			this.closeInnerDialog('addToGroup');
			// this.logGroups()
			this.showMemberTab = true;
			this.setupExclude();
			this.$forceUpdate;
		},
		removeMember(memberDn) {
			if (!this.members_to_remove != undefined && !this.members_to_remove.includes(memberDn))
				this.members_to_remove.push(memberDn);

			if (this.members_to_add != undefined && this.members_to_add.includes(memberDn))
				this.members_to_add = this.members_to_add.filter(e => e != memberDn);

			if (this.excludeDNs != undefined && this.excludeDNs.includes(memberDn))
				this.excludeDNs = this.excludeDNs.filter(e => e != memberDn);

			this.groupcopy.members = this.groupcopy.members.filter(e => e.distinguished_name != memberDn);
			// this.logGroups()
			if (this.groupcopy.members == undefined || this.groupcopy.members.length == 0)
				this.showMemberTab = false;
			this.setupExclude();
			this.$forceUpdate;
		},
		logGroups() {
			console.log("Member Array");
			console.log(this.groupcopy.members);
			console.log("Members to Add");
			console.log(this.members_to_add);
			console.log("Members to Remove");
			console.log(this.members_to_remove);
			console.log("Exclude DNs");
			console.log(this.excludeDNs);
		},
		checkIfGroupBuiltIn() {
			if (this.group.group_types.includes('TYPE_SYSTEM'))
				return true
			return false
		},
		addToArray(value, object, itemRef = undefined) {
			var array = object.value;
			if (itemRef) {
				if (this.$refs[itemRef][0].validate()) {
					if (!array.includes(value) && array && value)
						array = array.push(value);
				}
			}
			else if (!array.includes(value) && array && value) {
				array = array.push(value);
			}
			return array
		},
		// Sync the groupcopy object to the parent view group object on the
		// next tick to avoid mutation errors
		syncGroup() {
			this.groupcopy = new Group({});
			this.members_to_remove = [];
			this.members_to_add = [];
			this.excludeDNs = [];
			this.showMemberTab = false;
			this.showAlert = false;
			this.$nextTick(() => {
				this.groupcopy = Object.assign({}, this.group);
				this.getMembersLength();
				this.setupExclude();
				this.loading = false;
				this.loadingColor = 'primary';
				if (Object.keys(this.group).length != 0)
					setTimeout(() => {
						this.showAlert = true;
					}, this.alertDelay);
			});
		},
		isUserType(itemObjectClasses) {
			var isUser = false;
			itemObjectClasses.forEach(v => {
				if (this.userClasses.includes(v))
					isUser = true;
			});
			return isUser
		},
		// Tells the parent view to refresh/fetch the group again
		async refreshGroup() {
			this.loading = true;
			this.$emit('refreshGroup', this.group);
			this.setupExclude();
			this.loading = false;
			this.loadingColor = 'primary';
		},
		async saveGroup(closeDialog = false) {
			this.loading = true;
			this.loadingColor = 'primary';

			// Set members
			// Members to Add
			if (this.members_to_add.length > 0)
				this.groupcopy.members_to_add = this.members_to_add;
			else
				delete this.groupcopy.members_to_add;
			// Members to Remove
			if (this.members_to_remove.length > 0)
				this.groupcopy.members_to_remove = this.members_to_remove;
			else
				delete this.groupcopy.members_to_remove;

			// Deep copy data and modify for delivery
			const excludeKeys = [
				"object_relative_id",
				"object_security_id",
				"members",
				"type"
			];
			const keysToCheck = ["name", "email"];
			let newDistinguishedName;
			let data = Object.assign({}, this.groupcopy);

			excludeKeys.forEach(k => {
				delete data[k];
			});
			// Remove unchanged keys or do something on change
			keysToCheck.forEach(k => {
				let _origVal = this.group[k];
				let _val = data[k];
				if (_origVal === _val) {
					delete data[k];
				}
				else {
					switch (k) {
						case "name":
							const v = _val;
							newDistinguishedName = data["distinguished_name"].split(",");
							// Remove relative distinguished name to get superior ldap path.
							newDistinguishedName.shift();
							newDistinguishedName = newDistinguishedName.join(",");
							// Add new relative distinguished name
							newDistinguishedName = `CN=${v},${newDistinguishedName}`;
							break;
					}
				}
			});

			if (this.$refs.groupForm.validate()) {
				await new Group({}).update({ group: data })
					.then(() => {
						if (closeDialog == true)
							this.closeDialog();
						if (newDistinguishedName)
							data["distinguished_name"] = newDistinguishedName;
						this.$emit('save', data, closeDialog == true);
						this.loading = false;
						this.loadingColor = 'primary';
					})
					.catch(error => {
						console.error(error);
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification',
							{
								message: this.errorMsg,
								type: 'error'
							}
						);
						this.loading = false;
						this.loadingColor = 'error';
						this.error = true;
					});
			} else {
				this.loading = false;
				this.loadingColor = 'error';
				this.error = true;
			}
		},
		editGroup() {
			this.$emit('editToggle', true);
		},
		viewGroup() {
			this.$emit('editToggle', false);
			this.refreshGroup();
		},
	},
};
const __cssModules$z = {};
var __component__$z = /*#__PURE__*/normalizeComponent(
  __vue2_script$z,
  render$z,
  staticRenderFns$z,
  false,
  __vue2_injectStyles$z,
  null,
  null,
  null
);

function __vue2_injectStyles$z (context) {
  for(let o in __cssModules$z){
    this[o] = __cssModules$z[o];
  }
}

var GroupDialog = /*#__PURE__*/(function () { return __component__$z.exports })();

var render$y = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("section.groups.groupCreate.header")))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VExpandTransition,[_c('div',[_c(__unplugin_components_7,{model:{value:(_vm.createStage),callback:function ($$v) {_vm.createStage=$$v;},expression:"createStage"}},[_c(VStepperHeader,{staticClass:"px-16"},[_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 1,"step":"1"}},[_vm._v(_vm._s(_vm.$t('section.groups.groupCreate.step1')))]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 1 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 2,"step":"2"}},[_vm._v(_vm._s(_vm.$t('section.groups.groupCreate.step2')))]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 2 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 3,"step":"3"}},[_vm._v(_vm._s(_vm.$t('section.groups.groupCreate.step3')))])],1),_c(VStepperItems,[_c(__unplugin_components_31,{attrs:{"step":"1"}},[_c(__unplugin_components_18,{ref:"groupCreateForm1",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.name'),"rules":[this.fieldRules(_vm.groupToCreate.name, 'ge_cn', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.groupToCreate.name),callback:function ($$v) {_vm.$set(_vm.groupToCreate, "name", $$v);},expression:"groupToCreate.name"}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align":"center","justify":"space-around"}},[_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","color":"primary"},on:{"click":function($event){_vm.groupDestination = _vm.basedn;}}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.move.setToRoot'))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","disabled":!_vm.allowRefresh,"elevation":"0"},on:{"click":function($event){return _vm.fetchOUs(true)}},scopedSlots:_vm._u([{key:"loader",fn:function(){return [_c('span',{staticClass:"custom-loader"},[_c(__unplugin_components_95,{attrs:{"color":"white"}},[_vm._v("mdi-cached")])],1)]},proxy:true}])},[_vm._v(" "+_vm._s(_vm.$t('actions.refresh'))+" "),_c(__unplugin_components_95,[_vm._v(" mdi-refresh ")])],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"8"}},[_c(__unplugin_components_55,{staticStyle:{"border":"1px solid var(--v-primary-base)"},attrs:{"flat":"","hover":""},model:{value:(_vm.groupPathExpansionPanel),callback:function ($$v) {_vm.groupPathExpansionPanel=$$v;},expression:"groupPathExpansionPanel"}},[_c(__unplugin_components_56,[_c(__unplugin_components_57,[_c('span',[_c('span',[_vm._v(" "+_vm._s(_vm.$t('section.groups.groupCreate.groupCreatedIn') + ': ')+" ")]),_c('span',{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(this.groupDestination)+" ")])])]),_c(__unplugin_components_58,[_c(__unplugin_components_76,{staticStyle:{"max-height":"300px","overflow":"auto !important"},attrs:{"flat":"","outlined":""}},[_c(DirtreeOUList,{ref:"DirtreeOUList",on:{"selectedDestination":_vm.setDestination}})],1)],1)],1)],1)],1)],1),_c(GroupTypeRadioGroups,{attrs:{"editFlag":true,"group-types":_vm.groupToCreate.group_types,"group-scopes":_vm.groupToCreate.group_scopes},on:{"update-type":function (v) { return _vm.groupToCreate.group_types = v; },"update-scope":function (v) { return _vm.groupToCreate.group_scopes = v; }}}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_5,{staticClass:"mx-12 my-3 mt-6"})],1),_c(__unplugin_components_91,{staticClass:"mb-1",attrs:{"justify":"center"}},[_c('span',{staticClass:"text-overline",staticStyle:{"font-size":".95em !important"}},[_vm._v(_vm._s(_vm.$t("section.groups.groupCreate.optionalsHeader")))])]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.email'),"rules":[this.fieldRules(_vm.groupToCreate.mail, 'ge_mail')]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.groupToCreate.mail),callback:function ($$v) {_vm.$set(_vm.groupToCreate, "mail", $$v);},expression:"groupToCreate.mail"}})],1)],1)],1)],1),_c(__unplugin_components_31,{attrs:{"step":"2"}},[_c(__unplugin_components_18,{ref:"groupCreateForm2",on:{"submit":function($event){$event.preventDefault();}}},[_c(CNObjectList,{ref:"AddToGroup",attrs:{"showHeader":false,"addButton":false},on:{"addDNs":_vm.addMembers}})],1)],1),_c(__unplugin_components_31,{attrs:{"step":"3"}},[_c(__unplugin_components_91,{staticClass:"pa-12 ma-12",attrs:{"justify":"center","align-content":"center","align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VFabTransition,[_c(__unplugin_components_7$1,{attrs:{"value":"100","color":(this.error === false) ? (_vm.loading ? 'primary' : 'green') : 'red',"indeterminate":_vm.loading,"size":"100","width":"10"}},[_c(VFabTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.loading == false),expression:"loading == false"}]},[(_vm.error == true)?_c(__unplugin_components_95,{attrs:{"size":"82","color":"red"}},[_vm._v("mdi-close-circle")]):_c(__unplugin_components_95,{attrs:{"size":"82","color":"green"}},[_vm._v("mdi-check-circle")])],1)])],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VSlideYTransition,[(!this.loading && this.loading == false)?_c(__unplugin_components_88,[_c('h3',[_vm._v(" "+_vm._s(this.error ? this.errorMsg : _vm.$t('section.groups.groupCreate.step3_success'))+" ")])]):_vm._e()],1)],1)],1)],1)],1)],1)],1)]),(_vm.$vuetify.breakpoint.smAndDown)?_c(__unplugin_components_46$1,{attrs:{"text":"","color":"red","timeout":"1500","centered":""},model:{value:(_vm.showSnackbar),callback:function ($$v) {_vm.showSnackbar=$$v;},expression:"showSnackbar"}},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")])],1):_vm._e(),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[_c('div',[_c(VSlideXReverseTransition,[(this.error && _vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_40,{staticClass:"mx-2",attrs:{"color":"red","text-color":"white"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.newGroup}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-cached ")]),_vm._v(" "+_vm._s(_vm.$t("actions.reset"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(_vm.createStage > 1 && _vm.createStage < 3 || this.error == true && _vm.createStage > 1)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 pr-4 ma-1",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.prevStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.prevStep.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-left ")]),_vm._v(" "+_vm._s(_vm.$t("actions.back_short"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 3)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pl-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.nextStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.next"))+" "),_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-right ")])],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage > 2 && this.error === false)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.closeDialog(true)},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.done"))+" ")],1):_vm._e()],1)],1)])],1)],1)};
var staticRenderFns$y = [];

/* unplugin-vue-components disabled *///

const __vue2_script$y = {
	name: 'GroupCreate',
	components: {
		DirtreeOUList,
		CNObjectList,
		GroupTypeRadioGroups,
	},
	data() {
		return {
			allowRefresh: true,
			passwordHidden: true,
			domain: "",
			realm: "",
			basedn: "",
			members_to_add: [],
			success: false,
			loading: true,
			error: false,
			valid: false,
			errorMsg: "",
			showSnackbar: false,
			groupPathExpansionPanel: false,
			groupDestination: '',
			groupToCreate: {},
			ouList: [],
			createStage: 1,
		}
	},
	mixins: [
		validationMixin,
		utilsMixin
	],
	props: {
		dialogKey: String
	},
	created() {
		this.newGroup;
	},
	computed: {
	},
	methods: {
		addMembers(members) {
			try {
				if (members && Array.isArray(members) && members.length > 0)
					this.groupToCreate.members_to_add = members.map((e) => e.distinguished_name);
				else
					this.groupToCreate.members_to_add = [];
			}
			catch (error) {
				console.error(error);
				this.loading = false;
				this.error = true;
				this.success = true;
				this.errorMsg = this.getMessageForCode(error);
			}
		},
		setDestination(destination = undefined) {
			// Set default destination if undefined
			if (destination == undefined || !destination) {
				this.groupDestination = this.basedn;
				this.groupPathExpansionPanel = 0;
			}
			// Set destination from arg
			else {
				this.groupDestination = destination;
				this.groupPathExpansionPanel = false;
			}

		},
		prevStep() {
			switch (this.createStage) {
				case 2:
					let domainDetails = getDomainDetails();
					this.groupToCreate.members = [];
					this.members_to_add = [];
					this.domain = domainDetails.name;
					this.realm = domainDetails.realm;
					this.basedn = domainDetails.basedn;
					this.createStage -= 1;
					break;
				case 3:
					this.error = false;
					this.errorMsg = "";
					this.createStage -= 1;
					setTimeout(() => {
						this.loading = true;
					}, 500);
					break;
				default:
					this.createStage -= 1;
					break;
			}
		},
		nextStep() {
			switch (this.createStage) {
				case 1:
					if (this.$refs.groupCreateForm1.validate()) {
						this.error = false;
						this.errorMsg = "";
						this.$refs.AddToGroup.fetchLists();
						this.createStage += 1;
					}
					else {
						// Force snackbar to reappear if error was pre-existent
						if (this.showSnackbar == true)
							this.showSnackbar = false;
						this.showSnackbar = true;
						this.error = true;
						this.errorMsg = this.$t('error.validation.fieldinvalid');
					}
					break;
				case 2:
					this.$refs.AddToGroup.addDNs();
					if (!this.error) {
						Object.keys(this.groupToCreate).forEach(key => {
							if (this.groupToCreate[key] === undefined) {
								delete this.groupToCreate[key];
							}
						});
						//
						if (this.members_to_add.length > 0)
							this.groupToCreate.members_to_add = this.members_to_add;
						//
						this.createGroup();
					}
					else {
						// Force snackbar to reappear if error was pre-existent
						if (this.showSnackbar == true)
							this.showSnackbar = false;
						this.showSnackbar = true;
						this.error = true;
						this.errorMsg = this.$t('section.groups.groupCreate.validationError');
					}
					break;
				default:
					this.createStage += 1;
					break;
			}
		},
		async newGroup() {
			this.passwordHidden = true;
			this.groupPathExpansionPanel = false;
			this.groupToCreate = new Group({});
			this.members_to_add = [];
			this.createStage = 1;
			this.error = false;
			this.errorMsg = "";
			this.$refs.groupCreateForm1.resetValidation();
			let domainDetails = getDomainDetails();
			this.domain = domainDetails.name;
			this.realm = domainDetails.realm;
			this.basedn = domainDetails.basedn;
			this.fetchOUs();
			this.groupDestination = "CN=Users," + this.basedn;
		},
		updateValue(key, value) {
			this[key] = value;
		},
		async fetchOUs(refresh = false) {
			if (refresh == true)
				this.groupPathExpansionPanel = 0;
			if (this.$refs.DirtreeOUList != undefined) {
				this.allowRefresh = false;
				this.$nextTick(() => {
					if (refresh != true)
						this.setDestination();
					this.$refs.DirtreeOUList.fetchOUs()
						.then(() => {
							this.allowRefresh = true;
						});
				});
			}
		},
		closeDialog(refresh = false) {
			this.$emit('closeDialog', this.dialogKey, refresh);
		},
		async createGroup() {
			this.error = false;
			this.errorMsg = "";
			this.createStage += 1;
			this.groupToCreate.path = this.groupDestination;
			await this.groupToCreate.insert({ group: this.groupToCreate })
				.then(response => {
					if (response.status == 200) {
						this.error = false;
						this.errorMsg = "";
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = true;
					} else {
						this.error = true;
						this.errorMsg = this.$t("error.unknown_short");
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = false;
					}
				})
				.catch(error => {
					this.error = true;
					// Set Timeout to do circle animation
					setTimeout(() => {
						this.loading = false;
					}, 450);
					this.errorMsg = this.getMessageForCode(error);
				});
		}
	}
};
const __cssModules$y = {};
var __component__$y = /*#__PURE__*/normalizeComponent(
  __vue2_script$y,
  render$y,
  staticRenderFns$y,
  false,
  __vue2_injectStyles$y,
  null,
  null,
  null
);

function __vue2_injectStyles$y (context) {
  for(let o in __cssModules$y){
    this[o] = __cssModules$y[o];
  }
}

var GroupCreate = /*#__PURE__*/(function () { return __component__$y.exports })();

var render$x = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.groups.deleteGroup.title'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.groups.deleteGroup.message'))+" "),_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s((_vm.getDisplayName + "?"))+" ")])])],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)},"click":function($event){return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$x = [];

/* unplugin-vue-components disabled *///

const __vue2_script$x = {
	name: "GroupDelete",
	mixins: [utilsMixin],
	props: {
		groupObject: Object,
		dialogKey: String,
		isLDAPGroup: Boolean,
		groupClass: Function
	},
	computed: {
		getDisplayName() {
			if (this.isLDAPGroup)
				return this.groupObject.name ? this.groupObject.name : this.groupObject.distinguished_name
			else
				return this.groupObject.application
		},
	},
	methods: {
		async closeDialog(deleteConfirm = false, group = {}) {
			let data;
			if (group != {}) {
				if (this.isLDAPGroup) {
					group.distinguished_name = this.groupObject.distinguished_name;
					group.name = this.groupObject.name;
					data = { group: group };
				} else {
					group.id = this.groupObject.id;
					data = this.groupObject.id;
				}
			}
			if (deleteConfirm == true) {
				await new this.groupClass({}).delete(data)
					.then(response => {
						if (response?.data?.groupname == group.groupname)
							notificationBus.$emit('createNotification', {
								message: (this.$tc("classes.group", 1) + " " + this.$tc("words.deleted.m", 1)).toUpperCase(),
								type: 'info'
							});
						this.$emit('refresh');
					})
					.catch(error => {
						console.error(error);
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification', {
							message: (this.errorMsg).toUpperCase(),
							type: 'error'
						});
					});
			}
			this.$emit('closeDialog', this.dialogKey);
		},
	}
};
const __cssModules$x = {};
var __component__$x = /*#__PURE__*/normalizeComponent(
  __vue2_script$x,
  render$x,
  staticRenderFns$x,
  false,
  __vue2_injectStyles$x,
  null,
  null,
  null
);

function __vue2_injectStyles$x (context) {
  for(let o in __cssModules$x){
    this[o] = __cssModules$x[o];
  }
}

var GroupDelete = /*#__PURE__*/(function () { return __component__$x.exports })();

var render$w = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.title)+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":function($event){return _vm.emit_no()}}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.message)+" "),(_vm.subMessage.length > 0)?_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.subMessage)+" ")]):_vm._e()])],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.emit_yes()},"click":function($event){return _vm.emit_yes()}}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.emit_no()}}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$w = [];

/* unplugin-vue-components disabled *///

const __vue2_script$w = {
	name: "ConfirmDialog",
	mixins: [utilsMixin],
	props: {
		title: String,
		message: String,
		subMessage: {
			type: String,
			default: ""
		},
		dialogKey: {
			type: String,
			required: true
		},
		value: Boolean,
	},
	watch: {
		value: {
			handler: function (v) {
				if (v === true)
					this.$emit("open");
				else
					this.$emit("close");
			}
		},
	},
	methods: {
		emit_yes() {
			this.$emit('yes', this.dialogKey);
		},
		emit_no() {
			this.$emit('no', this.dialogKey);
		},
	}
};
const __cssModules$w = {};
var __component__$w = /*#__PURE__*/normalizeComponent(
  __vue2_script$w,
  render$w,
  staticRenderFns$w,
  false,
  __vue2_injectStyles$w,
  null,
  null,
  null
);

function __vue2_injectStyles$w (context) {
  for(let o in __cssModules$w){
    this[o] = __cssModules$w[o];
  }
}

var ConfirmDialog = /*#__PURE__*/(function () { return __component__$w.exports })();

var render$v = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_0$2,{staticClass:"py-3 px-2 mt-2 mb-2",attrs:{"headers":_vm.tableData.headers,"items":_vm.tableData.items,"custom-sort":_vm.sortNullLast,"item-key":_vm.tableItemKey,"loading":_vm.loading,"search":_vm.searchString,"footer-props":{
			'items-per-page-options': [10, 25, 50, 100, -1]
		},"sort-by":_vm.tableDefaultSortKey},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","label":_vm.$t('actions.search')},model:{value:(_vm.searchString),callback:function ($$v) {_vm.searchString=$$v;},expression:"searchString"}}),_c(__unplugin_components_91,{staticClass:"pa-0 px-4",staticStyle:{"max-width":"fit-content"},attrs:{"justify":"end"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":_vm.listGroupItems}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"disabled":_vm.loading || _vm.readonly,"color":"primary"},on:{"click":function($event){_vm.isLDAPView ? _vm.openDialog('groupCreate') : _vm.openDialog('applicationGroupCreate');}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.group', 1))+" ")],1)],1)],1)]},proxy:true},{key:"item.group_types",fn:function(ref){
		var item = ref.item;
return [(item.group_types && item.group_types.length > 0)?_c('div',{staticClass:"pt-2"},_vm._l((item.group_types),function(groupType){return _c(__unplugin_components_40,{key:groupType,staticClass:"mx-1 mb-2",attrs:{"dark":_vm.getColorForGroupTypeOrScope(groupType).dark,"light":!_vm.getColorForGroupTypeOrScope(groupType).dark,"color":_vm.getColorForGroupTypeOrScope(groupType).color}},[_vm._v(" "+_vm._s(_vm.$t(("section.groups.types.GROUP_" + groupType)))+" ")])}),1):_vm._e()]}},{key:"item.group_scopes",fn:function(ref){
		var item = ref.item;
return [(item.group_scopes && item.group_scopes.length > 0)?_c('div',{staticClass:"pt-2"},_vm._l((item.group_scopes),function(groupScope){return _c(__unplugin_components_40,{key:groupScope,staticClass:"mx-1 mb-2",attrs:{"dark":_vm.getColorForGroupTypeOrScope(groupScope).dark,"light":!_vm.getColorForGroupTypeOrScope(groupScope).dark,"color":_vm.getColorForGroupTypeOrScope(groupScope).color}},[_vm._v(" "+_vm._s(_vm.$t(("section.groups.scopes.GROUP_" + groupScope)))+" ")])}),1):_vm._e()]}},{key:"item.has_members",fn:function(ref){
		var item = ref.item;
return [(item.has_members)?_c(__unplugin_components_42,{attrs:{"color":"primary","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_95,_vm._g(_vm._b({attrs:{"color":"primary"}},'v-icon',attrs,false),on),[_vm._v(" mdi-account-multiple ")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('section.groups.isPopulated')))])]):(!item.has_members)?_c(__unplugin_components_42,{attrs:{"color":"secondary","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_95,_vm._g(_vm._b({staticStyle:{"opacity":"0.35"}},'v-icon',attrs,false),on),[_vm._v(" mdi-account-multiple ")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('section.groups.isNotPopulated')))])]):_vm._e()]}},(!_vm.isLDAPView)?{key:"item.enabled",fn:function(ref){
		var item = ref.item;
return [(item.enabled === true)?_c(__unplugin_components_42,{attrs:{"color":"red","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","disabled":_vm.loading},on:{"click":function($event){return _vm.openDialog('confirmASGStatusChange', item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"color":"valid-40-s"}},[_vm._v(" mdi-check ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(((_vm.$t('actions.clickTo')) + " " + (_vm.$t('actions.disable').toLowerCase()) + " " + (item.application)))+" ")])]):_c(__unplugin_components_42,{attrs:{"color":"green","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","disabled":_vm.loading},on:{"click":function($event){return _vm.openDialog('confirmASGStatusChange', item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"color":"error-60-s"}},[_vm._v(" mdi-close ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(((_vm.$t('actions.clickTo')) + " " + (_vm.$t('actions.enable').toLowerCase()) + " " + (item.application)))+" ")])])]}}:null,{key:"item.actions",fn:function(ref){
		var item = ref.item;
return [_c(__unplugin_components_91,{staticClass:"my-1",attrs:{"justify":"center"}},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading || _vm.readonly},on:{"click":function($event){return _vm.fetchGroup(item, false)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-eye ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.view')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading || _vm.readonly},on:{"click":function($event){return _vm.fetchGroup(item, true)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-pencil ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.edit')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({directives:[{name:"show",rawName:"v-show",value:(!_vm.loading && !_vm.readonly && !_vm.isLDAPGroupCritical(item)),expression:"!loading && !readonly && !isLDAPGroupCritical(item)"}],attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading || _vm.readonly || _vm.isLDAPGroupCritical(item)},on:{"click":function($event){return _vm.openDeleteDialog(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"red"}},[_vm._v(" mdi-delete ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.delete')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c('span',_vm._g(_vm._b({directives:[{name:"show",rawName:"v-show",value:(_vm.loading || _vm.readonly || _vm.isLDAPGroupCritical(item)),expression:"loading || readonly || isLDAPGroupCritical(item)"}]},'span',attrs,false),on),[_c(__unplugin_components_94,{attrs:{"icon":"","rounded":"","small":"","disabled":""}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-delete ")])],1)],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('section.groups.groupBuiltinCannotDelete')))])])],1)]}}],null,true)}),(_vm.isLDAPView)?_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['groupDialog']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'groupDialog', $$v);},expression:"dialogs['groupDialog']"}},[_c(GroupDialog,{ref:"GroupDialog",attrs:{"group":_vm.data.groupdata,"editFlag":this.editableForm,"dialogKey":'groupDialog',"refreshLoading":_vm.loading,"fetchingData":_vm.fetchingData},on:{"closeDialog":_vm.closeDialog,"save":_vm.groupSaved,"editToggle":_vm.setViewToEdit,"refreshGroup":_vm.refreshGroup,"fetchGroup":_vm.fetchGroup}})],1):_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['applicationGroupUpdate']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'applicationGroupUpdate', $$v);},expression:"dialogs['applicationGroupUpdate']"}},[_c(ApplicationGroupDialog,{ref:"ApplicationGroupUpdate",attrs:{"dialogKey":'applicationGroupUpdate',"editFlag":this.editableForm,"refreshLoading":_vm.loading,"fetchingData":_vm.fetchingData,"value":_vm.data.groupdata},on:{"closeDialog":_vm.closeDialog,"refresh":function($event){return _vm.listGroupItems(false)},"refreshGroup":_vm.refreshGroup,"save":_vm.groupSaved,"editToggle":_vm.setViewToEdit}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['groupDelete']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'groupDelete', $$v);},expression:"dialogs['groupDelete']"}},[_c(GroupDelete,{ref:"GroupDelete",attrs:{"groupObject":_vm.data.selectedGroup,"dialogKey":'groupDelete',"isLDAPGroup":_vm.isLDAPView,"groupClass":_vm.groupClass},on:{"closeDialog":_vm.closeDialog,"refresh":function($event){return _vm.listGroupItems(false)}}})],1),(_vm.isLDAPView)?_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['groupCreate']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'groupCreate', $$v);},expression:"dialogs['groupCreate']"}},[_c(GroupCreate,{ref:"GroupCreate",attrs:{"dialogKey":'groupCreate'},on:{"closeDialog":_vm.closeDialog}})],1):_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"1200px"},model:{value:(_vm.dialogs['applicationGroupCreate']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'applicationGroupCreate', $$v);},expression:"dialogs['applicationGroupCreate']"}},[_c(ApplicationGroupDialog,{ref:"ApplicationGroupCreate",attrs:{"dialogKey":'applicationGroupCreate',"createFlag":""},on:{"closeDialog":_vm.closeDialog,"refresh":function($event){return _vm.listGroupItems(false)}}})],1),(!_vm.isLDAPView)?_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['confirmASGStatusChange']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'confirmASGStatusChange', $$v);},expression:"dialogs['confirmASGStatusChange']"}},[_c(ConfirmDialog,{ref:"ConfirmASGStatusChange",attrs:{"title":_vm.getTitle,"message":_vm.getMessage,"sub-message":'application' in _vm.data.selectedGroup ? _vm.data.selectedGroup.application : '',"dialogKey":'confirmASGStatusChange',"value":_vm.dialogs['confirmASGStatusChange']},on:{"yes":function($event){return _vm.setApplicationGroupStatus()},"no":_vm.closeDialog}})],1):_vm._e()],1)};
var staticRenderFns$v = [];

/* unplugin-vue-components disabled *///

const __vue2_script$v = {
	name: 'GroupView',
	mixins: [validationMixin, utilsMixin],
	components: {
		ConfirmDialog,
		GroupDialog,
		GroupCreate,
		GroupDelete,
		RefreshButton,
		ApplicationGroupDialog
	},
	data() {
		return {
			groupClass: undefined,
			tableItemKey: undefined,
			tableDefaultSortKey: undefined,
			readonly: false,
			fetchingData: false,
			expandedRows: [],
			tableData: {
				headers: [],
				items: []
			},
			searchString: "",
			loading: false,
			error: false,
			editableForm: false,

			// Group Data
			data: {
				selectedGroup: {},
				groupdata: {},
			},

			// Dialog States
			dialogs: {
				groupDialog: false,
				groupDelete: false,
				groupCreate: false,
				applicationGroupCreate: false,
				applicationGroupUpdate: false,
				confirmASGStatusChange: false,
			}
		}
	},
	created() {
		this.listGroupItems();
	},
	watch: {
		'computedDialogs': {
			handler: function (v, v_old) {
				for (const d in v) {
					const ref_key = d[0].toUpperCase() + d.slice(1);
					// On Close do exit method
					if (v_old[d] === true) {
						if (this.$refs[ref_key] !== undefined && this.$refs[ref_key].exit !== undefined) {
							this.$refs[ref_key].exit();
							console.log(`Exit for ${d} executed.`);
						}
					}
				}
			},
			deep: true
		}
	},
	computed: {
		getTitle() {
			return this.$t('section.applicationGroups.dialog.statusChange.question', {
				action: this.data.selectedGroup.enabled == true ?
					this.$t('actions.disable') : this.$t('actions.enable')
			})
		},
		getMessage() {
			if (this.data.selectedGroup === undefined ||
				this.data.selectedGroup === null)
				return ""
			if (this.data.selectedGroup.enabled)
				return this.$t('section.applicationGroups.dialog.statusChange.disable_warning')
			else
				return this.$t('section.applicationGroups.dialog.statusChange.enable_warning')
		},
		computedDialogs() {
			return Object.assign({}, this.dialogs)
		},
		isLDAPView() {
			return this.viewTitle == "ldap-groups"
		}
	},
	props: {
		viewTitle: String,
		snackbarTimeout: Number,
	},
	methods: {
		async setApplicationGroupStatus() {
			let itemId = this.data.selectedGroup.id;
			let enabled = !this.data.selectedGroup.enabled;
			if (this.isLDAPView)
				throw new Error("Group View must be an Application Group.");
			await new this.groupClass({}).change_status({ id: itemId, enabled: enabled })
				.then(() => {
					let action = enabled === true ? "words.enabled" : "words.disabled";
					this.closeDialog('confirmASGStatusChange');
					this.listGroupItems(false);
					notificationBus.$emit("createNotification",
						{
							message: `${this.$tc("classes.group", 1)} ${this.$tc(action, 1)}`.toUpperCase(),
							type: enabled === true ? 'success' : 'info'
						});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					notificationBus.$emit("createNotification",
						{
							message: this.getMessageForCode(error),
							type: 'error'
						});
				});
		},
		isLDAPGroupCritical(item) {
			if (!this.isLDAPGroup)
				return
			let _r = item.group_types.includes(GROUP_TYPE_SYSTEM) ||
				item.name.toLowerCase().startsWith('domain ');
			if ("group_types" in item && "name" in item)
				return _r
			return false
		},
		resetSearch() {
			this.searchString = "";
		},
		openDialog(key, item = undefined) {
			this.dialogs[key] = true;
			switch (key) {
				case 'groupDialog':
					if (this.$refs.GroupDialog != undefined)
						this.$refs.GroupDialog.syncGroup();
					this.$refs.GroupDialog.setupExclude();
					break;
				case 'groupCreate':
					if (this.$refs.GroupCreate != undefined)
						this.$refs.GroupCreate.newGroup();
					break;
				case 'applicationGroupCreate':
					if (this.$refs.ApplicationGroupCreate != undefined)
						this.$refs.ApplicationGroupCreate.syncApplicationGroup();
					break;
				case 'applicationGroupUpdate':
					if (this.$refs.ApplicationGroupUpdate != undefined)
						this.$refs.ApplicationGroupUpdate.syncApplicationGroup();
					break;
				case 'confirmASGStatusChange':
					if (item === undefined)
						throw new Error("Item cannot be undefined.");
					this.data.selectedGroup = item;
					break;
			}
		},
		async closeDialog(key = undefined, refresh = false) {
			if (key === undefined)
				for (const key in this.dialogs) {
					this.dialogs[key] = false;
				}
			this.dialogs[key] = false;
			if (refresh)
				this.listGroupItems();
		},
		groupSaved(groupToFetch, closeDialog) {
			if (!closeDialog)
				this.refreshGroup(groupToFetch);
			this.listGroupItems(false);
			notificationBus.$emit("createNotification",
				{
					message: `${this.$tc("classes.group", 1)} ${this.$tc("words.saved.m", 1)}`.toUpperCase(),
					type: 'success'
				});
		},
		setViewToEdit(value) {
			this.editableForm = value;
		},
		getTranslationParent() {
			switch (this.viewTitle) {
				case "application-groups":
					return "attribute.application.group."
				case "ldap-groups":
				default:
					return "attribute."
			}
		},
		// Reload Data Table Header Labels
		reloadDataTableHeaders() {
			this.tableData.headers.forEach(tableHeader => {
				if (tableHeader.value == "actions") {
					tableHeader.text = this.$t('actions.label');
				} else {
					tableHeader.text = this.$tc(
						this.getTranslationParent() + tableHeader.value, 1);
				}
			});
		},
		setLoading() {
			this.loading = true;
			this.error = false;
		},
		// Reset Data Table variables
		resetDataTable() {
			this.tableData.headers = [];
			this.tableData.items = [];
		},
		// Group Actions
		async listGroupItems(emitNotif = true) {
			this.resetDataTable();
			let translationParent = this.getTranslationParent();
			switch (this.viewTitle) {
				case "application-groups":
					this.setLoading();
					this.groupClass = ApplicationGroup;
					this.tableItemKey = "id";
					this.tableDefaultSortKey = "name";
					break;
				case "ldap-groups":
					this.setLoading();
					this.groupClass = Group;
					this.tableItemKey = "distinguished_name";
					this.tableDefaultSortKey = "name";
					break;
				default:
					return
			}
			await new this.groupClass({}).list()
				.then(response => {
					let groups;
					if (this.isLDAPView)
						groups = response.groups;
					else
						groups = response.application_groups;
					let headerDict = {};
					response.headers.forEach(header => {
						headerDict = {};
						headerDict.value = header;
						headerDict.text = undefined;
						switch (header) {
							case "has_members":
								headerDict.sortable = false;
								headerDict.align = 'center';
								break;
							case "application":
								headerDict.text = this.$tc(`classes.application`, 1);
								break;
							case "users":
								headerDict.text = this.$tc(`classes.user`, 2);
								break;
							case "enabled":
								headerDict.text = this.$t(`words.${header}`);
								break;
							case "group_types":
							case "group_scopes":
								headerDict.text = this.$tc(`${translationParent}${header}`, 2);
								break;
						}
						if (headerDict.text === undefined)
							headerDict.text = this.$tc(translationParent + header, 1);
						this.tableData.headers.push(headerDict);
					});
					headerDict = {
						text: this.$t('actions.label'),
						value: 'actions',
						align: 'center',
						sortable: false
					};
					this.tableData.headers.push(headerDict);
					this.tableData.items = groups;
					this.loading = false;
					this.error = false;
					if (emitNotif == true && groups?.length !== undefined)
						notificationBus.$emit("createNotification",
							{
								message: `${this.$tc("classes.group", groups.length)} ${this.$tc("words.loaded.m", groups.length)}`.toUpperCase(),
								type: 'success'
							});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					notificationBus.$emit("createNotification",
						{
							message: this.getMessageForCode(error), type: 'error'
						});
				});
			this.$emit('done');
		},
		openDeleteDialog(groupObject) {
			this.data.selectedGroup = {};
			this.data.selectedGroup = groupObject;
			this.openDialog('groupDelete');
		},
		async refreshGroup(item) {
			await this.fetchGroup(item, this.editableForm, true);
		},
		// Fetch individual Group
		async fetchGroup(item, isEditable = false, openedDialogLoading = false) {
			if (!openedDialogLoading)
				this.loading = true;
			this.fetchingData = true;
			this.setLoading();
			this.data.selectedGroup[this.tableDefaultSortKey] = item[this.tableDefaultSortKey];
			this.data.selectedGroup[this.tableItemKey] = item[this.tableItemKey];
			this.data.groupdata = new this.groupClass({});
			await this.data.groupdata.fetch(this.data.selectedGroup[this.tableItemKey])
				.then(() => {
					if (this.isLDAPView)
						this.openDialog('groupDialog');
					else
						this.openDialog('applicationGroupUpdate');
					if (isEditable == true)
						this.editableForm = true;
					else
						this.editableForm = false;
					setTimeout(() => {
						this.loading = false;
					}, 50);
					this.fetchingData = false;
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.fetchingData = false;
					this.error = true;
				});
		},
		getColorForGroupTypeOrScope(v) {
			switch (v) {
				case GROUP_TYPE_DISTRIBUTION:
					return {
						"color": 'orange',
						"dark": false // Uses black text
					}
				case GROUP_TYPE_SYSTEM:
					return {
						"color": 'secondary-10',
						"dark": this.isThemeDark(this.$vuetify) ? false : true
					}
				case GROUP_SCOPE_GLOBAL:
					return {
						"color": 'secondary-10',
						"dark": this.isThemeDark(this.$vuetify) ? false : true // Uses white text
					}
				case GROUP_SCOPE_DOMAIN_LOCAL:
					return {
						"color": 'green',
						"dark": true
					}
				case GROUP_SCOPE_UNIVERSAL:
					return {
						"color": 'blue-grey',
						"dark": true
					}
				default:
					return {
						"color": 'primary',
						"dark": true
					}
			}
		},
	},
};
const __cssModules$v = {};
var __component__$v = /*#__PURE__*/normalizeComponent(
  __vue2_script$v,
  render$v,
  staticRenderFns$v,
  false,
  __vue2_injectStyles$v,
  null,
  null,
  null
);

function __vue2_injectStyles$v (context) {
  for(let o in __cssModules$v){
    this[o] = __cssModules$v[o];
  }
}

var GroupView = /*#__PURE__*/(function () { return __component__$v.exports })();

var render$u = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("actions.create") + " " + _vm.$tc("classes." + _vm.createType, 1)))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VExpandTransition,[_c('div',[_c(__unplugin_components_7,{model:{value:(_vm.createStage),callback:function ($$v) {_vm.createStage=$$v;},expression:"createStage"}},[_c(VStepperHeader,{staticClass:"px-16"},[_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 1,"step":"1"}},[_vm._v(_vm._s(_vm.$t('section.dirtree.' + _vm.createType + 'Create.step1')))]),_c(__unplugin_components_5,{staticClass:"mx-3",style:(_vm.createStage > 1 ? 'border-color: var(--v-primary-base) !important' : '')}),_c(__unplugin_components_11,{attrs:{"complete":_vm.createStage > 2,"step":"2"}},[_vm._v(_vm._s(_vm.$t('section.dirtree.' + _vm.createType + 'Create.step2')))])],1),_c(VStepperItems,[_c(__unplugin_components_31,{attrs:{"step":"1"}},[_c(__unplugin_components_18,{ref:"ouCreateForm1",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"5"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$tc('classes.' + _vm.createType, 1) + ' ' + _vm.$t('attribute.name'),"rules":[this.fieldRules(_vm.objectToCreate.name, 'ge_cn', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}},model:{value:(_vm.objectToCreate.name),callback:function ($$v) {_vm.$set(_vm.objectToCreate, "name", $$v);},expression:"objectToCreate.name"}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align":"center","justify":"space-around"}},[_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","color":"primary"},on:{"click":function($event){return _vm.setDestination()}}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.move.setToRoot'))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","disabled":!_vm.allowRefresh,"elevation":"0"},on:{"click":function($event){return _vm.fetchOUs(true)}},scopedSlots:_vm._u([{key:"loader",fn:function(){return [_c('span',{staticClass:"custom-loader"},[_c(__unplugin_components_95,{attrs:{"color":"white"}},[_vm._v("mdi-cached")])],1)]},proxy:true}])},[_vm._v(" "+_vm._s(_vm.$t('actions.refresh'))+" "),_c(__unplugin_components_95,[_vm._v(" mdi-refresh ")])],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_55,{staticStyle:{"border":"1px solid var(--v-primary-base)"},attrs:{"flat":"","hover":""},model:{value:(_vm.ouPathExpansionPanel),callback:function ($$v) {_vm.ouPathExpansionPanel=$$v;},expression:"ouPathExpansionPanel"}},[_c(__unplugin_components_56,[_c(__unplugin_components_57,[_c('span',[_c('span',[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.' + _vm.createType + 'Create.' + _vm.createType + 'CreatedIn') + ': ')+" ")]),_c('span',{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(this.ouDestination)+" ")])])]),_c(__unplugin_components_58,[_c(__unplugin_components_76,{staticStyle:{"max-height":"300px","overflow":"auto !important"},attrs:{"flat":"","outlined":""}},[_c(DirtreeOUList,{ref:"DirtreeOUList",on:{"selectedDestination":_vm.setDestination}})],1)],1)],1)],1)],1)],1)],1)],1),_c(__unplugin_components_31,{attrs:{"step":"2"}},[_c(__unplugin_components_91,{staticClass:"pa-12 ma-12",attrs:{"justify":"center","align-content":"center","align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VFabTransition,[_c(__unplugin_components_7$1,{attrs:{"value":"100","color":(this.error === false) ? (_vm.loading ? 'primary' : 'green') : 'red',"indeterminate":_vm.loading,"size":"100","width":"10"}},[_c(VFabTransition,[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.loading == false),expression:"loading == false"}]},[(_vm.error == true)?_c(__unplugin_components_95,{attrs:{"size":"82","color":"red"}},[_vm._v("mdi-close-circle")]):_c(__unplugin_components_95,{attrs:{"size":"82","color":"green"}},[_vm._v("mdi-check-circle")])],1)])],1)],1)],1),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(VSlideYTransition,[(!this.loading && this.loading == false)?_c(__unplugin_components_88,[_vm._v(" "+_vm._s(this.error ? '' : _vm.$t('section.dirtree.' + _vm.createType + 'Create.step2_success'))+" ")]):_vm._e()],1)],1)],1)],1)],1)],1)],1)]),(_vm.$vuetify.breakpoint.smAndDown)?_c(__unplugin_components_46$1,{attrs:{"text":"","color":"red","timeout":"1500","centered":""},model:{value:(_vm.showSnackbar),callback:function ($$v) {_vm.showSnackbar=$$v;},expression:"showSnackbar"}},[_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")])],1):_vm._e(),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[_c('div',[_c(VSlideXReverseTransition,[(this.error && _vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_40,{staticClass:"mx-2",attrs:{"color":"red","text-color":"white"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.newOU}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-cached ")]),_vm._v(" "+_vm._s(_vm.$t("actions.reset"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(_vm.createStage > 1 && this.error)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 pr-4 ma-1",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.prevStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.prevStep.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-left ")]),_vm._v(" "+_vm._s(_vm.$t("actions.back_short"))+" ")],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage < 2)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pl-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.nextStep,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.nextStep.apply(null, arguments)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.next"))+" "),_c(__unplugin_components_95,{staticClass:"ma-0",attrs:{"color":"primary"}},[_vm._v(" mdi-chevron-double-right ")])],1):_vm._e()],1),_c(VSlideXReverseTransition,[(this.createStage > 1 && this.error === false)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.closeDialog(true)},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.done"))+" ")],1):_vm._e()],1)],1)])],1)],1)};
var staticRenderFns$u = [];

/* unplugin-vue-components disabled *///

const __vue2_script$u = {
	name: 'DirtreeOUCreate',
	components: {
		DirtreeOUList
	},
	data() {
		return {
			passwordHidden: true,
			domain: "",
			realm: "",
			basedn: "",
			success: false,
			loading: true,
			error: false,
			valid: false,
			errorMsg: "",
			allowRefresh: true,
			showSnackbar: false,
			ouPathExpansionPanel: false,
			ouDestination: '',
			objectToCreate: {},
			createStage: 1,
		}
	},
	mixins: [
		validationMixin,
		utilsMixin
	],
	props: {
		createType: {
			type: String,
			default: "ou"
		},
		dialogKey: String
	},
	created() {
		this.newOU();
	},
	methods: {
		async resetDialog() {
			let domainDetails = getDomainDetails();
			this.domain = domainDetails.name;
			this.realm = domainDetails.realm;
			this.basedn = domainDetails.basedn;
			return
		},
		setDestination(destination = undefined) {
			// Set default destination if undefined
			if (destination == undefined || !destination) {
				this.ouDestination = this.basedn;
				this.ouPathExpansionPanel = 0;
			}
			// Set destination from arg
			else {
				this.ouDestination = destination;
				this.ouPathExpansionPanel = false;
			}
		},
		prevStep() {
			switch (this.createStage) {
				case 2:
					this.error = false;
					this.errorMsg = "";
					let domainDetails = getDomainDetails();
					this.domain = domainDetails.name;
					this.realm = domainDetails.realm;
					this.basedn = domainDetails.basedn;
					this.createStage -= 1;
					break;
				default:
					this.createStage -= 1;
					break;
			}
		},
		nextStep() {
			switch (this.createStage) {
				case 1:
					if (this.$refs.ouCreateForm1.validate() && this.ouDestination != "") {
						this.error = false;
						this.errorMsg = "";
						if (!this.error) {
							Object.keys(this.objectToCreate).forEach(key => {
								if (this.objectToCreate[key] === undefined) {
									delete this.objectToCreate[key];
								}
							});
							this.createLDAPObject();
						}
						else {
							// Force snackbar to reappear if error was pre-existent
							if (this.showSnackbar == true)
								this.showSnackbar = false;
							this.showSnackbar = true;
							this.error = true;
							this.errorMsg = this.$t('section.dirtree.ouCreate.validationError');
						}
					}
					else {
						// Force snackbar to reappear if error was pre-existent
						if (this.showSnackbar == true)
							this.showSnackbar = false;
						this.showSnackbar = true;
						this.error = true;
						this.errorMsg = this.$t('error.validation.fieldinvalid');
					}
					break;
			}
		},
		async newOU() {
			this.passwordHidden = true;
			this.ouPathExpansionPanel = false;
			this.allowRefresh = true;
			this.objectToCreate = new OrganizationalUnit({});
			this.createStage = 1;
			this.error = false;
			this.errorMsg = "";
			if (this.$refs.ouCreateForm1)
				this.$refs.ouCreateForm1.resetValidation();
			let domainDetails = getDomainDetails();
			this.domain = domainDetails.name;
			this.realm = domainDetails.realm;
			this.basedn = domainDetails.basedn;
			this.fetchOUs();
			this.ouDestination = this.basedn;
		},
		updateValue(key, value) {
			this[key] = value;
		},
		async fetchOUs(refresh = false) {
			if (refresh == true)
				this.ouPathExpansionPanel = 0;
			if (this.$refs.DirtreeOUList != undefined) {
				this.allowRefresh = false;
				this.$nextTick(() => {
					if (refresh != true)
						this.setDestination();
					this.$refs.DirtreeOUList.fetchOUs()
						.then(() => {
							this.allowRefresh = true;
						});
				});
			}
		},
		closeDialog(refresh = false) {
			this.$emit('closeDialog', this.dialogKey, refresh);
		},
		async createLDAPObject() {
			this.error = false;
			this.errorMsg = "";
			this.createStage += 1;
			this.objectToCreate.path = this.ouDestination;
			this.objectToCreate.type = this.createType;
			if (this.createType == 'ou' || !this.createType)
				this.objectToCreate.ou = this.objectToCreate.name;
			await this.objectToCreate.insert({ ldapObject: this.objectToCreate })
				.then(response => {
					if (response.status == 200) {
						this.error = false;
						this.errorMsg = "";
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = true;
					} else {
						this.error = true;
						this.errorMsg = this.$t("error.unknown_short");
						// Set Timeout to do circle animation
						setTimeout(() => {
							this.loading = false;
						}, 450);
						this.success = false;
					}
				})
				.catch(error => {
					this.error = true;
					// Set Timeout to do circle animation
					setTimeout(() => {
						this.loading = false;
					}, 450);
					this.errorMsg = this.getMessageForCode(error);
				});
		}
	}
};
const __cssModules$u = {};
var __component__$u = /*#__PURE__*/normalizeComponent(
  __vue2_script$u,
  render$u,
  staticRenderFns$u,
  false,
  __vue2_injectStyles$u,
  null,
  null,
  null
);

function __vue2_injectStyles$u (context) {
  for(let o in __cssModules$u){
    this[o] = __cssModules$u[o];
  }
}

var DirtreeOUCreate = /*#__PURE__*/(function () { return __component__$u.exports })();

var render$t = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("section.dirtree.move.title")))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-3",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"font-weight-medium",attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.move.originalRelativePath') + ": " + _vm.originalRelativePath)+" ")]),_c(__unplugin_components_88,{staticClass:"font-weight-medium",attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.distinguished_name') + ": " + _vm.objectDn)+" ")])],1),_c(__unplugin_components_5,{staticClass:"mx-16 mt-2"}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"align":"center","justify":"space-around"}},[_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","color":"primary"},on:{"click":function($event){return _vm.setDestination()}}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.move.setToRoot'))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-1",attrs:{"small":"","text":"","disabled":!_vm.allowRefresh,"elevation":"0"},on:{"click":_vm.refreshOUList},scopedSlots:_vm._u([{key:"loader",fn:function(){return [_c('span',{staticClass:"custom-loader"},[_c(__unplugin_components_95,{attrs:{"color":"white"}},[_vm._v("mdi-cached")])],1)]},proxy:true}])},[_vm._v(" "+_vm._s(_vm.$t('actions.refresh'))+" "),_c(__unplugin_components_95,[_vm._v(" mdi-refresh ")])],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"10"}},[_c(__unplugin_components_55,{staticStyle:{"border":"1px solid var(--v-primary-base)"},attrs:{"flat":"","hover":""},model:{value:(_vm.userPathExpansionPanel),callback:function ($$v) {_vm.userPathExpansionPanel=$$v;},expression:"userPathExpansionPanel"}},[_c(__unplugin_components_56,{key:0},[_c(__unplugin_components_57,[_c('span',[_c('span',{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(this.objectName)+" ")]),_c('span',[_vm._v(" "+_vm._s(" " + _vm.$t('section.dirtree.move.willBeMovedTo').toLowerCase() + ': ')+" ")]),_c('span',{staticClass:"font-weight-bold"},[_vm._v(" "+_vm._s(this.objectDestination)+" ")])])]),_c(__unplugin_components_58,[_c(__unplugin_components_76,{staticStyle:{"max-height":"300px","overflow":"auto !important"},attrs:{"flat":"","outlined":""}},[_c(DirtreeOUList,{ref:"DirtreeOUList",attrs:{"fetchOnCreated":false,"excludeObjects":_vm.objectDn},on:{"selectedDestination":_vm.setDestination}})],1)],1)],1)],1)],1)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":"center"}},[_c('div',[_c(VSlideXReverseTransition,[(this.error && _vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_40,{staticClass:"mx-2",attrs:{"color":"red","text-color":"white"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1),_c(VSlideYReverseTransition,[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","color":"primary","rounded":""},on:{"click":_vm.confirmMove,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmMove.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mx-1"},[_vm._v(" mdi-folder-move ")]),_vm._v(" "+_vm._s(_vm.$t("actions.move"))+" ")],1)],1),_c(VSlideYReverseTransition,[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle ")]),_c('span',{staticClass:"text-white"},[_vm._v(" "+_vm._s(_vm.$t("actions.cancel"))+" ")])],1)],1)],1)])],1)],1)};
var staticRenderFns$t = [];

/* unplugin-vue-components disabled */var DirtreeMove_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

let defaultFilter = {
	"include": {},
	"exclude": {},
	"use_defaults": false,
};
const __vue2_script$t = {
	name: 'DirtreeMove',
	mixins: [utilsMixin],
	components: {
		DirtreeOUList
	},
	data() {
		return {
			objectDestination: "",
			userPathExpansionPanel: 0,
			allowRefresh: true,
			domain: "",
			realm: "",
			basedn: "",
			error: "",
			errorMsg: "",
			filter: defaultFilter
		}
	},
	props: {
		createMode: {
			type: Boolean,
			default: false
		},
		dialogKey: String,
		objectDn: String,
		objectName: String
	},
	computed: {
		originalRelativePath() {
			if (this.objectDn != undefined)
				return this.objectDn.split(',').slice(1).join(',')
			return ""
		}
	},
	methods: {
		resetFilter() {
			this.filter = defaultFilter;
		},
		setExcludeFilter() {
			// 2nd argument is exclude
			if (this.objectDn && this.objectDn != undefined && this.objectDn != null) {
				this.filter['include']['objectCategory'] = ['organizationalUnit', 'container'];
				this.filter['exclude']['distinguishedName'] = this.objectDn;
			}
		},
		clearList() {
			this.resetFilter();
			this.$refs.DirtreeOUList.clearList();
		},
		async refreshOUList() {
			if (this.allowRefresh == true) {
				this.allowRefresh = false;
				this.setExcludeFilter();
				await this.$refs.DirtreeOUList.fetchOUs(this.filter).then(() => {
					this.allowRefresh = true;
				});
			}
		},
		async resetDialog() {
			let domainDetails = getDomainDetails();
			this.domain = domainDetails.name;
			this.realm = domainDetails.realm;
			this.basedn = domainDetails.basedn;
			this.allowRefresh = false;
			if (this.$refs.DirtreeOUList) {
				this.$nextTick(() => {
					this.setDestination();
					this.setExcludeFilter();
					this.$refs.DirtreeOUList.fetchOUs(this.filter)
						.then(() => {
							this.allowRefresh = true;
						});
				});
			}
			return
		},
		setDestination(destination = undefined) {
			// Set default destination if undefined
			if (destination == undefined || !destination)
				this.objectDestination = this.basedn;
			// Set destination from arg
			else
				this.objectDestination = destination;
		},
		closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
		},
		confirmMove() {
			this.$emit('confirm', this.objectDestination);
		},
	},
};
const __cssModules$t = {};
var __component__$t = /*#__PURE__*/normalizeComponent(
  __vue2_script$t,
  render$t,
  staticRenderFns$t,
  false,
  __vue2_injectStyles$t,
  null,
  null,
  null
);

function __vue2_injectStyles$t (context) {
  for(let o in __cssModules$t){
    this[o] = __cssModules$t[o];
  }
}

var DirtreeMove = /*#__PURE__*/(function () { return __component__$t.exports })();

var render$s = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("section.dirtree.rename.title")))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-3",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"font-weight-medium",attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.rename.originalDistinguishedName') + ": " + _vm.objectDn)+" ")])],1),_c(__unplugin_components_5,{staticClass:"mx-16 mt-2"}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-4",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"8","md":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","label":_vm.$t('attribute.name'),"rules":[this.fieldRules(_vm.newObjectName, 'ge_cn', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmRename.apply(null, arguments)}},model:{value:(_vm.newObjectName),callback:function ($$v) {_vm.newObjectName=$$v;},expression:"newObjectName"}})],1)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":"center"}},[_c('div',[_c(VSlideXReverseTransition,[(this.error && _vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_40,{staticClass:"mx-2",attrs:{"color":"red","text-color":"white"}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1),_c(VSlideYReverseTransition,[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","color":"primary","rounded":""},on:{"click":_vm.confirmRename,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmRename.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mx-1"},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.rename"))+" ")],1)],1),_c(VSlideYReverseTransition,[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog,"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog.apply(null, arguments)}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle ")]),_c('span',{staticClass:"text-white"},[_vm._v(" "+_vm._s(_vm.$t("actions.cancel"))+" ")])],1)],1)],1)])],1)],1)};
var staticRenderFns$s = [];

/* unplugin-vue-components disabled *///

const __vue2_script$s = {
	name: 'DirtreeRename',
	mixins: [validationMixin, utilsMixin],
	props: {
		dialogKey: String,
		objectDn: String,
		objectName: String
	},
	data() {
		return {
			newObjectName: "",
			error: "",
			errorMsg: "",
		}
	},
	methods: {
		clearData() {
			this.newObjectName = "";
			this.error = "";
			this.errorMsg = "";
		},
		closeDialog() {
			this.$emit('closeDialog', this.dialogKey);
		},
		confirmRename() {
			this.$emit('confirm', this.newObjectName);
		},
	},
};
const __cssModules$s = {};
var __component__$s = /*#__PURE__*/normalizeComponent(
  __vue2_script$s,
  render$s,
  staticRenderFns$s,
  false,
  __vue2_injectStyles$s,
  null,
  null,
  null
);

function __vue2_injectStyles$s (context) {
  for(let o in __cssModules$s){
    this[o] = __cssModules$s[o];
  }
}

var DirtreeRename = /*#__PURE__*/(function () { return __component__$s.exports })();

var render$r = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.deleteObject.title'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.dirtree.deleteObject.message'))+" "),_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.ldapObject.distinguished_name + "?")+" ")])])],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"color":"gray-20","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)},"click":function($event){return _vm.closeDialog(true)}}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"color":"gray-20","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$r = [];

/* unplugin-vue-components disabled *///

const __vue2_script$r = {
	name: "DirtreeDeleteObject",
	mixins: [utilsMixin],
	props: {
		ldapObject: Object,
		dialogKey: String
	},
	created() {
	},
	methods: {
		async closeDialog(deleteConfirm = false, ou = {}) {
			if (ou != {}) {
				ou.distinguished_name = this.ldapObject.distinguished_name;
				ou.name = this.ldapObject.name;
			}
			if (deleteConfirm == true) {
				await new OrganizationalUnit({}).delete(ou)
					.then(response => {
						// if (response.data.distinguished_name == ou.distinguished_name)
						//     console.log("LDAP Object Deleted Successfully")
						this.$emit('refresh');
					})
					.catch(error => {
						console.error(error);
					});
			}
			this.$emit('closeDialog', this.dialogKey);
		},
	}
};
const __cssModules$r = {};
var __component__$r = /*#__PURE__*/normalizeComponent(
  __vue2_script$r,
  render$r,
  staticRenderFns$r,
  false,
  __vue2_injectStyles$r,
  null,
  null,
  null
);

function __vue2_injectStyles$r (context) {
  for(let o in __cssModules$r){
    this[o] = __cssModules$r[o];
  }
}

var DirtreeDeleteObject = /*#__PURE__*/(function () { return __component__$r.exports })();

var render$q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_91,{staticClass:"mt-2 mb-2",attrs:{"justify":"center"}},[_c(__unplugin_components_76,{staticClass:"pa-2",attrs:{"flat":"","outlined":"","max-width":"1200px","width":"90%"}},[_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","label":_vm.$t('actions.search')},model:{value:(_vm.searchString),callback:function ($$v) {_vm.searchString=$$v;},expression:"searchString"}}),_c(__unplugin_components_91,{staticClass:"pa-0 px-4",staticStyle:{"max-width":"fit-content"},attrs:{"justify":"end"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":_vm.fetchDirtree}})],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mx-6 mb-4",staticStyle:{"position":"relative"},attrs:{"justify":_vm.$vuetify.breakpoint.lgAndUp ? 'end' : 'center'}},[_c(__unplugin_components_94,{staticClass:"pa-2 mx-2 mr-0 pill-start",attrs:{"elevation":"0","color":"primary"},on:{"click":function($event){return _vm.openDialog('dirtreeOUCreate')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + " " + _vm.$tc("classes.organizational-unit", 1))+" ")],1),_c(__unplugin_components_0$4,{attrs:{"close-on-content-click":false,"left":"","nudge-left":((_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.organizational-unit', 1)).length * 2) + 'ch',"dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify),"offset-y":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"pa-0 px-2 pr-3 pill-end",staticStyle:{"min-width":"32px"},attrs:{"elevation":"0","color":"primary"}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{class:_vm.actionListOpen == true ? 'active' : '',attrs:{"id":"floatingActionListButton"}},[_vm._v(" mdi-chevron-down ")])],1)]}}]),model:{value:(_vm.actionListOpen),callback:function ($$v) {_vm.actionListOpen=$$v;},expression:"actionListOpen"}},[_c(__unplugin_components_4$1,{attrs:{"dense":""}},[_c(__unplugin_components_5,{staticClass:"mx-4"}),_vm._l((_vm.actionList),function(item,index){return _c(__unplugin_components_9$2,{key:index,staticClass:"ma-0 pa-0"},[_c(__unplugin_components_94,{staticStyle:{"width":"100%"},attrs:{"disabled":!item.enabled,"color":"primary","tile":"","text":""},on:{"click":function($event){return _vm.openDialog(item.value)}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" "+_vm._s(item.icon)+" ")]),_vm._v(" "+_vm._s(_vm.getTranslationKey(item).toUpperCase())+" ")],1)],1)}),_c(__unplugin_components_5,{staticClass:"mx-4"})],2)],1)],1),_c(__unplugin_components_76,{staticClass:"ma-1 pa-2",attrs:{"flat":"","outlined":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-1",attrs:{"justify":_vm.$vuetify.breakpoint.mdAndUp ? 'end' : 'center',"align":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-1",attrs:{"outlined":"","small":"","color":"primary"},on:{"click":_vm.resetDirtree}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1"},[_vm._v(" mdi-filter-remove-outline ")]),_vm._v(" "+_vm._s(_vm.$t('actions.resetFilters'))+" ")],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-1 ml-2",attrs:{"small":"","disabled":!this.tableData.items || this.tableData.items.length < 1,"outlined":"","color":"primary"},on:{"click":_vm.toggleOpenAll}},[_c(VFabTransition,[(_vm.listOpenAll || _vm.dirtreeOpen.length > 0)?_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v(" mdi-chevron-double-up ")]):_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v(" mdi-chevron-double-down ")])],1),_vm._v(" "+_vm._s(_vm.listOpenAll || _vm.dirtreeOpen.length > 0 ? _vm.$t("actions.closeAll") : _vm.$t("actions.openAll"))+" ")],1),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_0$4,{attrs:{"offset-y":"","left":"","nudge-bottom":"1rem","close-on-content-click":false},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({class:'pa-0 px-2 pr-1 ' + (_vm.$vuetify.breakpoint.smAndDown ? 'mx-2' : ''),staticStyle:{"min-width":"32px"},attrs:{"small":"","elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},'v-btn',attrs,false),on),[_vm._v(" "+_vm._s(_vm.$t("actions.filter"))+" "),_c(__unplugin_components_95,{class:_vm.filterListOpen == true ? 'active' : '',attrs:{"id":"filterListButton"}},[_vm._v(" mdi-chevron-down ")])],1)]}}]),model:{value:(_vm.filterListOpen),callback:function ($$v) {_vm.filterListOpen=$$v;},expression:"filterListOpen"}},[_c(__unplugin_components_4$1,{attrs:{"dense":"","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_9$2,[_c(__unplugin_components_94,{staticClass:"mx-1",attrs:{"color":"primary"},on:{"click":_vm.filterAll}},[_c(__unplugin_components_95,[_vm._v(" mdi-filter ")]),_vm._v(" "+_vm._s(_vm.$tc('words.all.m', 1))+" ")],1),_c(__unplugin_components_94,{staticClass:"mx-1",on:{"click":_vm.filterNone}},[_c(__unplugin_components_95,[_vm._v(" mdi-filter-outline ")]),_vm._v(" "+_vm._s(_vm.$tc('words.none.m', 1))+" ")],1)],1),_vm._l((_vm.itemTypes),function(item,key){return _c(__unplugin_components_9$2,{key:item.id},[_c(__unplugin_components_10$2,{staticClass:"ma-0 pa-0 mr-2"},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0",attrs:{"disabled":item.show != false && item.required,"on-icon":"mdi-checkbox-blank-off-outline","color":"primary","dense":""},on:{"change":function($event){return _vm.setFilter(key, true)}},model:{value:(item.filtered),callback:function ($$v) {_vm.$set(item, "filtered", $$v);},expression:"item.filtered"}})],1),_c(VListItemTitle,{staticClass:"font-weight-medium"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"start"}},[_c(__unplugin_components_95,[_vm._v(" "+_vm._s(item.icon)+" ")]),_c('span',{staticClass:"text-overline ml-1"},[_vm._v(" "+_vm._s(_vm.$tc('classes.' + key, 1))+" ")]),(key == 'person' || key == 'user')?_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"small":""}},[_vm._v(" mdi-link ")]):_vm._e()],1)],1)],1)})],2)],1)],1),_c(__unplugin_components_12$2,{attrs:{"indeterminate":_vm.loading,"size":"100","width":"7","color":!this.tableData.items.length && this.error == true && !this.loading ? 'red' : 'primary'}})],1),_c(__unplugin_components_76,{staticClass:"ma-1",attrs:{"flat":"","outlined":""}},[_c(VExpandTransition,[(!_vm.loading)?_c(__unplugin_components_46,{ref:"dirTreeviewList",attrs:{"selected-color":"primary","selection-type":"independent","dense":"","hoverable":"","open":_vm.dirtreeOpen,"item-key":"id","items":this.tableData.items,"search":_vm.searchString},on:{"update:open":function($event){_vm.dirtreeOpen=$event;}},scopedSlots:_vm._u([{key:"prepend",fn:function(ref){
var item = ref.item;
var open = ref.open;
return [_c('div',{class:_vm.getObjectIsClickable(item) + ' ',on:{"click":function($event){_vm.getObjectIsClickable ? _vm.changeOpenStatus(item.id) : undefined;}}},[(item.builtin == true && item.type != 'container' && item.type != 'computer')?_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" mdi-hammer ")]):(item.type == 'container' && item.builtin == true)?_c('div',[_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" "+_vm._s(_vm.itemTypes[item.type.toLowerCase()]['icon'])+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"small":"","color":open ? 'primary' : undefined}},[_vm._v(" mdi-hammer ")])],1):(item.type == 'container')?_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" "+_vm._s(_vm.itemTypes[item.type.toLowerCase()]['icon'])+" ")]):(item.type == 'organizational-unit')?_c(__unplugin_components_95,{attrs:{"color":open ? 'primary' : undefined}},[_vm._v(" "+_vm._s(open ? 'mdi-folder-open' : 'mdi-folder')+" ")]):(item.type == 'computer')?_c(__unplugin_components_95,[_vm._v(" "+_vm._s(_vm.itemTypes[item.type.toLowerCase()]['icon'])+" ")]):((item.type == 'person' || item.type == 'user') && !_vm.itemIsContact(item))?_c(__unplugin_components_95,[_vm._v(" "+_vm._s(_vm.itemTypes[item.type.toLowerCase()]['icon'])+" ")]):(_vm.itemIsContact(item))?_c(__unplugin_components_95,[_vm._v(" "+_vm._s(_vm.itemTypes['contact']['icon'])+" ")]):(item.type == 'group')?_c(__unplugin_components_95,[_vm._v(" "+_vm._s(_vm.itemTypes[item.type.toLowerCase()]['icon'])+" ")]):_c(__unplugin_components_95,[_vm._v(" mdi-group ")])],1)]}},{key:"label",fn:function(ref){
var item = ref.item;
return [_c(__unplugin_components_91,{class:_vm.getObjectIsClickable(item) + ' ',attrs:{"justify":"start"},on:{"click":function($event){_vm.getObjectIsClickable ? _vm.changeOpenStatus(item.id) : undefined;}}},[_c(__unplugin_components_88,{attrs:{"cols":"auto"}},[_vm._v(" "+_vm._s(item.name)+" ")])],1)]}},{key:"append",fn:function(ref){
var item = ref.item;
return [((item.type == 'user' || item.type == 'person') && _vm.validForActions(item.object_class))?_c('span',[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"color":"primary","icon":""},on:{"click":function($event){return _vm.goToUser(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-arrow-right-bold ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.goTo') + ' ' + _vm.$tc('classes.user', 1)))])])],1):(item.type == 'group' && _vm.validForActions(item.object_class))?_c('span',[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"color":"primary","icon":""},on:{"click":function($event){return _vm.goToGroup(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-arrow-right-bold ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.goTo') + ' ' + _vm.$tc('classes.group', 1)))])])],1):_vm._e(),(item.builtin != true)?_c('span',[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [(_vm.validForActions(item.object_class))?_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"color":"primary","icon":""},on:{"click":function($event){return _vm.openDialog('dirtreeMove', item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-folder-move ")])],1):_vm._e()]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.move')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [(_vm.validForActions(item.object_class))?_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"color":"primary","icon":""},on:{"click":function($event){return _vm.openDialog('dirtreeRename', item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-rename-box ")])],1):_vm._e()]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.rename')))])]),(_vm.validToDelete(item.type))?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"disabled":item.children && item.children.length > 0,"color":"red","icon":""},on:{"click":function($event){return _vm.openDialog('dirtreeDeleteObject', item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-delete ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.delete')))])]):_vm._e()],1):_vm._e()]}}],null,false,645672231),model:{value:(_vm.dirtreeSelection),callback:function ($$v) {_vm.dirtreeSelection=$$v;},expression:"dirtreeSelection"}}):_vm._e()],1),_c(VFabTransition,[(!this.tableData.items.length && this.error == true && !this.loading)?_c(__unplugin_components_95,{staticClass:"ma-12",attrs:{"size":"82","color":"red"}},[_vm._v(" mdi-close-circle ")]):_vm._e()],1)],1)],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"900px"},model:{value:(_vm.dialogs['dirtreeOUCreate']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'dirtreeOUCreate', $$v);},expression:"dialogs['dirtreeOUCreate']"}},[_c(DirtreeOUCreate,{ref:"DirtreeOUCreate",attrs:{"createType":_vm.createType,"dialogKey":'dirtreeOUCreate'},on:{"closeDialog":_vm.closeDialog}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['dirtreeDeleteObject']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'dirtreeDeleteObject', $$v);},expression:"dialogs['dirtreeDeleteObject']"}},[_c(DirtreeDeleteObject,{ref:"DirtreeDeleteObject",attrs:{"ldapObject":this.selectedObject,"dialogKey":'dirtreeDeleteObject'},on:{"closeDialog":_vm.closeDialog,"refresh":function($event){return _vm.resetDirtree(true)}}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"900px"},model:{value:(_vm.dialogs['dirtreeMove']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'dirtreeMove', $$v);},expression:"dialogs['dirtreeMove']"}},[_c(DirtreeMove,{ref:"DirtreeMove",attrs:{"objectDn":_vm.selectedObject.distinguished_name,"objectName":_vm.selectedObject.name,"dialogKey":'dirtreeMove'},on:{"closeDialog":_vm.closeDialog,"confirm":_vm.moveObject}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"900px"},model:{value:(_vm.dialogs['dirtreeRename']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'dirtreeRename', $$v);},expression:"dialogs['dirtreeRename']"}},[_c(DirtreeRename,{ref:"DirtreeRename",attrs:{"objectDn":_vm.selectedObject.distinguished_name,"objectName":_vm.selectedObject.name,"dialogKey":'dirtreeRename'},on:{"closeDialog":_vm.closeDialog,"confirm":_vm.renameObject}})],1)],1)};
var staticRenderFns$q = [];

/* unplugin-vue-components disabled */var DirtreeView_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$q = {
  name: 'DirtreeView',
  mixins: [validationMixin, utilsMixin],
  components: {
    DirtreeMove,
    DirtreeRename,
    DirtreeOUCreate,
    DirtreeDeleteObject,
    RefreshButton
  },
  props: {
    viewTitle: String,
    snackbarTimeout: Number
  },
  data() {
    return {
      createType: "ou",
      actionListOpen: false,
      actionList: [
        {
          value: "dirtreecomputerCreate",
          icon: "mdi-monitor",
          enabled: true
        },
        {
          value: "dirtreePrinterCreate",
          icon: "mdi-printer",
          enabled: false
        }
      ],
      searchString: "",
      selectedObject: {},
      filterListOpen: false,
      loading: false,
      error: false,
      dirtreeSelection: [],
      forceReload: false,
      dirtreeOpen: [],
      listOpenAll: false,
      tableData: {
        headers: [],
        items: []
      },
      dialogs: {
        dirtreeOUCreate: false,
        dirtreeMove: false,
        dirtreeRename: false,
        dirtreeDeleteObject: false,
      },
      filters: {
        "exclude": {}
      },
      itemTypes: {
        "container": {
          "filtered": false,
          "icon": "mdi-archive",
          "required": false,
        },
        "person": {
          "filtered": false,
          "show": false,
          "icon": "mdi-account"
        },
        "user": {
          "filtered": false,
          "icon": "mdi-account",
          "required": false,
        },
        "contact": {
          "filtered": false,
          "show": true,
          "icon": "mdi-folder-account-outline"
        },
        "group": {
          "filtered": false,
          "icon": "mdi-google-circles-communities",
          "required": false,
        },
        "computer": {
          "filtered": false,
          "icon": "mdi-monitor",
          "required": false,
        },
        // "builtin-domain":{
        //     "filtered": false,
        //     "icon": "mdi-hammer",
        //     "required": true,
        // },
        // "organizational-unit":{
        //     "filtered":false,
        //     "icon":"mdi-folder",
        //     "required": true,
        // },
      },
    }
  },
  created() {
    this.fetchDirtree();
  },
  watch: {
    'dialogs': {
      handler: function (newValue) {
        if (!newValue['dirtreeMove'] || newValue['dirtreeMove'] == false)
          this.$refs.DirtreeMove.clearList(this.selectedObject.distinguished_name);
      },
      deep: true
    }
  },
  methods: {
    itemIsContact(item) {
      if (!item) return false
      if (!item.object_class) return false
      if (!Array.isArray(item.object_class)) return false
      return item.object_class.includes('contact')
    },
    createSnackbar(notifObj) {
      notificationBus.$emit('createNotification', notifObj);
    },
    validToDelete(itemType) {
      switch (itemType.toLowerCase()) {
        case 'organizational-unit':
        case 'computer':
        case 'printer':
          return true
        default:
          return false
      }
    },
    validForActions(itemObjectClasses) {
      if (itemObjectClasses != undefined)
        if (itemObjectClasses.includes('contact'))
          return false
      return true
    },
    getTranslationKey(o) {
      var key = o.value;
      switch (key) {
        case "dirtreeOUCreate":
          return this.$t("actions.addN") + " " + this.$tc("classes.organizational-unit", 1)
        case "dirtreeMove":
          return this.$t("actions.move") + " " + this.$tc("classes.ldap", 1)
        case "dirtreePrinterCreate":
          return this.$t("actions.addN") + " " + this.$tc("classes.printer", 1)
        case "dirtreecomputerCreate":
          return this.$t("actions.addN") + " " + this.$tc("classes.computer", 1)
        case "dirtreeDelete":
          return this.$t("actions.delete") + " " + this.$tc("classes.ldap", 1)
        default:
          return "No Translation Key"
      }
    },
    resetSearch() {
      this.searchString = "";
    },
    toggleOpenAll() {
      this.listOpenAll = !this.listOpenAll;
      if (this.dirtreeOpen.length > 0)
        this.listOpenAll = false;
      if (this.$refs.dirTreeviewList != undefined)
        this.$refs.dirTreeviewList.updateAll(this.listOpenAll);
    },
    changeOpenStatus(itemId) {
      if (this.dirtreeOpen.includes(itemId))
        this.dirtreeOpen = this.dirtreeOpen.filter(e => e !== itemId);
      else
        this.dirtreeOpen.push(itemId);
    },
    async moveObject(destination) {
      this.loading = true;
      this.dialogs['dirtreeMove'] = false;
      this.selectedObject.destination = destination;
      await new OrganizationalUnit({}).move({ ldapObject: this.selectedObject })
        .then(() => {
          this.error = false;
          this.loading = false;
          this.resetDirtree(true);
          this.createSnackbar({ message: this.$t("section.dirtree.move.success").toUpperCase(), type: 'success' });
        })
        .catch(error => {
          console.error(error);
          this.loading = false;
          this.error = true;
          this.errorMsg = this.getMessageForCode(error);
          this.createSnackbar({ message: this.errorMsg.toUpperCase(), type: 'error' });
        });
    },
    async renameObject(newRDN) {
      this.loading = true;
      this.dialogs['dirtreeRename'] = false;
      this.selectedObject.newRDN = newRDN;
      await new OrganizationalUnit({}).rename({ ldapObject: this.selectedObject })
        .then(() => {
          this.error = false;
          this.loading = false;
          this.resetDirtree(true);
          this.createSnackbar({ message: this.$t("section.dirtree.rename.success").toUpperCase(), type: 'success' });
        })
        .catch(error => {
          console.error(error);
          this.loading = false;
          this.error = true;
          this.errorMsg = this.getMessageForCode(error);
          this.createSnackbar({ message: this.errorMsg.toUpperCase(), type: 'error' });
        });
    },
    openDialog(key, item) {
      this.dialogs[key] = true;
      this.selectedObject = {};
      switch (key) {
        case 'dirtreeMove':
          this.createFlag = false;
          this.selectedObject = item;
          if (this.$refs.DirtreeMove != undefined)
            this.$refs.DirtreeMove.resetDialog(this.selectedObject.distinguished_name);
          break;
        case 'dirtreeRename':
          this.selectedObject = item;
          if (this.$refs.DirtreeRename != undefined)
            this.$refs.DirtreeRename.clearData();
          break;
        case 'dirtreeOUCreate':
          this.createType = 'ou';
          if (this.$refs.DirtreeOUCreate != undefined) {
            this.$refs.DirtreeOUCreate.newOU();
            this.$refs.DirtreeOUCreate.resetDialog();
          }
          break;
        case 'dirtreecomputerCreate':
          this.dialogs['dirtreeOUCreate'] = true;
          this.createType = 'computer';
          if (this.$refs.DirtreeOUCreate != undefined) {
            this.$refs.DirtreeOUCreate.newOU();
            this.$refs.DirtreeOUCreate.resetDialog();
          }
          break;
        case 'dirtreePrinterCreate':
          this.dialogs['dirtreeOUCreate'] = true;
          this.createType = 'printer';
          if (this.$refs.DirtreeOUCreate != undefined) {
            this.$refs.DirtreeOUCreate.newOU();
            this.$refs.DirtreeOUCreate.resetDialog();
          }
          break;
        case 'dirtreeDeleteObject':
          this.selectedObject = item;
          break;
      }
    },
    async closeDialog(key, refresh = false) {
      this.dialogs[key] = false;
      if (refresh)
        this.fetchDirtree();
    },
    goToUser(item) {
      this.$emit('goToUser', item);
    },
    goToGroup(item) {
      this.$emit('goToGroup', item);
    },
    filterAll() {
      for (const i in this.itemTypes) {
        this.itemTypes[i].filtered = true;
      }
      this.buildFilter();
    },
    filterNone() {
      for (const i in this.itemTypes) {
        this.itemTypes[i].filtered = false;
      }
      this.buildFilter();
    },
    buildFilter() {
      if (!this.filters) {
        this.filters = { 'exclude': {} };
        return this.fetchDirtree()
      }
      this.filters['exclude']['objectClass'] = [];
      let objectClassFilter = this.filters['exclude']['objectClass'];
      for (const i in this.itemTypes) {
        if (this.itemTypes[i].filtered == true)
          objectClassFilter.push(i);
        else {
          if (objectClassFilter.indexOf(i) >= 0)
            objectClassFilter.splice(objectClassFilter.indexOf(i), 1);
        }
      }
      if (objectClassFilter.length == 0)
        delete this.filters['exclude']['objectClass'];
      return this.fetchDirtree()
    },
    setFilter(key, build_filter = false) {
      const filter_status = this.itemTypes[key].filtered;
      switch (key) {
        case 'user':
        case 'person':
          this.itemTypes['person'].filtered = filter_status;
          this.itemTypes['user'].filtered = filter_status;
          break;
        default:
          this.itemTypes[key].filtered = filter_status;
          break;
      }
      if (build_filter)
        this.buildFilter();
      // console.log('Feature not enabled, filter for ' + key.toUpperCase() + ' objects should toggle')
    },
    getObjectIsClickable(item) {
      if (Array.isArray(item.children) && item.children.length > 0)
        return 'clickable'
      else
        return 'notclickable'
    },
    resetDirtree(forceReload = false) {
      this.filters = { 'exclude': {} };
      var filterReset = false;
      var value;
      for (const type in this.itemTypes) {
        value = this.itemTypes[type].filtered;
        if (value == true) {
          this.itemTypes[type].filtered = false;
          filterReset = true;
        }
      }
      if (filterReset == true || forceReload == true)
        this.fetchDirtree();
      this.forceReload = false;
    },
    // DirTree View Actions
    async fetchDirtree() {
      this.loading = true;
      this.tableData.headers = [];
      this.tableData.items = [];
      await new OrganizationalUnit({}).dirtree(this.filters)
        .then(response => {
          this.tableData.headers = [];
          this.tableData.items = response.data.ldapObjectList;
          this.error = false;
          this.loading = false;
          this.createSnackbar({ message: (this.$t("category.header.ldap-dirtree") + " " + this.$tc("words.loaded.m", 1)).toUpperCase(), type: 'success' });
        })
        .catch(error => {
          console.error(error);
          this.loading = false;
          this.error = true;
          this.createSnackbar({ message: this.getMessageForCode(error), type: 'error' });
        });
      this.$emit('done');
    },
  },
};
const __cssModules$q = {};
var __component__$q = /*#__PURE__*/normalizeComponent(
  __vue2_script$q,
  render$q,
  staticRenderFns$q,
  false,
  __vue2_injectStyles$q,
  null,
  null,
  null
);

function __vue2_injectStyles$q (context) {
  for(let o in __cssModules$q){
    this[o] = __cssModules$q[o];
  }
}

var DirtreeView = /*#__PURE__*/(function () { return __component__$q.exports })();

class Domain extends ApiModel {

    domain;
    realm;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async getDetails() {
        return await interlock_backend.call('domain/details')
    }

    async zones(data) {
        return await interlock_backend.call('domain/zones', data)
    }

    async insert(data) {
        return await interlock_backend.call('domain/insert', data)
    }

    async delete(data) {
        return await interlock_backend.call('domain/delete', data)
    }
}

class DNSRecord extends ApiModel {

    name;
    nameExchange;
    ttl;
    address;
    typeName;
    serial;
    ts;
    nameTarget;
    type;
    tstime;
    wPreference;
    wPriority;
    wWeight;
    wPort;
    dwSerialNo;
    dwRefresh;
    dwRetry;
    dwExpire;
    dwMinimumTtl;
    namePrimaryServer;
    zoneAdminEmail;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async insert(data) {
        return await interlock_backend.call('dnsr/insert', data)
    }

    async update(data) {
        return await interlock_backend.call('dnsr/update', data)
    }

    async delete(data) {
        return await interlock_backend.call('dnsr/delete', data)
    }
}

var render$p = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s((_vm.updateFlag ? _vm.$t('actions.edit') : _vm.$t('actions.create')) + " " + _vm.$tc("classes.dns.record", 1)))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[(_vm.useSidebar && _vm.updateFlag != true)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"4","lg":"3"}},[_c(__unplugin_components_4$1,{staticClass:"pa-0 ma-0 dnssidebar"},[_c(__unplugin_components_10,{staticClass:"ma-0 pa-0 pt-4",attrs:{"column":""},on:{"change":_vm.resetRecord},model:{value:(_vm.selectedType),callback:function ($$v) {_vm.selectedType=$$v;},expression:"selectedType"}},_vm._l((_vm.getRecordTypes),function(element,index){return _c(__unplugin_components_9$2,{key:element.value},[_c(__unplugin_components_12$1,{key:index,attrs:{"value":element.value,"label":_vm.$tc('classes.dns.record', 1) + ' ' + element.name}})],1)}),1)],1)],1):_vm._e(),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_18,{ref:"RecordForm",on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 pa-4 pb-1",attrs:{"align":"center","justify":"center"}},[(_vm.updateFlag != true)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"10","md":"8"}},[_c(__unplugin_components_0$3,{directives:[{name:"show",rawName:"v-show",value:(!_vm.useSidebar),expression:"!useSidebar"}],attrs:{"label":_vm.$t('dns.attributes.typeName'),"hide-details":"","items":_vm.getRecordTypes,"item-value":"value","item-text":"name"},on:{"change":_vm.resetRecord},model:{value:(_vm.selectedType),callback:function ($$v) {_vm.selectedType=$$v;},expression:"selectedType"}})],1):_vm._e(),(_vm.selectedType != 6)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mt-4 mb-4",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","hint":_vm.$t('dns.hints.serial' + (_vm.updateFlag ? '_edit' : '_create')),"persistent-hint":"","label":_vm.$t('dns.attributes.serial'),"rules":[this.fieldRules(_vm.recordCopy.serial, 'ge_int32', false)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.serial),callback:function ($$v) {_vm.$set(_vm.recordCopy, "serial", $$v);},expression:"recordCopy.serial"}})],1):_vm._e(),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 px-2 mt-0",attrs:{"cols":"12"}},[_c(__unplugin_components_21,{ref:"TTLField",attrs:{"label":_vm.$t('dns.attributes.ttl'),"items":_vm.ttlPresets,"rules":[this.fieldRules(_vm.ttlVal, 'ge_numbers', true)]},on:{"change":_vm.setTTL},model:{value:(_vm.ttlVal),callback:function ($$v) {_vm.ttlVal=$$v;},expression:"ttlVal"}})],1),(_vm.selectedType != 6)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mt-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"hint":_vm.$t('dns.hints.name'),"persistent-hint":"","label":_vm.$t('dns.attributes.name'),"rules":[this.fieldRules(_vm.recordCopy.name, _vm.getValidationForRecordTypeName, true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.name),callback:function ($$v) {_vm.$set(_vm.recordCopy, "name", $$v);},expression:"recordCopy.name"}})],1):_vm._e()],1),(_vm.selectedType == 1)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.ipv4Address'),"rules":[this.fieldRules(_vm.recordCopy.address, 'net_ipv4', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.address),callback:function ($$v) {_vm.$set(_vm.recordCopy, "address", $$v);},expression:"recordCopy.address"}})],1)],1):_vm._e(),(_vm.selectedType == 28)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.ipv6Address'),"rules":[this.fieldRules(_vm.recordCopy.ipv6Address, 'net_ipv6', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.ipv6Address),callback:function ($$v) {_vm.$set(_vm.recordCopy, "ipv6Address", $$v);},expression:"recordCopy.ipv6Address"}})],1)],1):_vm._e(),(_vm.isNodeNameRecord(_vm.selectedType))?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.nameNode'),"rules":[this.fieldRules(_vm.recordCopy.nameNode, 'net_domain_canonical', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.nameNode),callback:function ($$v) {_vm.$set(_vm.recordCopy, "nameNode", $$v);},expression:"recordCopy.nameNode"}})],1)],1):_vm._e(),(_vm.selectedType == 15)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.nameExchange'),"rules":[this.fieldRules(_vm.recordCopy.nameExchange, 'net_domain_canonical', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.nameExchange),callback:function ($$v) {_vm.$set(_vm.recordCopy, "nameExchange", $$v);},expression:"recordCopy.nameExchange"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.wPreference'),"rules":[this.fieldRules(_vm.recordCopy.wPreference, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.wPreference),callback:function ($$v) {_vm.$set(_vm.recordCopy, "wPreference", $$v);},expression:"recordCopy.wPreference"}})],1)],1):_vm._e(),(_vm.isStringRecord(_vm.selectedType))?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mt-4",attrs:{"cols":"12"}},[_c(__unplugin_components_17,{staticClass:"mx-2 mb-1",attrs:{"type":"info"}},[_vm._v(" "+_vm._s(_vm.$t("dns.hints.quotesNotRequired"))+" ")])],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mt-4",attrs:{"cols":"12"}},[_c(__unplugin_components_42$1,{staticClass:"mx-2",attrs:{"auto-grow":"","outlined":"","hint":_vm.$t('dns.hints.stringData'),"persistent-hint":"","label":_vm.$t('dns.attributes.stringData'),"rules":[this.fieldRules(_vm.recordCopy.stringData, 'dns_stringData', true)]},model:{value:(_vm.recordCopy.stringData),callback:function ($$v) {_vm.$set(_vm.recordCopy, "stringData", $$v);},expression:"recordCopy.stringData"}})],1)],1):_vm._e(),(_vm.selectedType == 6)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.namePrimaryServer'),"rules":[this.fieldRules(_vm.recordCopy.namePrimaryServer, 'net_domain_canonical', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.namePrimaryServer),callback:function ($$v) {_vm.$set(_vm.recordCopy, "namePrimaryServer", $$v);},expression:"recordCopy.namePrimaryServer"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.zoneAdminEmail'),"rules":[this.fieldRules(_vm.recordCopy.zoneAdminEmail, 'net_domain_canonical', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.zoneAdminEmail),callback:function ($$v) {_vm.$set(_vm.recordCopy, "zoneAdminEmail", $$v);},expression:"recordCopy.zoneAdminEmail"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.dwSerialNo'),"rules":[this.fieldRules(_vm.recordCopy.dwSerialNo, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.dwSerialNo),callback:function ($$v) {_vm.$set(_vm.recordCopy, "dwSerialNo", $$v);},expression:"recordCopy.dwSerialNo"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.dwRefresh'),"hint":((_vm.$t('words.recommended')) + ": 900"),"rules":[this.fieldRules(_vm.recordCopy.dwRefresh, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.dwRefresh),callback:function ($$v) {_vm.$set(_vm.recordCopy, "dwRefresh", $$v);},expression:"recordCopy.dwRefresh"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.dwRetry'),"hint":((_vm.$t('words.recommended')) + ": 600"),"rules":[this.fieldRules(_vm.recordCopy.dwRetry, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.dwRetry),callback:function ($$v) {_vm.$set(_vm.recordCopy, "dwRetry", $$v);},expression:"recordCopy.dwRetry"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.dwExpire'),"hint":((_vm.$t('words.recommended')) + ": 86400"),"rules":[this.fieldRules(_vm.recordCopy.dwExpire, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.dwExpire),callback:function ($$v) {_vm.$set(_vm.recordCopy, "dwExpire", $$v);},expression:"recordCopy.dwExpire"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.dwMinimumTtl'),"hint":((_vm.$t('words.recommended')) + ": 900"),"rules":[this.fieldRules(_vm.recordCopy.dwMinimumTtl, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.dwMinimumTtl),callback:function ($$v) {_vm.$set(_vm.recordCopy, "dwMinimumTtl", $$v);},expression:"recordCopy.dwMinimumTtl"}})],1)],1):_vm._e(),(_vm.selectedType == 33)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 pb-4"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.wPriority'),"rules":[this.fieldRules(_vm.recordCopy.wPriority, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.wPriority),callback:function ($$v) {_vm.$set(_vm.recordCopy, "wPriority", $$v);},expression:"recordCopy.wPriority"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.wWeight'),"rules":[this.fieldRules(_vm.recordCopy.wWeight, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.wWeight),callback:function ($$v) {_vm.$set(_vm.recordCopy, "wWeight", $$v);},expression:"recordCopy.wWeight"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.wPort'),"rules":[this.fieldRules(_vm.recordCopy.wPort, 'ge_numbers', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.wPort),callback:function ($$v) {_vm.$set(_vm.recordCopy, "wPort", $$v);},expression:"recordCopy.wPort"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"label":_vm.$t('dns.attributes.nameTarget'),"rules":[this.fieldRules(_vm.recordCopy.nameTarget, 'net_domain_canonical', true)]},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}},model:{value:(_vm.recordCopy.nameTarget),callback:function ($$v) {_vm.$set(_vm.recordCopy, "nameTarget", $$v);},expression:"recordCopy.nameTarget"}})],1)],1):_vm._e()],1)],1)],1)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'space-around' : 'end'}},[_c('div',[_c(VSlideXReverseTransition,[_c(__unplugin_components_7$1,{staticClass:"mx-3",attrs:{"indeterminate":_vm.loading == true,"value":_vm.submitted ? 100 : 0,"color":_vm.submitted ? (!_vm.error ? 'green' : 'red') : 'primary',"size":"26"}},[_c(VFabTransition,[(_vm.submitted && !_vm.error)?_c(__unplugin_components_95,{attrs:{"color":"green"}},[_vm._v(" mdi-checkbox-marked-circle ")]):(_vm.submitted == true && _vm.error == true)?_c(__unplugin_components_95,{attrs:{"color":"red"}},[_vm._v(" mdi-close-circle ")]):_vm._e()],1)],1)],1),_c(VSlideXReverseTransition,[(_vm.submitted == true)?_c(__unplugin_components_40,{staticClass:"mr-2",attrs:{"text-color":"white","color":_vm.error == true ? 'red' : 'green'}},[_vm._v(" "+_vm._s(_vm.errorMsg == "" ? _vm.$t(("section.dns." + (_vm.updateFlag ? 'update' : 'create') + "Success")) : _vm.errorMsg)+" ")]):_vm._e()],1),_c(VSlideXReverseTransition,[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.syncRecord}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-cached ")]),_vm._v(" "+_vm._s(_vm.$t("actions.reset"))+" ")],1)],1),_c(VSlideXReverseTransition,[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 pr-4",attrs:{"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":function($event){return _vm.confirmAction()},"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.confirmAction()}}},[_c(__unplugin_components_95,{staticClass:"ma-0 mr-1",attrs:{"color":"primary"}},[_vm._v(" mdi-checkbox-marked-circle-outline ")]),_vm._v(" "+_vm._s(_vm.$t("actions.done"))+" ")],1)],1)],1)])],1)],1)};
var staticRenderFns$p = [];

/* unplugin-vue-components disabled */var RecordDialog_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$p = {
	name: 'RecordDialog',
	mixins: [validationMixin, utilsMixin],
	props: {
		dialogKey: String,
		recordObject: Object,
		currentZone: String,
		updateFlag: Boolean,
		zoneHasSOA: {
			type: Boolean,
			default: true
		}
	},
	data() {
		return {
			loading: false,
			error: false,
			submitted: false,
			drawerState: true,
			errorMsg: "",
			ttlVal: 900,
			ttlPresets: [
				60,
				300,
				900,
				3600,
				86400,
				604800
			],
			selectedType: 1,
			recordTypes: [
				{
					name: "A",
					value: 1,
					supported: true
				},
				{
					name: "AAAA",
					value: 28,
					supported: true
				},
				{
					name: "NS",
					value: 2,
					supported: true
				},
				{
					name: "CNAME",
					value: 5,
					supported: true
				},
				{
					name: "DNAME",
					value: 39,
					supported: true
				},
				{
					name: "SOA",
					value: 6,
					supported: true
				},
				{
					name: "HINFO",
					value: 13,
					supported: true
				},
				{
					name: "MX",
					value: 15,
					supported: true
				},
				{
					name: "TXT",
					value: 16,
					supported: true
				},
				{
					name: "SIG",
					value: 18,
					supported: false
				},
				{
					name: "KEY",
					value: 19,
					supported: false
				},
				{
					name: "ISDN",
					value: 20,
					supported: true
				},
				{
					name: "LOC",
					value: 29,
					supported: true
				},
				{
					name: "SRV",
					value: 33,
					supported: true
				},
				{
					name: "PTR",
					value: 35,
					supported: true
				},
				{
					name: "WINS",
					value: 65281,
					supported: false
				},
			],
			recordCopy: {},
			originalRecord: {},
			nodeNameRecordTypes: [
				35, // PTR
				2,  // NS
				5,  // CNAME
				39 // DNAME
			],
			stringRecordTypes: [
				13, // HINFO
				20, // ISDN
				16, // TXT
				19, // X25
				29  // LOC
			],
			intFields: [
				"serial",
				"ttl",
				"wPreference",
				"dwSerialNo",
				"dwRefresh",
				"dwRetry",
				"dwExpire",
				"dwMinimumTtl",
				"wPriority",
				"wWeight",
				"wPort"
			],
		}
	},
	computed: {
		useSidebar() {
			return this.$vuetify.breakpoint.mdAndUp
		},
		getValidationForRecordTypeName() {
			var defaultValidator = 'dns_root';
			if (this.recordCopy.type != undefined) {
				switch (this.recordCopy.type) {
					default:
						return defaultValidator
				}
			} else
				return defaultValidator
		},
		getRecordTypes() {
			var rTypes = this.recordTypes.filter(e => e.supported == true);
			if (this.zoneHasSOA == true)
				rTypes = rTypes.filter(e => e.value != 6);
			return rTypes
		}
	},
	created() {
		this.syncRecord();
	},
	methods: {
		confirmAction() {
			this.updateFlag == true ? this.updateRecord() : this.createRecord();
		},
		isNodeNameRecord(type) {
			if (this.nodeNameRecordTypes.includes(type))
				return true
			return false
		},
		isStringRecord(type) {
			if (this.stringRecordTypes.includes(type))
				return true
			return false
		},
		logData() {
			console.log(this.recordCopy);
			console.log(this.recordObject);
		},
		resetRecord() {
			this.resetLoadingStatus();
			if (this.$refs.RecordForm != undefined)
				this.$refs.RecordForm.resetValidation();
			this.recordCopy = {};
			if (this.recordObject != undefined && this.recordObject != null) {
				if (this.recordObject.ttl == undefined)
					this.recordCopy.ttl = 900;
				setTimeout(() => {
					this.recordCopy.type = this.selectedType;
				}, 500);
			}
		},
		resetValidation() {
			if (this.$refs.RecordForm != undefined)
				this.$refs.RecordForm.resetValidation();
		},
		syncRecord() {
			this.resetRecord();
			this.$nextTick(() => {
				// Do deep copy of object for reset
				if (this.recordObject != undefined && this.recordObject != null) {
					this.recordCopy = Object.assign({}, this.recordObject);
					this.originalRecord = Object.assign({}, this.recordObject);

					if (this.recordObject.ttl == undefined)
						this.recordCopy.ttl = 900;
					if (this.recordObject.type != undefined)
						this.selectedType = this.recordObject.type;
				}
			});
		},
		setTTL(v) {
			if (this.$refs.TTLField.validate())
				this.recordCopy.ttl = v;
		},
		resetLoadingStatus() {
			this.loading = false;
			this.error = false;
			this.errorMsg = "";
			this.submitted = false;
		},
		async createRecord() {
			// console.log('Create Record')
			// console.log(this.recordCopy)
			this.recordCopy.zone = this.currentZone;
			// If Record Type is SOA force the Root Name
			if (this.recordCopy.type == 6)
				this.recordCopy.name = '@';

			if (this.$refs.RecordForm.validate()) {
				this.resetLoadingStatus();
				this.loading = true;
				Object.keys(this.recordCopy).forEach(key => {
					if (this.intFields.includes(key))
						this.recordCopy[key] = parseInt(this.recordCopy[key]);
				});
				await new DNSRecord({}).insert(this.recordCopy)
					.then(() => {
						this.loading = false;
						this.error = false;
						this.errorMsg = "";
						this.submitted = true;
						setTimeout(() => {
							this.closeDialog(true);
							notificationBus.$emit('createNotification',
								{ message: (this.$tc("classes.dns.record", 1) + " " + this.$tc("words.created.m", 1)).toUpperCase(), type: 'success' }
							);
						}, 250);
					})
					.catch(error => {
						console.error(error);
						this.loading = false;
						this.error = true;
						this.submitted = true;
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification',
							{ message: this.errorMsg.toUpperCase(), type: 'error' }
						);
					});
			}
		},
		async updateRecord() {
			this.recordCopy.zone = this.currentZone;
			this.originalRecord.zone = this.currentZone;
			let recordDiffers = false;

			if (this.recordCopy.type == 6)
				this.recordCopy.serial = parseInt(this.recordCopy.dwSerialNo);

			for (const key in this.recordCopy) {
				if (key in this.recordCopy && key in this.originalRecord) {
					if (this.recordCopy[key] != this.originalRecord[key])
						recordDiffers = true;
				}
			}

			if (recordDiffers == true && this.$refs.RecordForm.validate()) {
				this.resetLoadingStatus();
				this.loading = true;
				Object.keys(this.recordCopy).forEach(key => {
					if (this.intFields.includes(key))
						this.recordCopy[key] = parseInt(this.recordCopy[key]);
				});
				Object.keys(this.originalRecord).forEach(key => {
					if (this.intFields.includes(key))
						this.originalRecord[key] = parseInt(this.originalRecord[key]);
				});
				await new DNSRecord({}).update({ record: this.recordCopy, oldRecord: this.originalRecord })
					.then(() => {
						this.loading = false;
						this.error = false;
						this.errorMsg = "";
						this.submitted = true;
						setTimeout(() => {
							this.closeDialog(true);
							notificationBus.$emit('createNotification',
								{ message: (this.$tc("classes.dns.record", 1) + " " + this.$tc("words.updated.m", 1)).toUpperCase(), type: 'success' }
							);
						}, 250);
					})
					.catch(error => {
						console.error(error);
						this.loading = false;
						this.error = true;
						this.submitted = true;
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification',
							{ message: this.errorMsg.toUpperCase(), type: 'error' }
						);
					});
			} else {
				this.closeDialog();
			}
		},
		closeDialog(refresh = false) {
			this.$emit('closeDialog', this.dialogKey, refresh);
		},
	},
};
const __cssModules$p = {};
var __component__$p = /*#__PURE__*/normalizeComponent(
  __vue2_script$p,
  render$p,
  staticRenderFns$p,
  false,
  __vue2_injectStyles$p,
  null,
  null,
  null
);

function __vue2_injectStyles$p (context) {
  for(let o in __cssModules$p){
    this[o] = __cssModules$p[o];
  }
}

var RecordDialog = /*#__PURE__*/(function () { return __component__$p.exports })();

var render$o = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 pl-1 ma-1",attrs:{"disabled":_vm.disabled,"dark":_vm.dark != undefined ? _vm.dark : !_vm.isThemeDark(_vm.$vuetify) && !_vm.disabled,"light":_vm.light != undefined ? _vm.light : _vm.isThemeDark(_vm.$vuetify) && !_vm.disabled,"rounded":_vm.rounded},on:{"click":_vm.emitClick}},[_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":"valid"}}),_c(__unplugin_components_7$1,{staticClass:"ma-0 mr-1",attrs:{"indeterminate":_vm.loading,"value":_vm.submitted ? 100 : 0,"color":_vm.iconColor,"size":"26"}},[_c(VFabTransition,[(_vm.iconSide == 'left' || _vm.iconSide == 'start')?_c('span',[(!_vm.submitted)?_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor}},[_vm._v(" "+_vm._s(_vm.icon)+" ")]):(_vm.submitted && !_vm.error)?_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor}},[_vm._v(" "+_vm._s(_vm.iconSuccess)+" ")]):(_vm.submitted == true && _vm.error == true)?_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor}},[_vm._v(" "+_vm._s(_vm.iconError)+" ")]):_vm._e()],1):_vm._e()])],1),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.label)+" ")]),(_vm.iconSide == 'right' || _vm.iconSide == 'end')?_c('span',[(!_vm.submitted)?_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor}},[_vm._v(" "+_vm._s(_vm.icon)+" ")]):(_vm.submitted && !_vm.error)?_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor}},[_vm._v(" "+_vm._s(_vm.iconSuccess)+" ")]):(_vm.submitted == true && _vm.error == true)?_c(__unplugin_components_95,{attrs:{"color":_vm.iconColor}},[_vm._v(" "+_vm._s(_vm.iconError)+" ")]):_vm._e()],1):_vm._e()],1)};
var staticRenderFns$o = [];

/* unplugin-vue-components disabled *///
const __vue2_script$o = {
	mixins: [utilsMixin],
	data() {
		return {
		}
	},
	props: {
		loading: Boolean,
		disabled: Boolean,
		submitted: {
			type: Boolean,
			default: false
		},
		rounded: {
			type: Boolean,
			default: true
		},
		dark: {
			type: Boolean,
			default: undefined
		},
		light: {
			type: Boolean,
			default: undefined
		},
		label: String,
		icon: {
			type: String,
			default: "mdi-dots-horizontal-circle-outline"
		},
		iconSuccess: {
			type: String,
			default: "mdi-check-circle"
		},
		iconError: {
			type: String,
			default: "mdi-close-circle"
		},
		iconColor: {
			type: String,
			default: "primary"
		},
		iconSide: {
			type: String,
			default: "left"
		},
		error: {
			type: Boolean,
			default: false
		}
	},
	created() {
	},
	methods: {
		emitClick() {
			this.$emit("click");
		}
	}
};
const __cssModules$o = {};
var __component__$o = /*#__PURE__*/normalizeComponent(
  __vue2_script$o,
  render$o,
  staticRenderFns$o,
  false,
  __vue2_injectStyles$o,
  null,
  null,
  null
);

function __vue2_injectStyles$o (context) {
  for(let o in __cssModules$o){
    this[o] = __cssModules$o[o];
  }
}

var ProgressButton = /*#__PURE__*/(function () { return __component__$o.exports })();

var render$n = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('actions.delete') + ' ' + _vm.$tc('classes.dns.' + _vm.deleteMode, 1))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0 pb-4"},[(_vm.deleteMode == 'record')?_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 mb-2 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.dns.deleteRecord.message'))+" "),_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.recordObject.displayName + " (" + _vm.recordObject.typeName + ")?")+" ")])]):(_vm.deleteMode == 'zone')?_c(__unplugin_components_91,{staticClass:"pa-0 ma-8 mb-2 text-subtitle-1",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('section.dns.deleteZone.message'))+" "),_c('span',{staticClass:"font-weight-medium",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.currentZone + "?")+" ")])]):_vm._e(),_c(__unplugin_components_5,{staticClass:"mx-8 mb-3"}),(_vm.deleteMode == 'record')?_c('span',_vm._l((_vm.recordObject),function(value,attr_key){return _c(__unplugin_components_91,{key:attr_key,staticClass:"pa-0 ma-0 text-subtitle-1",attrs:{"justify":"center"}},[(_vm.showAttribute(attr_key))?_c('span',{staticClass:"ma-0 pa-0",staticStyle:{"padding-left":"0.5ch"}},[_vm._v(" "+_vm._s(_vm.$t('dns.attributes.' + attr_key) + ": " + value)+" ")]):_vm._e()])}),1):(_vm.deleteMode == 'zone')?_c('span',[_c(__unplugin_components_18,{ref:"deleteZoneForm",on:{"submit":[function($event){_vm.confirmZone == _vm.currentZone ? _vm.closeDialog(true) : false;},function($event){$event.preventDefault();}]}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"8"}},[_c(__unplugin_components_89,{attrs:{"label":_vm.$t('section.dns.deleteZone.confirmZone'),"rules":[_vm.fieldRules(_vm.confirmZone, 'ldap_website')]},model:{value:(_vm.confirmZone),callback:function ($$v) {_vm.confirmZone=$$v;},expression:"confirmZone"}})],1)],1)],1)],1):_vm._e()],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(ProgressButton,{staticClass:"ma-0 pa-0 pa-2 pl-1 ma-1",attrs:{"disabled":_vm.getAllowConfirmStatus,"loading":_vm.loading == true,"submitted":_vm.submitted,"icon-color":_vm.loading || !_vm.submitted ? 'primary' : (_vm.submitted && !_vm.error ? 'valid-40-s' : 'error'),"icon-success":"mdi-check-circle","icon-error":"mdi-close-circle","label":_vm.$t('actions.yes')},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)},"click":function($event){return _vm.closeDialog(true)}}}),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$n = [];

/* unplugin-vue-components disabled *///

const __vue2_script$n = {
	name: "RecordDelete",
	mixins: [validationMixin, utilsMixin],
	components: {
		ProgressButton
	},
	data() {
		return {
			confirmZone: "",
			excludeAttr: [
				'ts',
				'type',
				'id',
				'index',
				'distinguishedName',
				'zone',
			],
			loading: false,
			error: false,
			submitted: false,
		}
	},
	props: {
		currentZone: String,
		deleteMode: {
			type: String,
			default: "record"
		},
		recordObject: Object,
		dialogKey: String
	},
	computed: {
		getAllowConfirmStatus() {
			switch (this.deleteMode) {
				case 'zone':
					if (this.currentZone == undefined || this.currentZone == null)
						return true
					if (this.currentZone != this.confirmZone)
						return true
					break;
				case 'record':
					if (this.recordObject == undefined)
						return true
					break;
			}
			return false
		}
	},
	methods: {
		resetDelete() {
			this.confirmZone = "";
			this.loading = false;
			this.error = false;
			this.submitted = false;
		},
		showAttribute(attr) {
			if (this.excludeAttr.includes(attr))
				return false
			return true
		},
		async closeDialog(deleteConfirm = false, record = {}) {
			if (record != {} && this.deleteMode == 'record') {
				record = this.recordObject;
				record.zone = this.currentZone;
			}
			if (deleteConfirm == true) {
				this.loading = true;
				this.error = false;
				this.errorMsg = "";
				this.submitted = false;
				if (this.deleteMode == 'zone' && this.currentZone == this.confirmZone && this.$refs.deleteZoneForm.validate()) {
					await new Domain({}).delete({ dnsZone: this.currentZone })
						.then(() => {
							this.loading = false;
							this.error = false;
							this.errorMsg = "";
							this.submitted = true;
							notificationBus.$emit('createNotification',
								{ message: (this.$tc("classes.dns.zone", 1) + " " + this.$tc("words.deleted.f", 1)).toUpperCase(), type: 'info' }
							);
						})
						.catch(error => {
							this.loading = false;
							this.error = true;
							this.errorMsg = this.getMessageForCode(error);
							this.submitted = true;
							notificationBus.$emit('createNotification',
								{ message: this.errorMsg.toUpperCase(), type: 'error' }
							);
							console.error(error);
						});
				} else if (this.deleteMode == 'record' && record) {
					await new DNSRecord({}).delete({ record: record })
						.then(() => {
							this.loading = false;
							this.error = false;
							this.errorMsg = "";
							this.submitted = true;
							notificationBus.$emit('createNotification',
								{ message: (this.$tc("classes.dns.record", 1) + " " + this.$tc("words.deleted.m", 1)).toUpperCase(), type: 'info' }
							);
						})
						.catch(error => {
							this.loading = false;
							this.error = true;
							this.errorMsg = this.getMessageForCode(error);
							this.submitted = true;
							notificationBus.$emit('createNotification',
								{ message: this.errorMsg.toUpperCase(), type: 'error' }
							);
							console.error(error);
						});
				}
			}

			// Wait for animations if delete confirm true
			if (deleteConfirm == true && this.submitted == true && this.error != true)
				setTimeout(() => {
					this.$emit('closeDialog', this.dialogKey, deleteConfirm);
				}, 150);
			else
				this.$emit('closeDialog', this.dialogKey);
		},
	}
};
const __cssModules$n = {};
var __component__$n = /*#__PURE__*/normalizeComponent(
  __vue2_script$n,
  render$n,
  staticRenderFns$n,
  false,
  __vue2_injectStyles$n,
  null,
  null,
  null
);

function __vue2_injectStyles$n (context) {
  for(let o in __cssModules$n){
    this[o] = __cssModules$n[o];
  }
}

var RecordDelete = /*#__PURE__*/(function () { return __component__$n.exports })();

var render$m = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('actions.delete') + ' ' + _vm.$tc('classes.dns.record', this.selectedRecords.length || 1))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0 pb-4"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-4 mb-2 text-subtitle-1",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('section.dns.massAction.delete'))+" ")]),_c(__unplugin_components_5,{staticClass:"mx-12 my-1"}),_vm._l((_vm.selectedRecords),function(record,index){return _c(__unplugin_components_88,{key:index,staticClass:"font-weight-medium pa-0 ma-0",staticStyle:{"padding-left":"0.5ch"},attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(record.displayName + " (" + record.typeName + ")")+" "+_vm._s(_vm.print_record_value(record))+" "),_c(__unplugin_components_5,{staticClass:"mx-12 my-1"})],1)})],2)],1),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(ProgressButton,{staticClass:"ma-0 pa-0 pa-2 pl-1 ma-1",attrs:{"icon-color":_vm.loading || !_vm.submitted ? 'primary' : (_vm.submitted && !_vm.error ? 'valid-40-s' : 'error'),"loading":_vm.loading,"error":_vm.error,"submitted":_vm.submitted,"label":_vm.$t('actions.yes'),"disabled":_vm.selectedRecords == undefined || _vm.selectedRecords.length < 1,"rounded":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.closeDialog(true)},"click":function($event){return _vm.closeDialog(true)}}}),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"red"}},[_vm._v(" mdi-close-circle-outline ")])],1)],1)],1)],1)};
var staticRenderFns$m = [];

/* unplugin-vue-components disabled *///

const __vue2_script$m = {
	name: 'RecordMassAction',
	mixins: [validationMixin, utilsMixin],
	components: {
		ProgressButton
	},
	data() {
		return {
			record_value_fields: {
				'A': 'address',
				'AAAA': 'ipv6Address',
				'NS': 'nameNode',
				'CNAME': 'nameNode',
				'DNAME': 'nameNode',
				'TXT': 'stringData',
				'X25': 'stringData',
				'ISDN': 'stringData',
				'LOC': 'stringData',
				'HINFO': 'stringData',
				'MX': 'nameExchange',
				'SRV': 'nameTarget',
				'PTR': 'nameNode',
			},
			excludeAttr: [
				'ts',
				'type',
				'id',
				'index',
				'distinguishedName',
				'zone',
			],
			loading: false,
			error: false,
			submitted: false,
		}
	},
	props: {
		actionType: {
			type: String,
			default: 'delete'
		},
		selectedRecords: Array,
		currentZone: String,
		dialogKey: String
	},
	methods: {
		reset() {
			this.loading = false;
			this.error = false;
			this.submitted = false;
		},
		print_record_value(record) {
			if (record.typeName in this.record_value_fields)
				return ' - ' + record[this.record_value_fields[record.typeName]]
		},
		async closeDialog(deleteConfirm = false) {
			if (deleteConfirm == true) {
				this.loading = true;
				this.error = false;
				this.errorMsg = "";
				this.submitted = false;
				var recordsToSend = [];
				this.selectedRecords.forEach(record => {
					var tempRec = record;
					tempRec['zone'] = this.currentZone;
					recordsToSend.push(tempRec);
				});
				// console.log(recordsToSend)
				await new DNSRecord({}).delete({ records: recordsToSend })
					.then(() => {
						this.loading = false;
						this.error = false;
						this.errorMsg = "";
						this.submitted = true;
						// if (response.data.length == this.selectedRecords.length)
						//     console.log("Records Deleted Successfully")
					})
					.catch(error => {
						this.loading = false;
						this.error = true;
						this.errorMsg = this.getMessageForCode(error);
						this.submitted = true;
						console.error(error);
					});
			}

			// Wait for animations if delete confirm true
			if (deleteConfirm == true && this.submitted == true && this.error != true)
				setTimeout(() => {
					this.$emit('closeDialog', this.dialogKey, deleteConfirm);
				}, 150);
			else
				this.$emit('closeDialog', this.dialogKey);
		},
	}
};
const __cssModules$m = {};
var __component__$m = /*#__PURE__*/normalizeComponent(
  __vue2_script$m,
  render$m,
  staticRenderFns$m,
  false,
  __vue2_injectStyles$m,
  null,
  null,
  null
);

function __vue2_injectStyles$m (context) {
  for(let o in __cssModules$m){
    this[o] = __cssModules$m[o];
  }
}

var RecordMassAction = /*#__PURE__*/(function () { return __component__$m.exports })();

var render$l = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"ma-2"},[_vm._v(_vm._s(_vm.$t("section.dns.ttlDisclaimer.title")))]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":function($event){return _vm.closeDialog()}}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"py-6"},[_c(__unplugin_components_91,{attrs:{"no-gutters":""}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 px-2 my-2",attrs:{"cols":"12"}},[_c('p',{staticClass:"ma-0 pa-0 font-weight-bold"},[_vm._v(" "+_vm._s(_vm.$t("section.dns.ttlDisclaimer.messageTtl"))+". ")])]),_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c(__unplugin_components_5)],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 px-2 my-4",attrs:{"cols":"12"}},[_c('p',{staticClass:"ma-0 pa-0 font-weight-bold"},[_vm._v(" "+_vm._s(_vm.$t("section.dns.ttlDisclaimer.messageLegacyDns"))+". ")])])],1)],1)],1)};
var staticRenderFns$l = [];

/* unplugin-vue-components disabled *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

const disclaimer_stor_key$1 = "misc.dns.disclaimer_closed";

const __vue2_script$l = {
	methods: {
		closeDialog(){
			localStorage.setItem(disclaimer_stor_key$1, true);
			this.$emit("closeDialog", "ttlDisclaimer");
		}
	},
};
const __cssModules$l = {};
var __component__$l = /*#__PURE__*/normalizeComponent(
  __vue2_script$l,
  render$l,
  staticRenderFns$l,
  false,
  __vue2_injectStyles$l,
  null,
  null,
  null
);

function __vue2_injectStyles$l (context) {
  for(let o in __cssModules$l){
    this[o] = __cssModules$l[o];
  }
}

var __unplugin_components_86 = /*#__PURE__*/(function () { return __component__$l.exports })();

var render$k = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_0$2,{staticClass:"py-3 px-2 mt-2 mb-2",attrs:{"headers":_vm.computedTableHeaders,"items":_vm.filteredData,"custom-sort":_vm.sortNullLast,"loading":_vm.loading,"search":_vm.searchString,"custom-filter":_vm.searchDnsTable,"footer-props":{
			'items-per-page-options': [10, 25, 50, 100, -1]
		},"show-expand":"","show-select":"","single-expand":_vm.singleExpand,"item-key":"id","expanded":_vm.expanded,"sort-by":"type"},on:{"update:expanded":function($event){_vm.expanded=$event;}},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_0$3,{staticClass:"mx-2",attrs:{"items":_vm.dns.zones},on:{"change":function($event){return _vm.getDNSData(undefined, true)}},model:{value:(_vm.zoneFilter['dnsZone']),callback:function ($$v) {_vm.$set(_vm.zoneFilter, 'dnsZone', $$v);},expression:"zoneFilter['dnsZone']"}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"color":"primary"},on:{"click":function($event){_vm.showZoneAdd = !_vm.showZoneAdd;}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.dns.zone', 1))+" ")],1),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"dark":!(_vm.loading || _vm.zoneFilter.dnsZone == 'Root DNS Servers' || _vm.zoneFilter.dnsZone == _vm.ldap.name),"disabled":_vm.loading || _vm.zoneFilter.dnsZone == 'Root DNS Servers' || _vm.zoneFilter.dnsZone == _vm.ldap.name,"color":"red"},on:{"click":function($event){return _vm.openDeleteDialog(null, 'zone')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-delete")]),_vm._v(" "+_vm._s(_vm.$t('actions.delete') + ' ' + _vm.$tc('classes.dns.zone', 1))+" ")],1),_c(__unplugin_components_94,{attrs:{"icon":"","color":_vm.disclaimerWasClosed() ? undefined : 'primary'},on:{"click":function($event){return _vm.openTtlDisclaimer()}}},[_c(__unplugin_components_95,[_vm._v("mdi-information")])],1)],1),_c(__unplugin_components_18,{ref:"zoneCreateForm",on:{"submit":function($event){$event.preventDefault();}}},[_c(VExpandTransition,[_c(__unplugin_components_91,{directives:[{name:"show",rawName:"v-show",value:(_vm.showZoneAdd),expression:"showZoneAdd"}],staticClass:"px-2 mx-6 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"rules":[_vm.fieldRules(_vm.zoneToCreate, 'ldap_website')],"label":_vm.$t('section.dns.zoneToAddName')},model:{value:(_vm.zoneToCreate),callback:function ($$v) {_vm.zoneToCreate=$$v;},expression:"zoneToCreate"}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"color":"primary","outlined":"","disabled":_vm.zoneToCreate.length == 0 || _vm.loading},on:{"click":_vm.createZone}},[_vm._v(" "+_vm._s(_vm.$t('section.dns.confirmZoneCreation'))+" "),_c(__unplugin_components_95,{staticClass:"ml-1",attrs:{"color":"primary"}},[_vm._v(" mdi-check-all ")])],1)],1)],1)],1),_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","label":_vm.$t('actions.search')},model:{value:(_vm.searchString),callback:function ($$v) {_vm.searchString=$$v;},expression:"searchString"}},[_c('template',{slot:"append"},[_c(__unplugin_components_0$4,{attrs:{"offset-y":"","left":"","nudge-bottom":"1rem","close-on-content-click":false},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"small":"","elevation":"0","icon":""}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-filter ")])],1)]}}]),model:{value:(_vm.searchFilterListOpen),callback:function ($$v) {_vm.searchFilterListOpen=$$v;},expression:"searchFilterListOpen"}},[_c(__unplugin_components_4$1,{staticClass:"ma-0 pa-0",attrs:{"dense":"","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_9$2,{staticClass:"ma-0 pa-0 mx-2",attrs:{"dense":""}},[_c(__unplugin_components_94,{staticClass:"mx-1",attrs:{"small":"","color":"primary"},on:{"click":function($event){return _vm.allColumnFilters(true)}}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-filter ")]),_vm._v(" "+_vm._s(_vm.$tc('words.all.m', 1))+" ")],1),_c(__unplugin_components_94,{staticClass:"mx-1",attrs:{"small":"","dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)},on:{"click":function($event){return _vm.allColumnFilters(false)}}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-filter-outline ")]),_vm._v(" "+_vm._s(_vm.$tc('words.none.m', 1))+" ")],1)],1),_vm._l((_vm.searchFilterColumns),function(v,k){return _c(__unplugin_components_9$2,{key:k,staticClass:"ma-0 pa-0 mx-2",attrs:{"dense":""},on:{"click":function($event){_vm.searchFilterColumns[k] = !_vm.searchFilterColumns[k];}}},[_c(__unplugin_components_10$2,{staticClass:"ma-0 pa-0 mr-2"},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0",attrs:{"on-icon":"mdi-checkbox-marked","color":"green","dense":""},model:{value:(_vm.searchFilterColumns[k]),callback:function ($$v) {_vm.$set(_vm.searchFilterColumns, k, $$v);},expression:"searchFilterColumns[k]"}})],1),_c(VListItemTitle,{staticClass:"font-weight-medium"},[(k == 'address')?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center"}},[_vm._v(" "+_vm._s(_vm.$t('dns.attributes.ipv4Address'))+" ")]):_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center"}},[_vm._v(" "+_vm._s(_vm.$t('dns.attributes.' + k))+" ")])],1)],1)})],2)],1)],1)],2),_c(__unplugin_components_91,{staticClass:"pa-0 px-4",staticStyle:{"max-width":"fit-content"},attrs:{"justify":"end"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":function($event){return _vm.getDNSData(undefined, true)}}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"disabled":_vm.loading || _vm.zoneFilter['dnsZone'] == 'Root DNS Servers',"color":"primary"},on:{"click":function($event){return _vm.openDialog('recordDialog')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.dns.record', 1))+" ")],1),_c(__unplugin_components_94,{staticClass:"pa-2 mr-2",attrs:{"color":"red","dark":!(_vm.selectedRecords.length < 1 || _vm.loading || _vm.zoneFilter['dnsZone'] == 'Root DNS Servers'),"disabled":_vm.selectedRecords.length < 1 || _vm.loading || _vm.zoneFilter['dnsZone'] == 'Root DNS Servers'},on:{"click":function($event){return _vm.openDialog('recordMassAction')}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-delete")]),_vm._v(" "+_vm._s(_vm.$t('actions.delete') + ' ' + _vm.$t('words.selected'))+" ")],1),_c(__unplugin_components_0$4,{attrs:{"offset-y":"","left":"","nudge-bottom":"1rem","close-on-content-click":false},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"pa-0 px-2 pr-1",staticStyle:{"min-width":"32px"},attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},'v-btn',attrs,false),on),[_vm._v(" "+_vm._s(_vm.$t("actions.filter"))+" "),_c(__unplugin_components_95,{class:_vm.filterListOpen == true ? 'active' : '',attrs:{"id":"filterListButton"}},[_vm._v(" mdi-chevron-down ")])],1)]}}]),model:{value:(_vm.filterListOpen),callback:function ($$v) {_vm.filterListOpen=$$v;},expression:"filterListOpen"}},[_c(__unplugin_components_4$1,{attrs:{"dense":"","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_9$2,[_c(__unplugin_components_94,{staticClass:"mx-1",attrs:{"color":"primary"},on:{"click":_vm.filterAllRecordTypes}},[_c(__unplugin_components_95,[_vm._v(" mdi-filter ")]),_vm._v(" "+_vm._s(_vm.$tc('words.all.m', 1))+" ")],1),_c(__unplugin_components_94,{staticClass:"mx-1",attrs:{"dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)},on:{"click":_vm.filterNoRecordTypes}},[_c(__unplugin_components_95,[_vm._v(" mdi-filter-outline ")]),_vm._v(" "+_vm._s(_vm.$tc('words.none.m', 1))+" ")],1)],1),_vm._l((_vm.enabledRecordTypes),function(enabled,key){return _c(__unplugin_components_9$2,{key:key},[_c(__unplugin_components_10$2,{staticClass:"ma-0 pa-0 mr-2"},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0",attrs:{"on-icon":"mdi-checkbox-marked","color":"green","dense":""},model:{value:(_vm.enabledRecordTypes[key]),callback:function ($$v) {_vm.$set(_vm.enabledRecordTypes, key, $$v);},expression:"enabledRecordTypes[key]"}})],1),_c(VListItemTitle,{staticClass:"font-weight-medium"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center"}},[_vm._v(" "+_vm._s(key)+" ")])],1)],1)})],2)],1)],1)],1),_c(__unplugin_components_5,{staticClass:"mx-12 my-3"})]},proxy:true},{key:"header",fn:function(props){return [_c('thead',[_c('tr',[_vm._l((props.props.headers),function(header){return _c('th',{key:header.value,class:(_vm.$vuetify.breakpoint.mdAndUp ? '' : 'text-center') + ' py-2 px-0'},[(header.groupable == true)?_c(__unplugin_components_94,{staticClass:"py-4",attrs:{"x-small":"","text":"","color":"primary"},on:{"click":function($event){$event.stopPropagation();return props.on.group(header.value)}}},[_c(__unplugin_components_95,{class:_vm.$vuetify.breakpoint.mdAndUp ? 'mr-2' : ''},[_vm._v("flip_to_back")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c('span',[_vm._v(" "+_vm._s(_vm.$t('actions.groupBy') + " " + header.text)+" ")]):_vm._e()],1):_vm._e()],1)})],2)])]}},{key:"group.header",fn:function(ref){
		var group = ref.group;
		var groupBy = ref.groupBy;
		var headers = ref.headers;
		var toggle = ref.toggle;
		var isOpen = ref.isOpen;
		var remove = ref.remove;
return [_c('td',{attrs:{"colspan":headers.length}},[_c(__unplugin_components_94,{ref:group,attrs:{"x-small":"","icon":""},on:{"click":toggle}},[(!isOpen)?_c(__unplugin_components_95,[_vm._v("mdi-chevron-down")]):_c(__unplugin_components_95,[_vm._v("mdi-chevron-up")])],1),_c('span',{staticClass:"mx-5 font-weight-bold"},[_vm._v(_vm._s(_vm.$t("dns.attributes." + groupBy) + ": " + group))]),_c(__unplugin_components_94,{attrs:{"color":"red","icon":"","x-small":""},on:{"click":remove}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)]}},{key:"item.displayName",fn:function(ref){
		var item = ref.item;
return [_vm._v(" "+_vm._s(_vm.parseDisplayName(item))+" ")]}},{key:"item.ttl",fn:function(ref){
		var item = ref.item;
return [_vm._v(" "+_vm._s(item.ttl == 0 ? _vm.$t('dns.attributes.infiniteTtl') : item.ttl)+" ")]}},{key:"item.value",fn:function(ref){
		var item = ref.item;
return [(item.typeName == 'MX')?_c('span',[_vm._v(" "+_vm._s(item.nameExchange)+" ")]):(item.typeName == 'TXT')?_c('span',[_vm._v(" "+_vm._s(item.stringData)+" ")]):(item.typeName == 'NS' || item.typeName == 'CNAME')?_c('span',[_vm._v(" "+_vm._s(item.nameNode)+" ")]):(item.typeName == 'SOA')?_c('span',[_vm._v(" "+_vm._s(item.namePrimaryServer + " " + item.zoneAdminEmail + " " + item.dwSerialNo + " " + item.dwRefresh + " " + item.dwRetry + " " + item.dwExpire + " " + item.dwMinimumTtl)+" ")]):(item.typeName == 'A')?_c('span',[_vm._v(" "+_vm._s(item.address)+" ")]):(item.typeName == 'AAAA')?_c('span',[_vm._v(" "+_vm._s(item.ipv6Address)+" ")]):_c(__unplugin_components_5,{staticClass:"mx-10"})]}},{key:"item.ts",fn:function(ref){
		var item = ref.item;
return [(item.ts === true)?_c(__unplugin_components_42,{attrs:{"color":"primary","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":""}},'v-btn',attrs,false),_vm.allowTombstoning ? on : undefined),[_c(__unplugin_components_95,{attrs:{"color":"valid-40"}},[_vm._v(" mdi-check ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.clickTo') + ' ' + _vm.$t('actions.enable') + ' ' + _vm.$tc('classes.dns.record', 1)))])]):_c(__unplugin_components_42,{attrs:{"color":"red","bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":""}},'v-btn',attrs,false),_vm.allowTombstoning ? on : undefined),[_c(__unplugin_components_95,{attrs:{"color":"error"}},[_vm._v(" mdi-close ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.clickTo') + " " + _vm.$t('actions.disable') + ' ' + _vm.$tc('classes.dns.record', 1)))])])]}},{key:"item.actions",fn:function(ref){
		var item = ref.item;
return [_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","disabled":_vm.loading || _vm.zoneFilter['dnsZone'] == 'Root DNS Servers',"rounded":"","small":""},on:{"click":function($event){return _vm.editRecord(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-pencil ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.edit')))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
		var on = ref.on;
		var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","disabled":_vm.loading || _vm.zoneFilter['dnsZone'] == 'Root DNS Servers',"rounded":"","small":""},on:{"click":function($event){return _vm.openDeleteDialog(item)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"red"}},[_vm._v(" mdi-delete ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.delete')))])])]}},{key:"expanded-item",fn:function(ref){
		var headers = ref.headers;
		var item = ref.item;
return [_c('td',{attrs:{"colspan":headers.length}},_vm._l((_vm.getExtrasFromRecord(item, headers)),function(attribute,key){return _c(__unplugin_components_91,{key:key,staticClass:"ma-0 pa-0 my-3 mx-2",attrs:{"justify":"start"}},[(key == 'type')?_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"color":"primary"}},[_vm._v(" mdi-information-outline ")]):(key == 'distinguishedName')?_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"color":"primary"}},[_vm._v(" mdi-menu ")]):_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"color":"primary"}},[_vm._v(" mdi-menu-right ")]),(key == 'distinguishedName')?_c('span',[_vm._v(" "+_vm._s(_vm.$t("attribute.distinguished_name") + ": " + attribute + " ")+" ")]):(key == 'ts')?_c('span',[_vm._v(" "+_vm._s(_vm.$t("dns.attributes." + key) + ": ")+" "),(item.ts == true)?_c(__unplugin_components_95,{attrs:{"color":"green"}},[_vm._v(" mdi-check-circle ")]):_c(__unplugin_components_95,{attrs:{"color":"red"}},[_vm._v(" mdi-close-circle ")])],1):_c('span',[_vm._v(" "+_vm._s(_vm.$t("dns.attributes." + key) + ": " + attribute + " ")+" ")])],1)}),1)]}}],null,true),model:{value:(_vm.selectedRecords),callback:function ($$v) {_vm.selectedRecords=$$v;},expression:"selectedRecords"}}),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":this.updateFlag ? '800px' : '1200px'},model:{value:(_vm.dialogs['recordDialog']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'recordDialog', $$v);},expression:"dialogs['recordDialog']"}},[_c(RecordDialog,{ref:"RecordDialog",attrs:{"zoneHasSOA":_vm.zoneHasSOA(),"currentZone":this.zoneFilter.dnsZone,"recordObject":this.currentRecord,"updateFlag":this.updateFlag,"dialogKey":'recordDialog'},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.getDNSData}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['recordDelete']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'recordDelete', $$v);},expression:"dialogs['recordDelete']"}},[_c(RecordDelete,{ref:"RecordDelete",attrs:{"deleteMode":this.deleteMode,"currentZone":this.zoneFilter.dnsZone,"recordObject":this.currentRecord,"dialogKey":'recordDelete'},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.getDNSData}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['recordMassAction']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'recordMassAction', $$v);},expression:"dialogs['recordMassAction']"}},[_c(RecordMassAction,{ref:"RecordMassAction",attrs:{"actionType":'delete',"selectedRecords":_vm.selectedRecords,"currentZone":this.zoneFilter.dnsZone,"dialogKey":'recordMassAction'},on:{"closeDialog":_vm.closeDialog,"refresh":_vm.getDNSData}})],1),_c(__unplugin_components_104,{attrs:{"persistent":"","eager":"","max-width":"800px"},model:{value:(_vm.dialogs['ttlDisclaimer']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'ttlDisclaimer', $$v);},expression:"dialogs['ttlDisclaimer']"}},[_c(__unplugin_components_86,{ref:"TtlDisclaimer",attrs:{"dialogKey":'ttlDisclaimer'},on:{"closeDialog":_vm.closeDialog}})],1)],1)};
var staticRenderFns$k = [];

/* unplugin-vue-components disabled */var dnsView_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///
const disclaimer_stor_key = "misc.dns.disclaimer_closed";

const __vue2_script$k = {
	name: 'dnsView',
	mixins: [validationMixin, utilsMixin],
	components: {
		RecordDialog,
		RecordDelete,
		RecordMassAction,
		RefreshButton
	},
	data() {
		return {
			allowTombstoning: false,
			selectedRecords: [],
			currentRecord: {
				name: "",
				type: 1,
			},
			zoneToCreate: "",
			showZoneAdd: false,
			updateFlag: false,
			singleExpand: false,
			expanded: [],
			filteredData: [],
			enabledRecordTypes: {
				A: true,
				AAAA: true,
				NS: true,
				TXT: true,
				MX: true,
				SOA: true,
				CNAME: true,
				PTR: true,
				SRV: true,
				Unsupported: false
			},
			filterListOpen: false,
			searchFilterListOpen: false,
			searchFilterColumns: {},
			searchString: "",
			loading: false,
			error: false,
			errorMsg: "",
			readonly: false,
			deleteMode: 'record',
			lastOperation: "",
			ldap: {},
			// Dialog States
			dialogs: {
				recordDialog: false,
				recordDelete: false,
				recordMassAction: false,
				ttlDisclaimer: false,
			},
			dns: {
				headers: [],
				zones: [],
				records: []
			},
			zoneFilter: {
				dnsZone: ""
			},
		}
	},
	created() {
		this.ldap = getDomainDetails();
		this.getDNSData();
	},
	mounted() {
		if (localStorage.getItem(disclaimer_stor_key) !== "true")
			this.dialogs['ttlDisclaimer'] = true;
	},
	watch: {
		'breakpoint': {
			handler: function () {
				this.reloadDataTableHeaders();
			},
		},
		'enabledRecordTypes': {
			handler: function (newValue) {
				this.filterData(newValue);
			},
			deep: true
		},
		// Dialog Closed Handler
		'dialogs': {
			handler: function (newValue) {
				if (!newValue['recordDialog'] || newValue['recordDialog'] == false)
					this.$refs.RecordDialog.resetRecord();
				this.$refs.RecordDialog.resetValidation();
			},
			deep: true
		}
	},
	computed: {
		breakpoint() {
			return this.$vuetify.breakpoint.name
		},
		computedTableHeaders() {
			const excluded = [
				"serial",
			];
			if (this.$vuetify.breakpoint.lgAndDown)
				return this.dns.headers.filter(d => !excluded.includes(d.value))
			return this.dns.headers
		}
	},
	methods: {
		openTtlDisclaimer() {
			this.dialogs['ttlDisclaimer'] = true;
		},
		disclaimerWasClosed() {
			let _stor_value = localStorage.getItem(disclaimer_stor_key);
			console.log(_stor_value);
			return _stor_value === "true"
		},
		parseDisplayName(item) {
			let v = item?.displayName;
			if (!v || typeof v !== "string")
				return ""
			if (v.startsWith("@") && this.$vuetify.breakpoint.lgAndDown)
				return "@"
			return v
		},
		createSnackbar(notifObj) {
			notificationBus.$emit('createNotification', notifObj);
		},
		async createZone() {
			if (this.$refs.zoneCreateForm.validate()) {
				await new Domain({}).insert({ dnsZone: this.zoneToCreate })
					.then(() => {
						this.showZoneAdd = false;
						this.zoneFilter['dnsZone'] = this.zoneToCreate;
						this.lastOperation = "createZone";
						this.getDNSData(undefined, false);
						this.zoneToCreate = "";
						notificationBus.$emit('createNotification',
							{ message: (this.$tc("classes.dns.zone", 1) + " " + this.$tc("words.created.f", 1)).toUpperCase(), type: 'success' }
						);
					})
					.catch(error => {
						console.error(error);
						this.errorMsg = this.getMessageForCode(error);
						notificationBus.$emit('createNotification',
							{ message: this.errorMsg.toUpperCase(), type: 'error' }
						);
					});
			}
		},
		zoneHasSOA() {
			if (this.dns.records.filter(e => e.type == 6).length > 0)
				return true
			return false
		},
		resetCurrentRecord() {
			this.currentRecord = {};
			this.currentRecord.name = "";
			this.currentRecord.type = 1;
		},
		getExtrasFromRecord(item, headers) {
			var result = {};
			// var keys = Object.keys(item)
			headers = headers.map(e => e.value);
			var excludeKeys = [
				'id',
				'zone',
			];
			for (const key in item) {
				if (Object.hasOwnProperty.call(item, key)) {
					if (!headers.includes(key) && !excludeKeys.includes(key)) {
						result[key] = item[key];
					}
				}
			}
			return result
		},
		filterAllRecordTypes() {
			for (var key in this.enabledRecordTypes) {
				this.enabledRecordTypes[key] = true;
			}
		},
		filterNoRecordTypes() {
			for (var key in this.enabledRecordTypes) {
				this.enabledRecordTypes[key] = false;
			}
		},
		filterData(filters) {
			var value;
			this.filteredData = [];
			for (var key in filters) {
				value = filters[key];
				if (value === true) {
					var filteredItems = this.dns.records.filter(e => e.typeName.toUpperCase() == key);
					this.filteredData.push(...filteredItems);
				}
			}
		},
		searchDnsTable(value, search, item) {
			const excludedKeys = ['type'];
			var result = [];
			for (const key in item) {
				if (!excludedKeys.includes(key) && this.searchFilterColumns[key] == true)
					result.push(item[key]);
			}
			return result.some(v => v && v.toString().toLowerCase().includes(this.searchString.toLowerCase()))
		},
		resetData(resetFilter = false) {
			this.enabledRecordTypes = {
				A: true,
				AAAA: true,
				NS: true,
				TXT: true,
				MX: true,
				SOA: true,
				CNAME: true,
				PTR: true,
				SRV: true,
				Unsupported: false
			},
				this.searchFilterColumns = {};
			this.ldap = getDomainDetails();
			this.loading = true;
			this.error = false;
			this.errorMsg = "";
			this.dns.headers = [];
			this.dns.zones = [];
			this.dns.records = [];
			if (resetFilter === true)
				this.filterEnabledRecordTypes = {};
		},
		setSearchFilterColumnData() {
			let r = {};
			const DEFAULT_ON = [
				"name",
				"typeName",
				"value",
				"nameExchange",
				"stringData",
				"nameNode",
				"address",
				"ipv6Address",
				"displayName",
			];
			DEFAULT_ON.forEach(key => {
				if (key == 'actions')
					return
				if (DEFAULT_ON.includes(key))
					r[key] = true;
				else
					r[key] = false;
			});
			this.searchFilterColumns = r;
			return
		},
		allColumnFilters(state = true) {
			if (state !== true && state !== false)
				throw new Error("allColumnFilters: State must be a boolean.")
			for (const key in this.searchFilterColumns) {
				this.searchFilterColumns[key] = state;
			}
		},
		loadFinished(error = undefined, message = undefined) {
			this.filterData(this.enabledRecordTypes);
			this.loading = false;
			// If error...
			if (error != undefined) {
				this.error = true;
				if (message != undefined && message.length > 0)
					this.errorMsg = message;
				else
					this.errorMsg = this.getMessageForCode(error);
				if (!this.lastOperation || this.lastOperation.length < 1) {
					var msgToShow = this.errorMsg.length > 0 ? this.errorMsg : this.$t("error.unableToLoad");
					this.createSnackbar({ message: msgToShow, type: 'error' });

					if ('response' in error && 'data' in error.response && 'code' in error.response.data)
						if (error.response.data.code == "dns_list_response_empty")
							setTimeout(() => {
								var legacyMessage = {
									message: this.$t('section.dns.legacyMode_hint').toUpperCase(),
									type: 'warning'
								};
								notificationBus.$emit('createNotification', legacyMessage);
							}, 4000);
				}
				// If OK
			} else {
				if (!this.lastOperation || this.lastOperation.length < 1) {
					this.createSnackbar({ message: (this.$tc("classes.dns.zone", 1) + " " + this.$tc("words.loaded.f", 1)).toUpperCase(), type: 'success' });
				}
				this.setSearchFilterColumnData();
				this.error = false;
				this.errorMsg = "";
			}
		},
		openDialog(key, updateFlag = false) {
			if (updateFlag === true)
				this.updateFlag = true;
			else if (key == 'recordDialog') {
				this.updateFlag = false;
				this.resetCurrentRecord();
			}

			this.dialogs[key] = true;
			switch (key) {
				case 'recordDialog':
					this.$refs.RecordDialog.resetValidation();
					this.$refs.RecordDialog.syncRecord();
					break;
				case 'recordDelete':
					this.$refs.RecordDelete.resetDelete();
					break;
				case 'recordMassAction':
					this.$refs.RecordMassAction.reset();
					break;
			}
		},
		editRecord(recordItem) {
			this.currentRecord = recordItem;
			this.openDialog('recordDialog', true);
		},
		openDeleteDialog(recordItem, mode = 'record') {
			this.deleteMode = mode;
			this.currentRecord = recordItem;
			this.openDialog('recordDelete');
		},
		async closeDialog(key, refresh = false) {
			this.dialogs[key] = false;
			this.lastOperation = key;
			if (refresh == true && this.deleteMode == 'zone') {
				this.zoneToCreate = "";
				this.zoneFilter['dnsZone'] = this.ldap.name;
				this.getDNSData(this.ldap.name);
			} else if (refresh === true) {
				this.getDNSData(this.zoneFilter['dnsZone']);
			}
		},
		setHeaderProperties() {
			for (const idx in this.dns.headers) {
				let headerDict = this.dns.headers[idx];
				if (headerDict?.value == "actions")
					headerDict.text = this.$t('actions.label');
				else
					headerDict.text = this.$t('dns.attributes.' + headerDict.value);
				headerDict.groupable = false;
				headerDict.sortable = false;
				// Set width
				switch (headerDict.value) {
					case "value":
						headerDict.width = (headerDict.text.length + 2) + "ch";
						headerDict.sortable = true;
						break;
					case "serial":
						headerDict.width = '10ch';
						break;
					case "ts":
						headerDict.align = 'center';
						headerDict.sortable = false;
						break;
					case "actions":
						headerDict.groupable = false;
						headerDict.width = '6rem';
						headerDict.align = 'center';
						headerDict.sortable = false;
						break;
					case "displayName":
					case "typeName":
						headerDict.groupable = true;
						headerDict.sortable = true;
						headerDict.width = (headerDict.text.length + 2) + "ch";
						break;
					case "ttl":
							if (this.$vuetify.breakpoint.lgAndDown) {
								headerDict.text = this.$t(`dns.attributes.${headerDict.value}_short`);
								headerDict.width = (headerDict.text.length + 6) + "ch";
							}
							else
								headerDict.width = (headerDict.text.length + 4) + "ch";
							headerDict.sortable = true;
						break;
					default:
						if (headerDict.sortable)
							headerDict.width = (headerDict.text.length + 4) + "ch";
						else
							headerDict.width = (headerDict.text.length + 2) + "ch";
						break;
				}
			}
		},
		async getDNSData(zoneToQuery = undefined, refresh = false) {
			if (refresh === true)
				this.lastOperation = "";

			// Set DNS Zone Query
			if (zoneToQuery != undefined && zoneToQuery != null && zoneToQuery.length > 0 && zoneToQuery != "")
				this.zoneFilter['dnsZone'] = zoneToQuery;
			else if (this.zoneFilter['dnsZone'] == "")
				this.zoneFilter['dnsZone'] = this.ldap.name;
			let queryFilter = this.zoneFilter;

			this.selectedRecords = [];

			// Reset Data
			this.resetData();

			await new Domain({}).zones({ filter: queryFilter })
				.then(response => {
					let dnsHeaders = response.data.headers;
					this.dns.zones = response.data.dnsZones;
					this.dns.records = response.data.records;
					// Add actions header
					let headerDict;

					dnsHeaders.forEach(header => {
						headerDict = {};
						headerDict.text = this.$t('dns.attributes.' + header);
						headerDict.value = header;
						this.dns.headers.push(headerDict);
					});
					// Add actions last
					this.dns.headers.push({
						text: this.$t('actions.label'),
						value: 'actions',
					});
					this.setHeaderProperties();
					this.loadFinished();

					if (response.data.legacy == true) {
						setTimeout(() => {
							var legacyMessage = {
								message: this.$t('section.dns.legacyMode'),
								type: 'info'
							};
							notificationBus.$emit('createNotification', legacyMessage);
						}, 4000);
					}
				})
				.catch(error => {
					console.error(error);
					this.reloadDataTableHeaders();
					this.loadFinished(error, "");
				});
			this.$emit('done');
		},
		// Reload Data Table Header Labels
		reloadDataTableHeaders() {
			this.setHeaderProperties();
		},
		// Reset Data Table variables
		resetDataTable() {
			this.dns.headers = [];
			this.dns.zones = [];
			this.dns.records = [];
		},
	},
};
const __cssModules$k = {};
var __component__$k = /*#__PURE__*/normalizeComponent(
  __vue2_script$k,
  render$k,
  staticRenderFns$k,
  false,
  __vue2_injectStyles$k,
  null,
  null,
  null
);

function __vue2_injectStyles$k (context) {
  for(let o in __cssModules$k){
    this[o] = __cssModules$k[o];
  }
}

var dnsView = /*#__PURE__*/(function () { return __component__$k.exports })();

class Settings extends ApiModel {

    key;
    value;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async list() {
        return await interlock_backend.call('settings/list')
    }

    async fetch(presetId) {
        return await interlock_backend.call('settings/fetch', presetId)
    }

    async reset() {
        return await interlock_backend.call('settings/reset')
    }

    async test(data) {
        return await interlock_backend.call('settings/test', data)
    }

    async save(data) {
        return await interlock_backend.call('settings/save', data)
    }

    async sync_users() {
        return await interlock_backend.call('settings/sync_users')
    }

    async prune_users() {
        return await interlock_backend.call('settings/prune_users')
    }

    async purge_users() {
        return await interlock_backend.call('settings/purge_users')
    }

    async preset_create(data) {
        return await interlock_backend.call('settings/preset_create', data)
    }

    async preset_delete(data) {
        return await interlock_backend.call('settings/preset_delete', data)
    }

    async preset_rename(data) {
        return await interlock_backend.call('settings/preset_rename', data)
    }

    async preset_enable(data) {
        return await interlock_backend.call('settings/preset_enable', data)
    }
}

class Liveness extends ApiModel {

    key;
    value;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async check() {
        return await interlock_backend.call('liveness/check')
    }
}

var render$j = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.settings.resetDialog.header'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0 my-8"},[_c('span',{staticClass:"font-weight-medium",domProps:{"innerHTML":_vm._s(_vm.$t('section.settings.resetDialog.message'))}})]),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1 bg-white bg-lig-25",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.resetConfirm}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-checkbox-marked-circle ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1 text-white"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-2",attrs:{"color":"white"}},[_vm._v(" mdi-close-circle ")])],1)],1)],1)],1)};
var staticRenderFns$j = [];

/* unplugin-vue-components disabled *///
const __vue2_script$j = {
	name: "SettingsResetDialog",
	mixins: [utilsMixin],
	methods: {
		async resetConfirm() {
			this.$emit('resetConfirm');
		},
		async closeDialog() {
			this.$emit('closeDialog');
		},
	}
};
const __cssModules$j = {};
var __component__$j = /*#__PURE__*/normalizeComponent(
  __vue2_script$j,
  render$j,
  staticRenderFns$j,
  false,
  __vue2_injectStyles$j,
  null,
  null,
  null
);

function __vue2_injectStyles$j (context) {
  for(let o in __cssModules$j){
    this[o] = __cssModules$j[o];
  }
}

var SettingsResetDialog = /*#__PURE__*/(function () { return __component__$j.exports })();

const config$1 = {
	general: {
		row1: {
			ILCK_ENABLE_LDAP: {
				value: false,
				type: "boolean",
			},
		}
	},
	log: {
		row1: {
			// Log parameters
			ILCK_LOG_MAX: {
				value: 0,
				validator: 'set_log_max',
				type: "integer",
				extraClasses: "mb-4"
			},
			ILCK_LOG_CREATE: {
				value: true,
				type: "boolean",
			},
			ILCK_LOG_READ: {
				value: false,
				type: "boolean",
			},
			ILCK_LOG_UPDATE: {
				value: true,
				type: "boolean",
			},
			ILCK_LOG_DELETE: {
				value: true,
				type: "boolean",
			},
			ILCK_LOG_OPEN_LDAP_CONNECTION: {
				value: false,
				type: "boolean",
			},
			ILCK_LOG_CLOSE_LDAP_CONNECTION: {
				value: false,
				type: "boolean",
			},
			ILCK_LOG_LOGIN: {
				value: false,
				type: "boolean",
			},
			ILCK_LOG_LOGOUT: {
				value: false,
				type: "boolean",
			},
		}
	},
};

const config = {
	domain: {
		row1: {
			// Domain Parameters
			LDAP_AUTH_URL: {
				value: [],
				addPREFIX: "ldap://",
				addIP: "",
				addPORT: "",
				type: "ldap_uri",
				required: true,
				validator: "ldap_uri"
			}
		},
		row2: {
			LDAP_DOMAIN: {
				value: "",
				hint: 'section.settings.fields.LDAP_DOMAIN_HINT',
				validator: 'ldap_website'
			},
			LDAP_AUTH_SEARCH_BASE: {
				value: "",
				hint: 'section.settings.fields.LDAP_AUTH_SEARCH_BASE_HINT',
				validator: 'ldap_dn'
			},
			LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN: {
				value: "",
				hint: 'section.settings.fields.LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN_HINT',
				validator: "ldap_realm"
			},
			LDAP_DNS_LEGACY: {
				value: false,
				type: "boolean",
				hint: 'section.settings.fields.LDAP_DNS_LEGACY_HINT',
				persistentHint: true
			},
		}
	},
	bindUser: {
		row1: {
			// Bind User
			LDAP_AUTH_CONNECTION_USER_DN: {
				value: "",
				validator: "ldap_dn"
			},
			LDAP_AUTH_CONNECTION_PASSWORD: {
				value: "",
				type: "password",
				hidden: true,
				required: 'config.ldap.bindUser.row1.LDAP_AUTH_CONNECTION_USER_DN'
			}
		}
	},
	connection: {
		row1: {
			// Connection Parameters
			LDAP_AUTH_CONNECT_TIMEOUT: {
				value: 5,
				type: "integer",
				validator: "ge_numbers"
			},
			LDAP_AUTH_RECEIVE_TIMEOUT: {
				value: 5,
				type: "integer",
				validator: "ge_numbers"
			},
			LDAP_AUTH_USE_SSL: {
				value: false,
				type: "boolean",
				extraClasses: "mb-2",
				hint: "section.settings.fields.LDAP_USE_SSL_HINT",
				persistentHint: true
			},
		},
		row2: {
			LDAP_AUTH_USE_TLS: {
				value: false,
				type: "boolean",
				hint: "section.settings.fields.LDAP_USE_SSL_HINT",
				persistentHint: true
			},
			LDAP_AUTH_TLS_VERSION: {
				value: "PROTOCOL_TLSv1_2",
				choices: [
					"PROTOCOL_TLSv1",
					"PROTOCOL_TLSv1_1",
					"PROTOCOL_TLSv1_2",
					"PROTOCOL_TLS",
					"PROTOCOL_TLS_CLIENT"
				],
				hint: 'section.settings.fields.LDAP_AUTH_TLS_VERSION_HINT',
				persistentHint: true,
				type: "select"
			}
		}
	},
	filters: {
		row1: {
			ADMIN_GROUP_TO_SEARCH: {
				value: "",
			},
			LDAP_AUTH_OBJECT_CLASS: {
				value: "",
			}
		},
		row2: {
			EXCLUDE_COMPUTER_ACCOUNTS: {
				value: false,
				type: "boolean"
			}
		},
		row3: {
			LDAP_FIELD_MAP: {
				value: {},
				keyToAdd: "",
				valueToAdd: "",
				type: "object",
				allow_add_delete: false
			},
		}
	}
};

var render$i = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"ma-0 pa-0",attrs:{"outlined":"","flat":""}},[_c(__unplugin_components_12$2,{attrs:{"indeterminate":_vm.testing == true,"value":_vm.testFinished ? 100 : 0,"color":_vm.testFinished ? (!_vm.testError ? 'valid-40-s' : 'red') : 'primary'}}),_c(__unplugin_components_91,{staticClass:"ma-0 ma-1 px-4 py-0 sticky-top",staticStyle:{"top":"3.5rem !important","z-index":"var(--home-footer-z-index) !important"},attrs:{"justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1 mx-1",attrs:{"disabled":_vm.readonly || _vm.loading,"elevation":"0","dark":!(_vm.readonly || _vm.loading),"light":_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading),"color":"red"},on:{"click":function($event){_vm.resetDialog = true;}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-backup-restore ")]),_vm._v(" "+_vm._s(_vm.$t("actions.restoreDefaultValues"))+" ")],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1 mx-1",attrs:{"disabled":_vm.readonly || _vm.loading || !_vm.settingClsEnabled('ldap'),"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading || !_vm.settingClsEnabled('ldap')),"light":_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading || !_vm.settingClsEnabled('ldap'))},on:{"click":_vm.testSettings}},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.testSettings"))+" ")]),_c(__unplugin_components_7$1,{staticClass:"ml-3",attrs:{"indeterminate":_vm.testing == true,"value":_vm.testFinished ? 100 : 0,"color":_vm.testFinished ? (!_vm.testError ? 'green' : 'red') : 'primary',"size":"26"}},[_c(VFabTransition,[(!_vm.testing && !_vm.testFinished)?_c(__unplugin_components_95,{attrs:{"color":"primary"}},[_vm._v(" mdi-blur-radial ")]):(_vm.testFinished && !_vm.testError)?_c(__unplugin_components_95,[_vm._v(" mdi-checkbox-marked-circle ")]):(_vm.testFinished == true && _vm.testError == true)?_c(__unplugin_components_95,[_vm._v(" mdi-close-circle ")]):_vm._e()],1)],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 ma-1 px-4 py-0 mb-4 sticky-top",staticStyle:{"top":"6.3rem !important","z-index":"var(--home-footer-z-index) !important"},attrs:{"justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1 mr-0",staticStyle:{"border-radius":"0","border-bottom-left-radius":"0.3rem","border-top-left-radius":"0.3rem"},attrs:{"disabled":_vm.readonly || _vm.loading,"elevation":"0","dark":!_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading),"light":_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading)},on:{"click":_vm.saveSettings}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-content-save ")]),_vm._v(" "+_vm._s(_vm.$t("actions.save"))+" ")],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1 ml-0",staticStyle:{"border-radius":"0","border-bottom-right-radius":"0.3rem","border-top-right-radius":"0.3rem"},attrs:{"elevation":"0","color":"primary"},on:{"click":_vm.refreshSettings}},[_c(__unplugin_components_95,{class:(_vm.loading == true ? 'custom-loader' : '') + ' mr-1'},[_vm._v(" mdi-cached ")]),_vm._v(" "+_vm._s(_vm.$t("actions.refresh"))+" ")],1)],1),_c(VSlideYTransition,[(_vm.invalid == true)?_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c(__unplugin_components_17,{attrs:{"type":"warning","dense":""}},[_vm._v(" "+_vm._s(_vm.$t("section.settings.settingFailedValidation"))+" ")])],1):_vm._e()],1),_c(__unplugin_components_91,{attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"6","sm":"8","md":"6"}},[_c(__unplugin_components_0$3,{staticClass:"ma-0 pa-0",attrs:{"id":"defaultPresetSelect","items":_vm.presets,"outlined":"","dense":"","hide-details":"","label":_vm.$t('actions.ldap.configPreset'),"disabled":!_vm.presets || _vm.presets.length <= 1,"item-value":"id"},on:{"change":_vm.refreshSettings},scopedSlots:_vm._u([{key:"selection",fn:function(data){return [_vm._v(" "+_vm._s(data.item.name == "default" ? _vm.$t("actions.ldap.defaultPreset") : ("" + (data.item.label)))+" "),(data.item.active === true)?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_95,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"color":"valid-35","small":""}},'v-icon',attrs,false),on),[_vm._v(" mdi-check-circle ")])]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.settings.activePreset"))+" ")])]):_vm._e()]}},{key:"item",fn:function(data){return [_vm._v(" "+_vm._s(data.item.name == "default" ? _vm.$t("actions.ldap.defaultPreset") : ("" + (data.item.label)))+" "),(data.item.active === true)?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_95,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"color":"valid-35","small":""}},'v-icon',attrs,false),on),[_vm._v(" mdi-check-circle ")])]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("section.settings.activePreset"))+" ")])]):_vm._e()]}}]),model:{value:(_vm.presetId),callback:function ($$v) {_vm.presetId=$$v;},expression:"presetId"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"auto"}},[_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"mx-1",attrs:{"icon":"","disabled":_vm.readonly || _vm.loading || _vm.isActivePreset(),"color":"secondary","small":"","elevation":"0"},on:{"click":_vm.settingsPresetEnable}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-location-enter ")])],1)]}}])},[_c('span',[_vm._v(_vm._s(_vm.$t("actions.enable")))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"mx-1",attrs:{"icon":"","disabled":_vm.readonly || _vm.loading,"color":_vm.renamingProfile ? 'primary' : 'secondary',"small":"","elevation":"0"},on:{"click":function($event){_vm.renamingProfile = !_vm.renamingProfile; _vm.addingProfile = false;}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-pencil ")])],1)]}}])},[_c('span',[_vm._v(_vm._s(_vm.$t("actions.rename")))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"mx-1",attrs:{"color":_vm.addingProfile ? 'primary' : 'secondary',"small":"","elevation":"0","icon":""},on:{"click":function($event){_vm.addingProfile = !_vm.addingProfile; _vm.renamingProfile = false;}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-plus-circle ")])],1)]}}])},[_c('span',[_vm._v(_vm._s(_vm.$t("actions.addN")))])]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"mx-1",attrs:{"disabled":_vm.loading || _vm.readonly || _vm.isActivePreset() || _vm.presets.length <= 1,"color":"error-60-s","small":"","elevation":"0","icon":""},on:{"click":_vm.settingsPresetDelete}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-delete ")])],1)]}}])},[_c('span',[_vm._v(_vm._s(_vm.$t("actions.delete")))])])],1)],1),_c(VExpandTransition,[(_vm.addingProfile || _vm.renamingProfile)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mx-1",attrs:{"align":"center","justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"8","md":"6","lg":"7"}},[_c(__unplugin_components_89,{attrs:{"label":_vm.$t('actions.ldap.newConfigPreset'),"hint":_vm.renamingProfile ? _vm.$t('section.settings.configLabelFieldHint') : '',"persistent-hint":_vm.renamingProfile,"rules":[this.fieldRules(_vm.newPresetLabel, 'ge_name', _vm.newPresetLabel.length > 0 ? true : false)]},model:{value:(_vm.newPresetLabel),callback:function ($$v) {_vm.newPresetLabel=$$v;},expression:"newPresetLabel"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"auto"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_94,{staticClass:"mx-1",attrs:{"color":"accent-55-s","small":"","elevation":"0","icon":"","disabled":!_vm.newPresetNameValid || _vm.newPresetLabel.length == 0},on:{"click":_vm.settingsPresetCreateOrRename}},[_c(__unplugin_components_95,[_vm._v(" "+_vm._s(_vm.renamingProfile ? "mdi-content-save" : "mdi-content-save-plus")+" ")])],1)],1)],1)],1):_vm._e()],1),_c(__unplugin_components_91,{staticClass:"mx-2",attrs:{"justify":"center"}},[_c(__unplugin_components_28,{attrs:{"off-icon":"mdi-close-box","label":_vm.$t('section.settings.superAdminIs') + ' ' + (_vm.defaultAdminEnabled ? _vm.$t('words.enabled') : _vm.$t('words.disabled'))},model:{value:(_vm.defaultAdminEnabled),callback:function ($$v) {_vm.defaultAdminEnabled=$$v;},expression:"defaultAdminEnabled"}})],1),_c(__unplugin_components_91,{staticClass:"mx-4",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"10","md":"4","xl":"3"}},[_c(__unplugin_components_89,{ref:"defaultAdminPwd",attrs:{"type":"password","rules":[this.fieldRules(_vm.defaultAdminPwd, 'ge_password', _vm.defaultAdminPwdConfirm.length > 0 ? true : false)],"label":_vm.$t('section.settings.superAdminPwd')},model:{value:(_vm.defaultAdminPwd),callback:function ($$v) {_vm.defaultAdminPwd=$$v;},expression:"defaultAdminPwd"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"10","md":"4","xl":"3"}},[_c(__unplugin_components_89,{ref:"defaultAdminPwdConfirm",attrs:{"type":"password","rules":[this.fieldRules(_vm.defaultAdminPwdConfirm, 'ge_password', _vm.defaultAdminPwd.length > 0 ? true : false)],"label":_vm.$t('section.settings.superAdminPwdConfirm')},model:{value:(_vm.defaultAdminPwdConfirm),callback:function ($$v) {_vm.defaultAdminPwdConfirm=$$v;},expression:"defaultAdminPwdConfirm"}})],1)],1),_c(__unplugin_components_55,{staticClass:"mb-6",attrs:{"multiple":"","accordion":"","flat":""}},_vm._l((_vm.config),function(cls,clsKey){return _c(__unplugin_components_56,{key:clsKey,staticClass:"settings-category",attrs:{"disabled":!_vm.settingClsEnabled(clsKey)}},[_c(__unplugin_components_57,{staticClass:"settings-category-header",attrs:{"ripple":""}},[_c(__unplugin_components_91,{attrs:{"no-gutters":"","justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t(("section.settings.headers." + clsKey + ".title")))+" ")])],1),_c(__unplugin_components_58,{staticClass:"mt-6 mb-1 pa-0",attrs:{"eager":""}},[(clsKey == 'ldap')?_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_94,{staticClass:"mx-1 mb-6",attrs:{"disabled":!_vm.settingClsEnabled(clsKey) || (_vm.readonly || _vm.loading),"color":"primary","elevation":"0"},on:{"click":_vm.requestLDAPUserSync}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-account-sync ")]),_vm._v(" "+_vm._s(((_vm.$t("actions.synchronize")) + " " + (_vm.$tc("classes.user", 2))))+" ")],1),_c(__unplugin_components_94,{staticClass:"mx-1 mb-6",attrs:{"disabled":!_vm.settingClsEnabled(clsKey) || (_vm.readonly || _vm.loading),"color":"primary","elevation":"0"},on:{"click":_vm.requestLDAPUserPrune}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-account-wrench ")]),_vm._v(" "+_vm._s(((_vm.$t("actions.prune")) + " " + (_vm.$tc("classes.user", 2))))+" ")],1),_c(__unplugin_components_94,{staticClass:"mx-1 mb-6",attrs:{"disabled":!_vm.settingClsEnabled(clsKey) || (_vm.readonly || _vm.loading),"dark":!_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading),"light":_vm.isThemeDark(_vm.$vuetify) && !(_vm.readonly || _vm.loading),"elevation":"0"},on:{"click":_vm.requestLDAPUserPurge}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-account-off ")]),_vm._v(" "+_vm._s(((_vm.$t("actions.purge")) + " " + (_vm.$tc("classes.user", 2))))+" ")],1)],1):_vm._e(),_c(__unplugin_components_18,{ref:(clsKey + "SettingsForm"),refInFor:true,attrs:{"disabled":!_vm.settingClsEnabled(clsKey) || (_vm.readonly || _vm.loading)},on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,_vm._l((cls),function(category,categoryKey){return _c(__unplugin_components_88,{key:categoryKey,attrs:{"cols":"12"}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c('h4',[_vm._v(" "+_vm._s(_vm.$t(("section.settings.headers." + clsKey + "." + categoryKey)))+" ")])]),_vm._l((category),function(row,rowKey){return _c(__unplugin_components_91,{key:rowKey,staticClass:"ma-1 pa-1",attrs:{"align":"center","justify":"center"}},_vm._l((row),function(item,key){return _c(__unplugin_components_88,{key:key,class:'ma-0 pa-0',attrs:{"cols":"10","md":_vm.getColSize(rowKey, 'md'),"lg":_vm.getColSize(rowKey, 'lg')}},[(item.type == 'checkbox' || item.type == 'boolean' || item.type == 'bool')?_c(__unplugin_components_28,{class:'pa-0 ma-0 ' + (key == 'LDAP_AUTH_USE_TLS' ? 'mt-4' : '') + ' ' + item.extraClasses,attrs:{"disabled":item.disabled,"readonly":item.readonly || _vm.readonly == true,"hint":_vm.$t(item.hint),"persistent-hint":item.persistentHint,"label":_vm.$t('section.settings.fields.' + key)},model:{value:(item.value),callback:function ($$v) {_vm.$set(item, "value", $$v);},expression:"item.value"}}):(item.type == 'list' || item.type == 'array')?_c(__unplugin_components_76,{staticClass:"ma-0 px-6 py-2",attrs:{"flat":"","outlined":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_89,{ref:'LIST_KEY_' + key,refInFor:true,attrs:{"label":_vm.$t('section.settings.fields.' + key),"readonly":item.readonly || _vm.readonly == true,"hint":_vm.$t(item.hint),"persistent-hint":item.persistentHint,"required":item.required && item.value.length == 0 ? true : false,"rules":item.validator ? [_vm.fieldRules(item.add, item.validator, (item.required && item.value.length == 0 ? true : false))] : undefined,"id":'LIST_KEY_' + key},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.addToArray(item.add, item, 'LIST_KEY_' + key)}},model:{value:(item.add),callback:function ($$v) {_vm.$set(item, "add", $$v);},expression:"item.add"}}),_c(__unplugin_components_94,{staticClass:"mt-3 ml-5",attrs:{"color":"primary","disabled":item.readonly || _vm.readonly == true || !_vm.settingClsEnabled(clsKey),"rounded":"","icon":""},on:{"click":function($event){return _vm.addToArray(item.add, item, 'LIST_KEY_' + key)}}},[_c(__unplugin_components_95,[_vm._v(" mdi-plus ")])],1)],1),_vm._l((item.value),function(subItem,subItemKey){return _c(__unplugin_components_9$2,{key:subItemKey},[_c(VListItemContent,[_vm._v(" "+_vm._s(subItem)+" ")]),_c(__unplugin_components_10$2,[_c(__unplugin_components_94,{staticClass:"ml-5",attrs:{"color":"primary","disabled":item.readonly || _vm.readonly == true || !_vm.settingClsEnabled(clsKey),"rounded":"","small":"","icon":""},on:{"click":function($event){return _vm.removeFromArray(subItem, item)}}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-minus ")])],1)],1)],1)})],2):(item.type == 'ldap_uri')?_c(__unplugin_components_76,{staticClass:"ma-0 px-6 py-2",attrs:{"flat":"","outlined":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,{attrs:{"cols":"3"}},[_c(__unplugin_components_0$3,{ref:"ldapUriPrefix",refInFor:true,attrs:{"label":_vm.$t('section.settings.fields.LDAP_URI_PREFIX'),"id":"ldapUriPrefix","readonly":item.readonly || _vm.readonly == true,"items":['ldap://', 'ldaps://']},model:{value:(item.addPREFIX),callback:function ($$v) {_vm.$set(item, "addPREFIX", $$v);},expression:"item.addPREFIX"}})],1),_c(__unplugin_components_88,[_c(__unplugin_components_89,{ref:"ldapUriIP",refInFor:true,attrs:{"label":_vm.$t('section.settings.fields.LDAP_URI_IP'),"readonly":item.readonly || _vm.readonly == true,"required":item.required && item.value.length == 0 ? true : false,"rules":[_vm.fieldRules(item.addIP, 'net_ip_uri', (item.required && item.value.length == 0 || item.addPORT.length > 0 ? true : false))],"id":"ldapUriIP"},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.addServer(item)}},model:{value:(item.addIP),callback:function ($$v) {_vm.$set(item, "addIP", $$v);},expression:"item.addIP"}})],1),_c(__unplugin_components_88,[_c(__unplugin_components_89,{ref:"ldapUriPort",refInFor:true,attrs:{"label":_vm.$t('section.settings.fields.LDAP_URI_PORT'),"readonly":item.readonly || _vm.readonly == true,"hint":_vm.$t('section.settings.fields.LDAP_URI_PORT_HINT'),"persistent-hint":"","required":item.required && item.value.length == 0 ? true : false,"rules":[_vm.fieldRules(item.addPORT, 'net_port', (item.required && item.value.length == 0 || item.addIP.length > 0 ? true : false))],"id":"ldapUriPort"},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.addServer(item)}},model:{value:(item.addPORT),callback:function ($$v) {_vm.$set(item, "addPORT", $$v);},expression:"item.addPORT"}})],1),_c(__unplugin_components_94,{staticClass:"mt-3 ml-5",attrs:{"color":"primary","disabled":item.readonly || _vm.readonly == true || !_vm.settingClsEnabled(clsKey),"rounded":"","icon":""},on:{"click":function($event){return _vm.addServer(item)}}},[_c(__unplugin_components_95,[_vm._v(" mdi-plus ")])],1)],1),_vm._l((item.value),function(subItem,subItemKey){return _c(__unplugin_components_9$2,{key:subItemKey},[_c(VListItemContent,[_vm._v(" "+_vm._s(subItem)+" ")]),_c(__unplugin_components_10$2,[_c(__unplugin_components_94,{staticClass:"ml-5",attrs:{"color":"primary","disabled":item.readonly || _vm.readonly == true || !_vm.settingClsEnabled(clsKey),"rounded":"","small":"","icon":""},on:{"click":function($event){return _vm.removeFromArray(subItem, item)}}},[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-minus ")])],1)],1)],1)})],2):(item.type == 'object' || item.type == 'json')?_c(__unplugin_components_76,{staticClass:"ma-0 px-6 py-2 pt-4",attrs:{"flat":"","outlined":""}},[_c(ObjectEditor,{ref:"settingFieldsEditor",refInFor:true,attrs:{"value":item.value,"label":_vm.$t('section.users.import.dataMapping'),"dense":"","disableAddDelete":!item.allow_add_delete,"required":item.required},on:{"update":function (v) { return item.value = v; }}})],1):(item.type == 'select' || item.type == 'ldap_tls')?_c(__unplugin_components_0$3,{attrs:{"label":_vm.$t('section.settings.fields.' + key),"readonly":item.readonly || _vm.readonly == true,"hint":_vm.$t(item.hint),"persistent-hint":item.persistentHint,"id":key,"items":item.choices},model:{value:(item.value),callback:function ($$v) {_vm.$set(item, "value", $$v);},expression:"item.value"}}):(item.type == 'password' || item.type == 'crypt')?_c(__unplugin_components_89,{attrs:{"type":item.hidden ? 'password' : 'text',"readonly":item.readonly || _vm.readonly == true,"required":"","append-icon":_vm.readonly == true ? undefined : (item.hidden ? 'mdi-eye' : 'mdi-eye-off'),"dense":"","label":_vm.$t('attribute.password'),"rules":[_vm.fieldRules(item.value, 'ge_password', _vm.getRequired(item.required))]},on:{"click:append":function () { return (item.hidden = !item.hidden); }},model:{value:(item.value),callback:function ($$v) {_vm.$set(item, "value", $$v);},expression:"item.value"}}):_c(__unplugin_components_89,{class:item.extraClasses,attrs:{"label":_vm.$t('section.settings.fields.' + key),"readonly":item.readonly || _vm.readonly == true,"hint":_vm.$t(item.hint),"rules":item.validator ? [_vm.fieldRules(item.value, item.validator, item.required)] : undefined,"persistent-hint":item.persistentHint,"id":key},model:{value:(item.value),callback:function ($$v) {_vm.$set(item, "value", $$v);},expression:"item.value"}})],1)}),1)})],2)}),1)],1)],1)],1)}),1),_c(__unplugin_components_104,{attrs:{"max-width":"650px"},model:{value:(_vm.resetDialog),callback:function ($$v) {_vm.resetDialog=$$v;},expression:"resetDialog"}},[_c(SettingsResetDialog,{on:{"resetConfirm":_vm.restoreDefaultValues,"closeDialog":function($event){_vm.resetDialog = false;}}})],1)],1)};
var staticRenderFns$i = [];

/* unplugin-vue-components disabled */var SettingsCard_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$i = {
	name: 'SettingsCard',
	mixins: [validationMixin, utilsMixin],
	components: {
		SettingsResetDialog,
		ObjectEditor
	},
	data() {
		return {
			checking_backend: false,
			backend_offline: false,
			testing: false,
			testError: false,
			testFinished: false,
			readonly: true,
			invalid: false,
			loading: true,
			resetDialog: false,
			defaultAdminEnabled: true,
			defaultAdminPwd: "",
			defaultAdminPwdConfirm: "",
			presetId: -1,
			presets: [],
			newPresetLabel: "",
			addingProfile: false,
			renamingProfile: false,
			config: {
				local: config$1,
				ldap: config
			}
		}
	},
	props: {
		viewTitle: String
	},
	mounted() {
		this.refreshSettings();
	},
	computed: {
		newPresetNameValid() {
			if (this.presets.map((v) => v.label).includes(this.newPresetLabel)) return false
			return this.fieldRules(this.newPresetLabel, 'ge_name', this.newPresetLabel.length > 0 ? true : false) === true
		}
	},
	watch: {
		// config: {
		// 	deep: true,
		// 	immediate: true,
		// 	handler: function (val, oldVal) {
		// 		console.log(val)
		// 	}
		// },
		addingProfile(new_v) {
			if (new_v === true) this.newPresetLabel = "";
		},
		renamingProfile(new_v) {
			if (new_v === true) {
				let activePreset = this.getSelectedPreset();
				if (activePreset && 'label' in activePreset)
					this.newPresetLabel = activePreset["label"];
			}
		}
	},
	methods: {
		getSelectedPreset() {
			for (let i = 0; i < this.presets.length; i++) {
				const ps = this.presets[i];
				if (ps.id == this.presetId) return ps
			}
		},
		isActivePreset() {
			for (let i = 0; i < this.presets.length; i++) {
				const ps = this.presets[i];
				if (ps.id == this.presetId && ps.active == true) return true
			}
			return false
		},
		createSnackbar(notifObj) {
			notificationBus.$emit('createNotification', notifObj);
		},
		// This function returns true or false based on another key value 
		// if a data key path is passed through
		getRequired(value, sameObject = false, valueField = false) {
			if (value === true || value === false)
				return value
			value = value.split('.');

			let currentPath = this[value[0]];
			value.forEach(function callback(subpath, key) {
				if (key != 0)
					currentPath = currentPath[subpath];
			});
			if (sameObject == true && valueField == true)
				return currentPath['keyToAdd']
			else if (sameObject == true)
				return currentPath['valueToAdd']
			return currentPath['value']
		},
		getColSize(key, breakpoint) {
			// REGEX Switch
			switch (true) {
				case /LDAP_LOG_[A-Z]{0,}/.test(key):
					if (this.$vuetify.breakpoint.mdAndUp)
						return 8
					else
						return 10
			}
			// STRING Switch
			switch (key) {
				case 'LDAP_AUTH_URL':
					if (breakpoint == 'md')
						return 10
					else
						return 8
				case 'LDAP_AUTH_USE_TLS':
					return 3
				case 'LDAP_AUTH_TLS_VERSION':
					return 5
				default:
					return 8
			}
		},
		async testSettings() {
			this.testing = true;
			this.loading = true;
			this.invalid = false;
			if (!this.validateSettings() ||
				!this.$refs.defaultAdminPwd.validate() ||
				!this.$refs.defaultAdminPwdConfirm.validate())
				this.invalid = true;

			if (this.invalid)
				return

			await new Settings({}).test(this.getConfigValues()['ldap']).then(() => {
				setTimeout(() => {
					this.loading = false;
					this.readonly = false;
					this.testing = false;
					this.testFinished = true;
					this.testError = false;
					this.createSnackbar({ message: (this.$t("section.settings.testSuccess")).toUpperCase(), type: 'success' });
				}, 500);
			})
				.catch(error => {
					console.error(error);
					this.createSnackbar({ message: this.getMessageForCode(error), type: 'error' });
					setTimeout(() => {
						this.loading = false;
						this.readonly = false;
						this.testing = false;
						this.testFinished = true;
						this.testError = true;
					}, 500);
				});
		},
		async sleep(ms) {
			return new Promise(resolve => setTimeout(resolve, ms));
		},
		async checkBackendStatus() {
			if (this.backend_offline == true && this.checking_backend == true) return
			this.checking_backend = true;
			await new Liveness({}).check()
				.then(() => {
					this.checking_backend = false;
					this.backend_offline = false;
				})
				.catch(() => {
					this.checking_backend = false;
					this.backend_offline = true;
				});
		},
		async backendAlive() {
			this.backend_offline = true;
			let aliveCheckCountLimit = 20;
			let aliveCheckCount = 0;
			let aliveCheckFrequencyMsec = 500;
			while (this.backend_offline === true && await (new Promise(resolve => setTimeout(() => resolve(aliveCheckCount), aliveCheckFrequencyMsec))) < aliveCheckCountLimit) {
				await this.checkBackendStatus();
				aliveCheckCount++;
			}
			return
		},
		async saveSettings() {
			this.invalid = false;
			if (!this.validateSettings() ||
				!this.$refs.defaultAdminPwd.validate() ||
				!this.$refs.defaultAdminPwdConfirm.validate())
				this.invalid = true;

			if (this.invalid === true)
				return

			this.loading = true;
			var dataToSend = {};
			dataToSend = this.getConfigValues();
			dataToSend.local.DEFAULT_ADMIN_ENABLED = {
				type: "boolean",
				value: this.defaultAdminEnabled
			};
			dataToSend.local.DEFAULT_ADMIN_PWD = {
				type: "string",
				value: this.defaultAdminPwd,
			};
			let preset = {};
			preset["id"] = this.presetId;
			if (this.renamingProfile === true && this.newPresetLabel.length > 0)
				preset["label"] = this.newPresetLabel;
			await new Settings({}).save({ settings: dataToSend, preset: preset })
				.then(() => {
					this.loading = false;
					this.readonly = false;
					this.createSnackbar({
						message: (`${this.$tc("classes.setting", 5)} ${this.$tc("words.saved.m", 5)}`).toUpperCase(),
						type: 'success'
					});
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.readonly = false;
					this.createSnackbar({ message: this.getMessageForCode(error), type: 'error' });
				});
			await this.backendAlive().then(() => {
				this.refreshSettings(false);
			});
		},
		getSettingValue(clsKey, valueKey) {
			for (const [categoryKey, category] of Object.entries(this.config[clsKey])) {
				for (const [rowKey, row] of Object.entries(category)) {
					if (valueKey in row) {
						return row[valueKey].value
					}
				}
			}
		},
		settingClsEnabled(clsKey) {
			if (clsKey == "ldap")
				return this.getSettingValue("local", "ILCK_ENABLE_LDAP") === true
			return true
		},
		validateSettings() {
			this.invalid = false;
			const configKeys = Object.keys(this.config);
			for (let i = 0; i < configKeys.length; i++) {
				const clsKey = configKeys[i];
				if (!settingClsEnabled(clsKey))
					continue
				const ref = `${clsKey}SettingsForm`;
				const refLen = this.$refs[ref] ? this.$refs[ref].length : 0;
				if (this.$refs[ref][refLen - 1] !== undefined)
					if (!this.$refs[ref][refLen - 1].validate())
						this.invalid = true;
			}

			this.readonly = true;
			if (this.testFinished) {
				this.testing = false;
				this.testFinished = false;
				this.testError = false;
			}
			return !this.invalid
		},
		setSettingsClassData(cls, settings) {
			let config = this.config[cls];
			for (const category of Object.values(config)) {
				for (const row of Object.values(category)) {
					for (const settingKey in row) {
						if (settingKey in settings) {
							row[settingKey].value = settings[settingKey].value;
							row[settingKey].type = settings[settingKey].type;
						}
					}
				}
			}
		},
		async refreshSettings(snackbar = true, resetPreset = false) {
			this.readonly = true;
			this.loading = true;
			this.invalid = false;
			this.testing = false;
			this.testError = false;
			this.testFinished = false;
			if (resetPreset) {
				this.addingProfile = false;
				this.renamingProfile = false;
			}
			// Fetch Presets
			await new Settings({}).list()
				.then(r => {
					this.presets = r.data.presets;
					if (this.presetId == -1 || !this.presetId || !r.data.presets.map(v => v.id).includes(this.presetId) || resetPreset)
						this.presetId = r.data.active_preset;
				})
				.catch(e => {
					console.error(e);
					this.loading = false;
					this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
					this.error = true;
					this.readonly = false;
				});

			// Fetch Current Preset Data
			await new Settings({}).fetch(this.presetId)
				.then(response => {
					const data = response.data.settings;
					this.defaultAdminEnabled = data.local.DEFAULT_ADMIN_ENABLED.value;
					this.defaultAdminPwd = "";
					this.defaultAdminPwdConfirm = "";

					for (const cls in data) {
						if (Object.prototype.hasOwnProperty.call(data, cls)) {
							this.setSettingsClassData(cls, data[cls]);
						}
					}
					this.loading = false;
					if (snackbar === true)
						this.createSnackbar({ message: (this.$tc("classes.setting", 5) + " " + this.$tc("words.loaded.m", 5)).toUpperCase(), type: 'success' });
					setTimeout(() => {
						this.readonly = false;
						this.$emit("refreshDomain");
					}, 300);
					this.error = false;
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.createSnackbar({ message: this.getMessageForCode(error), type: 'error' });
					this.error = true;
					this.readonly = false;
				});
			this.$emit('done');
		},
		async restoreDefaultValues() {
			this.resetDialog = false;
			this.loading = true;
			this.backend_offline = true;
			await new Settings({}).reset()
				.then(async () => {
					await this.backendAlive(true).then(() => {
						this.refreshSettings();
					});
					this.loading = false;
				})
				.catch(error => {
					console.error(error);
				});
		},
		async settingsPresetCreateOrRename() {
			this.loading = true;
			if (!this.newPresetNameValid) return
			if (this.addingProfile)
				await new Settings({}).preset_create({ "label": this.newPresetLabel })
					.then(() => {
						this.createSnackbar({ message: (this.$tc("classes.setting-preset", 5) + " " + this.$tc("words.created.m", 5)).toUpperCase(), type: 'success' });
						this.refreshSettings(false);
					})
					.catch(e => {
						this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
						console.error(e);
					});
			else
				await new Settings({}).preset_rename({ "id": this.presetId, "label": this.newPresetLabel })
					.then(() => {
						this.createSnackbar({ message: (this.$tc("classes.setting-preset", 5) + " " + this.$tc("words.renamed.m", 5)).toUpperCase(), type: 'success' });
						this.refreshSettings(false);
					})
					.catch(e => {
						this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
						console.error(e);
					});
			this.newPresetLabel = "";
		},
		async settingsPresetEnable() {
			this.loading = true;
			await new Settings({}).preset_enable({ "id": this.presetId })
				.then(async () => {
					this.createSnackbar({ message: (this.$tc("classes.setting-preset", 5) + " " + this.$tc("words.saved.m", 5)).toUpperCase(), type: 'success' });
					await this.backendAlive(true).then(() => {
						this.refreshSettings(false);
					});
				})
				.catch(e => {
					this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
					console.error(e);
				});
		},
		async settingsPresetDelete() {
			this.loading = true;
			await new Settings({}).preset_delete({ "id": this.presetId })
				.then(() => {
					this.createSnackbar({ message: (this.$tc("classes.setting-preset", 5) + " " + this.$tc("words.saved.m", 5)).toUpperCase(), type: 'success' });
					this.refreshSettings(false);
				})
				.catch(e => {
					this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
					console.error(e);
				});
		},
		getConfigValues(log = false) {
			let dataToSend = {};
			try {
				for (const [clsKey, cls] of Object.entries(this.config)) {
					dataToSend[clsKey] = {};
					for (const [categoryKey, category] of Object.entries(cls)) {
						for (const [rowKey, row] of Object.entries(category)) {
							let currentPath = row;
							for (const settingKey in currentPath) {
								dataToSend[clsKey][settingKey] = {};
								dataToSend[clsKey][settingKey]['value'] = currentPath[settingKey]['value'];
								if (currentPath[settingKey]['type'])
									dataToSend[clsKey][settingKey]['type'] = currentPath[settingKey]['type'];
								else
									dataToSend[clsKey][settingKey]['type'] = 'string';
							}
						}
					}
				}
			} catch (error) {
				console.error(error);
			}
			if (log == true)
				console.log(dataToSend);
			return dataToSend
		},
		addServer(item) {
			var fieldsToValidate = [
				'ldapUriPrefix',
				'ldapUriIP',
				'ldapUriPort',
			];
			var valid = true;
			fieldsToValidate.forEach(field => {
				if (!this.$refs[field][0].validate())
					valid = false;
			});

			if (item.addIP.length <= 0 || item.addPORT.length <= 0)
				return false

			if (valid == true) {
				var result = item.addPREFIX + item.addIP + ":" + item.addPORT;
				this.addToArray(result, item);
				this.config.ldap.domain.row1.LDAP_AUTH_URL.addIP = "";
				this.config.ldap.domain.row1.LDAP_AUTH_URL.addPORT = "";
			}
		},
		addToArray(value, object, itemRef = undefined) {
			var array = object.value;
			if (itemRef) {
				if (this.$refs[itemRef][0].validate()) {
					if (!array.includes(value) && array && value)
						array = array.push(value);
				}
			}
			else if (!array.includes(value) && array && value) {
				array = array.push(value);
			}
			return array
		},
		removeFromArray(value, object) {
			if (object.value.includes(value) && Array.isArray(object.value)) {
				object.value = object.value.filter(function (item) {
					return item !== value
				});
			}
			return object.value
		},
		async requestLDAPUserSync() {
			await new Settings({}).sync_users()
				.then(async response => {
					let synced_count = response.data.synced_users;
					let updated_count = response.data.updated_users;
					this.createSnackbar({
						message: (`${synced_count} ${this.$tc('classes.user', synced_count)} ${this.$t('words.synchronized.m')}`).toUpperCase(),
						type: 'success'
					});
					this.sleep(2e3).then(() => {
						this.createSnackbar({
							message: (`${updated_count} ${this.$tc('classes.user', updated_count)} ${this.$t('words.updated.m')}`).toUpperCase(),
							type: 'info'
						});
					});
				})
				.catch(e => {
					this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
					console.error(e);
				});
		},
		async requestLDAPUserPrune() {
			await new Settings({}).prune_users()
				.then(response => {
					this.createSnackbar({
						message: (`${response.data.count} ${this.$tc('classes.user', response.data.count)} ${this.$t('words.pruned.m')}`).toUpperCase(),
						type: 'info'
					});
				})
				.catch(e => {
					this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
					console.error(e);
				});
		},
		async requestLDAPUserPurge() {
			await new Settings({}).purge_users()
				.then(response => {
					this.createSnackbar({
						message: (`${response.data.count} ${this.$tc('classes.user', response.data.count)} ${this.$t('words.purged.m')}`).toUpperCase(),
					});
				})
				.catch(e => {
					this.createSnackbar({ message: this.getMessageForCode(e), type: 'error' });
					console.error(e);
				});
		}
	}
};
const __cssModules$i = {};
var __component__$i = /*#__PURE__*/normalizeComponent(
  __vue2_script$i,
  render$i,
  staticRenderFns$i,
  false,
  __vue2_injectStyles$i,
  null,
  null,
  null
);

function __vue2_injectStyles$i (context) {
  for(let o in __cssModules$i){
    this[o] = __cssModules$i[o];
  }
}

var SettingsCard = /*#__PURE__*/(function () { return __component__$i.exports })();

class Log extends ApiModel {

    id;
    user;
    actionType;
    objectClass;
    affectedObject;
    extraMessage;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async list() {
        return await interlock_backend.call('log/list')
    }
    async reset() {
        return await interlock_backend.call('log/reset')
    }
    async truncate(data) {
        return await interlock_backend.call('log/truncate', data)
    }
}

var render$h = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t('section.logs.' + this.logAction + 'Dialog.header'))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"pa-0 ma-0 my-8"},[_c('span',{staticClass:"font-weight-medium",domProps:{"innerHTML":_vm._s(_vm.$t('section.logs.' + this.logAction + 'Dialog.message'))}})]),_c(VCardActions,{staticClass:"card-actions"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.resetConfirm}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-checkbox-marked-circle ")]),_c('span',{staticClass:"pr-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.yes"))+" ")])],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-2 ma-1",attrs:{"color":"primary","rounded":""},on:{"click":_vm.closeDialog}},[_c('span',{staticClass:"pl-1"},[_vm._v(" "+_vm._s(_vm.$t("actions.no"))+" ")]),_c(__unplugin_components_95,{staticClass:"ml-2",attrs:{"color":"white"}},[_vm._v(" mdi-close-circle ")])],1)],1)],1)],1)};
var staticRenderFns$h = [];

/* unplugin-vue-components disabled *///

const __vue2_script$h = {
	name: "LogResetDialog",
	mixins: [utilsMixin],
	props: {
		logAction: String
	},
	methods: {
		async resetConfirm() {
			switch (this.logAction) {
				case 'truncate':
					this.$emit('truncateConfirm');
					break;
				case 'reset':
					this.$emit('resetConfirm');
					break;
				default:
					console.log("No action defined for Log Reset Dialog emit");
					break;
			}
		},
		async closeDialog() {
			this.$emit('closeDialog');
		},
	}
};
const __cssModules$h = {};
var __component__$h = /*#__PURE__*/normalizeComponent(
  __vue2_script$h,
  render$h,
  staticRenderFns$h,
  false,
  __vue2_injectStyles$h,
  null,
  null,
  null
);

function __vue2_injectStyles$h (context) {
  for(let o in __cssModules$h){
    this[o] = __cssModules$h[o];
  }
}

var LogResetDialog = /*#__PURE__*/(function () { return __component__$h.exports })();

var render$g = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_0$2,{staticClass:"py-3 px-2 mt-2 mb-2",attrs:{"headers":_vm.dynamicTableHeaders,"items":_vm.tableData.items,"custom-sort":_vm.sortNullLast,"loading":_vm.loading,"show-expand":_vm.compactTable,"expanded":_vm.expanded,"search":_vm.searchString,"footer-props":{
      'items-per-page-options': [10, 25, 50, 100, -1]
    },"sort-by":"date","sort-desc":true},on:{"update:expanded":function($event){_vm.expanded=$event;}},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","label":_vm.$t('actions.search')},model:{value:(_vm.searchString),callback:function ($$v) {_vm.searchString=$$v;},expression:"searchString"}}),_c(__unplugin_components_91,{staticClass:"pa-0 px-4",staticStyle:{"max-width":"fit-content"},attrs:{"justify":"end","align":"center"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":_vm.listLogs}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"disabled":_vm.loading,"color":"primary"},on:{"click":function($event){return _vm.openResetLogsDialog()}}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0 mr-1"},[_vm._v("mdi-fire")]),_vm._v(" "+_vm._s(_vm.$t('actions.delete') + ' ' + _vm.$tc('classes.log', 5))+" ")],1)],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 mt-4",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_9$1,{staticClass:"mx-4",attrs:{"disabled":_vm.getLogTruncateMax < 1,"label":_vm.$t('section.logs.viewAction.truncate.slider'),"min":_vm.getLogTruncateMin,"max":_vm.getLogTruncateMax},model:{value:(_vm.logTruncateRange),callback:function ($$v) {_vm.logTruncateRange=$$v;},expression:"logTruncateRange"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"10","lg":"3"}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"6"}},[_c(__unplugin_components_89,{staticClass:"mx-4",attrs:{"disabled":_vm.getLogTruncateMax < 1,"rules":[_vm.validMinimumLog],"label":_vm.$t('section.logs.viewAction.truncate.min')},on:{"keypress":function($event){return _vm.isNumber($event)}},model:{value:(_vm.logTruncateRange[0]),callback:function ($$v) {_vm.$set(_vm.logTruncateRange, 0, $$v);},expression:"logTruncateRange[0]"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"6"}},[_c(__unplugin_components_89,{staticClass:"mx-4",attrs:{"disabled":_vm.getLogTruncateMax < 1,"rules":[_vm.validMaximumLog],"label":_vm.$t('section.logs.viewAction.truncate.max')},on:{"keypress":function($event){return _vm.isNumber($event)}},model:{value:(_vm.logTruncateRange[1]),callback:function ($$v) {_vm.$set(_vm.logTruncateRange, 1, $$v);},expression:"logTruncateRange[1]"}})],1)],1)],1),_c(__unplugin_components_88,{staticClass:"ma-0 my-4 pa-0",attrs:{"cols":"12","lg":"3","xl":"2"}},[_c(__unplugin_components_94,{staticClass:"mx-4 pa-0 px-2",attrs:{"outlined":"","color":"primary"},on:{"click":_vm.openTruncateLogsDialog}},[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-content-cut ")]),_vm._v(" "+_vm._s(_vm.$t('section.logs.viewAction.truncate.button'))+" ")],1)],1)],1)]},proxy:true},{key:"expanded-item",fn:function(ref){
    var headers = ref.headers;
    var item = ref.item;
return [_c('td',{attrs:{"colspan":headers.length}},[(item.affectedObject && item.affectedObject.length >= 1)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-3 mx-2",attrs:{"justify":"start"}},[_vm._v(" "+_vm._s(_vm.$t('section.logs.headers.affectedObject') + ":")+" ")]):_vm._e(),(item.affectedObject && item.affectedObject.length >= 1)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-3 mx-2",attrs:{"align":"center","justify":"start"}},[_vm._v(" "+_vm._s(item.affectedObject)+" "),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
    var on = ref.on;
    var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"small":"","icon":"","color":"primary"},on:{"click":function($event){return _vm.copyToClipboard(item.affectedObject)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,true)},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("actions.copy"))+" ")])])],1):_vm._e(),(item.extraMessage && item.extraMessage.length >= 1)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-3 mx-2",attrs:{"justify":"start"}},[_vm._v(" "+_vm._s(_vm.$t('section.logs.headers.extraMessage') + ":")+" ")]):_vm._e(),(item.extraMessage && item.extraMessage.length >= 1)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-3 mx-2",attrs:{"justify":"start"}},[_vm._v(" "+_vm._s(_vm.$t('section.logs.extras.' + (item.extraMessage.toLowerCase())))+" ")]):_vm._e()],1)]}},{key:"item.actionType",fn:function(ref){
    var item = ref.item;
return [_c(__unplugin_components_40,{class:'text-' + (_vm.getColorForActionType(item.actionType)[1] || 'inverted'),attrs:{"color":_vm.getColorForActionType(item.actionType)[0],"text-color":_vm.getColorForActionType(item.actionType)[1] || undefined}},[_vm._v(" "+_vm._s(_vm.$t("section.logs.actionType." + item.actionType))+" ")])]}},{key:"item.date",fn:function(ref){
    var item = ref.item;
return [_vm._v(" "+_vm._s(_vm.parseDateToLocalTZ(item.date))+" ")]}},{key:"item.objectClass",fn:function(ref){
    var item = ref.item;
return [_c(__unplugin_components_91,{staticClass:"px-6 my-2",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"small":_vm.$vuetify.breakpoint.mdAndDown,"color":_vm.getIconForObjectClass(item.objectClass)[1] || undefined}},[_vm._v(" "+_vm._s(_vm.getIconForObjectClass(item.objectClass)[0])+" ")]),_c('span',[_vm._v(" "+_vm._s(_vm.$tc('classes.' + _vm.getObjectClassTranslationKey(item.objectClass), 1))+" ")])],1)]}},{key:"item.affectedObject",fn:function(ref){
    var item = ref.item;
return [_c('div',{staticClass:"py-2"},[(item.affectedObject && Array.isArray(item.affectedObject) && item.affectedObject.length > 0)?_c(__unplugin_components_0$4,{attrs:{"close-on-content-click":false,"top":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
    var on = ref.on;
    var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"pa-0 px-2 pr-3",staticStyle:{"min-width":"32px"},attrs:{"elevation":"0","text":"","color":"primary"}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" mdi-information ")]),_vm._v(" "+_vm._s(_vm.$t('section.logs.seeDetails'))+" ")],1)]}}],null,true)},[_c(__unplugin_components_4$1,{staticClass:"pa-2"},_vm._l((item.affectedObject),function(i,k){return _c('span',{key:k},[_c(VListItemTitle,[_vm._v(" "+_vm._s(typeof i === 'object' ? i.name : i)+" ")]),(typeof i === 'object' && i.old_value)?_c(VListItemSubtitle,{staticClass:"my-2"},[_c(__unplugin_components_40,{staticClass:"ml-4",attrs:{"outlined":""}},[_vm._v(" "+_vm._s(_vm.$t("section.logs.prevValue") + ": " + i.old_value)+" ")])],1):_vm._e(),(typeof i === 'object' && i.new_value)?_c(VListItemSubtitle,{staticClass:"my-2"},[_c(__unplugin_components_40,{staticClass:"ml-4",attrs:{"outlined":""}},[_vm._v(" "+_vm._s(_vm.$t("section.logs.newValue") + ": " + i.new_value)+" ")])],1):_vm._e()],1)}),0)],1):(item.affectedObject && item.affectedObject.length > 0)?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
    var on = ref.on;
    var attrs = ref.attrs;
return [_c(__unplugin_components_40,_vm._g(_vm._b({staticClass:"mx-1",attrs:{"outlined":""},on:{"click":function($event){return _vm.copyToClipboard(item.affectedObject)}}},'v-chip',attrs,false),on),[_vm._v(" "+_vm._s(_vm.truncateString(item.affectedObject))+" ")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(item.affectedObject))])]):_vm._e()],1)]}},{key:"item.extraMessage",fn:function(ref){
    var item = ref.item;
return [(item.extraMessage)?_c(__unplugin_components_40,{staticClass:"ma-0 pa-0 hide-chip",attrs:{"color":"transparent"}},[_vm._v(" "+_vm._s(_vm.$t('section.logs.extras.' + (item.extraMessage.toLowerCase())))+" ")]):_vm._e()]}}],null,true)}),_c(__unplugin_components_104,{attrs:{"max-width":"650px"},model:{value:(_vm.resetDialog),callback:function ($$v) {_vm.resetDialog=$$v;},expression:"resetDialog"}},[_c(LogResetDialog,{attrs:{"logAction":_vm.logAction},on:{"resetConfirm":_vm.resetLogs,"truncateConfirm":_vm.truncateLogs,"closeDialog":function($event){_vm.resetDialog = false;}}})],1)],1)};
var staticRenderFns$g = [];

/* unplugin-vue-components disabled */var LogView_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$g = {
  name: 'LogView',
  mixins: [validationMixin, utilsMixin],
  components: {
    LogResetDialog,
    RefreshButton
  },
  data() {
    return {
      expanded: [],
      logTruncateRange: [0, 0],
      logAction: "",
      readonly: false,
      fetchingData: false,
      resetDialog: false,
      tableData: {
        headers: [],
        items: []
      },
      searchString: "",
      loading: false,
      error: false,

      // Dialog States
      dialogs: {
        logDelete: false
      }
    }
  },
  computed: {
    getLogTruncateMin() {
      if (this.tableData.items.length < 1)
        return 0
      let ids = this.tableData.items.map(log => {
        return log.id;
      });
      return ids.sort((a, b) => a > b)[0]
    },
    getLogTruncateMax() {
      if (this.tableData.items.length < 1)
        return 0
      let ids = this.tableData.items.map(log => {
        return log.id;
      });
      ids = ids.sort((a, b) => a > b);
      return ids[ids.length - 1]
    },
    compactTable() {
      return this.$vuetify.breakpoint.lgAndDown
    },
    dynamicTableHeaders() {
      let _excluded = [
        "affectedObject",
        "extraMessage",
      ];
      if (this.compactTable) {
        return this.tableData.headers.filter(h => (!(_excluded.includes(h.value))))
      }
      else {
        this.expanded = [];
        return this.tableData.headers
      }
    }
  },
  mounted() {
    this.listLogs();
  },
  props: {
    viewTitle: String
  },
  methods: {
    copyToClipboard(v) {
      if (typeof v !== 'string') {
        console.error("Cannot copy non-string value to clipboard");
        return
      }
      navigator.clipboard.writeText(v);
      notificationBus.$emit('createNotification', {
        message: this.$t("actions.copiedToClipboard").toUpperCase(),
        type: 'info',
      });
    },
    truncateString(s, len = 32) {
      if (typeof s !== 'string') {
        console.error(`s must be of type String (type: ${typeof s})`);
        return ""
      }
      if (s.length <= len) return s
      return s.slice(0, len) + " (...)"
    },
    validMinimumLog(v) {
      if (isNaN(v)) return false
      return v >= this.getLogTruncateMin
    },
    validMaximumLog(v) {
      if (isNaN(v)) return false
      return v <= this.getLogTruncateMax
    },
    parseDateToLocalTZ(dateStr) {
      var dateObject = new Date(dateStr);
      var dateString = "";
      dateString += dateObject.toLocaleDateString(this.$i18n.locale, { day: 'numeric' }).padStart(2, '0') + "-";
      dateString += dateObject.toLocaleDateString(this.$i18n.locale, { month: 'numeric' }).padStart(2, '0') + "-";
      dateString += dateObject.toLocaleDateString(this.$i18n.locale, { year: 'numeric' }) + " ";
      dateString += dateObject.toLocaleTimeString(this.$i18n.locale, { hour12: false });
      dateString += " UTC" + (dateObject.getTimezoneOffset() / 60) * -1;
      return dateString
    },
    createSnackbar(notifObj) {
      notificationBus.$emit('createNotification', notifObj);
    },
    resetSearch() {
      this.searchString = "";
    },
    getObjectClassTranslationKey(objectClass) {
      switch (objectClass) {
        case 'USER':
          return 'user'
        case 'GROUP':
          return 'group'
        case 'OU':
          return 'organizational-unit'
        case 'DOM':
          return 'domain-entry'
        case 'GPO':
          return 'group-policy-object'
        case 'CONN':
          return 'connection'
        case 'SET':
          return 'setting'
        case 'DNSZ':
          return 'dns.zone'
        case 'DNSR':
          return 'dns.record'
        case 'SSO_APP':
          return 'application'
        case 'SSO_ASG':
          return 'application-group'
        case 'SSO_CLIENT':
          return 'client'
        default:
          return 'ldap'
      }
    },
    getColorForActionType(actionType) {
      switch (actionType) {
        // First color is Chip BG, second is text color
        case 'CREATE':
          return ['green', 'white']
        case 'READ':
          return ['primary', 'white']
        case 'UPDATE':
          return ['orange', 'white']
        case 'DELETE':
          return ['secondary-s', 'white']
        default:
          return ['secondary-s', 'white']
      }
    },
    getIconForObjectClass(objectClass) {
      switch (objectClass) {
        case 'USER':
          return ['mdi-account', 'primary']
        case 'GROUP':
          return ['mdi-account-multiple', 'primary-30']
        case 'OU':
          return ['mdi-folder', 'secondary']
        case 'DOM':
          return ['mdi-dns']
        case 'GPO':
          return ['mdi-google-circles-extended']
        case 'CONN':
          return ['mdi-web', 'orange']
        case 'SET':
          return ['mdi-cog', 'orange']
        case 'DNSZ':
          return ['mdi-google-circles', 'orange']
        case 'DNSR':
          return ['mdi-google-circles-group', 'orange']
        case 'SSO_APP':
          return ['mdi-application', 'primary']
        case 'SSO_ASG':
          return ['mdi-application-parentheses', 'secondary']
        case 'SSO_CLIENT':
          return ['mdi-transit-connection-horizontal']
        default:
          return ['mdi-group']
      }
    },
    openDialog(key) {
      this.dialogs[key] = true;
    },
    async closeDialog(key, refresh = false) {
      this.dialogs[key] = false;
      if (refresh)
        this.listLogs();
    },
    // Reload Data Table Header Labels
    reloadDataTableHeaders() {
      this.tableData.headers.forEach(tableHeader => {
        if (tableHeader.value != undefined)
          tableHeader.text = this.$t('section.logs.headers.' + tableHeader.value);
      });
    },
    // Reset Data Table variables
    resetDataTable() {
      this.tableData.headers = [];
      this.tableData.items = [];
    },
    // Log Actions
    async listLogs(emitNotif = true) {
      this.loading = true;
      this.error = false;
      this.tableData.headers = [];
      this.tableData.items = [];
      await new Log({}).list()
        .then(response => {
          let logHeaders = response.headers;
          let logs = response.logs;
          // Reset Headers Array every time you list to avoid infinite header multiplication
          this.resetDataTable();
          let headerDict = {};
          logHeaders.forEach(header => {
            headerDict = {};
            headerDict.text = this.$t('section.logs.headers.' + header);
            headerDict.value = header;
            if (header == 'actionType' || header == 'objectClass') {
              headerDict.align = 'center';
            }
            this.tableData.headers.push(headerDict);
          });
          this.tableData.items = logs;
          this.loading = false;
          this.error = false;
          if (emitNotif)
            this.createSnackbar({
              message: (this.$tc("classes.log", logs.length) + " " + this.$tc("words.loaded.m", logs.length)).toUpperCase(),
              type: 'success'
            });
          this.logTruncateRange = [this.getLogTruncateMin, this.getLogTruncateMax];
        })
        .catch(error => {
          console.error(error);
          this.loading = false;
          this.error = true;
          this.createSnackbar({ message: this.getMessageForCode(error), type: 'error' });
        });
      this.$emit('done');
    },
    openResetLogsDialog() {
      this.resetDialog = true;
      this.logAction = 'reset';
    },
    openTruncateLogsDialog() {
      this.resetDialog = true;
      this.logAction = 'truncate';
    },
    async resetLogs() {
      await new Log({}).reset()
        .then(() => {
          this.resetDialog = false;
          this.logAction = "";
          this.listLogs();
        })
        .catch(error => {
          console.error(error);
          this.resetDialog = false;
          this.logAction = "";
        });
    },
    async truncateLogs() {
      var data = {};
      data['min'] = this.logTruncateRange[0];
      data['max'] = this.logTruncateRange[1];
      await new Log({}).truncate(data)
        .then(() => {
          this.resetDialog = false;
          this.logAction = "";
          this.listLogs();
        })
        .catch(error => {
          console.error(error);
          this.resetDialog = false;
          this.logAction = "";
        });
    }
  },
};
const __cssModules$g = {};
var __component__$g = /*#__PURE__*/normalizeComponent(
  __vue2_script$g,
  render$g,
  staticRenderFns$g,
  false,
  __vue2_injectStyles$g,
  null,
  null,
  null
);

function __vue2_injectStyles$g (context) {
  for(let o in __cssModules$g){
    this[o] = __cssModules$g[o];
  }
}

var LogView = /*#__PURE__*/(function () { return __component__$g.exports })();

class Debug extends ApiModel {

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async list() {
        return await interlock_backend.call('debug/list')
    }

    async action(data) {
        return await interlock_backend.call('debug/action', data)
    }
}

var render$f = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(__unplugin_components_76,{attrs:{"flat":"","outlined":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-2",attrs:{"justify":"space-between","align":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"auto"}},[_c(__unplugin_components_94,{attrs:{"small":"","color":"primary","disabled":_vm.loading},on:{"click":_vm.refreshAction}},[_c(__unplugin_components_95,[_vm._v(" mdi-refresh ")]),_vm._v(" "+_vm._s(_vm.$t('actions.refresh'))+" ")],1)],1),_c(VExpandTransition,[(!_vm.loading && _vm.data.ldapOperations.length >= 1)?_c(__unplugin_components_0$3,{staticClass:"ma-0 pa-0 mx-4",attrs:{"filled":"","placeholder":_vm.getSelectTitle(),"clearable":"","hide-details":"","dense":"","items":_vm.data.ldapOperations},model:{value:(_vm.data.selectedLdapOperation),callback:function ($$v) {_vm.$set(_vm.data, "selectedLdapOperation", $$v);},expression:"data.selectedLdapOperation"}}):_vm._e()],1),_c(__unplugin_components_7$1,{attrs:{"size":"24","indeterminate":_vm.loading,"color":"primary"}})],1),_c(__unplugin_components_5,{staticClass:"mx-6"}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-2 py-2",attrs:{"align":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"auto"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 px-2",attrs:{"outlined":"","small":"","disabled":_vm.disableRun,"color":"primary"},on:{"click":function($event){return _vm.runLDAPOperation()}}},[_c(__unplugin_components_95,[_vm._v(" mdi-play ")]),_vm._v(" "+_vm._s(_vm.$t("actions.runExecute"))+" ")],1)],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mx-2",attrs:{"cols":"auto"}},[_c(__unplugin_components_2,{staticClass:"ma-0 pa-0",attrs:{"label":_vm.data.useAdmin ? _vm.$t('section.debug.asAdmin') : _vm.$t('section.debug.asUser'),"hide-details":"","dense":""},model:{value:(_vm.data.useAdmin),callback:function ($$v) {_vm.$set(_vm.data, "useAdmin", $$v);},expression:"data.useAdmin"}})],1)],1)],1)],1)};
var staticRenderFns$f = [];

/* unplugin-vue-components disabled *///
const __vue2_script$f = {
	data() {
		return {
			loading: false,
			error: false,
			errorMsg: "",
			data: {
				useAdmin: true,
				selectedLdapOperation: "",
				ldapOperations: []
			}
		}
	},
	mixins: [utilsMixin],
	computed: {
		disableRun() {
			if ((!this.data.selectedLdapOperation || this.data.selectedLdapOperation.length < 1)
				&& this.data.ldapOperations.length < 1)
				return true
			if (!this.data.ldapOperations.includes(this.data.selectedLdapOperation)) return true
			return false
		},
	},
	mounted() {
		this.refreshAction();
	},
	methods: {
		getSelectTitle() {
			return this.$tc("section.debug.ldapOperation", 2)
		},
		resetError() {
			this.error = false;
			this.errorMsg = "";
		},
		async runLDAPOperation() {
			let opExec = await new Debug({});
			await opExec.action({
				operation: this.data.selectedLdapOperation,
				use_admin: this.data.useAdmin,
				extra_args: {}
			})
				.then(response => {
					console.log(response);
				})
				.catch(e => {
					console.error(e);
				});
		},
		async getLDAPOperations() {
			this.loading = true;
			let operationList = await new Debug({});
			await operationList.list()
				.then(response => {
					this.data.ldapOperations = response.data;
					this.resetError();
					notificationBus.$emit('createNotification',
						{
							message: (this.$tc("section.debug.ldapOperation", this.data.ldapOperations.length) + " " + this.$tc("words.loaded.f", this.data.ldapOperations.length)).toUpperCase(),
							type: 'success'
						}
					);
					setTimeout(() => { this.loading = false; }, 500);
				})
				.catch(e => {
					console.error(e);
					this.loading = false;
					this.error = true;
					this.errorMsg = this.getMessageForCode(e);
					notificationBus.$emit('createNotification',
						{
							message: this.errorMsg,
							type: 'error'
						}
					);
				});
			this.$emit('done');
		},
		refreshAction() {
			this.getLDAPOperations();
		}
	}
};
const __cssModules$f = {};
var __component__$f = /*#__PURE__*/normalizeComponent(
  __vue2_script$f,
  render$f,
  staticRenderFns$f,
  false,
  __vue2_injectStyles$f,
  null,
  null,
  null
);

function __vue2_injectStyles$f (context) {
  for(let o in __cssModules$f){
    this[o] = __cssModules$f[o];
  }
}

var DebugView = /*#__PURE__*/(function () { return __component__$f.exports })();

class GPO extends ApiModel {

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async list() {
        return await interlock_backend.call('gpo/list')
    }
}

var render$e = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_0$2,{staticClass:"py-3 px-2 mt-2 mb-2",attrs:{"headers":this.tableData.headers,"items":this.tableData.items,"custom-sort":_vm.sortNullLast,"loading":_vm.loading,"search":_vm.searchString,"footer-props":{
		'items-per-page-options': [10, 25, 50, 100, -1]
	},"sort-by":"cn"},scopedSlots:_vm._u([{key:"top",fn:function(){return [_c(__unplugin_components_91,{staticClass:"px-2 mx-1 py-0 my-0",attrs:{"align":"center"}},[_c(__unplugin_components_89,{staticClass:"mx-2",attrs:{"clearable":"","label":_vm.$t('actions.search')},model:{value:(_vm.searchString),callback:function ($$v) {_vm.searchString=$$v;},expression:"searchString"}}),_c(__unplugin_components_91,{staticClass:"pa-0 px-4",staticStyle:{"max-width":"fit-content"},attrs:{"justify":"end"}},[_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":_vm.listGPOItems}}),_c(__unplugin_components_94,{staticClass:"pa-2 mx-2",attrs:{"disabled":_vm.loading || _vm.readonly,"color":"primary"},on:{"click":false}},[_c(__unplugin_components_95,{staticClass:"ma-0 pa-0"},[_vm._v("mdi-plus")]),_vm._v(" "+_vm._s(_vm.$t('actions.addN') + ' ' + _vm.$tc('classes.gpo.short', 1))+" ")],1)],1)],1)]},proxy:true},{key:"item.actions",fn:function(ref){
	var item = ref.item;
return [_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
	var on = ref.on;
	var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({attrs:{"icon":"","rounded":"","small":"","disabled":_vm.loading || _vm.readonly},on:{"click":function($event){return _vm.fetchGPO(item, false)}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":"","color":"primary"}},[_vm._v(" mdi-eye ")])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('actions.view')))])])]}}],null,true)})};
var staticRenderFns$e = [];

/* unplugin-vue-components disabled *///

const __vue2_script$e = {
	name: 'gpoView',
	mixins: [validationMixin, utilsMixin],
	data() {
		return {
			readonly: false,
			fetchingData: false,
			tableData: {
				headers: [],
				items: []
			},
			searchString: "",
			loading: false,
			error: false,
			editableForm: false,
		}
	},
	methods: {
		// Reset Data Table variables
		resetDataTable() {
			this.tableData.headers = [];
			this.tableData.items = [];
		},
		// GPO Actions
		async listGPOItems(emitNotif = true) {
			this.loading = true;
			this.error = false;
			this.tableData.headers = [];
			this.tableData.items = [];
			await new GPO({}).list()
				.then(response => {
					let gpoHeaders = response.headers;
					let gpos = response.gpos;
					// Reset Headers Array every time you list to avoid infinite header multiplication
					this.resetDataTable();
					let headerDict = {};
					gpoHeaders.forEach(header => {
						headerDict = {};
						headerDict.text = this.$t('attribute.ldap.' + header);
						headerDict.value = header;
						if (header == 'hasMembers') {
							headerDict.sortable = false;
							headerDict.align = 'center';
						}
						this.tableData.headers.push(headerDict);
					});
					headerDict = {};
					headerDict.text = this.$t('actions.label');
					headerDict.value = 'actions';
					headerDict.align = 'center';
					headerDict.sortable = false;
					this.tableData.headers.push(headerDict);
					this.tableData.items = gpos;
					this.loading = false;
					this.error = false;
					if (emitNotif == true)
						notificationBus.$emit('createNotification',
							{ message: (this.$tc("classes.gpo.short", gpos.length) + " " + this.$tc("words.loaded.m", gpos.length)).toUpperCase(), type: 'success' }
						);
				})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
					notificationBus.$emit('createNotification',
						{ message: this.getMessageForCode(error), type: 'error' }
					);
				});
		},
		async fetchGPO(item, isEditable = false, refreshAnim = true) {
			return false
		},
	}
};
const __cssModules$e = {};
var __component__$e = /*#__PURE__*/normalizeComponent(
  __vue2_script$e,
  render$e,
  staticRenderFns$e,
  false,
  __vue2_injectStyles$e,
  null,
  null,
  null
);

function __vue2_injectStyles$e (context) {
  for(let o in __cssModules$e){
    this[o] = __cssModules$e[o];
  }
}

var GpoView = /*#__PURE__*/(function () { return __component__$e.exports })();

var render$d = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"my-4"},[_c(__unplugin_components_91,{staticClass:"ma-2",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_5,{staticClass:"mx-6"}),_c('h1',[_vm._v(_vm._s(_vm.getViewTitle()))]),_c(__unplugin_components_5,{staticClass:"mx-6"})],1),(_vm.viewTitle == 'home')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(HomeViewContainer,{ref:"HomeViewContainer",attrs:{"viewTitle":_vm.viewTitle,"init-load":_vm.initLoad,"requestRefresh":undefined,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction}})],1):_vm._e(),(_vm.viewTitle == 'applications')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(ApplicationView,{ref:"ApplicationView",attrs:{"viewTitle":_vm.viewTitle,"requestRefresh":undefined,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction}})],1):_vm._e(),(_vm.viewTitle == 'ldap-dirtree')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(DirtreeView,{ref:"DirtreeView",attrs:{"viewTitle":_vm.viewTitle,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction,"goToUser":_vm.goToUser,"goToGroup":_vm.goToGroup}})],1):_vm._e(),(_vm.viewTitle == 'django-users')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(UserView,{ref:"DjangoUserView",attrs:{"viewTitle":_vm.viewTitle,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction,"goToGroup":_vm.goToGroup}})],1):_vm._e(),(_vm.viewTitle == 'application-groups')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(GroupView,{ref:"ApplicationGroupView",attrs:{"viewTitle":_vm.viewTitle,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction}})],1):_vm._e(),(_vm.viewTitle == 'ldap-users')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(UserView,{ref:"LdapUserView",attrs:{"viewTitle":_vm.viewTitle,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction,"goToGroup":_vm.goToGroup}})],1):_vm._e(),(_vm.viewTitle == 'ldap-groups')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(GroupView,{ref:"LdapGroupView",attrs:{"viewTitle":_vm.viewTitle,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction}})],1):_vm._e(),(_vm.viewTitle == 'ldap-dns')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(dnsView,{ref:"dnsView",attrs:{"viewTitle":_vm.viewTitle,"snackbarTimeout":this.snackbarTimeout},on:{"done":_vm.emitDone,"refresh":_vm.refreshAction}})],1):_vm._e(),(_vm.viewTitle == 'ldap-gpo')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c('GpoView',{ref:"gpoView",staticClass:"my-2 mb-4",attrs:{"viewTitle":_vm.viewTitle},on:{"done":_vm.emitDone}})],1):_vm._e(),(_vm.viewTitle == 'settings')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(SettingsCard,{ref:"SettingsView",staticClass:"my-2 mb-4",attrs:{"viewTitle":_vm.viewTitle},on:{"done":_vm.emitDone,"refreshDomain":function($event){return _vm.refreshDomainAction()}}})],1):_vm._e(),(_vm.viewTitle == 'logs')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(LogView,{ref:"LogView",staticClass:"my-2 mb-4",attrs:{"viewTitle":_vm.viewTitle},on:{"done":_vm.emitDone}})],1):_vm._e(),(_vm.viewTitle == 'debug')?_c(__unplugin_components_10$1,{class:_vm.getContainerClasses()},[_c(DebugView,{ref:"DebugView",staticClass:"my-2 mb-4",attrs:{"viewTitle":_vm.viewTitle},on:{"done":_vm.emitDone}})],1):_vm._e()],1)};
var staticRenderFns$d = [];

/* unplugin-vue-components disabled */var ModularViewContainer_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$d = {
	name: 'ModularViewContainer',
	mixins: [validationMixin],
	components: {
		HomeViewContainer,
		ApplicationView,
		UserView,
		GroupView,
		DirtreeView,
		dnsView,
		SettingsCard,
		LogView,
		DebugView,
		GpoView
	},
	props: {
		viewTitle: String,
		viewIndex: Number,
		langChanged: Boolean,
		requestRefresh: String,
		initLoad: Boolean,
		mobile: Boolean,
	},
	data() {
		return {
			containerClasses: [
				"max-width-change"
			],
			refreshOnClose: false,
			userRefreshLoading: false,
			error: false,
			snackbarMessage: "",
			snackbarIcon: "",
			snackbarColor: "",
			snackbarClasses: "",
			snackbar: false,
			snackbarTimeout: 2e3,
		}
	},
	watch: {
		langChanged: {
			handler: function () {
				switch (this.viewTitle) {
					case 'applications':
						this.$refs.ApplicationView.reloadDataTableHeaders();
						break;
					case 'ldap-users':
					case 'django-users':
						this.$refs.UserView.reloadDataTableHeaders();
						break;
					case 'ldap-groups':
					case 'application-groups':
						this.$refs.GroupView.reloadDataTableHeaders();
						break;
					case 'logs':
						this.$refs.LogView.reloadDataTableHeaders();
						break;
					case 'ldap-dns':
						this.$refs.dnsView.reloadDataTableHeaders();
						break;
				}
			}
		},
		requestRefresh(newValue) {
			this.$emit('loading');
			switch (newValue) {
				case 'home':
					if (this.$refs.HomeViewContainer != undefined) {
						console.log("Requested refresh for view component " + newValue);
						this.$refs.HomeViewContainer.fetchHomeInfo();
					}
					break;
				case 'applications':
					if (this.$refs.ApplicationView != undefined) {
						console.log("Requested refresh for view component " + newValue);
						this.$refs.ApplicationView.listApplicationItems(true);
					}
					break;
				case 'ldap-dirtree':
					if (this.$refs.DirtreeView != undefined) {
						console.log("Requested refresh for view component " + newValue);
						this.$refs.DirtreeView.resetSearch();
						this.$refs.DirtreeView.resetDirtree(true);
					}
					break;
				case 'ldap-users':
					if (this.$refs.LdapUserView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.LdapUserView.resetSearch();
						this.$refs.LdapUserView.listUserItems(true);
					}
					break;
				case 'django-users':
					if (this.$refs.DjangoUserView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.DjangoUserView.resetSearch();
						this.$refs.DjangoUserView.listUserItems(true);
					}
					break;
				case 'ldap-groups':
					if (this.$refs.LdapGroupView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.LdapGroupView.resetSearch();
						this.$refs.LdapGroupView.listGroupItems(true);
					}
					break;
				case 'settings':
					if (this.$refs.SettingsView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.SettingsView.refreshSettings(true, true);
					}
					break;
				case 'logs':
					if (this.$refs.LogView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.LogView.resetSearch();
						this.$refs.LogView.listLogs(true);
					}
					break;
				case 'ldap-dns':
					if (this.$refs.dnsView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.dnsView.getDNSData();
					}
					break;
				case 'debug':
					if (this.$refs.DebugView != undefined) {
						console.log("Requested refresh for component " + newValue);
						this.$refs.DebugView.refreshAction();
					}
					break;
				default:
					if (newValue)
						console.log("Requested refresh for component " + newValue);
					break;
			}
			this.emitDone();
		},
	},
	methods: {
		emitDone() {
			this.$emit('done');
		},
		getContainerClasses() {
			let _c = [...this.containerClasses];
			// Add classes to desktop
			// if (!this.mobile) {
			// }
			return _c.join(" ");
		},
		getViewTitle() {
			let translation_key = "category.header." + this.viewTitle;
			if (translation_key == this.$t(translation_key))
				return this.$t("category." + this.viewTitle)
			return this.$t(translation_key)
		},
		goToUser(user) {
			this.$emit('goToUser', user);
		},
		goToGroup(group) {
			this.$emit('goToGroup', group);
		},
		async saveData(key, data) {
			switch (key) {
				case 'userDialog':
					this.refreshOnClose = true;
					break;
				default:
					console.log(key);
					console.log(data);
					break;
			}
		},
		refreshDomainAction() {
			this.$emit('refreshDomain');
		},
		refreshAction() {
			// Reset all filters if refreshing dirtree view
			if (this.viewTitle == 'ldap-dirtree')
				Object.keys(this.itemTypes).forEach(key => {
					this.itemTypes[key]['filtered'] = false;
				});
			this.$emit('refresh');
			this.userRefreshLoading = false;
			this.refreshOnClose = false;
		}
	}
};
const __cssModules$d = {};
var __component__$d = /*#__PURE__*/normalizeComponent(
  __vue2_script$d,
  render$d,
  staticRenderFns$d,
  false,
  __vue2_injectStyles$d,
  null,
  null,
  null
);

function __vue2_injectStyles$d (context) {
  for(let o in __cssModules$d){
    this[o] = __cssModules$d[o];
  }
}

var ModularViewContainer = /*#__PURE__*/(function () { return __component__$d.exports })();

var render$c = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_0$1,{ref:"mainNavDrawer",staticClass:"ma-0 pa-0",attrs:{"id":"main-nav-drawer","expand-on-hover":!_vm.navDrawerKeepOpen && !_vm.mobile,"absolute":!_vm.navDrawerKeepOpen && !_vm.mobile,"mini-variant":!_vm.navDrawerOpen && !_vm.mobile,"permanent":!_vm.mobile,"temporary":_vm.mobile,"fixed":_vm.mobile,"bottom":_vm.mobile,"width":_vm.$vuetify.breakpoint.lgAndUp ? 380 : 280},scopedSlots:_vm._u([{key:"prepend",fn:function(){return [(!_vm.mobile)?_c(__unplugin_components_4$1,{attrs:{"dense":"","nav":"","expand":""}},[_c(__unplugin_components_9$2,{on:{"click":_vm.setNavDrawerKeepOpen}},[_c(__unplugin_components_32,{staticClass:"align-self-center justify-center"},[_c(VSlideXReverseTransition,[(!_vm.navDrawerKeepOpen)?_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v("mdi-arrow-expand-right")]):_vm._e()],1)],1),_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.navDrawerKeepOpen ? _vm.$t("nav.collapse") : _vm.$t("nav.keepOpen"))+" ")])],1),_c(__unplugin_components_10$2,{staticClass:"my-0"},[_c(VSlideXTransition,[(_vm.navDrawerKeepOpen)?_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v("mdi-arrow-collapse-left")]):_vm._e()],1)],1)],1)],1):_vm._e()]},proxy:true}]),model:{value:(_vm.navDrawerOpen),callback:function ($$v) {_vm.navDrawerOpen=$$v;},expression:"navDrawerOpen"}},[_c(__unplugin_components_4$1,{attrs:{"dense":"","nav":"","expand":""}},[_vm._l((_vm.topTabs),function(tab){return _c(__unplugin_components_9$2,{key:tab.index,attrs:{"color":_vm.componentColor,"input-value":tab.title == _vm.selectedTabTitle,"disabled":!tab.enabled || _vm.lockNavTabs},on:{"click":function($event){return _vm.updateSelectedTab(tab.index)}}},[_c(__unplugin_components_32,[_c(__unplugin_components_95,[_vm._v(_vm._s(tab.icon))])],1),_c(VListItemContent,[_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t("category." + tab.title))+" ")])],1),_c(__unplugin_components_10$2)],1)}),_vm._l((_vm.navGroups),function(navGroupSettings,navGroup){return _c(__unplugin_components_18$1,{key:navGroup,attrs:{"group":navGroup,"color":_vm.componentColor,"disabled":!navGroupSettings.enabled,"append-icon":!navGroupSettings.enabled ? 'mdi-minus' : undefined,"multiple":""},scopedSlots:_vm._u([{key:"activator",fn:function(){return [_c(__unplugin_components_42,{attrs:{"disabled":!('tooltip' in navGroupSettings) ||
						navGroupSettings.tooltip === undefined ||
						navGroupSettings === null,"right":"","color":"primary"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
						var on = ref.on;
						var attrs = ref.attrs;
return [_c(__unplugin_components_9$2,_vm._g(_vm._b({staticClass:"ma-0 pa-0",attrs:{"dense":""}},'v-list-item',attrs,false),on),[_c(__unplugin_components_32,[_c(__unplugin_components_95,[_vm._v(" "+_vm._s(navGroupSettings.icon)+" ")])],1),_c(VListItemTitle,[_vm._v(_vm._s(_vm.$t("navgroup." + navGroup)))])],1)]}}],null,true)},[_c('span',[_vm._v(_vm._s(navGroupSettings.tooltip))])])]},proxy:true}],null,true),model:{value:(_vm.openedGroup[navGroup]),callback:function ($$v) {_vm.$set(_vm.openedGroup, navGroup, $$v);},expression:"openedGroup[navGroup]"}},_vm._l((_vm.getVisibleTabsInGroup(navGroup)),function(tab){return _c(__unplugin_components_9$2,{key:tab.index,attrs:{"dense":"","color":_vm.componentColor,"input-value":tab.title == _vm.selectedTabTitle,"disabled":!tab.enabled || _vm.lockNavTabs},on:{"click":function($event){return _vm.updateSelectedTab(tab.index)}}},[_c(__unplugin_components_32,[_c(__unplugin_components_95,[_vm._v(_vm._s(tab.icon))])],1),_c(VListItemContent,[(_vm.$vuetify.breakpoint.lg && tab.enableShortName == true)?_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t("category." + tab.title + "_short"))+" ")]):_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t("category." + tab.title))+" ")])],1),_c(__unplugin_components_10$2)],1)}),1)}),_vm._l((_vm.getVisibleTabsInGroup('_bot')),function(tab){return _c(__unplugin_components_9$2,{key:tab.index,attrs:{"color":_vm.componentColor,"input-value":tab.title == _vm.selectedTabTitle,"disabled":!tab.enabled || _vm.lockNavTabs},on:{"click":function($event){return _vm.updateSelectedTab(tab.index)}}},[_c(__unplugin_components_32,[_c(__unplugin_components_95,[_vm._v(_vm._s(tab.icon))])],1),_c(VListItemContent,[(_vm.$vuetify.breakpoint.lg && tab.enableShortName == true)?_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t("category." + tab.title + "_short"))+" ")]):_c(VListItemTitle,[_vm._v(" "+_vm._s(_vm.$t("category." + tab.title))+" ")])],1),_c(__unplugin_components_10$2)],1)})],2)],1)};
var staticRenderFns$c = [];

/* unplugin-vue-components disabled *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

const __vue2_script$c = {
	data() {
		return {
			navDrawerOpen: false,
			navDrawerKeepOpen: false,
			openedGroup: {},
			componentColor: "primary-45",
		}
	},
	props: {
		mobile: {
			type: Boolean,
			default: false
		},
		expandedOnCreate: Boolean,
		selectedTab: Number,
		selectedTabTitle: String,
		navGroups: Object,
		topTabs: Array,
		bottomTabs: Array,
		lockNavTabs: Boolean,
		getVisibleTabsInGroup: Function
	},
	computed: {
		cookieNavDrawerKeepOpen: () => {
			let _v = localStorage.getItem("nav");
			if (_v !== "true" && _v !== "false")
				return undefined
			return localStorage.getItem("nav") === "true"
		}
	},
	created() {
		if (this.expandedOnCreate === true && this.cookieNavDrawerKeepOpen !== false)
			this.navDrawerKeepOpen = true;
		if (!this.mobile)
			this.navDrawerOpen = true;
	},
	methods: {
		closeAllNavGroups() {
			this.openedGroup = {};
		},
		setNavDrawerKeepOpen() {
			this.navDrawerKeepOpen = !this.navDrawerKeepOpen;
			localStorage.setItem("nav", this.navDrawerKeepOpen);
		},
		updateSelectedTab(tabIndex) {
			this.$emit("updateSelectedTab", tabIndex);
		},
		toggle() {
			this.navDrawerOpen = !this.navDrawerOpen;
		},
	}
};
const __cssModules$c = {};
var __component__$c = /*#__PURE__*/normalizeComponent(
  __vue2_script$c,
  render$c,
  staticRenderFns$c,
  false,
  __vue2_injectStyles$c,
  null,
  null,
  null
);

function __vue2_injectStyles$c (context) {
  for(let o in __cssModules$c){
    this[o] = __cssModules$c[o];
  }
}

var __unplugin_components_23 = /*#__PURE__*/(function () { return __component__$c.exports })();

var render$b = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_0$3,{style:(_vm.fullWidth || this.$vuetify.breakpoint.smAndDown ? '' : 'max-width: 25ch;'),attrs:{"id":"v-select_language_selector","append-icon":"mdi-earth","dark":_vm.dark,"light":_vm.light,"items":_vm.getEnabledLanguages,"hide-details":true,"outlined":"","dense":""},on:{"input":function($event){return _vm.changeLanguage()}},scopedSlots:_vm._u([{key:"selection",fn:function(data){return [_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center"}},[_vm._v(" "+_vm._s(data.item.text + ' (' + data.item.value.toUpperCase() + ')')+" "),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [(!_vm.localeIsComplete(data.item.value))?_c(__unplugin_components_95,_vm._g(_vm._b({staticClass:"ml-1",attrs:{"color":"accent-45-s"}},'v-icon',attrs,false),on),[_vm._v(" mdi-alert-circle ")]):_vm._e()]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('locale.incomplete.' + data.item.value)))])])],1)]}},{key:"item",fn:function(data){return [_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center"}},[_vm._v(" "+_vm._s(data.item.text + ' (' + data.item.value.toUpperCase() + ')')+" "),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [(!_vm.localeIsComplete(data.item.value))?_c(__unplugin_components_95,_vm._g(_vm._b({staticClass:"ml-1",attrs:{"color":"accent-45-s"}},'v-icon',attrs,false),on),[_vm._v(" mdi-alert-circle ")]):_vm._e()]}}],null,true)},[_c('span',[_vm._v(_vm._s(_vm.$t('locale.incomplete.' + data.item.value)))])])],1)]}}]),model:{value:(_vm.language),callback:function ($$v) {_vm.language=$$v;},expression:"language"}})};
var staticRenderFns$b = [];

/* unplugin-vue-components disabled */var LanguageSelector_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///
const __vue2_script$b = {
	name: 'LanguageSelector',
	props: {
		dark: Boolean,
		light: Boolean,
		fullWidth: {
			type: Boolean,
			default: false
		}
	},
	data() {
		return {
			languages: [
				{ text: 'English', value: "en" },
				{ text: 'Español', value: "es" },
				{ text: 'Français', value: "fr" },
			],
			language: this.$i18n.locale
		}
	},
	async mounted() {
		this.verifyLocale();
	},
	computed: {
		getEnabledLanguages() {
			let r = [];
			this.languages.forEach(locale => {
				if (supported_locales.includes(locale.value))
					r.push(locale);
			});
			return r
		},
		breakpointXS() {
			if (this.$vuetify.breakpoint.xs)
				return true
			else
				return false
		},
		breakpointSM() {
			if (this.$vuetify.breakpoint.sm)
				return true
			else
				return false
		},
	},
	methods: {
		localeIsComplete(locale) {
			return !incomplete_locales.includes(locale)
		},
		async verifyLocale() {
			let setLang = localStorage.getItem('lang.locale');
			if (setLang == undefined || setLang == null) {
				let browserlang = navigator.language.toLowerCase();
				let locale_set = false;
				supported_locales.forEach(lang => {
					if (browserlang.includes(lang.value)) {
						this.$i18n.locale = lang.value;
						locale_set = true;
					}
				});
				if (!locale_set)
					this.$i18n.locale = "en";
				this.language = this.$i18n.locale;
				console.log("Using locale: " + this.language);
				localStorage.setItem('lang.locale', this.$i18n.locale);
			}
			else {
				this.language = setLang;
				this.$i18n.locale = setLang;
			}
		},
		changeLanguage: function () {
			this.$i18n.locale = this.language;
			localStorage.setItem('lang.locale', this.language);
			this.$emit('updateTabSliders');
			const html = document.documentElement;
			html.setAttribute('lang', this.$i18n.locale);
		},
	}
};
const __cssModules$b = {};
var __component__$b = /*#__PURE__*/normalizeComponent(
  __vue2_script$b,
  render$b,
  staticRenderFns$b,
  false,
  __vue2_injectStyles$b,
  null,
  null,
  null
);

function __vue2_injectStyles$b (context) {
  for(let o in __cssModules$b){
    this[o] = __cssModules$b[o];
  }
}

var LanguageSelector = /*#__PURE__*/(function () { return __component__$b.exports })();

var render$a = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_0$4,{staticClass:"ma-0 pa-0",attrs:{"open-on-focus":"","open-on-hover":"","offset-y":"","dense":_vm.denseMenu},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({class:'ma-0 pa-0 ' + _vm.extraClasses,attrs:{"color":_vm.color,"dark":"","outlined":"","min-width":_vm.minWidth,"small":_vm.denseActivator}},'v-btn',attrs,false),on),[(_vm.icon.length > 0)?_c(__unplugin_components_95,{staticClass:"mr-2"},[_vm._v(" "+_vm._s(_vm.icon)+" ")]):_vm._e(),_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.title"))+" "),_c(__unplugin_components_95)],1)]}}]),model:{value:(_vm.menu_expanded),callback:function ($$v) {_vm.menu_expanded=$$v;},expression:"menu_expanded"}},[_c(__unplugin_components_4$1,{staticClass:"px-2",attrs:{"flat":"","dense":_vm.denseMenu}},[_c(__unplugin_components_8,[_c(__unplugin_components_9$2,[_vm._v(" "+_vm._s(_vm.username)+" ")])],1),_c(__unplugin_components_5,{staticClass:"my-1 mx-4",staticStyle:{"border-color":"var(--v-primary-base)"}}),_c(__unplugin_components_8,_vm._l((_vm.entries),function(v,k){return _c(__unplugin_components_9$2,{key:k,attrs:{"link":""},on:{"click":function($event){return _vm.doFn(v.action)}}},[_c(__unplugin_components_10$2,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_91,[(v.prepend_icon.length > 0)?_c(__unplugin_components_95,{staticClass:"mr-2",attrs:{"color":"primary"}},[_vm._v(" "+_vm._s(v.prepend_icon)+" ")]):_vm._e(),_vm._v(" "+_vm._s(_vm.$t(v.i18n_string))+" "),(v.append_icon.length > 0)?_c(__unplugin_components_95,{staticClass:"ml-2",attrs:{"color":"primary"}},[_vm._v(" "+_vm._s(v.append_icon)+" ")]):_vm._e()],1)],1)],1)}),1)],1)],1)};
var staticRenderFns$a = [];

/* unplugin-vue-components disabled *///

const __vue2_script$a = {
	name: "UserAccountDropdown",
	mixins: [utilsMixin],
	props: {
		color: String,
		extraClasses: String,
		denseActivator: Boolean,
		denseMenu: {
			type: Boolean,
			default: true
		},
		username: String,
		icon: String,
		showPreferencesMenu: Boolean
	},
	created() {
		if (this.showPreferencesMenu)
			this.entries.unshift(
				{
					i18n_string: "userAccountDropdown.changePreferences",
					action: "this.openAccountSettings",
					prepend_icon: "mdi-cog",
					append_icon: ""
				}
			);
	},
	data() {
		return {
			menu_expanded: false,
			entries: [
				{
					i18n_string: "userAccountDropdown.logout",
					action: "this.emitLogout",
					prepend_icon: "mdi-logout",
					append_icon: ""
				}
			]
		}
	},
	computed: {
		minWidth() {
			return String(this.username.length + 4) + "ch"
		}
	},
	methods: {
		emitLogout() {
			this.$emit('logout');
		},
		openAccountSettings() {
			this.$emit('openSettings');
		},
		doFn(f) {
			eval(f + "()");
		}
	}
};
const __cssModules$a = {};
var __component__$a = /*#__PURE__*/normalizeComponent(
  __vue2_script$a,
  render$a,
  staticRenderFns$a,
  false,
  __vue2_injectStyles$a,
  null,
  null,
  null
);

function __vue2_injectStyles$a (context) {
  for(let o in __cssModules$a){
    this[o] = __cssModules$a[o];
  }
}

var UserAccountDropdown = /*#__PURE__*/(function () { return __component__$a.exports })();

/*!
 * qrcode.vue v1.7.0
 * A Vue component to generate QRCode.
 * © 2017-2019 @scopewu(https://github.com/scopewu)
 * MIT License.
 */
var mode = {
  MODE_NUMBER: 1 << 0,
  MODE_ALPHA_NUM: 1 << 1,
  MODE_8BIT_BYTE: 1 << 2,
  MODE_KANJI: 1 << 3
};

function QR8bitByte(data) {
  this.mode = mode.MODE_8BIT_BYTE;
  this.data = data;
}

QR8bitByte.prototype = {
  getLength: function (buffer) {
    return this.data.length;
  },
  write: function (buffer) {
    for (var i = 0; i < this.data.length; i++) {
      // not JIS ...
      buffer.put(this.data.charCodeAt(i), 8);
    }
  }
};
var _8BitByte = QR8bitByte;

var ErrorCorrectLevel = {
  L: 1,
  M: 0,
  Q: 3,
  H: 2
};

function QRRSBlock(totalCount, dataCount) {
  this.totalCount = totalCount;
  this.dataCount = dataCount;
}

QRRSBlock.RS_BLOCK_TABLE = [// L
// M
// Q
// H
// 1
[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2
[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3
[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4		
[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5
[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6
[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7		
[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8
[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9
[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10		
[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11
[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12
[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13
[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14
[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15
[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16
[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17
[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18
[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19
[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20
[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21
[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22
[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23
[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24
[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25
[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26
[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27
[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28
[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29
[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30
[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31
[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32
[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33
[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34
[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35
[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36
[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37
[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38
[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39
[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40
[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];

QRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {
  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);

  if (rsBlock == undefined) {
    throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
  }

  var length = rsBlock.length / 3;
  var list = new Array();

  for (var i = 0; i < length; i++) {
    var count = rsBlock[i * 3 + 0];
    var totalCount = rsBlock[i * 3 + 1];
    var dataCount = rsBlock[i * 3 + 2];

    for (var j = 0; j < count; j++) {
      list.push(new QRRSBlock(totalCount, dataCount));
    }
  }

  return list;
};

QRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {
  switch (errorCorrectLevel) {
    case ErrorCorrectLevel.L:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];

    case ErrorCorrectLevel.M:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];

    case ErrorCorrectLevel.Q:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];

    case ErrorCorrectLevel.H:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];

    default:
      return undefined;
  }
};

var RSBlock = QRRSBlock;

function QRBitBuffer() {
  this.buffer = new Array();
  this.length = 0;
}

QRBitBuffer.prototype = {
  get: function (index) {
    var bufIndex = Math.floor(index / 8);
    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
  },
  put: function (num, length) {
    for (var i = 0; i < length; i++) {
      this.putBit((num >>> length - i - 1 & 1) == 1);
    }
  },
  getLengthInBits: function () {
    return this.length;
  },
  putBit: function (bit) {
    var bufIndex = Math.floor(this.length / 8);

    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }

    if (bit) {
      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
    }

    this.length++;
  }
};
var BitBuffer = QRBitBuffer;

var QRMath = {
  glog: function (n) {
    if (n < 1) {
      throw new Error("glog(" + n + ")");
    }

    return QRMath.LOG_TABLE[n];
  },
  gexp: function (n) {
    while (n < 0) {
      n += 255;
    }

    while (n >= 256) {
      n -= 255;
    }

    return QRMath.EXP_TABLE[n];
  },
  EXP_TABLE: new Array(256),
  LOG_TABLE: new Array(256)
};

for (var i = 0; i < 8; i++) {
  QRMath.EXP_TABLE[i] = 1 << i;
}

for (var i = 8; i < 256; i++) {
  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
}

for (var i = 0; i < 255; i++) {
  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
}

var math = QRMath;

function QRPolynomial(num, shift) {
  if (num.length == undefined) {
    throw new Error(num.length + "/" + shift);
  }

  var offset = 0;

  while (offset < num.length && num[offset] == 0) {
    offset++;
  }

  this.num = new Array(num.length - offset + shift);

  for (var i = 0; i < num.length - offset; i++) {
    this.num[i] = num[i + offset];
  }
}

QRPolynomial.prototype = {
  get: function (index) {
    return this.num[index];
  },
  getLength: function () {
    return this.num.length;
  },
  multiply: function (e) {
    var num = new Array(this.getLength() + e.getLength() - 1);

    for (var i = 0; i < this.getLength(); i++) {
      for (var j = 0; j < e.getLength(); j++) {
        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));
      }
    }

    return new QRPolynomial(num, 0);
  },
  mod: function (e) {
    if (this.getLength() - e.getLength() < 0) {
      return this;
    }

    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));
    var num = new Array(this.getLength());

    for (var i = 0; i < this.getLength(); i++) {
      num[i] = this.get(i);
    }

    for (var i = 0; i < e.getLength(); i++) {
      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);
    } // recursive call


    return new QRPolynomial(num, 0).mod(e);
  }
};
var Polynomial = QRPolynomial;

var QRMaskPattern = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
};
var QRUtil = {
  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],
  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
  getBCHTypeInfo: function (data) {
    var d = data << 10;

    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);
    }

    return (data << 10 | d) ^ QRUtil.G15_MASK;
  },
  getBCHTypeNumber: function (data) {
    var d = data << 12;

    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);
    }

    return data << 12 | d;
  },
  getBCHDigit: function (data) {
    var digit = 0;

    while (data != 0) {
      digit++;
      data >>>= 1;
    }

    return digit;
  },
  getPatternPosition: function (typeNumber) {
    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
  },
  getMask: function (maskPattern, i, j) {
    switch (maskPattern) {
      case QRMaskPattern.PATTERN000:
        return (i + j) % 2 == 0;

      case QRMaskPattern.PATTERN001:
        return i % 2 == 0;

      case QRMaskPattern.PATTERN010:
        return j % 3 == 0;

      case QRMaskPattern.PATTERN011:
        return (i + j) % 3 == 0;

      case QRMaskPattern.PATTERN100:
        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;

      case QRMaskPattern.PATTERN101:
        return i * j % 2 + i * j % 3 == 0;

      case QRMaskPattern.PATTERN110:
        return (i * j % 2 + i * j % 3) % 2 == 0;

      case QRMaskPattern.PATTERN111:
        return (i * j % 3 + (i + j) % 2) % 2 == 0;

      default:
        throw new Error("bad maskPattern:" + maskPattern);
    }
  },
  getErrorCorrectPolynomial: function (errorCorrectLength) {
    var a = new Polynomial([1], 0);

    for (var i = 0; i < errorCorrectLength; i++) {
      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));
    }

    return a;
  },
  getLengthInBits: function (mode$1, type) {
    if (1 <= type && type < 10) {
      // 1 - 9
      switch (mode$1) {
        case mode.MODE_NUMBER:
          return 10;

        case mode.MODE_ALPHA_NUM:
          return 9;

        case mode.MODE_8BIT_BYTE:
          return 8;

        case mode.MODE_KANJI:
          return 8;

        default:
          throw new Error("mode:" + mode$1);
      }
    } else if (type < 27) {
      // 10 - 26
      switch (mode$1) {
        case mode.MODE_NUMBER:
          return 12;

        case mode.MODE_ALPHA_NUM:
          return 11;

        case mode.MODE_8BIT_BYTE:
          return 16;

        case mode.MODE_KANJI:
          return 10;

        default:
          throw new Error("mode:" + mode$1);
      }
    } else if (type < 41) {
      // 27 - 40
      switch (mode$1) {
        case mode.MODE_NUMBER:
          return 14;

        case mode.MODE_ALPHA_NUM:
          return 13;

        case mode.MODE_8BIT_BYTE:
          return 16;

        case mode.MODE_KANJI:
          return 12;

        default:
          throw new Error("mode:" + mode$1);
      }
    } else {
      throw new Error("type:" + type);
    }
  },
  getLostPoint: function (qrCode) {
    var moduleCount = qrCode.getModuleCount();
    var lostPoint = 0; // LEVEL1

    for (var row = 0; row < moduleCount; row++) {
      for (var col = 0; col < moduleCount; col++) {
        var sameCount = 0;
        var dark = qrCode.isDark(row, col);

        for (var r = -1; r <= 1; r++) {
          if (row + r < 0 || moduleCount <= row + r) {
            continue;
          }

          for (var c = -1; c <= 1; c++) {
            if (col + c < 0 || moduleCount <= col + c) {
              continue;
            }

            if (r == 0 && c == 0) {
              continue;
            }

            if (dark == qrCode.isDark(row + r, col + c)) {
              sameCount++;
            }
          }
        }

        if (sameCount > 5) {
          lostPoint += 3 + sameCount - 5;
        }
      }
    } // LEVEL2


    for (var row = 0; row < moduleCount - 1; row++) {
      for (var col = 0; col < moduleCount - 1; col++) {
        var count = 0;
        if (qrCode.isDark(row, col)) count++;
        if (qrCode.isDark(row + 1, col)) count++;
        if (qrCode.isDark(row, col + 1)) count++;
        if (qrCode.isDark(row + 1, col + 1)) count++;

        if (count == 0 || count == 4) {
          lostPoint += 3;
        }
      }
    } // LEVEL3


    for (var row = 0; row < moduleCount; row++) {
      for (var col = 0; col < moduleCount - 6; col++) {
        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
          lostPoint += 40;
        }
      }
    }

    for (var col = 0; col < moduleCount; col++) {
      for (var row = 0; row < moduleCount - 6; row++) {
        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
          lostPoint += 40;
        }
      }
    } // LEVEL4


    var darkCount = 0;

    for (var col = 0; col < moduleCount; col++) {
      for (var row = 0; row < moduleCount; row++) {
        if (qrCode.isDark(row, col)) {
          darkCount++;
        }
      }
    }

    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;
    return lostPoint;
  }
};
var util = QRUtil;

function QRCode(typeNumber, errorCorrectLevel) {
  this.typeNumber = typeNumber;
  this.errorCorrectLevel = errorCorrectLevel;
  this.modules = null;
  this.moduleCount = 0;
  this.dataCache = null;
  this.dataList = [];
} // for client side minification


var proto = QRCode.prototype;

proto.addData = function (data) {
  var newData = new _8BitByte(data);
  this.dataList.push(newData);
  this.dataCache = null;
};

proto.isDark = function (row, col) {
  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
    throw new Error(row + "," + col);
  }

  return this.modules[row][col];
};

proto.getModuleCount = function () {
  return this.moduleCount;
};

proto.make = function () {
  // Calculate automatically typeNumber if provided is < 1
  if (this.typeNumber < 1) {
    var typeNumber = 1;

    for (typeNumber = 1; typeNumber < 40; typeNumber++) {
      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
      var buffer = new BitBuffer();
      var totalDataCount = 0;

      for (var i = 0; i < rsBlocks.length; i++) {
        totalDataCount += rsBlocks[i].dataCount;
      }

      for (var i = 0; i < this.dataList.length; i++) {
        var data = this.dataList[i];
        buffer.put(data.mode, 4);
        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
        data.write(buffer);
      }

      if (buffer.getLengthInBits() <= totalDataCount * 8) break;
    }

    this.typeNumber = typeNumber;
  }

  this.makeImpl(false, this.getBestMaskPattern());
};

proto.makeImpl = function (test, maskPattern) {
  this.moduleCount = this.typeNumber * 4 + 17;
  this.modules = new Array(this.moduleCount);

  for (var row = 0; row < this.moduleCount; row++) {
    this.modules[row] = new Array(this.moduleCount);

    for (var col = 0; col < this.moduleCount; col++) {
      this.modules[row][col] = null; //(col + row) % 3;
    }
  }

  this.setupPositionProbePattern(0, 0);
  this.setupPositionProbePattern(this.moduleCount - 7, 0);
  this.setupPositionProbePattern(0, this.moduleCount - 7);
  this.setupPositionAdjustPattern();
  this.setupTimingPattern();
  this.setupTypeInfo(test, maskPattern);

  if (this.typeNumber >= 7) {
    this.setupTypeNumber(test);
  }

  if (this.dataCache == null) {
    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
  }

  this.mapData(this.dataCache, maskPattern);
};

proto.setupPositionProbePattern = function (row, col) {
  for (var r = -1; r <= 7; r++) {
    if (row + r <= -1 || this.moduleCount <= row + r) continue;

    for (var c = -1; c <= 7; c++) {
      if (col + c <= -1 || this.moduleCount <= col + c) continue;

      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {
        this.modules[row + r][col + c] = true;
      } else {
        this.modules[row + r][col + c] = false;
      }
    }
  }
};

proto.getBestMaskPattern = function () {
  var minLostPoint = 0;
  var pattern = 0;

  for (var i = 0; i < 8; i++) {
    this.makeImpl(true, i);
    var lostPoint = util.getLostPoint(this);

    if (i == 0 || minLostPoint > lostPoint) {
      minLostPoint = lostPoint;
      pattern = i;
    }
  }

  return pattern;
};

proto.createMovieClip = function (target_mc, instance_name, depth) {
  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
  var cs = 1;
  this.make();

  for (var row = 0; row < this.modules.length; row++) {
    var y = row * cs;

    for (var col = 0; col < this.modules[row].length; col++) {
      var x = col * cs;
      var dark = this.modules[row][col];

      if (dark) {
        qr_mc.beginFill(0, 100);
        qr_mc.moveTo(x, y);
        qr_mc.lineTo(x + cs, y);
        qr_mc.lineTo(x + cs, y + cs);
        qr_mc.lineTo(x, y + cs);
        qr_mc.endFill();
      }
    }
  }

  return qr_mc;
};

proto.setupTimingPattern = function () {
  for (var r = 8; r < this.moduleCount - 8; r++) {
    if (this.modules[r][6] != null) {
      continue;
    }

    this.modules[r][6] = r % 2 == 0;
  }

  for (var c = 8; c < this.moduleCount - 8; c++) {
    if (this.modules[6][c] != null) {
      continue;
    }

    this.modules[6][c] = c % 2 == 0;
  }
};

proto.setupPositionAdjustPattern = function () {
  var pos = util.getPatternPosition(this.typeNumber);

  for (var i = 0; i < pos.length; i++) {
    for (var j = 0; j < pos.length; j++) {
      var row = pos[i];
      var col = pos[j];

      if (this.modules[row][col] != null) {
        continue;
      }

      for (var r = -2; r <= 2; r++) {
        for (var c = -2; c <= 2; c++) {
          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {
            this.modules[row + r][col + c] = true;
          } else {
            this.modules[row + r][col + c] = false;
          }
        }
      }
    }
  }
};

proto.setupTypeNumber = function (test) {
  var bits = util.getBCHTypeNumber(this.typeNumber);

  for (var i = 0; i < 18; i++) {
    var mod = !test && (bits >> i & 1) == 1;
    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
  }

  for (var i = 0; i < 18; i++) {
    var mod = !test && (bits >> i & 1) == 1;
    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
  }
};

proto.setupTypeInfo = function (test, maskPattern) {
  var data = this.errorCorrectLevel << 3 | maskPattern;
  var bits = util.getBCHTypeInfo(data); // vertical		

  for (var i = 0; i < 15; i++) {
    var mod = !test && (bits >> i & 1) == 1;

    if (i < 6) {
      this.modules[i][8] = mod;
    } else if (i < 8) {
      this.modules[i + 1][8] = mod;
    } else {
      this.modules[this.moduleCount - 15 + i][8] = mod;
    }
  } // horizontal


  for (var i = 0; i < 15; i++) {
    var mod = !test && (bits >> i & 1) == 1;

    if (i < 8) {
      this.modules[8][this.moduleCount - i - 1] = mod;
    } else if (i < 9) {
      this.modules[8][15 - i - 1 + 1] = mod;
    } else {
      this.modules[8][15 - i - 1] = mod;
    }
  } // fixed module


  this.modules[this.moduleCount - 8][8] = !test;
};

proto.mapData = function (data, maskPattern) {
  var inc = -1;
  var row = this.moduleCount - 1;
  var bitIndex = 7;
  var byteIndex = 0;

  for (var col = this.moduleCount - 1; col > 0; col -= 2) {
    if (col == 6) col--;

    while (true) {
      for (var c = 0; c < 2; c++) {
        if (this.modules[row][col - c] == null) {
          var dark = false;

          if (byteIndex < data.length) {
            dark = (data[byteIndex] >>> bitIndex & 1) == 1;
          }

          var mask = util.getMask(maskPattern, row, col - c);

          if (mask) {
            dark = !dark;
          }

          this.modules[row][col - c] = dark;
          bitIndex--;

          if (bitIndex == -1) {
            byteIndex++;
            bitIndex = 7;
          }
        }
      }

      row += inc;

      if (row < 0 || this.moduleCount <= row) {
        row -= inc;
        inc = -inc;
        break;
      }
    }
  }
};

QRCode.PAD0 = 0xEC;
QRCode.PAD1 = 0x11;

QRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {
  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
  var buffer = new BitBuffer();

  for (var i = 0; i < dataList.length; i++) {
    var data = dataList[i];
    buffer.put(data.mode, 4);
    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
    data.write(buffer);
  } // calc num max data.


  var totalDataCount = 0;

  for (var i = 0; i < rsBlocks.length; i++) {
    totalDataCount += rsBlocks[i].dataCount;
  }

  if (buffer.getLengthInBits() > totalDataCount * 8) {
    throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
  } // end code


  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
    buffer.put(0, 4);
  } // padding


  while (buffer.getLengthInBits() % 8 != 0) {
    buffer.putBit(false);
  } // padding


  while (true) {
    if (buffer.getLengthInBits() >= totalDataCount * 8) {
      break;
    }

    buffer.put(QRCode.PAD0, 8);

    if (buffer.getLengthInBits() >= totalDataCount * 8) {
      break;
    }

    buffer.put(QRCode.PAD1, 8);
  }

  return QRCode.createBytes(buffer, rsBlocks);
};

QRCode.createBytes = function (buffer, rsBlocks) {
  var offset = 0;
  var maxDcCount = 0;
  var maxEcCount = 0;
  var dcdata = new Array(rsBlocks.length);
  var ecdata = new Array(rsBlocks.length);

  for (var r = 0; r < rsBlocks.length; r++) {
    var dcCount = rsBlocks[r].dataCount;
    var ecCount = rsBlocks[r].totalCount - dcCount;
    maxDcCount = Math.max(maxDcCount, dcCount);
    maxEcCount = Math.max(maxEcCount, ecCount);
    dcdata[r] = new Array(dcCount);

    for (var i = 0; i < dcdata[r].length; i++) {
      dcdata[r][i] = 0xff & buffer.buffer[i + offset];
    }

    offset += dcCount;
    var rsPoly = util.getErrorCorrectPolynomial(ecCount);
    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);
    var modPoly = rawPoly.mod(rsPoly);
    ecdata[r] = new Array(rsPoly.getLength() - 1);

    for (var i = 0; i < ecdata[r].length; i++) {
      var modIndex = i + modPoly.getLength() - ecdata[r].length;
      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
    }
  }

  var totalCodeCount = 0;

  for (var i = 0; i < rsBlocks.length; i++) {
    totalCodeCount += rsBlocks[i].totalCount;
  }

  var data = new Array(totalCodeCount);
  var index = 0;

  for (var i = 0; i < maxDcCount; i++) {
    for (var r = 0; r < rsBlocks.length; r++) {
      if (i < dcdata[r].length) {
        data[index++] = dcdata[r][i];
      }
    }
  }

  for (var i = 0; i < maxEcCount; i++) {
    for (var r = 0; r < rsBlocks.length; r++) {
      if (i < ecdata[r].length) {
        data[index++] = ecdata[r][i];
      }
    }
  }

  return data;
};

var QRCode_1 = QRCode;

/**
 * Encode UTF16 to UTF8.
 * See: http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/
 * @param str {string}
 * @returns {string}
 */

function toUTF8String(str) {
  var utf8Str = '';

  for (var i = 0; i < str.length; i++) {
    var charCode = str.charCodeAt(i);

    if (charCode < 0x0080) {
      utf8Str += String.fromCharCode(charCode);
    } else if (charCode < 0x0800) {
      utf8Str += String.fromCharCode(0xc0 | charCode >> 6);
      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);
    } else if (charCode < 0xd800 || charCode >= 0xe000) {
      utf8Str += String.fromCharCode(0xe0 | charCode >> 12);
      utf8Str += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);
      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);
    } else {
      // surrogate pair
      i++; // UTF-16 encodes 0x10000-0x10FFFF by
      // subtracting 0x10000 and splitting the
      // 20 bits of 0x0-0xFFFFF into two halves

      charCode = 0x10000 + ((charCode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
      utf8Str += String.fromCharCode(0xf0 | charCode >> 18);
      utf8Str += String.fromCharCode(0x80 | charCode >> 12 & 0x3f);
      utf8Str += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);
      utf8Str += String.fromCharCode(0x80 | charCode & 0x3f);
    }
  }

  return utf8Str;
}

function generatePath(modules) {
  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var ops = [];
  modules.forEach(function (row, y) {
    var start = null;
    row.forEach(function (cell, x) {
      if (!cell && start !== null) {
        // M0 0h7v1H0z injects the space with the move and drops the comma,
        // saving a char per operation
        ops.push("M".concat(start + margin, " ").concat(y + margin, "h").concat(x - start, "v1H").concat(start + margin, "z"));
        start = null;
        return;
      } // end of row, clean up or skip


      if (x === row.length - 1) {
        if (!cell) {
          // We would have closed the op above already so this can only mean
          // 2+ light modules in a row.
          return;
        }

        if (start === null) {
          // Just a single dark module.
          ops.push("M".concat(x + margin, ",").concat(y + margin, " h1v1H").concat(x + margin, "z"));
        } else {
          // Otherwise finish the current line.
          ops.push("M".concat(start + margin, ",").concat(y + margin, " h").concat(x + 1 - start, "v1H").concat(start + margin, "z"));
        }

        return;
      }

      if (cell && start === null) {
        start = x;
      }
    });
  });
  return ops.join('');
} // @vue/component


var QrcodeVue = {
  props: {
    value: {
      type: String,
      required: true,
      default: ''
    },
    className: {
      type: String,
      default: ''
    },
    size: {
      type: [Number, String],
      default: 100,
      validator: function validator(s) {
        return isNaN(Number(s)) !== true;
      }
    },
    level: {
      type: String,
      default: 'L',
      validator: function validator(l) {
        return ['L', 'Q', 'M', 'H'].indexOf(l) > -1;
      }
    },
    background: {
      type: String,
      default: '#fff'
    },
    foreground: {
      type: String,
      default: '#000'
    },
    renderAs: {
      type: String,
      required: false,
      default: 'canvas',
      validator: function validator(as) {
        return ['canvas', 'svg'].indexOf(as) > -1;
      }
    }
  },
  data: function data() {
    return {
      numCells: 0,
      fgPath: ''
    };
  },
  updated: function updated() {
    this.render();
  },
  mounted: function mounted() {
    this.render();
  },
  methods: {
    render: function render() {
      var value = this.value,
          size = this.size,
          level = this.level,
          background = this.background,
          foreground = this.foreground,
          renderAs = this.renderAs;

      var _size = size >>> 0; // size to number
      // We'll use type===-1 to force QRCode to automatically pick the best type


      var qrCode = new QRCode_1(-1, ErrorCorrectLevel[level]);
      qrCode.addData(toUTF8String(value));
      qrCode.make();
      var cells = qrCode.modules;
      var tileW = _size / cells.length;
      var tileH = _size / cells.length;
      var scale = window.devicePixelRatio || 1;

      if (renderAs === 'svg') {
        this.numCells = cells.length; // Drawing strategy: instead of a rect per module, we're going to create a
        // single path for the dark modules and layer that on top of a light rect,
        // for a total of 2 DOM nodes. We pay a bit more in string concat but that's
        // way faster than DOM ops.
        // For level 1, 441 nodes -> 2
        // For level 40, 31329 -> 2

        this.fgPath = generatePath(cells);
      } else {
        var canvas = this.$refs['qrcode-vue'];
        var ctx = canvas.getContext('2d');
        canvas.height = canvas.width = _size * scale;
        ctx.scale(scale, scale);
        cells.forEach(function (row, rdx) {
          row.forEach(function (cell, cdx) {
            ctx.fillStyle = cell ? foreground : background;
            var w = Math.ceil((cdx + 1) * tileW) - Math.floor(cdx * tileW);
            var h = Math.ceil((rdx + 1) * tileH) - Math.floor(rdx * tileH);
            ctx.fillRect(Math.round(cdx * tileW), Math.round(rdx * tileH), w, h);
          });
        });
      }
    }
  },
  render: function render(createElement) {
    var className = this.className,
        value = this.value,
        level = this.level,
        background = this.background,
        foreground = this.foreground,
        size = this.size,
        renderAs = this.renderAs,
        numCells = this.numCells,
        fgPath = this.fgPath;
    return createElement('div', {
      class: this.class || className,
      attrs: {
        value: value,
        level: level,
        background: background,
        foreground: foreground
      }
    }, [renderAs === 'svg' ? createElement('svg', {
      attrs: {
        height: size,
        width: size,
        shapeRendering: 'crispEdges',
        viewBox: "0 0 ".concat(numCells, " ").concat(numCells)
      },
      style: {
        width: size + 'px',
        height: size + 'px'
      }
    }, [createElement('path', {
      attrs: {
        fill: background,
        d: "M0,0 h".concat(numCells, "v").concat(numCells, "H0z")
      }
    }), createElement('path', {
      attrs: {
        fill: foreground,
        d: fgPath
      }
    })]) : createElement('canvas', {
      attrs: {
        height: size,
        width: size
      },
      style: {
        width: size + 'px',
        height: size + 'px'
      },
      ref: 'qrcode-vue'
    }, [])]);
  }
};

class TOTPDevice extends ApiModel {

    device_name;
    config_url;
    label;
    // tolerance;
    // drift;
    // digits;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    /**
     * Creates TOTP Device with URI for User, Standard Call.
     * @returns Response Promise, Exception on Failure.
     */
    async create() {
        return await interlock_backend.call('totp/create')
    }

    /**
     * Validates TOTP Device with TOTP Code from User, Standard Call.
     * @returns Response Promise, Exception on Failure.
     */
    async validate(data) {
        return await interlock_backend.call('totp/validate', data)
    }

    async delete() {
        return await interlock_backend.call('totp/delete')
    }

    async list() {
        return await interlock_backend.call('totp/list')
    }
}

var render$9 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0",attrs:{"loading":_vm.loading}},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2"},[_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.title_long"))+" ")]),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),(!_vm.showQR)?_c('div',[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-4",attrs:{"cols":"12","justify":"center"}},[_c('h3',[_vm._v(" "+_vm._s(_vm.$t("attribute.user.username"))+" ")])]),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_vm._v(" "+_vm._s(_vm.username)+" ")]),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"6","sm":"10","md":"8"}},[_c(__unplugin_components_5)],1)],1),(_vm.fullName && _vm.fullName !== '')?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_c('h4',[_vm._v(" "+_vm._s(_vm.$t("attribute.name"))+" ")])]):_vm._e(),(_vm.fullName && _vm.fullName !== '')?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_vm._v(" "+_vm._s(_vm.fullName)+" ")]):_vm._e(),(_vm.fullName && _vm.fullName !== '')?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"6","sm":"10","md":"8"}},[_c(__unplugin_components_5)],1)],1):_vm._e(),(_vm.domain && _vm.domain !== undefined && _vm.domain !== null)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_c('h4',[_vm._v(" "+_vm._s(_vm.$t("attribute.domain"))+" ")])]):_vm._e(),(_vm.domain && _vm.domain !== undefined && _vm.domain !== null)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_vm._v(" "+_vm._s(_vm.domain)+" ")]):_vm._e(),(_vm.domain && _vm.domain !== undefined && _vm.domain !== null)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"6","sm":"10","md":"8"}},[_c(__unplugin_components_5)],1)],1):_vm._e(),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_c('h4',[_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.auto_refresh_token"))+" ")])]),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0",attrs:{"hide-details":"","disabled":_vm.art_input_disabled,"label":((_vm.$t('userAccountDropdown.auto_refresh_token')) + " " + (_vm.auto_refresh_token ? _vm.$t('words.enabled') : _vm.$t('words.disabled')))},on:{"change":_vm.toggleAutoRefresh},model:{value:(_vm.auto_refresh_token),callback:function ($$v) {_vm.auto_refresh_token=$$v;},expression:"auto_refresh_token"}})],1),(_vm.realm && _vm.realm !== undefined && _vm.realm !== null)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"6","sm":"10","md":"8"}},[_c(__unplugin_components_5)],1)],1):_vm._e(),(_vm.realm && _vm.realm !== undefined && _vm.realm !== null)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_c('h4',[_vm._v(" "+_vm._s(_vm.$t("attribute.ldap.realm"))+" ")])]):_vm._e(),(_vm.realm && _vm.realm !== undefined && _vm.realm !== null)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","justify":"center"}},[_vm._v(" "+_vm._s(_vm.realm)+" ")]):_vm._e()],1):_c('div',[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 mt-2",attrs:{"cols":"12","justify":"center"}},[_c(__unplugin_components_17,{staticClass:"ma-0 pa-0 px-6 py-4",attrs:{"type":"info"}},[_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.qrInfo"))+" "),_c('ul',_vm._l((_vm.auth_apps),function(app,k){return _c('li',{key:k,staticStyle:{"text-align":"start"}},[_c('a',{staticClass:"white--text",staticStyle:{"text-decoration":"none"},attrs:{"href":app.link,"target":"_blank","rel":"noopener noreferrer"}},[_vm._v(" "+_vm._s(app.name)+" "),_c(__unplugin_components_95,{staticClass:"ml-2",attrs:{"small":""}},[_vm._v(" mdi-open-in-new ")])],1)])}),0)])],1)],1),_c(__unplugin_components_5,{staticClass:"mx-8 my-5"}),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_c('h3',[_vm._v(" "+_vm._s(_vm.$t('userAccountDropdown.two_factor_title'))+" ")])]),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"auto"}},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0",attrs:{"hide-details":"","label":_vm.$t('userAccountDropdown.enable_two_factor')},on:{"change":_vm.toggleTwoFactor},model:{value:(_vm.two_factor_auth),callback:function ($$v) {_vm.two_factor_auth=$$v;},expression:"two_factor_auth"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 my-2",attrs:{"cols":"12"}},[(!_vm.noTotp)?_c(__unplugin_components_94,{attrs:{"small":"","color":"primary","outlined":"","disabled":!_vm.totp_uri || _vm.totp_uri.length < 1},on:{"click":function($event){_vm.showQR = !_vm.showQR;}}},[_vm._v(" "+_vm._s(!_vm.showQR ? _vm.$t("userAccountDropdown.showQR") : _vm.$t("userAccountDropdown.hideQR"))+" ")]):_vm._e()],1),(_vm.hasTotp && !this.totp_confirmed)?_c(__unplugin_components_88,{staticClass:"pa-0 ma-0",attrs:{"cols":"12","justify":"center"}},[_c(__unplugin_components_17,{staticClass:"mt-1 mx-10",attrs:{"type":"warning","dense":"","border":"top","icon":"mdi-alert-box"}},[_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.TOTPnotConfirmed"))+" ")])],1):_vm._e(),(_vm.showValidator && _vm.showQR)?_c(__unplugin_components_18,{ref:"TOTPForm",staticClass:"ma-0 pa-0",staticStyle:{"width":"100%"},on:{"submit":function($event){$event.preventDefault();}}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mb-2",attrs:{"cols":"auto"}},[_c(__unplugin_components_25$1,{staticStyle:{"max-width":"320px"},attrs:{"disabled":_vm.noTotp,"label":_vm.$t('userAccountDropdown.totpCodeFieldLabel'),"rules":[this.fieldRules(_vm.totp_code, 'auth_totp')],"dense":"","required":"","type":"text"},on:{"keypress":_vm.isNumber,"paste":_vm.isNumber},model:{value:(_vm.totp_code),callback:function ($$v) {_vm.totp_code=$$v;},expression:"totp_code"}})],1),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mb-4 mx-2",attrs:{"cols":"12"}},[_c(__unplugin_components_94,{attrs:{"color":"primary","outlined":"","disabled":_vm.noTotp || _vm.loading},on:{"click":_vm.validateTwoFactor}},[_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.validateTOTP"))+" ")])],1)],1)],1):_vm._e(),(_vm.totp_uri.length > 0 && _vm.two_factor_auth && _vm.showQR)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_88,{staticClass:"d-flex justify-center align-center",attrs:{"cols":"8"}},[_c(__unplugin_components_89,{attrs:{"value":_vm.totp_uri,"readonly":"","label":_vm.$t('userAccountDropdown.totpUri')}}),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"icon":"","small":""},on:{"click":_vm.copyTotpUri}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,false,3707797297)},[_c('span',[_vm._v(_vm._s(_vm.$t("userAccountDropdown.copyTotpUri")))])])],1),(_vm.totp_uri.length > 0 && _vm.two_factor_auth && _vm.showQR)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 d-flex justify-center",attrs:{"cols":"12"}},[_c(__unplugin_components_76,{staticClass:"ma-0 pa-0 pa-2 pb-0",attrs:{"elevation":"0","light":"","width":"fit-content","outlined":!_vm.isThemeDark(_vm.$vuetify)}},[_c('QrcodeVue',{staticClass:"ma-0 pa-0",attrs:{"value":_vm.totp_uri,"size":225,"level":"H"}})],1)],1):_vm._e()],1):_vm._e(),(_vm.recovery_codes.length > 0 && !_vm.showQR)?_c(__unplugin_components_76,{staticClass:"ma-0 pa-0 mx-10",attrs:{"outlined":""}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-2",attrs:{"align":"center","justify":"center"}},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("userAccountDropdown.recoveryCodes").toUpperCase())+" ")]),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-2",attrs:{"icon":"","small":""},on:{"click":_vm.copyRCCs}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,{attrs:{"small":""}},[_vm._v(" mdi-content-copy ")])],1)]}}],null,false,1570435105)},[_c('span',[_vm._v(_vm._s(_vm.$t("userAccountDropdown.copyRecoveryCodes")))])])],1),_vm._l((_vm.recovery_codes),function(code){return _c(__unplugin_components_88,{key:code,attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(code)+" ")])})],2)],1):_vm._e()],1),_c(VCardActions,{staticClass:"card-actions mt-4"},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"align":"center","align-content":"center","justify":this.$vuetify.breakpoint.mdAndDown ? 'center' : 'end'}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-close ")]),_vm._v(" "+_vm._s(_vm.$t("actions.close"))+" ")],1)],1)],1)],1)};
var staticRenderFns$9 = [];

/* unplugin-vue-components disabled *///

const __vue2_script$9 = {
	name: 'UserSettings',
	components: {
		QrcodeVue
	},
	mixins: [utilsMixin, validationMixin],
	data() {
		return {
			auto_refresh_token: false,
			art_input_disabled: false,
			loading: false,
			error: false,
			message: "",
			showValidator: false,
			preferDarkMode: false,
			two_factor_auth: false,
			totp_uri: "",
			totp_code: "",
			recovery_codes: [],
			totp_confirmed: false,
			showQR: false,
			auth_apps: {
				"freeotp": {
					link: "https://play.google.com/store/apps/details?id=org.liberty.android.freeotpplus",
					name: "FreeOTP+"
				},
				"google": {
					link: "https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2",
					name: "Google Authenticator"
				},
				"authy": {
					link: "https://authy.com/download/",
					name: "Authy"
				},
			}
		}
	},
	props: {
		username: String,
		firstName: String,
		lastName: String,
		domain: String,
		realm: String,
		adminMode: {
			type: Boolean,
			default: false
		}
	},
	mounted() {
		this.loadSettings();
	},
	computed: {
		fullName() {
			if (this.firstName.length > 0 || this.lastName.length > 0)
				return `${this.firstName} ${this.lastName}`
			else
				return null
		},
		noTotp() {
			return (!this.totp_uri || this.totp_uri.length < 1)
		},
		hasTotp() {
			if (this.totp_uri)
				return this.totp_uri.length > 0
			return false
		},
	},
	methods: {
		copyRCCs() {
			navigator.clipboard.writeText(this.recovery_codes.join("\n"));
		},
		copyTotpUri() {
			navigator.clipboard.writeText(this.totp_uri);
		},
		toggleAutoRefresh() {
			this.art_input_disabled = true;
			let v = localStorage.getItem('auth.auto_refresh_token') == 'true';
			localStorage.setItem('auth.auto_refresh_token', !v);
			this.art_input_disabled = false;
		},
		closeDialog() {
			this.$emit("close");
		},
		async loadSettings() {
			this.auto_refresh_token = localStorage.getItem('auth.auto_refresh_token') == 'true';
			this.loading = true;
			this.recovery_codes = [];
			this.setTotp();
			this.preferDarkMode = this.isThemeDark(this.$vuetify);
			await new TOTPDevice({}).list()
				.then(response => {
					this.setTotp(response);
					if (response.recovery_codes)
						this.recovery_codes = response.recovery_codes;
					this.loading = false;
					this.error = false;
				})
				.catch(e => {
					console.error(e);
					this.loading = false;
					this.error = true;
				});
		},
		setTotp(r = undefined) {
			if (r)
				if (r.totp_uri) {
					this.totp_uri = r.totp_uri;
					if ('totp_confirmed' in r)
						this.totp_confirmed = r.totp_confirmed[0];
					this.totp_code = "";
					this.two_factor_auth = true;
					if (this.hasTotp && this.totp_confirmed != true)
						this.showValidator = true;
					this.$forceUpdate();
					return
				}
			this.totp_uri = "";
			this.totp_confirmed = false;
			this.totp_code = "";
			this.two_factor_auth = false;
			this.showValidator = false;
			this.showQR = false;
			this.loading = false;
			this.error = false;
			this.message = "";
			if (this.$refs.TOTPForm)
				this.$refs.TOTPForm.resetValidation();
			this.$forceUpdate();
		},
		async toggleTwoFactor() {
			this.loading = true;
			if (this.two_factor_auth == true)
				await new TOTPDevice({}).create()
					.then(response => {
						this.setTotp(response);
						this.loadSettings();
						this.showValidator = true;
						this.showQR = true;
						this.loading = false;
						this.error = false;
						this.message = (this.$tc("classes.totp-device", 1) + " " + this.$t("words.created.m")).toUpperCase();
						notificationBus.$emit('createNotification',
							{
								message: this.message,
								type: 'success'
							}
						);
					})
					.catch(e => {
						console.error(e);
						this.loading = false;
						this.error = true;
						this.message = this.getMessageForCode(e);
						notificationBus.$emit('createNotification',
							{
								message: this.message,
								type: 'error'
							}
						);
					});
			else
				await new TOTPDevice({}).delete()
					.then(() => {
						this.setTotp();
						this.loadSettings();
						this.showValidator = false;
						this.showQR = false;
						this.loading = false;
						this.error = false;
						this.message = (this.$tc("classes.totp-device", 1) + " " + this.$t("words.deleted.m")).toUpperCase();
						notificationBus.$emit('createNotification',
							{
								message: this.message,
								type: 'info'
							}
						);
					})
					.catch(e => {
						console.error(e);
						this.setTotp();
						this.loading = false;
						this.error = true;
						this.message = this.getMessageForCode(e);
						notificationBus.$emit('createNotification',
							{
								message: this.message,
								type: 'error'
							}
						);
					});
		},
		async validateTwoFactor() {
			if (!this.$refs.TOTPForm.validate())
				return
			const data = {
				totp_code: this.totp_code
			};
			await new TOTPDevice({}).validate(data)
				.then(() => {
					this.loading = false;
					this.error = false;
					this.showQR = false;
					this.showValidator = false;
					this.totp_confirmed = true;
					this.message = this.$t("userAccountDropdown.totpValidated");
					notificationBus.$emit('createNotification',
						{
							message: this.message,
							type: 'success'
						}
					);
				})
				.catch(e => {
					console.error(e);
					this.loading = false;
					this.error = true;
					this.message = this.getMessageForCode(e);
					notificationBus.$emit('createNotification',
						{
							message: this.message,
							type: 'error'
						}
					);
				});
		}
	}
};
const __cssModules$9 = {};
var __component__$9 = /*#__PURE__*/normalizeComponent(
  __vue2_script$9,
  render$9,
  staticRenderFns$9,
  false,
  __vue2_injectStyles$9,
  null,
  null,
  null
);

function __vue2_injectStyles$9 (context) {
  for(let o in __cssModules$9){
    this[o] = __cssModules$9[o];
  }
}

var UserSettings = /*#__PURE__*/(function () { return __component__$9.exports })();

var render$8 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.buttonIsSwitch)?_c(__unplugin_components_94,{staticClass:"ma-0 pa-0",attrs:{"icon":"","dark":_vm.dark,"light":_vm.light,"small":_vm.buttonIsSmall},on:{"click":function($event){_vm.darkMode = !_vm.darkMode;}},model:{value:(_vm.darkMode),callback:function ($$v) {_vm.darkMode=$$v;},expression:"darkMode"}},[_c(__unplugin_components_95,{attrs:{"id":"toggler-input"}},[_vm._v("mdi-contrast-circle")])],1):_c(__unplugin_components_2,{staticClass:"ma-0 pa-0",attrs:{"dark":_vm.dark,"light":_vm.light,"hide-details":"","label":_vm.$t('misc.darkMode')},model:{value:(_vm.darkMode),callback:function ($$v) {_vm.darkMode=$$v;},expression:"darkMode"}})};
var staticRenderFns$8 = [];

/* unplugin-vue-components disabled */var ThemeChanger_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

const __vue2_script$8 = {
	name: 'ThemeChanger',
	props: {
		dark: Boolean,
		light: Boolean,
		buttonIsSmall: Boolean,
		buttonIsSwitch: Boolean
	},
	data() {
		return {
			darkMode: false
		}
	},
	mounted: function () {
		// check for active theme
		let htmlElement = document.documentElement;
		let theme = localStorage.getItem("user.theme");

		if (theme === 'dark') {
			htmlElement.setAttribute('user.theme', 'dark');
			this.darkMode = true;
		} else {
			htmlElement.setAttribute('user.theme', 'light');
			this.darkMode = false;
		}
	},
	watch: {
		darkMode: function () {
			// add/remove class to/from html tag
			let htmlElement = document.documentElement;

			if (this.darkMode) {
				localStorage.setItem("user.theme", 'dark');
				htmlElement.setAttribute('theme', 'dark');
				this.$emit('darkMode', true);
				this.$vuetify.theme.dark = true;
			} else {
				localStorage.setItem("user.theme", 'light');
				htmlElement.setAttribute('theme', 'light');
				this.$emit('darkMode', false);
				this.$vuetify.theme.dark = false;
			}
		}
	}
};
const __cssModules$8 = {};
var __component__$8 = /*#__PURE__*/normalizeComponent(
  __vue2_script$8,
  render$8,
  staticRenderFns$8,
  false,
  __vue2_injectStyles$8,
  null,
  null,
  null
);

function __vue2_injectStyles$8 (context) {
  for(let o in __cssModules$8){
    this[o] = __cssModules$8[o];
  }
}

var ThemeChanger = /*#__PURE__*/(function () { return __component__$8.exports })();

var render$7 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-3"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,[_c(__unplugin_components_17,{staticClass:"ma-0 pa-6",attrs:{"dense":"","type":"warning","icon":'mdi-lock-remove'}},[_c('span',{staticClass:"mr-7"},[_vm._v(" "+_vm._s(_vm.$t("misc.logoutForbiddenMsg").toUpperCase())+" ")])])],1)],1),_c(VCardActions,{},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0 mb-0",attrs:{"justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0",attrs:{"color":"valid-65","rounded":""},on:{"click":_vm.emitLogoutAction}},[_vm._v(_vm._s(_vm.$t("actions.backToLogin")))])],1)],1)],1)};
var staticRenderFns$7 = [];

/* unplugin-vue-components disabled *///
const __vue2_script$7 = {
	name: 'LogoutDialog',
	mixins: [utilsMixin],
	methods: {
		emitLogoutAction() {
			this.$emit('logoutAction');
		}
	},
};
const __cssModules$7 = {};
var __component__$7 = /*#__PURE__*/normalizeComponent(
  __vue2_script$7,
  render$7,
  staticRenderFns$7,
  false,
  __vue2_injectStyles$7,
  null,
  null,
  null
);

function __vue2_injectStyles$7 (context) {
  for(let o in __cssModules$7){
    this[o] = __cssModules$7[o];
  }
}

var LogoutDialog = /*#__PURE__*/(function () { return __component__$7.exports })();

var render$6 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-3"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,[_c(__unplugin_components_17,{staticClass:"ma-0 pa-6",attrs:{"dense":"","type":_vm.alertType,"icon":_vm.alertIcon}},[_c('span',{staticClass:"mr-7"},[_vm._v(" "+_vm._s(_vm.$t("misc.actionRequired").toUpperCase())+" ")])])],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_88,[_c('span',[_vm._v(" "+_vm._s(_vm.$t("misc.refreshTokenTimer") + " " + _vm.timer)+" ")])])],1),_c(VCardActions,{},[_c(__unplugin_components_91,{staticClass:"ma-1 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"dark":"","color":"valid-35-s","rounded":""},on:{"click":_vm.emitLogoutAction}},[_vm._v(" "+_vm._s(_vm.$t("actions.backToLogin"))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"color":"primary","disabled":!_vm.allowRefresh,"rounded":""},on:{"click":_vm.refreshAccessToken}},[_vm._v(" "+_vm._s(_vm.$t('actions.refreshToken'))+" ")])],1)],1)],1)};
var staticRenderFns$6 = [];

/* unplugin-vue-components disabled *///

const __vue2_script$6 = {
	name: 'RefreshTokenDialog',
	mixins: [utilsMixin],
	data() {
		return {
			timeRemaining: 0,
			timer: "00:00",
			intervalId: 0,
			allowRefresh: true,
			alertType: "info",
			alertIcon: "mdi-information"
		}
	},
	props: {
		countdown: Boolean
	},
	computed: {
		threshold() {
			const refreshClock = Date.parse(localStorage.getItem("auth.refreshClock"));
			const accessClockLimit = localStorage.getItem("auth.access_expire");
			return (accessClockLimit - refreshClock) / 1000
		}
	},
	methods: {
		getTimeInMinutes() {
			const minutes = Math.floor(this.timeRemaining / 60);
			const seconds = this.timeRemaining - minutes * 60;
			this.timer = String(String(minutes).padStart(2, '0') + ":" + String(seconds).padStart(2, '0'));
		},
		clearCountdown() {
			clearInterval(this.intervalId);
			this.allowRefresh = true;
			this.alertType = 'info';
			this.alertIcon = 'mdi-information';
			const accessClockLimit = localStorage.getItem("auth.access_expire") / 1000;
			const refreshClockLimit = localStorage.getItem("auth.refresh_expire") / 1000;
			this.timeRemaining = refreshClockLimit - accessClockLimit;
		},
		startCountdown() {
			this.clearCountdown();
			this.getTimeInMinutes();
			this.intervalId = setInterval(() => {
				this.thresholdPassed = this.timeRemaining < this.threshold;
				this.alertType = this.thresholdPassed ? 'warning' : 'info';
				this.alertIcon = this.thresholdPassed ? 'mdi-alert-box' : 'mdi-information';
				if (this.timeRemaining > 0)
					this.timeRemaining -= 1;
				if (this.timeRemaining < 2)
					this.allowRefresh = false;
				if (this.timeRemaining < 1)
					this.clearCountdown();
				this.getTimeInMinutes();
			}, 1000);
		},
		emitLogoutAction() {
			this.$emit('logoutAction');
		},
		async refreshAccessToken() {
			await new User({}).selfInfo()
				.then(() => {
					notificationBus.$emit('createNotification', {
						message: this.$t("misc.tokenRefreshed").toUpperCase(),
						type: 'success'
					});
					this.$emit('closeDialog');
					this.clearCountdown();
				})
				.catch((error) => {
					console.error(error);
				});
		}
	},
};
const __cssModules$6 = {};
var __component__$6 = /*#__PURE__*/normalizeComponent(
  __vue2_script$6,
  render$6,
  staticRenderFns$6,
  false,
  __vue2_injectStyles$6,
  null,
  null,
  null
);

function __vue2_injectStyles$6 (context) {
  for(let o in __cssModules$6){
    this[o] = __cssModules$6[o];
  }
}

var RefreshTokenDialog = /*#__PURE__*/(function () { return __component__$6.exports })();

var render$5 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_76,{staticClass:"pa-0 ma-0"},[_c(VCardTitle,{staticClass:"ma-0 pa-0 card-title"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 ma-1",attrs:{"align":"center","justify":"space-between"}},[_c('h3',{staticClass:"pa-0 ma-0 ma-2 ml-3"},[_vm._v(" "+_vm._s(_vm.$t('contrib.title'))+" ")]),_c(__unplugin_components_94,{staticClass:"ma-2",attrs:{"icon":"","color":"red","rounded":""},on:{"click":_vm.closeDialog}},[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)],1)],1),_c(VCardText,{staticClass:"mt-4 pa-2 pt-0 font-weight-medium"},[_c(__unplugin_components_91,{staticClass:"my-2 mx-1"},[_c('span',{domProps:{"innerHTML":_vm._s(_vm.$t('contrib.mainMsg'))}})]),_c('h3',{staticClass:"mt-3 mb-1"},[_vm._v(" "+_vm._s(_vm.$t('contrib.subTitle'))+" ")]),_c(__unplugin_components_91,{staticClass:"my-2 mx-1",attrs:{"justify":"start"}},[_c('ul',{staticClass:"contrib-list"},[_c('li',[_vm._v(" Javier Blanqué - "),_c('a',{attrs:{"href":"https://javier.blanque.com.ar","target":"_blank"}},[_vm._v("(https://javier.blanque.com.ar)")]),_c('ul',[_c('li',{domProps:{"innerHTML":_vm._s(_vm.$t('contrib.jblanque'))}})])]),_c('li',[_vm._v(" Martín Vilche - "),_c('a',{attrs:{"href":"https://martinvsolutions.com","target":"_blank"}},[_vm._v("(https://martinvsolutions.com)")]),_c('ul',_vm._l((_vm.$t('contrib.mvilche')),function(v,k){return _c('li',{key:k},[_c('span',{domProps:{"innerHTML":_vm._s(_vm.$t('contrib.mvilche.' + k))}})])}),0)]),_c('li',[_vm._v(" Etianen - "),_c('a',{attrs:{"href":"https://github.com/etianen/django-python3-ldap","target":"_blank"}},[_vm._v("(https://github.com/etianen/django-python3-ldap)")]),_c('ul',[_c('li',{domProps:{"innerHTML":_vm._s(_vm.$t('contrib.etianen'))}})])]),_c('li',[_vm._v(" Dirk Jan M. - "),_c('a',{attrs:{"href":"https://github.com/dirkjanm/krbrelayx","target":"_blank"}},[_vm._v("(https://github.com/dirkjanm/krbrelayx)")]),_c('ul',[_c('li',{domProps:{"innerHTML":_vm._s(_vm.$t('contrib.dirkjanm'))}})])])])]),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t('misc.version') + ": " + _vm.version)+" ")])],1)],1)};
var staticRenderFns$5 = [];

/* unplugin-vue-components disabled */var AboutDialog_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$5 = {
	name: 'AboutDialog',
	data() {
		return {
			version: {}
		}
	},
	created() {
		this.getLocalConfig();
	},
	methods: {
		async getLocalConfig() {
			this.version = await getRuntimeConfig()
				.then(function (json) {
					return json.version
				});
		},
		closeDialog() {
			this.$emit('close');
		}
	},
};
const __cssModules$5 = {};
var __component__$5 = /*#__PURE__*/normalizeComponent(
  __vue2_script$5,
  render$5,
  staticRenderFns$5,
  false,
  __vue2_injectStyles$5,
  null,
  null,
  null
);

function __vue2_injectStyles$5 (context) {
  for(let o in __cssModules$5){
    this[o] = __cssModules$5[o];
  }
}

var AboutDialog = /*#__PURE__*/(function () { return __component__$5.exports })();

class Test extends ApiModel {

    key;
    value;

    /**
     * Fetches model instance from API by id.
     * @param {Number} id 
     */
    constructor(data) {
        super(data);
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }

    async get() {
        return await interlock_backend.call('test/get')
    }
    async post(data) {
        return await interlock_backend.call('test/post', data)
    }
    async put(data) {
        return await interlock_backend.call('test/put', data)
    }
    async delete(data) {
        return await interlock_backend.call('test/delete', data)
    }
    async options(data) {
        return await interlock_backend.call('test/options', data)
    }
}

var render$4 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c(__unplugin_components_46$1,{class:("transition-snack-color m" + (_vm.$vuetify.breakpoint.mdAndDown ? 't-8' : 'b-12')),attrs:{"transition":"slide-y-reverse-transition","timeout":-1,"top":_vm.$vuetify.breakpoint.smAndDown,"color":_vm.snackbarColor},scopedSlots:_vm._u([{key:"action",fn:function(ref){
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._b({attrs:{"icon":"","text":""},on:{"click":function($event){_vm.showSnackbar = false;}}},'v-btn',attrs,false),[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)]}}]),model:{value:(_vm.showSnackbar),callback:function ($$v) {_vm.showSnackbar=$$v;},expression:"showSnackbar"}},[(_vm.snackbarIcon.length > 0)?_c(__unplugin_components_95,{staticClass:"mr-1",attrs:{"color":_vm.snackbarTextColor}},[_vm._v(" "+_vm._s(_vm.snackbarIcon)+" ")]):_vm._e(),_c('span',{class:(_vm.snackbarTextColor + "--text")},[_vm._v(" "+_vm._s(_vm.snackbarMessage.toUpperCase())+" ")])],1)],1)};
var staticRenderFns$4 = [];

/* unplugin-vue-components disabled */var NotificationBusContainer_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$4 = {
	name: 'NotificationBusContainer',
	mixins: [validationMixin],
	data() {
		return {
			showSnackbar: false,
			...this.getDefaultSnackbarData()
		}
	},
	watch: {
		showSnackbar(newValue) {
			if (newValue != true)
				this.resetSnackbar();
		}
	},
	created() {
		notificationBus.$on('createNotification', (notifObj) => {
			clearTimeout(this.snackBarTimer);
			this.showSnackbar = true;
			this.snackbarMessage = notifObj.message;
			this.notificationType = notifObj.type;
			switch (this.notificationType) {
				case 'alert':
					this.snackbarColor = 'yellow';
					this.snackbarIcon = 'mdi-comment-alert-outline';
					this.snackbarTextColor = 'text-black';
					break;
				case 'warning':
					this.snackbarColor = 'orange';
					this.snackbarIcon = 'mdi-alert-box';
					break;
				case 'error':
					this.snackbarColor = 'red';
					this.snackbarIcon = 'mdi-close-circle-outline';
					break;
				case 'success':
					this.snackbarColor = 'green';
					this.snackbarIcon = 'mdi-checkbox-marked-circle-outline';
					break;
				case 'info':
				default:
					this.snackbarColor = 'primary';
					this.snackbarIcon = 'mdi-information';
					break;
			}
			if (notifObj.icon !== undefined)
				this.snackbarIcon = notifObj.icon;
			if (notifObj.color !== undefined)
				this.snackbarColor = notifObj.color;
			if (notifObj.text !== undefined)
				this.snackbarTextColor = notifObj.text;
			if (notifObj.timeout !== undefined)
				this.snackbarTimeout = notifObj.timeout;

			this.snackBarTimer = setTimeout(() => {
				this.showSnackbar = false;
			}, this.snackbarTimeout);
		});
	},
	methods: {
		getDefaultSnackbarData() {
			return {
				notificationType: "",
				snackbarMessage: "",
				snackbarColor: 'primary',
				snackbarTextColor: '',
				snackbarIcon: "",
				snackbarTimeout: 2e3,
				snackBarTimer: 0
			}
		},
		resetSnackbar() {
			setTimeout(() => {
				if (this.showSnackbar != true)
					this.getDefaultSnackbarData();
			}, 3e2);
		}
	},
};
const __cssModules$4 = {};
var __component__$4 = /*#__PURE__*/normalizeComponent(
  __vue2_script$4,
  render$4,
  staticRenderFns$4,
  false,
  __vue2_injectStyles$4,
  null,
  null,
  null
);

function __vue2_injectStyles$4 (context) {
  for(let o in __cssModules$4){
    this[o] = __cssModules$4[o];
  }
}

var NotificationBusContainer = /*#__PURE__*/(function () { return __component__$4.exports })();

var render$3 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.showView)?_c('div',{staticClass:"home ma-0 pa-0 align-stretch flex-column d-flex",staticStyle:{"height":"100%"}},[_c(__unplugin_components_0,{ref:"mainSystemBar",staticClass:"ma-0 pa-0 px-4 transition-speed-fix",staticStyle:{"background":"var(--v-secondary-15-base)"},attrs:{"height":"min","id":"main-system-bar"}},[_c(__unplugin_components_91,{attrs:{"align":"center","justify":"space-between"}},[_c(__unplugin_components_1,{staticClass:"my-3",attrs:{"max-width":"30ch","max-height":"5em","contain":"","aspect-ratio":32 / 9,"src":!_vm.isThemeDark(_vm.$vuetify) ? _vm.logoLight : _vm.logoDark}}),_c('h2',{staticClass:"ma-2 my-4 font-weight-medium",staticStyle:{"color":"var(--v-text-background-base)"}},[_vm._v(_vm._s(_vm.domain.toUpperCase()))])],1)],1),_c(__unplugin_components_3,{ref:"mainAppBar",staticClass:"ma-0 pa-2 transition-speed-fix",staticStyle:{"background":"var(--v-secondary-15-base)","height":"fit-content"},attrs:{"id":"main-app-bar","flat":"","height":"min","clipped-left":"","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"align":"center","justify":"space-between"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","md":"auto"}},[_c(LanguageSelector,{attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)},on:{"updateTabSliders":_vm.refreshOnLanguageChange}})],1),(this.$vuetify.breakpoint.lgAndUp)?_c(__unplugin_components_5,{staticClass:"ma-6",staticStyle:{"border-color":"var(--v-primary-base)"}}):_vm._e(),(!this.$vuetify.breakpoint.mdAndUp && _vm.realm !== null && _vm.realm !== undefined && _vm.realm !== '')?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 my-3"},[_c('span',{staticClass:"text--white"},[_vm._v(" "+_vm._s(_vm.activeUserName)+" ")])]):_vm._e(),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"auto"}},[_c('div',{staticClass:"mt-2 mr-4"},[_c(UserAccountDropdown,{attrs:{"extra-classes":"mr-3 px-2","icon":"mdi-account-cog","color":"primary","show-preferences-menu":"","username":_vm.activeUserName},on:{"logout":_vm.logoutAction,"openSettings":_vm.openSettings}}),_c(ThemeChanger,{attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"buttonIsSmall":true}}),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-3",attrs:{"small":"","dark":!_vm.isThemeDark(_vm.$vuetify),"disabled":_vm.disableDomainDetailsButton,"light":_vm.isThemeDark(_vm.$vuetify),"icon":""},on:{"click":function($event){return _vm.fetchDomainDetails()}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-cog-sync ")])],1)]}}],null,false,1311203786)},[_c('span',[_vm._v(_vm._s(_vm.$t("nav.tooltip.fetchDomainDetails")))])]),(_vm.drawerIsMobile)?_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ml-3",attrs:{"small":"","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"icon":""},on:{"click":function($event){return _vm.toggleDrawerState()}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-menu ")])],1)]}}],null,false,1926940210)},[_c('span',[_vm._v(_vm._s(_vm.$t("nav.menu")))])]):_vm._e(),_c(__unplugin_components_42,{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({directives:[{name:"show",rawName:"v-show",value:(_vm.initLoad && _vm.enableDebug),expression:"initLoad && enableDebug"}],staticClass:"ml-1",attrs:{"color":"accent-60-s","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"disabled":!_vm.enableDebug,"icon":""},on:{"click":function($event){return _vm.debugAction()}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-code-brackets ")])],1)]}}],null,false,3458539394)},[_c('span',[_vm._v(_vm._s(_vm.$t("nav.tooltip.debugAction")))])])],1)])],1)],1),(_vm.drawerIsMobile)?_c(__unplugin_components_23,{ref:"navigationDrawerMobile",attrs:{"lockNavTabs":_vm.lockNavTabs,"selectedTabTitle":_vm.selectedTabTitle,"selectedTab":_vm.selectedTab,"navGroups":_vm.navGroups,"topTabs":_vm.getVisibleTabsInGroup('_top'),"bottomTabs":_vm.getVisibleTabsInGroup('_bot'),"getVisibleTabsInGroup":_vm.getVisibleTabsInGroup,"mobile":""},on:{"updateSelectedTab":_vm.updateSelectedTab}}):_vm._e(),_c(__unplugin_components_91,{staticClass:"justify-center align-stretch flex-nowrap pb-10",staticStyle:{"position":"relative","height":"100%"},attrs:{"no-gutters":""}},[(_vm.drawerIsDesktop)?_c(__unplugin_components_23,{ref:"navigationDrawerDesktop",attrs:{"lockNavTabs":_vm.lockNavTabs,"expanded-on-create":"","selectedTabTitle":_vm.selectedTabTitle,"selectedTab":_vm.selectedTab,"navGroups":_vm.navGroups,"topTabs":_vm.getVisibleTabsInGroup('_top'),"bottomTabs":_vm.getVisibleTabsInGroup('_bot'),"getVisibleTabsInGroup":_vm.getVisibleTabsInGroup},on:{"updateSelectedTab":_vm.updateSelectedTab}}):_vm._e(),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_25,{staticClass:"transparent-body",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v;},expression:"activeTab"}},_vm._l((_vm.navTabs),function(tab){return _c(__unplugin_components_26,{key:tab.index},[_c(ModularViewContainer,{ref:"ModularViewContainerRef",refInFor:true,attrs:{"mobile":_vm.drawerIsMobile,"initLoad":_vm.initLoad,"viewTitle":tab.title,"viewIndex":tab.index,"langChanged":_vm.langChanged,"requestRefresh":_vm.requestRefresh},on:{"refresh":function($event){return _vm.setDomainDetails()},"refreshDomain":function($event){return _vm.fetchDomainDetails()},"goToUser":_vm.goToUser,"goToGroup":_vm.goToGroup,"done":_vm.setInitLoad}})],1)}),1)],1)],1),_c(NotificationBusContainer),_c(__unplugin_components_104,{attrs:{"max-width":"48rem"},model:{value:(_vm.showAboutDialog),callback:function ($$v) {_vm.showAboutDialog=$$v;},expression:"showAboutDialog"}},[_c(AboutDialog,{on:{"close":_vm.closeAbout}})],1),_c(__unplugin_components_104,{attrs:{"max-width":"48rem"},model:{value:(_vm.showSettingsDialog),callback:function ($$v) {_vm.showSettingsDialog=$$v;},expression:"showSettingsDialog"}},[_c(UserSettings,{ref:"UserSettings",attrs:{"username":_vm.username,"first-name":_vm.first_name,"last-name":_vm.last_name,"admin-mode":"","domain":_vm.domain,"realm":_vm.realm},on:{"close":function($event){_vm.showSettingsDialog = !_vm.showSettingsDialog;}}})],1),_c(__unplugin_components_104,{attrs:{"persistent":"","content-class":"","max-width":"40rem"},model:{value:(_vm.showLogoutDialog),callback:function ($$v) {_vm.showLogoutDialog=$$v;},expression:"showLogoutDialog"}},[_c(LogoutDialog,{on:{"logoutAction":function($event){return _vm.logoutAction()}}})],1),_c(__unplugin_components_104,{attrs:{"persistent":"","eager":"","content-class":"","max-width":"40rem"},model:{value:(_vm.showRefreshTokenDialog),callback:function ($$v) {_vm.showRefreshTokenDialog=$$v;},expression:"showRefreshTokenDialog"}},[_c(RefreshTokenDialog,{ref:"RefreshTokenDialog",attrs:{"countdown":_vm.showRefreshTokenDialog},on:{"closeDialog":_vm.closeRefreshDialog,"logoutAction":function($event){return _vm.logoutAction()}}})],1),_c(__unplugin_components_37,{staticClass:"py-1",attrs:{"color":"secondary-15","padless":"","id":"home-footer","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_91,{class:'mx-4 my-1 ' + (_vm.$vuetify.breakpoint.mdAndDown ? '' : 'text-caption'),attrs:{"align":"center","justify":"center"}},[_vm._v(" "+_vm._s(_vm.$t("footer.copyright"))+" "),(_vm.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"mx-4"}):_vm._e(),_c(__unplugin_components_94,{staticClass:"mx-2 mr-1 px-3",attrs:{"color":"primary","small":"","id":"donateBtn","outlined":"","href":"https://www.paypal.com/donate/?hosted_button_id=FFR7CG7X477NL","target":"_blank","dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-heart-outline ")]),_vm._v(" "+_vm._s(_vm.$t("footer.donate"))+" ")],1),_c(__unplugin_components_42,{attrs:{"top":"","color":"primary"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){
var on = ref.on;
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._g(_vm._b({staticClass:"ma-0 mx-2",attrs:{"small":"","color":"primary","icon":""},on:{"click":function($event){_vm.showAboutDialog = true;}}},'v-btn',attrs,false),on),[_c(__unplugin_components_95,[_vm._v(" mdi-information ")])],1)]}}],null,false,1117810553)},[_c('span',[_vm._v(_vm._s(_vm.$t("footer.about").toUpperCase()))])])],1)],1)],1):_vm._e()};
var staticRenderFns$3 = [];

/* unplugin-vue-components disabled */var HomeView_vue_vue_type_style_index_0_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$3 = {
  name: "HomeView",
  mixins: [validationMixin, utilsMixin],
  components: {
    ModularViewContainer,
    LanguageSelector,
    UserAccountDropdown,
    UserSettings,
    LogoutDialog,
    RefreshTokenDialog,
    ThemeChanger,
    NotificationBusContainer,
    AboutDialog
  },
  data() {
    return {
      showView: false,
      logoLight: 'logo/interlock-logo-wt-dark.svg',
      logoDark: 'logo/interlock-logo-wt-light.svg',
      username: "",
      first_name: "",
      initLoad: true,
      last_name: "",
      email: "",
      domain: "",
      realm: "",
      basedn: "",
      error: false,
      showAboutDialog: false,
      showLogoutDialog: false,
      showRefreshTokenDialog: false,
      showSettingsDialog: false,
      fetchingDomainDetails: false,
      disableDomainDetailsButton: false,
      requestRefresh: "",
      selectedTab: 0,
      selectedTabTitle: "",
      lockNavTabs: false,
      langChanged: false,
      enableDebug: false,
      activeTab: 0,
      tableData: {
        headers: [],
        items: [],
      },
      timeoutId: 0,
      navGroups: {
        "local": {
          enabled: true,
          icon: "mdi-database",
        },
        "ldap": {
          enabled: true,
          icon: "mdi-server-security",
        },
      },
      navTabs: [
        {
          title: "home",
          enabled: true,
          icon: "mdi-home",
          route: "home",
          group: "_top",
        },
        {
          title: "applications",
          enabled: true,
          icon: "mdi-application-cog",
          route: "applications",
          group: "_top",
        },
        {
          title: "django-users",
          enabled: true,
          icon: "mdi-account",
          route: "django-users",
          group: "local",
        },
        {
          title: "application-groups",
          enabled: true,
          icon: "mdi-google-circles-communities",
          route: "application-groups",
          group: "local",
        },
        {
          title: "ldap-dirtree",
          enabled: true,
          icon: "mdi-family-tree",
          route: "ldap-dirtree",
          group: "ldap",
        },
        {
          title: "ldap-users",
          enabled: true,
          icon: "mdi-account-network",
          route: "ldap-users",
          group: "ldap",
        },
        {
          title: "ldap-groups",
          enabled: true,
          icon: "mdi-google-circles-group",
          route: "ldap-groups",
          group: "ldap",
        },
        {
          title: "ldap-dns",
          enabled: true,
          enableShortName: true,
          icon: "mdi-dns",
          route: "ldap-dns",
          group: "ldap",
        },
        {
          title: "ldap-gpo",
          enabled: false,
          hidden: true,
          enableShortName: true,
          icon: "mdi-google-circles-extended",
          route: "ldap-gpo",
          group: "ldap",
        },
        {
          title: "settings",
          enabled: true,
          icon: "mdi-cog",
          route: "settings",
          group: "_bot",
        },
        {
          title: "logs",
          enabled: true,
          icon: "mdi-flag-outline",
          route: "logs",
          group: "_bot",
        },
        {
          title: "debug",
          enabled: false,
          hidden: true,
          icon: "mdi-xml",
          route: "debug",
          group: "_bot",
        },
      ],
    };
  },
  async created() {
    let tabIndex = 0;
    if (this.$vuetify.breakpoint.mdAndUp)
      this.navDrawerKeepOpen = true;
    this.navTabs.forEach(t => {
      t.index = tabIndex;
      tabIndex++;
    });
    await new User({}).selfInfo().then((response) => {
      let responseStatus = response.status;
      let admin_allowed = (localStorage.getItem('user.admin_allowed') === 'true');
      response = response.data;

      // If response code is valid
      if (/^20[0-8]|226/.test(responseStatus)) {
        this.username = localStorage.getItem("user.username");
        this.first_name = localStorage.getItem("user.first_name");
        this.last_name = localStorage.getItem("user.last_name");
        this.email = localStorage.getItem("user.email");
        this.refreshTokenExpiryData();
        this.fetchDomainDetails();
        this.showView = true;
      }
      // If response code is an HTTP error code
      else {
        this.logoutAction();
        this.showLogoutDialog = true;
      }

      if (!admin_allowed || admin_allowed == false) {
        this.logoutAction();
        this.showLogoutDialog = true;
      }
    });

    this.setupTimers();
  },
  async mounted() {
    let currentPath = this.$route.path;
    if (currentPath && currentPath.length > 0) {
      let validRoute = this.navTabs.filter(item => "/" + item.route == currentPath && item.enabled == true)[0];
      if (validRoute) {
        this.selectedTab = validRoute.index;
        this.activeTab = validRoute.index;
      } else {
        this.$router.push("/home");
      }
    }

    getDomainDetails();
    this.activeTab = this.selectedTab;
    this.selectedTabTitle = this.navTabs[this.selectedTab].title;
    // ! This refresh is redundant, commented it just in case
    // this.requestRefresh = this.selectedTabTitle
  },
  computed: {
    ldapBackendDisabled() {
      return [this.domain, this.realm, this.basedn].some(
        v => v === undefined || v === null || v.length <= 0
      )
    },
    drawerIsDesktop() {
      return this.$vuetify.breakpoint.lgAndUp
    },
    drawerIsMobile() {
      return !this.drawerIsDesktop
    },
    breakpointName() {
      return this.$vuetify.breakpoint.name;
    },
    getRealmDisplayName() {
      if (this.realm !== undefined && this.realm !== null && this.realm !== "")
        return `${this.realm.toUpperCase()}@`
      return ""
    },
    activeUserName() {
      if (this.last_name && this.last_name.length > 0 &&
        this.first_name && this.first_name.length > 0)
        return `${this.last_name}, ${this.first_name} | ${this.username}`
      return this.getRealmDisplayName + this.username
    },
  },
  methods: {
    ////////////////////////////////////////////////////////////////////////////
    // General Component Methods
    ////////////////////////////////////////////////////////////////////////////
    setInitLoad() {
      if (this.initLoad !== true)
        return
      this.initLoad = false;
      console.log("Initial Load Flag Set.");
    },
    toggleDrawerState() {
      if (this.drawerIsDesktop)
        this.$refs.navigationDrawerDesktop.toggle();
      else
        this.$refs.navigationDrawerMobile.toggle();
    },
    getTabIndex(name) {
      return this.navTabs.findIndex(v => name == v.title)
    },
    getVisibleTabsInGroup(group = null) {
      if (group !== null)
        return this.navTabs.filter(x => x.group == group && !x.hidden)
      return this.navTabs.filter(x => (!("group" in x) || x.group === null) && !x.hidden)
    },
    openSettings() {
      this.showSettingsDialog = true;
      if (this.$refs.UserSettings)
        this.$refs.UserSettings.loadSettings();
    },
    closeAbout() {
      this.showAboutDialog = false;
    },
    closeRefreshDialog() {
      this.showRefreshTokenDialog = false;
      this.resetTimer();
    },
    refreshTokenExpiryData() {
      this.access_expire = parseInt(localStorage.getItem("auth.access_expire"));
      this.refresh_expire = parseInt(localStorage.getItem("auth.refresh_expire"));
    },
    async goToUser(user) {
      // Don't remove this await or the first time the ModularViewContainer
      // mounts it'll break
      await this.updateSelectedTab(this.getTabIndex("ldap-users")); // Index for Users Tab is 1
      setTimeout(() => {
        this.$refs.ModularViewContainerRef.forEach(refObj => {
          console.log(refObj.$refs);
          if (Object.hasOwnProperty.call(refObj.$refs, 'LdapUserView'))
            refObj.$refs.LdapUserView.fetchUser(user);
        });
      }, 1e1);
    },
    async goToGroup(group) {
      // Don't remove this await or the first time the ModularViewContainer
      // mounts it'll break
      await this.updateSelectedTab(this.getTabIndex("ldap-groups")); // Index for Groups Tab is 2
      setTimeout(() => {
        this.$refs.ModularViewContainerRef.forEach(refObj => {
          if (Object.hasOwnProperty.call(refObj.$refs, 'LdapGroupView'))
            refObj.$refs.LdapGroupView.fetchGroup(group);
        });
      }, 1e1);
    },
    async setDomainDetails() {
      let domainData = getDomainDetails();
      this.domain = domainData["name"];
      this.realm = domainData["realm"];
      this.basedn = domainData["basedn"];
    },
    setLDAPBackendStatus() {
      if (this.ldapBackendDisabled) {
        this.navGroups["ldap"].enabled = false;
        this.navGroups.ldap.tooltip = this.$t("navgroup.ldap_hint");
        if (this.selectedTabTitle.startsWith("ldap-"))
          this.updateSelectedTab(this.getTabIndex("home"));
        if (this.$refs?.navigationDrawerDesktop)
          this.$refs.navigationDrawerDesktop.closeAllNavGroups();
      } else {
        this.navGroups["ldap"].enabled = true;
        delete this.navGroups.ldap.tooltip;
      }
    },
    async fetchDomainDetails() {
      this.fetchingDomainDetails = true;
      this.disableDomainDetailsButton = true;
      await new Domain({}).getDetails().then(() => {
        let domainData = getDomainDetails();
        this.domain = domainData['name'];
        this.realm = domainData['realm'];
        this.basedn = domainData['basedn'];
        this.setLDAPBackendStatus();
        this.fetchingDomainDetails = false;
        if ('debug' in domainData)
          this.enableDebug = (domainData['debug'] === "true");
        else this.enableDebug = false;
        setTimeout(() => { this.disableDomainDetailsButton = false; }, 0.5e3);
      })
        .catch(e => {
          this.setLDAPBackendStatus();
          console.error(e);
          this.fetchingDomainDetails = false;
          setTimeout(() => { this.disableDomainDetailsButton = false; }, 0.5e3);
        });
    },
    ////////////////////////////////////////////////////////////////////////////
    // Logout Actions
    ////////////////////////////////////////////////////////////////////////////
    async logoutAction() {
      await new User({}).logout()
        .then(() => {
          localStorage.setItem("auth.logoutMessage", true);
          this.$router.push("/login");
        })
        .catch(e => {
          console.error(e);
        });
    },
    refreshOnLanguageChange() {
      this.langChanged = true;
      setTimeout(() => {
        this.langChanged = false;
      }, 300);
    },
    async updateSelectedTab(index) {
      if (this.selectedTab != index)
        this.selectedTab = index;
      this.activeTab = index;
      this.selectedTabTitle = this.navTabs[this.selectedTab].title;
      this.requestRefresh = this.selectedTabTitle;
      this.lockNavTabs = true;
      getDomainDetails();
      let routeToPush = "";
      this.navTabs.forEach((item) => {
        if (item.index == index && item.enabled == true) {
          if (item.route.length > 0) {
            routeToPush = item.route;
          } else {
            routeToPush = "";
          }
        }
      });
      if (this.$route.path != "/" + routeToPush) {
        this.$router.push("/" + routeToPush);
      }
      // Wait for watch to register requestRefresh prop change
      setTimeout(() => {
        this.requestRefresh = "";
        this.lockNavTabs = false;
      }, 1e2);
    },
    ////////////////////////////////////////////////////////////////////////////
    // Refresh Token Timers
    // What happens when the timer stops
    ////////////////////////////////////////////////////////////////////////////
    async handleInactive() {
      // ! Dates in EPOCH - Milliseconds
      const accessClockLimit = this.access_expire;
      const refreshClockLimit = this.refresh_expire;
      const clockDifference = refreshClockLimit - accessClockLimit;
      if (Date.now() >= accessClockLimit && Date.now() < refreshClockLimit) {
        if (localStorage.getItem('auth.auto_refresh_token') == 'true') {
          await new User({}).selfInfo()
            .then(() => { this.resetTimer(); })
            .catch((error) => { console.error(error); });
        } else if (!this.showRefreshTokenDialog) {
          this.timeoutId = setTimeout(this.handleInactive, clockDifference);
          this.showRefreshTokenDialog = true;
          if (this.$refs.RefreshTokenDialog != undefined)
            this.$refs.RefreshTokenDialog.startCountdown();
        }
      } else if (Date.now() >= refreshClockLimit) {
        this.showLogoutDialog = true;
        this.showRefreshTokenDialog = false;
      }
      else {
        this.resetTimer();
      }
    },
    startTimer() {
      this.refreshTokenExpiryData();
      const refreshClock = Date.parse(localStorage.getItem("auth.refreshClock"));
      const accessClockLimit = this.access_expire;
      const clockDifference = accessClockLimit - refreshClock;
      // setTimeout returns an ID (can be used to start or clear a timer)
      this.timeoutId = setTimeout(this.handleInactive, clockDifference);
    },
    resetTimer() {
      clearTimeout(this.timeoutId);
      this.startTimer();
    },
    setupTimers() {
      this.startTimer();
    },
    async debugAction() {
      console.log('This button should be removed and/or disabled in production');
      await new Test({}).get()
        .then(response => {
          console.log(response);
        })
        .catch(error => {
          console.error(error);
        });
    }
  },
};
const __cssModules$3 = {};
var __component__$3 = /*#__PURE__*/normalizeComponent(
  __vue2_script$3,
  render$3,
  staticRenderFns$3,
  false,
  __vue2_injectStyles$3,
  null,
  null,
  null
);

function __vue2_injectStyles$3 (context) {
  for(let o in __cssModules$3){
    this[o] = __cssModules$3[o];
  }
}

var HomeView = /*#__PURE__*/(function () { return __component__$3.exports })();

class Oidc extends ApiModel {
	client_id;
	redirect_uri;
	/**
	 * Fetches model instance from API by id.
	 * @param {Number} id 
	 */
	constructor(data) {
		super(data);
		Object.keys(data).forEach(key => {
			this[key] = data[key];
		});
	}

	async consent(data) {
		return await interlock_backend.call('oidc/consent', data)
	}
}

var render$2 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_91,[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 my-4",attrs:{"cols":"12"}},[_c('h1',[_vm._v(" "+_vm._s(_vm.applicationName)+" ")])]),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 mb-6",attrs:{"cols":"12"}},[_c('p',{staticClass:"ma-0 pa-0"},[_vm._v(_vm._s(_vm.$t("section.login.oidcRequestedByApp")))])])],1)};
var staticRenderFns$2 = [];

/* unplugin-vue-components disabled *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

const __vue2_script$2 = {
	data() {
		return {
		}
	},
	props: {
		applicationName: String
	}
};
const __cssModules$2 = {};
var __component__$2 = /*#__PURE__*/normalizeComponent(
  __vue2_script$2,
  render$2,
  staticRenderFns$2,
  false,
  __vue2_injectStyles$2,
  null,
  null,
  null
);

function __vue2_injectStyles$2 (context) {
  for(let o in __cssModules$2){
    this[o] = __cssModules$2[o];
  }
}

var OIDCWidget = /*#__PURE__*/(function () { return __component__$2.exports })();

var render$1 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(__unplugin_components_10$1,{staticClass:"ma-0 pa-0 justify-center align-items-center",attrs:{"id":"login-container","fluid":"","fill-height":""}},[_c(__unplugin_components_76,{staticClass:"pa-12",attrs:{"id":"login-card","width":_vm.$vuetify.breakpoint.mdAndUp ? '800px' : '60vw',"dark":_vm.isThemeDark(_vm.$vuetify),"light":!_vm.isThemeDark(_vm.$vuetify)}},[_c(__unplugin_components_91,{staticClass:"my-2",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_1,{attrs:{"contain":"","max-width":"450px","aspect-ratio":14 / 3,"src":_vm.isThemeDark(_vm.$vuetify) ? _vm.logoLight : _vm.logoDark}})],1),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[_c(__unplugin_components_18,{ref:"loginform",attrs:{"id":"login-form-container","color":"transparent","ripple":""},on:{"submit":function($event){$event.preventDefault();}},model:{value:(_vm.valid),callback:function ($$v) {_vm.valid=$$v;},expression:"valid"}},[_c(__unplugin_components_88,{attrs:{"align":"center"}},[_c(VExpandTransition,[(_vm.viewModes.login)?_c('div',[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 my-4",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 px-2",attrs:{"small":"","outlined":"","color":"primary-s"},on:{"click":function($event){_vm.loginWithUsername = !_vm.loginWithUsername; _vm.username = ''; _vm.email = ''; _vm.$refs.loginform.resetValidation();}}},[(_vm.loginWithUsername)?_c('span',[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-email ")]),_vm._v(" "+_vm._s(_vm.$t("section.login.useEmail"))+" ")],1):_c('span',[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-account ")]),_vm._v(" "+_vm._s(_vm.$t("section.login.useLDAPUser"))+" ")],1)])],1),(_vm.loginWithUsername)?_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_89,{staticClass:"font-weight-bold",attrs:{"outlined":"","dense":"","label":_vm.$t('attribute.user.username'),"prepend-inner-icon":"mdi-account","disabled":_vm.submitted,"validate-on-blur":"","rules":[this.fieldRules(_vm.username, 'ge_name', true)],"required":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.submit()}},model:{value:(_vm.username),callback:function ($$v) {_vm.username=$$v;},expression:"username"}})],1):_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_89,{staticClass:"font-weight-bold",attrs:{"autofocus":"","outlined":"","dense":"","label":_vm.$t('attribute.user.email'),"prepend-inner-icon":"mdi-email","disabled":_vm.submitted,"validate-on-blur":"","rules":[this.fieldRules(_vm.email, 'ge_email', true)],"required":""},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.submit()}},model:{value:(_vm.email),callback:function ($$v) {_vm.email=$$v;},expression:"email"}})],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_89,{staticClass:"font-weight-bold",attrs:{"outlined":"","dense":"","label":_vm.$t('attribute.user.password'),"type":_vm.hidePassword ? 'password' : 'text',"prepend-inner-icon":"mdi-lock","disabled":_vm.submitted,"required":"","append-icon":_vm.hidePassword ? 'mdi-eye' : 'mdi-eye-off'},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.submit()},"click:append":function () { return (_vm.hidePassword = !_vm.hidePassword); }},model:{value:(_vm.password),callback:function ($$v) {_vm.password=$$v;},expression:"password"}})],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(LanguageSelector,{staticClass:"font-weight-medium",attrs:{"full-width":""}})],1),_c(__unplugin_components_91,{attrs:{"justify":"center"}},[_c(ThemeChanger,{staticClass:"font-weight-medium ma-6",attrs:{"buttonIsSwitch":true}})],1)],1):_vm._e()]),_c(VExpandTransition,[(_vm.viewModes.totp)?_c('div',[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"id":"RowRCM","justify":"center"}},[_c(VSlideYTransition,[(!_vm.recovery_mode && !_vm.rcm_animation)?_c(__unplugin_components_25$1,{ref:"f_totp_code",staticClass:"ma-0 pa-0 font-weight-bold",attrs:{"disabled":_vm.submitted,"label":_vm.$t('attribute.user.totp_code'),"rules":[this.fieldRules(_vm.totp_code, 'auth_totp')],"dense":"","required":"","type":"text"},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.submit()},"keypress":_vm.isNumber,"paste":_vm.isNumber},model:{value:(_vm.totp_code),callback:function ($$v) {_vm.totp_code=$$v;},expression:"totp_code"}}):(_vm.recovery_mode && !_vm.rcm_animation)?_c(__unplugin_components_89,{ref:"f_recovery_code",staticClass:"font-weight-bold",attrs:{"disabled":_vm.submitted,"label":_vm.$t('attribute.user.recovery_code'),"rules":[this.fieldRules(_vm.recovery_code, 'auth_recovery')],"dense":"","outlined":"","prepend-inner-icon":"mdi-code-array","required":"","type":"text"},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.submit()}},model:{value:(_vm.recovery_code),callback:function ($$v) {_vm.recovery_code=$$v;},expression:"recovery_code"}}):_vm._e()],1)],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-0",attrs:{"justify":"center"}},[_c(__unplugin_components_28,{staticClass:"ma-0 pa-0",attrs:{"label":_vm.$t('section.login.useRecoveryCode'),"value":_vm.recovery_mode},on:{"click":_vm.toggleRCM}})],1)],1):_vm._e()]),(_vm.viewModes.oidc)?_c(OIDCWidget,{attrs:{"application-name":_vm.oidc.application}}):_vm._e(),_c(__unplugin_components_91,{staticClass:"mt-2",attrs:{"justify":"center"}},[_c(VExpandTransition,[(_vm.error == true || _vm.errorMsg != '')?_c(__unplugin_components_17,{attrs:{"type":_vm.loginForbiddenCount > 2 && _vm.error ? (_vm.loginForbiddenCount > 4 ? 'error' : 'warning') : 'info'}},[_vm._v(" "+_vm._s(this.errorMsg)+" ")]):_vm._e()],1)],1),_c(__unplugin_components_91,{staticClass:"pa-2 mt-4",attrs:{"justify":"center"}},[_c(VExpandXTransition,[(_vm.viewModes.totp)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_94,{staticClass:"primary white--text elevation-0 pa-0 ma-0 px-3 py-2 ma-3",attrs:{"disabled":_vm.submitted || (_vm.userIdentifier.length == 0 || this.password.length == 0) || !_vm.valid},on:{"click":_vm.goBack}},[_vm._v(" "+_vm._s(_vm.$t("actions.back"))+" ")])],1):_vm._e()],1),_c(VExpandXTransition,[(_vm.viewModes.login || _vm.viewModes.totp)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_94,{staticClass:"primary white--text elevation-0 pa-0 ma-0 px-3 py-2 ma-3",attrs:{"loading":_vm.submitted,"disabled":_vm.disableLoginBtn},on:{"click":_vm.submit}},[_vm._v(" "+_vm._s(_vm.$t("section.login.loginBtn"))+" ")])],1):_vm._e()],1),_c(VExpandXTransition,[(_vm.viewModes.oidc)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_94,{staticClass:"primary white--text elevation-0 pa-0 ma-0 px-3 py-2 ma-3",attrs:{"loading":_vm.submitted && _vm.oidc.accepted_consent,"disabled":_vm.submitted},on:{"click":function($event){return _vm.consentResponse(true)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.accept"))+" ")])],1):_vm._e()],1),_c(VExpandXTransition,[(_vm.viewModes.oidc)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_94,{staticClass:"white--text elevation-0 pa-0 ma-0 px-3 py-2 ma-3",attrs:{"loading":_vm.submitted && !_vm.oidc.accepted_consent,"disabled":_vm.submitted,"color":"error-65"},on:{"click":function($event){return _vm.consentResponse(false)}}},[_vm._v(" "+_vm._s(_vm.$t("actions.decline"))+" ")])],1):_vm._e()],1)],1)],1)],1)],1)],1),_c(__unplugin_components_46$1,{staticClass:"mb-12",attrs:{"timeout":"3e3","dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)},scopedSlots:_vm._u([{key:"action",fn:function(ref){
var attrs = ref.attrs;
return [_c(__unplugin_components_94,_vm._b({attrs:{"icon":"","text":""},on:{"click":function($event){_vm.logoutSnackbar = false;}}},'v-btn',attrs,false),[_c(__unplugin_components_95,[_vm._v(" mdi-close ")])],1)]}}]),model:{value:(_vm.logoutSnackbar),callback:function ($$v) {_vm.logoutSnackbar=$$v;},expression:"logoutSnackbar"}},[_vm._v(" "+_vm._s(_vm.snackbarMessage)+" ")])],1)};
var staticRenderFns$1 = [];

/* unplugin-vue-components disabled */var LoginView_vue_vue_type_style_index_0_scoped_true_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script$1 = {
	name: "LoginView",
	mixins: [validationMixin, utilsMixin],
	components: {
		LanguageSelector,
		ThemeChanger,
		OIDCWidget
	},
	async created() {
		this.version = await getRuntimeConfig()
			.then(function (json) {
				localStorage.setItem("interlock.version", json.version);
			});
	},
	computed: {
		userIdentifierKey() {
			return this.loginWithUsername ? "username" : "email"
		},
		userIdentifier() {
			return this.loginWithUsername ? this.username : this.email
		},
		disableLoginBtn() {
			if (this.submitted)
				return true
			if (this.userIdentifier.length == 0 || this.password.length == 0)
				return true
			if (!this.valid)
				return true
			if (this.viewModes.totp) {
				if (!this.recovery_mode && this.totp_code.length <= 0) return true
				if (this.recovery_mode && this.recovery_code.length <= 0) return true
			}
			return false
		}
	},
	data() {
		return {
			viewModes: {
				login: false,
				totp: false,
				oidc: false
			},
			rcm_animation: false,
			recovery_mode: false,
			recovery_code: "",
			logoLight: '/logo/interlock-logo-wt-dark.svg',
			logoDark: '/logo/interlock-logo-wt-light.svg',
			loginWithUsername: true,
			loginForbiddenCount: 0,
			timeoutCounter: 30,
			timedOut: false,
			timeoutInterval: false,
			valid: false,
			error: false,
			errorMsg: "",
			username: "",
			email: "",
			password: "",
			totp_code: "",
			submitted: false,
			logoutSnackbar: false,
			snackbarMessage: "",
			next: "",
			oidc: {
				application: "",
				error: false,
				error_detail: "",
				client_id: "",
				redirect_uri: "",
				require_consent: false,
				reuse_consent: false,
				accepted_consent: false
			},
			hidePassword: true,
		};
	},
	mounted() {
		this.next = this.$route.query.next || "";
		this.oidc.error = this.$route.query.error === "true" || false;
		this.oidc.error_detail = this.$route.query.error_detail || "";
		if (this.next !== "") {
			this.oidc = this.$route.query;
			const bool_values = [
				"require_consent",
				"reuse_consent",
			];
			bool_values.forEach(b => {
				this.oidc[b] = this.oidc[b] === "true";
			});
		}
		let errInStorage = parseInt(localStorage.getItem('auth.loginForbiddenCount'));
		let timedOutStorage = Boolean(localStorage.getItem('auth.loginTimedOut'));
		let timeOutCounterStorage = parseInt(localStorage.getItem('auth.loginTimeOutCounter'));
		if (Number.isInteger(errInStorage))
			this.loginForbiddenCount = errInStorage;
		if (Number.isInteger(timeOutCounterStorage))
			this.timeoutCounter = timeOutCounterStorage;
		if (timedOutStorage == true && this.timeoutCounter > 0)
			this.timedOut = timedOutStorage;

		if (this.timedOut == true)
			this.setLoginTimeout();

		if (this.loginForbiddenCount > 0)
			this.error = true;

		if (this.oidc.error === true)
			this.adviseFailedOIDC();

		let userJustLoggedOut = localStorage.getItem('auth.logoutMessage');
		if (userJustLoggedOut) {
			this.snackbarMessage = this.$t("misc.loggedOut").toUpperCase();
			this.viewModes.login = true;
			this.logoutSnackbar = true;
			localStorage.removeItem('auth.logoutMessage');
		} else {
			let admin_allowed = localStorage.getItem('user.admin_allowed');
			new User({}).selfFetch()
				.then(() => {
					console.log("User is already logged in.");
					if (this.next !== "")
						this.redirectOIDC();
					else if (!this.error) {
						if (admin_allowed === 'true')
							this.$router.push("/home");
						else
							this.$router.push("/enduser");
					}
				})
				.catch(e => {
					if (!ignoreErrorCodes.includes(e.status)) {
						console.error(e);
						this.viewModes.login = true;
					} else {
						this.viewModes.login = true;
						if (this.next !== "")
							this.errorMsg = this.$t("section.login.loginForOidc");
					}
				});
		}
	},
	watch: {
		recovery_mode(v) {
			if (v === true) this.totp_code = "";
			else this.recovery_code = "";
		},
		validateForm() {
			if (!this.$refs.loginform.validate()) {
				this.valid = false;
				return;
			}
			this.valid = true;
			return;
		},
		totp_code(v) {
			if (v == "") return
			if (!isNaN(v) && this.fieldRules(this.totp_code, 'auth_totp') === true)
				setTimeout(() => {
					this.submit();
				}, 1e2);
		},
	},
	methods: {
		adviseFailedOIDC() {
			this.error = true;
			this.errorMsg = this.getMessageForCode(`${this.oidc.error_detail}`);
		},
		goToNextURI() {
			let decodedURL = decodeURIComponent(this.next);
			window.location.href = decodedURL;
		},
		async consentResponse(consent) {
			this.submitted = true;
			if (consent !== true)
				window.location.href = decodeURIComponent(this.oidc.redirect_uri);
			this.oidc.accepted_consent = consent;
			await new Oidc({}).consent(Object.assign({ allow: consent }, this.oidc))
				.then(response => {
					let data = response.data.data;
					this.submitted = false;
					this.next = data.redirect_uri;
					this.goToNextURI();
				})
				.catch(e => {
					if (e?.code == 401) {
						this.viewModes.login = true;
						this.viewModes.oidc = false;
					}
					console.error(e);
					this.errorMsg = this.getMessageForCode(e);
					this.error = true;
					this.submitted = false;
				});
		},
		redirectOIDC() {
			if (this.oidc.require_consent == true) {
				this.viewModes.login = false;
				this.viewModes.totp = false;
				this.submitted = false;
				this.viewModes.oidc = true;
				if (this.error !== true)
					this.errorMsg = "";
			} else {
				this.goToNextURI();
			}
		},
		toggleRCM() {
			this.rcm_animation = true;
			this.recovery_mode = !this.recovery_mode;
			setTimeout(() => {
				this.rcm_animation = false;
			}, 300);
		},
		goBack() {
			this.totp_code = "";
			this.viewModes.totp = false;
			this.viewModes.login = true;
		},
		setLoginTimeout() {
			this.timedOut = true;
			if (!this.timeoutCounter)
				this.timeoutCounter = 30;
			localStorage.setItem('auth.loginTimedOut', true);
			localStorage.setItem('auth.loginTimeOutCounter', this.timeoutCounter);
			this.submitted = false;
			this.valid = false;
			this.error = true;
			this.errorMsg = this.$t("section.login.tooManyLogins") + " (" + this.timeoutCounter + " " + this.$t("words.seconds") + ")";
			this.timeoutInterval = setInterval(() => {
				if (this.timeoutCounter == 0) {
					this.clearLoginTimeout();
					this.valid = true;
					this.errorMsg = this.$t("section.login.tryAgain");
					clearInterval(this.timeoutInterval);
					setTimeout(() => { this.error = false; }, 2500);
				}
				else {
					this.timeoutCounter -= 1;
					this.valid = false;
					localStorage.setItem('auth.loginTimeOutCounter', this.timeoutCounter);
					if (this.timeoutCounter == 1)
						this.errorMsg = this.$t("section.login.tooManyLogins") + " (" + this.timeoutCounter + " " + this.$t("words.seconds") + ")";
					this.errorMsg = this.$t("section.login.tooManyLogins") + " (" + this.timeoutCounter + " " + this.$t("words.seconds") + ")";
				}
			}, 1000);
		},
		clearLoginTimeout() {
			localStorage.removeItem('auth.loginForbiddenCount');
			localStorage.removeItem('auth.loginTimedOut');
			localStorage.removeItem('auth.loginTimeOutCounter');
			this.timedOut = false;
			this.timeoutCounter = 30;
			this.loginForbiddenCount = 0;
		},
		async submit() {
			if (!this.$refs.loginform.validate())
				return
			if (this.userIdentifier.length == 0 || this.password.length == 0) {
				this.error = true;
				this.errorMsg = this.$t("section.login.invalidCredentials");
			}
			else {
				this.submitted = true;
				setTimeout(() => {
					if (this.submitted && !this.error) {
						this.submitted = false;
						this.error = true;
						this.errorMsg = this.getMessageForCode("ERR_LDAP_GW");
					}
				}, 10000);
				let user = new User({});
				let data = { username: this.userIdentifier, password: this.password };
				if (this.totp_code.length > 0 && !this.recovery_mode)
					data.totp_code = this.totp_code;
				else if (this.recovery_code.length > 0)
					data.recovery_code = this.recovery_code;
				await user.login(data)
					.then(response => {
						if (response.data != undefined) {
							this.error = false;
							this.errorMsg = "";
							localStorage.removeItem('auth.loginForbiddenCount');
							this.clearLoginTimeout();
							if (this.next !== "")
								this.redirectOIDC();
							else if (!this.error) {
								if (response.data.admin_allowed === true)
									this.$router.push("/home");
								else
									this.$router.push("/enduser");
							}
						}
					})
					.catch(e => {
						if (e?.response?.data?.code == "otp_required") {
							this.viewModes.login = false;
							this.viewModes.totp = true;
							this.submitted = false;
							this.error = false;
							return
						}
						this.submitted = false;
						this.error = true;
						let retriesLeft = e?.data?.remaining_login_count;
						let retriesLeftMsg = this.$t("section.login.retriesLeft");
						if (retriesLeft == 1)
							retriesLeftMsg = this.$t("section.login.oneRetryLeft");
						if (e.status == 401) {
							if (!Number.isInteger(retriesLeft))
								this.errorMsg = this.$t('error.codes.auth.invalid_credentials');
							else if (retriesLeft > 0)
								this.errorMsg = this.$t('error.codes.auth.invalid_credentials') + " (" + retriesLeft + " " + retriesLeftMsg + ")";
							else
								this.setLoginTimeout();
						}
						else {
							this.errorMsg = this.getMessageForCode(e);
						}
					});
			}
		},
		gotoPasswRecovery: function () { },
	},
};
const __cssModules$1 = {};
var __component__$1 = /*#__PURE__*/normalizeComponent(
  __vue2_script$1,
  render$1,
  staticRenderFns$1,
  false,
  __vue2_injectStyles$1,
  "585feb6c",
  null,
  null
);

function __vue2_injectStyles$1 (context) {
  for(let o in __cssModules$1){
    this[o] = __cssModules$1[o];
  }
}

var LoginView = /*#__PURE__*/(function () { return __component__$1.exports })();

var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.showView)?_c('div',{staticClass:"enduser"},[_c(__unplugin_components_91,{staticClass:"ma-0 pa-0 px-4 transition-speed-fix",staticStyle:{"background":"var(--v-secondary-10-base)"},attrs:{"align":"center","justify":"space-between"}},[_c(__unplugin_components_1,{staticClass:"my-3",attrs:{"max-width":"30ch","max-height":"5em","contain":"","aspect-ratio":32 / 9,"src":!_vm.isThemeDark(_vm.$vuetify) ? _vm.logoLight : _vm.logoDark}}),_c('h2',{staticClass:"ma-2 my-4 font-weight-medium",staticStyle:{"color":"var(--v-text-background-base)"}},[_vm._v(_vm._s(_vm.domain.toUpperCase()))])],1),_c(__unplugin_components_91,{staticClass:"ma-0 pa-2 transition-speed-fix",staticStyle:{"background":"var(--v-secondary-10-base)","height":"fit-content"},attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"align":"center"}},[_c(__unplugin_components_88,{attrs:{"cols":"12","md":"auto"}},[_c(LanguageSelector,{attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify)}})],1),(this.$vuetify.breakpoint.mdAndUp)?_c(__unplugin_components_5,{staticClass:"ma-6",staticStyle:{"border-color":"var(--v-primary-base)"}}):_vm._e(),(!this.$vuetify.breakpoint.mdAndUp && _vm.realm && _vm.realm != '')?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0 my-3"},[(_vm.last_name && _vm.last_name != '' && _vm.first_name && _vm.first_name != '')?_c('span',{staticStyle:{"color":"var(--v-white-d-base)"}},[_vm._v(" "+_vm._s(_vm.last_name + ", " + _vm.first_name + " | " + _vm.realm.toUpperCase() + '@' + _vm.username)+" ")]):_c('span',{staticStyle:{"color":"var(--v-white-d-base)"}},[_vm._v(" "+_vm._s(_vm.realm.toUpperCase() + '@' + _vm.username)+" ")])]):_vm._e(),_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"auto"}},[_c('div',{staticClass:"mt-2 mr-4"},[_c(UserAccountDropdown,{attrs:{"extraClasses":'mr-3 px-2',"icon":"mdi-account-cog","color":"primary","show-preferences-menu":"","username":_vm.activeUserName},on:{"logout":_vm.logoutAction,"openSettings":_vm.openSettings}}),_c(ThemeChanger,{attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"buttonIsSmall":true}})],1)])],1),_c(__unplugin_components_10$1,[_c(__unplugin_components_76,{staticClass:"ma-0 pa-0"},[_c(__unplugin_components_12$2,{attrs:{"color":_vm.error ? 'red' : 'primary',"indeterminate":_vm.loading}}),_c(VCardTitle,[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-uppercase",attrs:{"justify":"center"}},[_vm._v(" "+_vm._s(_vm.first_name.length > 0 && _vm.last_name.length > 0 ? _vm.$t('section.enduser.title') + " " + _vm.first_name + " " + _vm.last_name : _vm.$t('section.enduser.title') + ' ' + _vm.username)+" ")])],1),_c(VCardText,{staticClass:"pa-0 ma-0"},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center"}},[(_vm.showEnduserHelpMessage)?_c(__unplugin_components_17,{attrs:{"type":"info","dismissible":"","close-icon":"mdi-close"},on:{"input":function($event){return _vm.disableEnduserHelpMessage()}}},[_vm._v(" "+_vm._s(_vm.$t("section.enduser.helpMessage"))+" ")]):_vm._e()],1),_c(__unplugin_components_18,{ref:"endUserForm",on:{"submit":function($event){$event.preventDefault();}}},[(_vm.isLDAPUser)?_c(__unplugin_components_91,{staticClass:"ma-2 mt-0",attrs:{"align-content":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":_vm.isLDAPUser ? 6 : 12}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-3 mb-5",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'start'}},[_vm._v(" "+_vm._s(_vm.$t('section.users.basicDetails'))+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"first_name","label":_vm.$t('attribute.first_name'),"rules":[this.fieldRules(_vm.usercopy.first_name, 'ge_name')]},model:{value:(_vm.usercopy.first_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "first_name", $$v);},expression:"usercopy.first_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_name","label":_vm.$t('attribute.last_name'),"rules":[this.fieldRules(_vm.usercopy.last_name, 'ge_name')]},model:{value:(_vm.usercopy.last_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "last_name", $$v);},expression:"usercopy.last_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"username","label":_vm.$t('attribute.user.username'),"hint":_vm.$t('words.readOnly'),"readonly":""},model:{value:(_vm.usercopy.username),callback:function ($$v) {_vm.$set(_vm.usercopy, "username", $$v);},expression:"usercopy.username"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"mail","label":_vm.$t('attribute.user.email'),"rules":[this.fieldRules(_vm.usercopy.mail, 'ge_mail')]},model:{value:(_vm.usercopy.mail),callback:function ($$v) {_vm.$set(_vm.usercopy, "mail", $$v);},expression:"usercopy.mail"}})],1),(_vm.user.last_login_win32 != undefined && _vm.user.last_login_win32 != '')?_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.last_login') + ": " + _vm.user.last_login_win32)+" ")]):_vm._e(),(_vm.userClass == _vm.user)?_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"phone","label":_vm.$t('attribute.phone'),"rules":[this.fieldRules(_vm.usercopy.phone, 'ge_phone_intl')]},model:{value:(_vm.usercopy.phone),callback:function ($$v) {_vm.$set(_vm.usercopy, "phone", $$v);},expression:"usercopy.phone"}})],1):_vm._e(),(_vm.userClass == _vm.user)?_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"website","label":_vm.$t('attribute.website'),"rules":[this.fieldRules(_vm.usercopy.website, 'ge_website')]},model:{value:(_vm.usercopy.website),callback:function ($$v) {_vm.$set(_vm.usercopy, "website", $$v);},expression:"usercopy.website"}})],1):_vm._e()],1)],1)],1),(_vm.isLDAPUser)?_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12","md":"6"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 text-h6 mx-4 mb-5",attrs:{"justify":this.$vuetify.breakpoint.smAndDown ? 'center' : 'end'}},[_vm._v(" "+_vm._s(_vm.$t('section.users.location'))+" ")]),_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"street_address","label":_vm.$t('attribute.street_address'),"rules":[this.fieldRules(_vm.usercopy.street_address, 'ge_address_street')]},model:{value:(_vm.usercopy.street_address),callback:function ($$v) {_vm.$set(_vm.usercopy, "street_address", $$v);},expression:"usercopy.street_address"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"postal_code","label":_vm.$t('attribute.postal_code'),"rules":[this.fieldRules(_vm.usercopy.postal_code, 'ge_address_postal_code')]},model:{value:(_vm.usercopy.postal_code),callback:function ($$v) {_vm.$set(_vm.usercopy, "postal_code", $$v);},expression:"usercopy.postal_code"}})],1),_c(__unplugin_components_88,{class:this.$vuetify.breakpoint.smAndUp ? 'mt-3' : '',attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"city","label":_vm.$t('attribute.city'),"rules":[this.fieldRules(_vm.usercopy.city, 'ge_address_city')]},model:{value:(_vm.usercopy.city),callback:function ($$v) {_vm.$set(_vm.usercopy, "city", $$v);},expression:"usercopy.city"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_76,{directives:[{name:"ripple",rawName:"v-ripple"}],staticClass:"pa-1 py-2",attrs:{"outlined":""}},[(_vm.user.country_code_dcc != undefined && _vm.user.country_code_dcc != '' && _vm.user.country_code_dcc != 0)?_c('div',[_vm._v(" "+_vm._s(_vm.$t('attribute.country_codes'))+" "),_c('div',{attrs:{"elevation":"0"}},[_vm._v(" "+_vm._s(_vm.user.country_code_dcc)+" "+_vm._s("(" + _vm.user.country_code_iso + ")")+" ")])]):_c('div',[_vm._v(" "+_vm._s(_vm.$t('attribute.country_codes'))+" "),_c('div',[_vm._v(" "+_vm._s(_vm.$t('error.data.noCountryCode'))+" ")])])])],1),(_vm.user.last_login != undefined && _vm.user.last_login != '')?_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.last_login') + ": " + _vm.user.last_login)+" ")]):_vm._e(),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"state_province","label":_vm.$t('attribute.state_province'),"rules":[this.fieldRules(_vm.usercopy.state_province, 'ge_state')]},model:{value:(_vm.usercopy.state_province),callback:function ($$v) {_vm.$set(_vm.usercopy, "state_province", $$v);},expression:"usercopy.state_province"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_53,{attrs:{"dense":"","id":"country_name","label":_vm.$t('attribute.country_name'),"items":_vm.LDAPCountries,"rules":[this.fieldRules(_vm.usercopy.country_name, 'ge_country')]},model:{value:(_vm.usercopy.country_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "country_name", $$v);},expression:"usercopy.country_name"}})],1)],1)],1)],1):_vm._e()],1):_vm._e(),(_vm.isLDAPUser)?_c(__unplugin_components_91,{staticClass:"ma-2"},[_c(__unplugin_components_55,{staticClass:"ma-1",attrs:{"flat":""}},[_c(__unplugin_components_56,{staticClass:"outlined"},[_c(__unplugin_components_57,{staticClass:"font-weight-medium"},[_vm._v(" "+_vm._s(_vm.$t("section.users.advancedDetails") + " (" + _vm.$t("words.readOnly") + ")")+" ")]),_c(__unplugin_components_58,[(_vm.userClass == _vm.user)?_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"8"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"distinguished_name","label":_vm.$t('attribute.distinguished_name'),"readonly":"","rules":[this.fieldRules(_vm.usercopy.distinguished_name, 'ldap_dn')]},model:{value:(_vm.usercopy.distinguished_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "distinguished_name", $$v);},expression:"usercopy.distinguished_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"user_principal_name","label":_vm.$t('attribute.user_principal_name'),"readonly":"","rules":[this.fieldRules(_vm.usercopy.user_principal_name, 'ldap_usn')]},model:{value:(_vm.getUSN),callback:function ($$v) {_vm.getUSN=$$v;},expression:"getUSN"}})],1)],1):_vm._e(),_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"created_at","label":_vm.$t('attribute.created_at'),"readonly":""},model:{value:(_vm.usercopy.created_at),callback:function ($$v) {_vm.$set(_vm.usercopy, "created_at", $$v);},expression:"usercopy.created_at"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"modified_at","label":_vm.$t('attribute.modified_at'),"readonly":""},model:{value:(_vm.usercopy.modified_at),callback:function ($$v) {_vm.$set(_vm.usercopy, "modified_at", $$v);},expression:"usercopy.modified_at"}})],1)],1),(_vm.userClass == _vm.user)?_c(__unplugin_components_91,[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_login_win32","label":_vm.$t('attribute.last_login_win32'),"readonly":""},model:{value:(_vm.usercopy.last_login_win32),callback:function ($$v) {_vm.$set(_vm.usercopy, "last_login_win32", $$v);},expression:"usercopy.last_login_win32"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"password_set_at","label":_vm.$t('attribute.password_set_at'),"readonly":""},model:{value:(_vm.usercopy.password_set_at),callback:function ($$v) {_vm.$set(_vm.usercopy, "password_set_at", $$v);},expression:"usercopy.password_set_at"}})],1)],1):_vm._e()],1)],1)],1)],1):_c(__unplugin_components_91,{staticClass:"ma-2 mt-0",attrs:{"align-content":"center"}},[_c(__unplugin_components_88,{staticClass:"ma-0 pa-0",attrs:{"cols":"12"}},[_c(__unplugin_components_76,{staticClass:"ma-1 pa-4",attrs:{"outlined":"","height":"100%"}},[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0 font-weight-medium"},[_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"first_name","label":_vm.$t('attribute.first_name'),"rules":[this.fieldRules(_vm.usercopy.first_name, 'ge_name')]},model:{value:(_vm.usercopy.first_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "first_name", $$v);},expression:"usercopy.first_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"last_name","label":_vm.$t('attribute.last_name'),"rules":[this.fieldRules(_vm.usercopy.last_name, 'ge_name')]},model:{value:(_vm.usercopy.last_name),callback:function ($$v) {_vm.$set(_vm.usercopy, "last_name", $$v);},expression:"usercopy.last_name"}})],1),_c(__unplugin_components_88,{attrs:{"cols":"12","lg":"4"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"email","label":_vm.$t('attribute.user.email'),"rules":[this.fieldRules(_vm.usercopy.email, 'ge_mail')]},model:{value:(_vm.usercopy.email),callback:function ($$v) {_vm.$set(_vm.usercopy, "email", $$v);},expression:"usercopy.email"}})],1),(_vm.user.last_login != undefined && _vm.user.last_login != '')?_c(__unplugin_components_88,{attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t('attribute.last_login') + ": " + _vm.user.last_login)+" ")]):_vm._e()],1),_c(__unplugin_components_91,{attrs:{"justify":"center","no-gutters":""}},[_c(__unplugin_components_88,{staticClass:"px-2 my-2",attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"dn","label":_vm.$t('attribute.created_at'),"value":_vm.user.created_at,"readonly":""}})],1),_c(__unplugin_components_88,{staticClass:"px-2 my-2",attrs:{"cols":"12","lg":"6"}},[_c(__unplugin_components_89,{attrs:{"dense":"","id":"dn","label":_vm.$t('attribute.modified_at'),"value":_vm.user.modified_at,"readonly":""}})],1)],1)],1)],1)],1)],1)],1),_c(VCardActions,[_c(__unplugin_components_91,{staticClass:"pa-0 ma-0",attrs:{"justify":"center","align":"center"}},[_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"color":"primary","disabled":!_vm.allowPasswordChange,"rounded":""},on:{"click":function($event){return _vm.openDialog('userResetPassword')}}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-key-variant ")]),_vm._v(" "+_vm._s(_vm.$t("actions.changeEnduserPassword"))+" ")],1),_c(__unplugin_components_94,{staticClass:"ma-0 pa-0 pa-4 ma-1",attrs:{"dark":!_vm.isThemeDark(_vm.$vuetify),"light":_vm.isThemeDark(_vm.$vuetify),"rounded":""},on:{"click":_vm.saveUser}},[_c(__unplugin_components_95,{staticClass:"mr-1"},[_vm._v(" mdi-content-save ")]),_vm._v(" "+_vm._s(_vm.$t("actions.save"))+" ")],1),_c(RefreshButton,{attrs:{"dense":"","loading":_vm.loading},on:{"refresh":_vm.refreshUser}})],1)],1)],1)],1),_c(NotificationBusContainer),_c(__unplugin_components_104,{attrs:{"max-width":"48rem"},model:{value:(_vm.showSettingsDialog),callback:function ($$v) {_vm.showSettingsDialog=$$v;},expression:"showSettingsDialog"}},[_c(UserSettings,{ref:"UserSettings",attrs:{"username":_vm.username,"first-name":_vm.first_name,"last-name":_vm.last_name,"admin-mode":"","domain":_vm.domain,"realm":_vm.realm},on:{"close":function($event){_vm.showSettingsDialog = !_vm.showSettingsDialog;}}})],1),_c(__unplugin_components_104,{attrs:{"eager":"","max-width":"800px"},model:{value:(_vm.dialogs['userResetPassword']),callback:function ($$v) {_vm.$set(_vm.dialogs, 'userResetPassword', $$v);},expression:"dialogs['userResetPassword']"}},[_c(UserResetPassword,{ref:"UserResetPassword",attrs:{"userObject":this.user,"dialogKey":'userResetPassword',"parentTitle":_vm.isLDAPUser ? 'ldap-users' : 'django-users',"userClass":_vm.userClass,"isEndUser":true},on:{"closeDialog":_vm.closeDialog}})],1),_c(__unplugin_components_104,{attrs:{"persistent":"","content-class":"","max-width":"40rem"},model:{value:(_vm.showLogoutDialog),callback:function ($$v) {_vm.showLogoutDialog=$$v;},expression:"showLogoutDialog"}},[_c(LogoutDialog,{on:{"logoutAction":function($event){return _vm.logoutAction()}}})],1),_c(__unplugin_components_104,{attrs:{"persistent":"","eager":"","content-class":"","max-width":"40rem"},model:{value:(_vm.showRefreshTokenDialog),callback:function ($$v) {_vm.showRefreshTokenDialog=$$v;},expression:"showRefreshTokenDialog"}},[_c(RefreshTokenDialog,{ref:"RefreshTokenDialog",attrs:{"countdown":_vm.showRefreshTokenDialog},on:{"closeDialog":_vm.closeRefreshDialog,"logoutAction":function($event){return _vm.logoutAction()}}})],1)],1):_vm._e()};
var staticRenderFns = [];

/* unplugin-vue-components disabled */var EnduserView_vue_vue_type_style_index_0_scoped_true_lang = '';

/* unplugin-vue-components disabled *///

const __vue2_script = {
	name: 'EnduserView',
	mixins: [validationMixin, utilsMixin],
	components: {
		LanguageSelector,
		UserResetPassword,
		UserAccountDropdown,
		UserSettings,
		NotificationBusContainer,
		RefreshTokenDialog,
		RefreshButton,
		LogoutDialog,
		ThemeChanger
	},
	data() {
		return {
			showView: false,
			LDAPCountries: LDAPCountries,
			showSettingsDialog: false,
			logoLight: 'logo/interlock-logo-wt-dark.svg',
			logoDark: 'logo/interlock-logo-wt-light.svg',
			// Dialog States
			dialogs: {
				userResetPassword: false,
			},
			loading: false,
			error: false,
			userClass: undefined,
			username: "",
			first_name: "",
			last_name: "",
			email: "",
			user_type: "local",
			initialUser: {},
			user: {},
			usercopy: {},
			domain: "",
			realm: "",
			basedn: "",
			showLogoutDialog: false,
			showRefreshTokenDialog: false,
			timeoutId: 0,
		}
	},
	async created() {
		this.loading = true;
		this.initialUser = new DjangoUser({});
		this.initialUser.selfInfo().then(response => {
			let responseStatus = response.status;
			let admin_allowed = (localStorage.getItem('user.admin_allowed') === 'true');
			response = response.data;

			// If response code is valid
			if (/^20[0-8]|226/.test(responseStatus)) {
				this.username = localStorage.getItem('user.username');
				this.first_name = localStorage.getItem('user.first_name');
				this.last_name = localStorage.getItem('user.last_name');
				this.email = localStorage.getItem('user.email');
				this.user_type = localStorage.getItem('user.user_type');
				this.getUserType();
				this.refreshTokenExpiryData();
				this.setupTimers();

				new Domain({}).getDetails().then(() => {
					let domainData = getDomainDetails();
					this.domain = domainData['name'];
					this.realm = domainData['realm'];
					this.basedn = domainData['basedn'];
					this.showView = true;
				});
				this.refreshUser();
			}
			// If response code is an HTTP error code
			else {
				this.logoutAction();
				this.showLogoutDialog = true;
			}

			if (admin_allowed === true)
				this.$router.push("/home");
		});
	},
	async mounted() {
	},
	computed: {
		isLDAPUser() {
			if (this.user_type !== undefined && typeof this.user_type == "string")
				return this.user_type.toLowerCase().trim() === "ldap"
			return false
		},
		isLocalUser() {
			if (this.user_type !== undefined && typeof this.user_type == "string")
				return this.user_type.toLowerCase().trim() === "local"
			return true
		},
		allowPasswordChange() {
			let _v = true;
			if (this.isLDAPUser) {
				if (this.user?.can_change_pwd === true || this.user?.can_change_pwd === false)
					_v = this.user.can_change_pwd;
				console.log(`LDAP Change Password Allowance: ${_v}`);
			}
			return _v
		},
		getUSN() {
			return `${this.user.username}@${this.domain}`
		},
		activeUserName() {
			if (this.last_name && this.last_name.length > 0 &&
				this.first_name && this.first_name.length > 0)
				return `${this.last_name}, ${this.first_name} | ${this.username}`
			return this.realm.toUpperCase() + "@" + this.username
		},
		showEnduserHelpMessage() {
			return (localStorage.getItem('user.tips.enduserHelp') === 'true')
		}
	},
	methods: {
		getUserType() {
			let user_type = localStorage.getItem("user.user_type");
			if (user_type == "local")
				this.userClass = DjangoUser;
			else if (user_type == "ldap")
				this.userClass = User;
		},
		getModifiedValues() {
			let v = [];
			const IGNORE_KEYS = [
				'last_login_win32'
			];
			for (const key in this.user) {
				if (IGNORE_KEYS.includes(key)) continue
				if ( (!(key in this.user)) || (!(key in this.usercopy)) ) {
					console.log(`Key mismatch in model: ${key}`);
					continue
				}
				if (Array.isArray(this.user[key])) {
					// Compare Values for Partial Update
					let orig_list = structuredClone(this.user[key]);
					orig_list.sort();
					this.usercopy[key].sort();
					if (JSON.stringify(orig_list) !== JSON.stringify(this.usercopy[key]))
						v.push(key);
				}
				else if (this.usercopy[key] !== this.user[key]) {
					v.push(key);
				}
			}
			return v
		},
		getIsUserModified() {
			// Check the rest of the user data.
			if (this.getModifiedValues().length > 0) return true
			return false
		},
		disableEnduserHelpMessage() {
			localStorage.setItem('user.tips.enduserHelp', false);
		},
		openSettings() {
			this.showSettingsDialog = true;
			if (this.$refs.UserSettings)
				this.$refs.UserSettings.loadSettings();
		},
		async saveUser() {
			if (!this.getIsUserModified()) {
				console.log("User was not modified, ignoring request.");
				return
			}
			this.loading = true;
			let modifiedValues = this.getModifiedValues();
			let partialUpdateData = {};
			modifiedValues.forEach(k => {
				partialUpdateData[k] = this.usercopy[k];
			});
			if (this.$refs.endUserForm.validate()) {
				await new this.userClass({}).selfUpdate(partialUpdateData)
					.then(() => {
						this.refreshUser();
						this.loading = false;
						this.loadingColor = 'primary';
					})
					.catch(error => {
						console.error(error);
						this.userRefreshLoading = false;
						this.loading = false;
						this.loadingColor = 'error';
						this.error = true;
					});
			} else {
				this.loading = false;
			}
		},
		openDialog(key) {
			this.dialogs[key] = true;
		},
		async closeDialog(key, extra) {
			this.dialogs[key] = false;
			if (key == 'userResetPassword' && extra === true)
				this.showLogoutDialog = true;
		},
		closeRefreshDialog() {
			this.showRefreshTokenDialog = false;
			this.resetTimer();
		},
		refreshTokenExpiryData() {
			this.access_expire = parseInt(localStorage.getItem("auth.access_expire"));
			this.refresh_expire = parseInt(localStorage.getItem("auth.refresh_expire"));
		},
		// Sync the usercopy object to the parent view user object on the
		// next tick to avoid mutation errors
		syncUser() {
			this.setDomainDetails();
			this.usercopy = new this.userClass({});
			this.$nextTick(() => { this.usercopy = Object.assign({}, this.user); });
		},
		async refreshUser() {
			this.loading = true;
			this.error = false;
			this.user = new this.userClass({});
			await this.user.selfFetch().then(() => {
				this.syncUser();
				setTimeout(() => {
					this.loading = false;
				}, 50);
			})
				.catch(error => {
					console.error(error);
					this.loading = false;
					this.error = true;
				});
		},
		async setDomainDetails() {
			let domainData = getDomainDetails();
			if (!domainData.domain || !domainData.realm) {
				await new Domain({}).getDetails().then(() => {
					domainData = getDomainDetails();
					this.domain = domainData['name'];
					this.realm = domainData['realm'];
					this.basedn = domainData['basedn'];
				});
			}
		},
		////////////////////////////////////////////////////////////////////////
		// Logout Actions
		////////////////////////////////////////////////////////////////////////
		async logoutAction() {
			await new User({}).logout()
				.then(() => {
					localStorage.setItem("auth.logoutMessage", true);
					this.$router.push("/login");
				})
				.catch(e => {
					console.error(e);
				});
		},
		////////////////////////////////////////////////////////////////////////
		// Refresh Token Timers
		// What happens when the timer stops
		////////////////////////////////////////////////////////////////////////
		async handleInactive() {
			// ! Dates in EPOCH - Milliseconds
			const accessClockLimit = this.access_expire;
			const refreshClockLimit = this.refresh_expire;
			const clockDifference = refreshClockLimit - accessClockLimit;
			if (Date.now() >= accessClockLimit && Date.now() < refreshClockLimit) {
				if (localStorage.getItem('auth.auto_refresh_token') == 'true') {
					await new this.userClass({}).selfInfo()
						.then(() => { this.resetTimer(); })
						.catch((error) => { console.error(error); });
				} else if (!this.showRefreshTokenDialog) {
					this.timeoutId = setTimeout(this.handleInactive, clockDifference);
					this.showRefreshTokenDialog = true;
					if (this.$refs.RefreshTokenDialog != undefined)
						this.$refs.RefreshTokenDialog.startCountdown();
				}
			} else if (Date.now() >= refreshClockLimit) {
				this.showLogoutDialog = true;
				this.showRefreshTokenDialog = false;
			}
			else {
				this.resetTimer();
			}
		},
		startTimer() {
			this.refreshTokenExpiryData();
			const refreshClock = Date.parse(localStorage.getItem("auth.refreshClock"));
			const accessClockLimit = this.access_expire;
			const clockDifference = accessClockLimit - refreshClock;
			// setTimeout returns an ID (can be used to start or clear a timer)
			this.timeoutId = setTimeout(this.handleInactive, clockDifference);
		},
		resetTimer() {
			clearTimeout(this.timeoutId);
			this.startTimer();
		},
		setupTimers() {
			this.startTimer();
		}
	},
};
const __cssModules = {};
var __component__ = /*#__PURE__*/normalizeComponent(
  __vue2_script,
  render,
  staticRenderFns,
  false,
  __vue2_injectStyles,
  "179b62a2",
  null,
  null
);

function __vue2_injectStyles (context) {
  for(let o in __cssModules){
    this[o] = __cssModules[o];
  }
}

var EnduserView = /*#__PURE__*/(function () { return __component__.exports })();

// INTERLOCK IS LICENSED UNDER GNU AGPLv3

Vue$1.use(VueRouter$1);

const routes = [
  {
    path: '/',
    name: 'root',
    component: LoginView
  },
  {
    path: '/home',
    name: 'home',
    component: HomeView
  },
  {
    path: '/applications',
    name: 'applications',
    component: HomeView
  },
  {
    path: '/django-users',
    name: 'django-users',
    component: HomeView
  },
  {
    path: '/application-groups',
    name: 'application-groups',
    component: HomeView
  },
  {
    path: '/ldap-dirtree',
    name: 'ldap-dirtree',
    component: HomeView
  },
  {
    path: '/ldap-users',
    name: 'ldap-users',
    component: HomeView
  },
  {
    path: '/ldap-groups',
    name: 'ldap-groups',
    component: HomeView
  },
  {
    path: '/ldap-dns',
    name: 'ldap-dns',
    component: HomeView
  },
  {
    path: '/ldap-gpo',
    name: 'ldap-gpo',
    component: HomeView
  },
  {
    path: '/settings',
    name: 'settings',
    component: HomeView
  },
  {
    path: '/logs',
    name: 'logs',
    component: HomeView
  },
  {
    path: '/debug',
    name: 'debug',
    component: HomeView
  },
  {
    path: '/login',
    name: 'login',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: LoginView
  },
  {
    path: '/enduser',
    name: 'enduser',
    component: EnduserView
  },
];

var router = new VueRouter$1({
  mode: 'history',
  base: "/",
  routes: routes,
  scrollBehavior(to, from, savedPosition) {
    // return desired position
    return { top: 0 }
  }
});

Vue$1.config.productionTip = false;
const notificationBus = new Vue$1();

const app = new Vue$1({
  vuetify,
  i18n,
  router,
  render: h => h(App)
});

app.$mount('#app');
//# sourceMappingURL=index.83bf7c17.js.map
